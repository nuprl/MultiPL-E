language: rkt
name: HumanEval_108_count_nums
results:
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy810lwv3.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first\
    \ arr)) (+ 1 (count_nums (rest arr)))]\n    [else (+ 1 (count_nums (rest arr)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkbwb3qnp.rkt:25:4

    actual:     3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkbwb3qnp.rkt:26:4

    actual:     7

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkbwb3qnp.rkt:27:4

    actual:     7

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkbwb3qnp.rkt:28:4

    actual:     6

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkbwb3qnp.rkt:29:4

    actual:     6

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkbwb3qnp.rkt:30:4

    actual:     2

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first\
    \ arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:25:4

    actual:     3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:26:4

    actual:     7

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:27:4

    actual:     7

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:28:4

    actual:     6

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:29:4

    actual:     6

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:30:4

    actual:     2

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) (first arr (+ 1 0))) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal?\
    \ (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3\
    \ 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal?\
    \ (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12\
    \ 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal?\
    \ (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwqjz64ni.rkt:25:4\n\
    \nfirst: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwqjz64ni.rkt:26:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwqjz64ni.rkt:27:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwqjz64ni.rkt:28:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwqjz64ni.rkt:29:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwqjz64ni.rkt:30:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwqjz64ni.rkt:31:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy810lwv3.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (car\
    \ arr)) (+ 1 (count_nums (cdr arr)))]\n    [else (count_nums (cdr arr))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwn5nhi3l.rkt:25:4

    actual:     3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwn5nhi3l.rkt:26:4

    actual:     7

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwn5nhi3l.rkt:27:4

    actual:     7

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwn5nhi3l.rkt:28:4

    actual:     6

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwn5nhi3l.rkt:29:4

    actual:     6

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwn5nhi3l.rkt:30:4

    actual:     2

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy810lwv3.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 1
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (if (null? arr)\n      0\n      (+ 1 (count_nums\
    \ (rest arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal?\
    \ (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3\
    \ 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal?\
    \ (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12\
    \ 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal?\
    \ (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp87hnjdoy.rkt:16:37: read-syntax: unexpected `)`\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660039974
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (car\
    \ arr)) (+ 1 (count_nums (cdr arr)))]\n    [else (count_nums (cdr arr))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwn5nhi3l.rkt:25:4

    actual:     3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwn5nhi3l.rkt:26:4

    actual:     7

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwn5nhi3l.rkt:27:4

    actual:     7

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwn5nhi3l.rkt:28:4

    actual:     6

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwn5nhi3l.rkt:29:4

    actual:     6

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwn5nhi3l.rkt:30:4

    actual:     2

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy810lwv3.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 1
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (if (null? arr)\n      0\n      (+ 1 (count_nums\
    \ (rest arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal?\
    \ (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3\
    \ 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal?\
    \ (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12\
    \ 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal?\
    \ (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp87hnjdoy.rkt:16:37: read-syntax: unexpected `)`\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660039974
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) (first arr)) (count_nums (rest arr))]\n    [else (+ 1 (count_nums (rest\
    \ arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate\
    \ (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n\
    \    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate\
    \ (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45\
    \ -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate\
    \ (list 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8pnnarr7.rkt:25:4

    actual:     3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8pnnarr7.rkt:26:4

    actual:     7

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8pnnarr7.rkt:27:4

    actual:     7

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8pnnarr7.rkt:28:4

    actual:     6

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8pnnarr7.rkt:29:4

    actual:     6

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8pnnarr7.rkt:30:4

    actual:     2

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy810lwv3.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first\
    \ arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:25:4

    actual:     3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:26:4

    actual:     7

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:27:4

    actual:     7

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:28:4

    actual:     6

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:29:4

    actual:     6

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:30:4

    actual:     2

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest\
    \ arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate\
    \ (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n\
    \    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate\
    \ (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45\
    \ -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate\
    \ (list 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnp6a0tk_.rkt:26:4

    actual:     0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnp6a0tk_.rkt:27:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnp6a0tk_.rkt:28:4

    actual:     0

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnp6a0tk_.rkt:29:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnp6a0tk_.rkt:30:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnp6a0tk_.rkt:31:4

    actual:     0

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first\
    \ arr)) (+ 1 (count_nums (rest arr)))]\n    [else (+ 1 (count_nums (rest arr)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkbwb3qnp.rkt:25:4

    actual:     3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkbwb3qnp.rkt:26:4

    actual:     7

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkbwb3qnp.rkt:27:4

    actual:     7

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkbwb3qnp.rkt:28:4

    actual:     6

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkbwb3qnp.rkt:29:4

    actual:     6

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkbwb3qnp.rkt:30:4

    actual:     2

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first\
    \ arr)) (+ (first arr) (count_nums (rest arr)))]\n    [else (count_nums (rest\
    \ arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate\
    \ (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n\
    \    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate\
    \ (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45\
    \ -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate\
    \ (list 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj_7ygbkk.rkt:25:4

    actual:     -3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj_7ygbkk.rkt:26:4

    actual:     14

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj_7ygbkk.rkt:27:4

    actual:     16

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj_7ygbkk.rkt:28:4

    actual:     192

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj_7ygbkk.rkt:29:4

    actual:     -32

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (car\
    \ arr)) (+ 1 (count_nums (cdr arr)))]\n    [else (count_nums (cdr arr))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwn5nhi3l.rkt:25:4

    actual:     3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwn5nhi3l.rkt:26:4

    actual:     7

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwn5nhi3l.rkt:27:4

    actual:     7

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwn5nhi3l.rkt:28:4

    actual:     6

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwn5nhi3l.rkt:29:4

    actual:     6

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwn5nhi3l.rkt:30:4

    actual:     2

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first\
    \ arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:25:4

    actual:     3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:26:4

    actual:     7

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:27:4

    actual:     7

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:28:4

    actual:     6

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:29:4

    actual:     6

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:30:4

    actual:     2

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) (first arr (cdr arr)))\n     (+ 1 (count_nums (rest arr)))]\n    [else\
    \ (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate\
    \ (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5))\
    \ 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal?\
    \ (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list\
    \ 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjgs2jgv3.rkt:26:4\n\
    \nfirst: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjgs2jgv3.rkt:27:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjgs2jgv3.rkt:28:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjgs2jgv3.rkt:29:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjgs2jgv3.rkt:30:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjgs2jgv3.rkt:31:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjgs2jgv3.rkt:32:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy810lwv3.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (car\
    \ arr)) (+ (count_nums (cdr arr)) 1)]\n    [else (count_nums (cdr arr))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyjvyzj8_.rkt:25:4

    actual:     3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyjvyzj8_.rkt:26:4

    actual:     7

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyjvyzj8_.rkt:27:4

    actual:     7

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyjvyzj8_.rkt:28:4

    actual:     6

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyjvyzj8_.rkt:29:4

    actual:     6

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyjvyzj8_.rkt:30:4

    actual:     2

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) (first arr (rest arr)))\n     (+ 1 (count_nums (rest arr)))]\n    [else\
    \ (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate\
    \ (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5))\
    \ 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal?\
    \ (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list\
    \ 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpinct5gwg.rkt:26:4\n\
    \nfirst: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpinct5gwg.rkt:27:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpinct5gwg.rkt:28:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpinct5gwg.rkt:29:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpinct5gwg.rkt:30:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpinct5gwg.rkt:31:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpinct5gwg.rkt:32:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest\
    \ arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate\
    \ (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n\
    \    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate\
    \ (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45\
    \ -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate\
    \ (list 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnp6a0tk_.rkt:26:4

    actual:     0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnp6a0tk_.rkt:27:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnp6a0tk_.rkt:28:4

    actual:     0

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnp6a0tk_.rkt:29:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnp6a0tk_.rkt:30:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnp6a0tk_.rkt:31:4

    actual:     0

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy810lwv3.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy810lwv3.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first\
    \ arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:25:4

    actual:     3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:26:4

    actual:     7

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:27:4

    actual:     7

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:28:4

    actual:     6

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:29:4

    actual:     6

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:30:4

    actual:     2

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first\
    \ arr)) (+ (first arr) (count_nums (rest arr)))]\n    [else (count_nums (rest\
    \ arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate\
    \ (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n\
    \    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate\
    \ (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45\
    \ -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate\
    \ (list 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj_7ygbkk.rkt:25:4

    actual:     -3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj_7ygbkk.rkt:26:4

    actual:     14

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj_7ygbkk.rkt:27:4

    actual:     16

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj_7ygbkk.rkt:28:4

    actual:     192

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj_7ygbkk.rkt:29:4

    actual:     -32

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (car\
    \ arr)) (+ 1 (count_nums (cdr arr)))]\n    [else (count_nums (cdr arr))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwn5nhi3l.rkt:25:4

    actual:     3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwn5nhi3l.rkt:26:4

    actual:     7

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwn5nhi3l.rkt:27:4

    actual:     7

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwn5nhi3l.rkt:28:4

    actual:     6

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwn5nhi3l.rkt:29:4

    actual:     6

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwn5nhi3l.rkt:30:4

    actual:     2

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 1
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (if (null? arr)\n      0\n      (+ 1 (count_nums\
    \ (rest arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal?\
    \ (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3\
    \ 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal?\
    \ (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12\
    \ 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal?\
    \ (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp87hnjdoy.rkt:16:37: read-syntax: unexpected `)`\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660039974
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy810lwv3.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first\
    \ arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:25:4

    actual:     3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:26:4

    actual:     7

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:27:4

    actual:     7

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:28:4

    actual:     6

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:29:4

    actual:     6

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:30:4

    actual:     2

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy810lwv3.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy810lwv3.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first\
    \ arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:25:4

    actual:     3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:26:4

    actual:     7

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:27:4

    actual:     7

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:28:4

    actual:     6

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:29:4

    actual:     6

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:30:4

    actual:     2

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy810lwv3.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy810lwv3.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) (first arr (rest arr)))\n     (+ 1 (count_nums (rest arr)))]\n    [else\
    \ (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate\
    \ (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5))\
    \ 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal?\
    \ (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list\
    \ 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpinct5gwg.rkt:26:4\n\
    \nfirst: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpinct5gwg.rkt:27:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpinct5gwg.rkt:28:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpinct5gwg.rkt:29:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpinct5gwg.rkt:30:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpinct5gwg.rkt:31:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpinct5gwg.rkt:32:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first\
    \ arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:25:4

    actual:     3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:26:4

    actual:     7

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:27:4

    actual:     7

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:28:4

    actual:     6

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:29:4

    actual:     6

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:30:4

    actual:     2

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy810lwv3.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first\
    \ arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:25:4

    actual:     3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:26:4

    actual:     7

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:27:4

    actual:     7

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:28:4

    actual:     6

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:29:4

    actual:     6

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:30:4

    actual:     2

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first\
    \ arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:25:4

    actual:     3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:26:4

    actual:     7

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:27:4

    actual:     7

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:28:4

    actual:     6

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:29:4

    actual:     6

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:30:4

    actual:     2

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy810lwv3.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first\
    \ arr)) (+ 1 (count_nums (rest arr)))]\n    [else (+ 1 (count_nums (rest arr)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkbwb3qnp.rkt:25:4

    actual:     3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkbwb3qnp.rkt:26:4

    actual:     7

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkbwb3qnp.rkt:27:4

    actual:     7

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkbwb3qnp.rkt:28:4

    actual:     6

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkbwb3qnp.rkt:29:4

    actual:     6

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkbwb3qnp.rkt:30:4

    actual:     2

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (if (null? arr)\n      0\n      (+ (car arr)\
    \ (count_nums (cdr arr)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate\
    \ (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5))\
    \ 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal?\
    \ (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list\
    \ 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbxgqg8dc.rkt:24:4

    actual:     -3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbxgqg8dc.rkt:25:4

    actual:     14

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbxgqg8dc.rkt:26:4

    actual:     16

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbxgqg8dc.rkt:27:4

    actual:     192

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbxgqg8dc.rkt:28:4

    actual:     -32

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first\
    \ arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:25:4

    actual:     3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:26:4

    actual:     7

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:27:4

    actual:     7

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:28:4

    actual:     6

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:29:4

    actual:     6

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:30:4

    actual:     2

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) (first arr (+ 1 0))) 1]\n    [else (+ 1 (count_nums (rest arr)))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpthjnm9aa.rkt:25:4\n\
    \nfirst: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpthjnm9aa.rkt:26:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpthjnm9aa.rkt:27:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpthjnm9aa.rkt:28:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpthjnm9aa.rkt:29:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpthjnm9aa.rkt:30:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpthjnm9aa.rkt:31:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy810lwv3.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) (first arr (rest arr)))\n     (+ 1 (count_nums (rest arr)))]\n    [else\
    \ (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate\
    \ (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5))\
    \ 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal?\
    \ (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list\
    \ 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpinct5gwg.rkt:26:4\n\
    \nfirst: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpinct5gwg.rkt:27:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpinct5gwg.rkt:28:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpinct5gwg.rkt:29:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpinct5gwg.rkt:30:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpinct5gwg.rkt:31:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpinct5gwg.rkt:32:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first\
    \ arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:25:4

    actual:     3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:26:4

    actual:     7

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:27:4

    actual:     7

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:28:4

    actual:     6

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:29:4

    actual:     6

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:30:4

    actual:     2

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (if (null? arr)\n      0\n      (+ 1 (count_nums\
    \ (rest arr)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal?\
    \ (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3\
    \ 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal?\
    \ (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12\
    \ 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal?\
    \ (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbu2jwfqv.rkt:24:4

    actual:     3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbu2jwfqv.rkt:25:4

    actual:     7

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbu2jwfqv.rkt:26:4

    actual:     7

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbu2jwfqv.rkt:27:4

    actual:     6

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbu2jwfqv.rkt:28:4

    actual:     6

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbu2jwfqv.rkt:29:4

    actual:     2

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest\
    \ arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate\
    \ (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n\
    \    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate\
    \ (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45\
    \ -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate\
    \ (list 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnp6a0tk_.rkt:26:4

    actual:     0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnp6a0tk_.rkt:27:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnp6a0tk_.rkt:28:4

    actual:     0

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnp6a0tk_.rkt:29:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnp6a0tk_.rkt:30:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnp6a0tk_.rkt:31:4

    actual:     0

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (if (null? arr)\n      0\n      (+ (first arr)\n\
    \         (count_nums (rest arr)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate\
    \ (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5))\
    \ 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal?\
    \ (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list\
    \ 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmpexkgt_.rkt:25:4

    actual:     -3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmpexkgt_.rkt:26:4

    actual:     14

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmpexkgt_.rkt:27:4

    actual:     16

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmpexkgt_.rkt:28:4

    actual:     192

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmpexkgt_.rkt:29:4

    actual:     -32

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) (first arr (rest arr)))\n     (count_nums (rest arr))]\n    [else (+ 1\
    \ (count_nums (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate\
    \ (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5))\
    \ 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal?\
    \ (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list\
    \ 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbajol559.rkt:26:4\n\
    \nfirst: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbajol559.rkt:27:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbajol559.rkt:28:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbajol559.rkt:29:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbajol559.rkt:30:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbajol559.rkt:31:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbajol559.rkt:32:4\n\nfirst:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first\
    \ arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:25:4

    actual:     3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:26:4

    actual:     7

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:27:4

    actual:     7

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:28:4

    actual:     6

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:29:4

    actual:     6

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:30:4

    actual:     2

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first\
    \ arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy810lwv3.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (if (null? arr)\n      0\n      (+ (first arr)\n\
    \         (count_nums (rest arr)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate\
    \ (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5))\
    \ 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal?\
    \ (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list\
    \ 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmpexkgt_.rkt:25:4

    actual:     -3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmpexkgt_.rkt:26:4

    actual:     14

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmpexkgt_.rkt:27:4

    actual:     16

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmpexkgt_.rkt:28:4

    actual:     192

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmpexkgt_.rkt:29:4

    actual:     -32

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first\
    \ arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:25:4

    actual:     3

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:26:4

    actual:     7

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:27:4

    actual:     7

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:28:4

    actual:     6

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:29:4

    actual:     6

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjb5eouq.rkt:30:4

    actual:     2

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
- exit_code: 0
  program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ydoua0d.rkt:29:4

    actual:     3

    expected:   5

    --------------------

    '
  stdout: ''
  timestamp: 1660039975
