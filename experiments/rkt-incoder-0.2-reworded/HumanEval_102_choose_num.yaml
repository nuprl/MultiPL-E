name: HumanEval_102_choose_num
language: rkt
prompt: "#lang racket\n\n;; This function takes two positive numbers x and y and returns\
  \ the\n;; biggest even integer number that is in the range [x, y] inclusive. If\
  \ \n;; there's no such number, then the function should return -1.\n;; For example:\n\
  ;; >>> (choose_num 12 15)\n;; 14\n;; >>> (choose_num 13 12)\n;; -1\n(define (choose_num\
  \ x y)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate choose_num))\n\
  \    (check-equal? (candidate 12 15) 14)\n    (check-equal? (candidate 13 12) -1)\n\
  \    (check-equal? (candidate 33 12354) 12354)\n    (check-equal? (candidate 5234\
  \ 5233) -1)\n    (check-equal? (candidate 6 29) 28)\n    (check-equal? (candidate\
  \ 27 10) -1)\n    (check-equal? (candidate 7 7) -1)\n    (check-equal? (candidate\
  \ 546 546) 546)\n))\n\n(test-humaneval)"
completions: ["  (cond ((< x y) -1)\n        ((even? x) x)\n        (else (choose_num\
    \ (+ x 1) y))))\n", "  (cond ((< x y) -1)\n        ((even? x) x)\n        (else\
    \ (choose_num (+ x 1) y))))\n", "  (cond ((= x y) -1)\n        ((even? x) x)\n\
    \        (else (choose_num (+ x 1) y))))\n", "  (cond ((= x y) -1)\n        ((even?\
    \ x) (if (= x y) x y))\n        (else (choose_num (+ x 1) y))))\n", "  (cond [(=\
    \ x y) -1]\n        [(even? (modulo x 2)) (modulo x 2)]\n        [else (choose_num\
    \ (+ x 1) y)]))\n", "  (cond\n    [(and (>= x y) \n          (even? x))\n    \
    \ (even? x)]\n    [(and (>= y x)\n          (even? y))\n     (even? y)]\n    [else\n\
    \     (if (even? (- x y))\n         (- x y)\n         (- y x))]))\n", "  (cond\
    \ ((= x y) -1)\n        ((even? x) x)\n        (else (choose_num (+ x 1) y))))\n",
  "  (cond ((= x y) -1)\n        ((even? x) (if (= y x) x y))\n        (else (choose_num\
    \ (+ x 1) y))))\n", "  (cond [(= x y) -1]\n        [(even? x) (max (+ x y) -1)]\n\
    \        [else (max (+ x y) -1)]))\n", "  (cond [(< x y) -1]\n        [(< y x)\
    \ -1]\n        [(= (modulo x 2) 0) (+ x 2)]\n        [else (+ x 2)]))\n", "  (cond\
    \ [(= x y) x]\n        [(even? (modulo x 2)) (+ x 2)]\n        [else -1]))\n",
  "  (cond ((< x y) -1)\n        ((even? x) (even? y))\n        (else (max (min x\
    \ y) (x+y)))))\n", "  (cond\n    [(and (integer? x) (integer? y)) x]\n    [(and\
    \ (integer? x) (not (integer? y))) y]\n    [(and (not (integer? x)) (integer?\
    \ y)) x]\n    [(and (not (integer? x)) (not (integer? y))) -1]))\n", "  (cond\
    \ ((< x y) -1)\n        ((even? x) x)\n        (else (choose_num (+ x 1) y))))\n",
  "  (cond [(< x y) -1]\n        [(< y x) -1]\n        [(= x y) 0]\n        [(= y\
    \ x) 0]\n        [else (max (floor (/ (- x y) 2))\n                   (floor (/\
    \ (- y x) 2)))]))\n", "  (cond ((= x y) -1)\n        ((even? x) (max (+ x y) x))\n\
    \        (else (choose_num (+ x y) y))))\n", "  (cond\n    [(and (positive? x)\
    \ (positive? y)) x]\n    [(and (positive? y) (positive? x)) y]\n    [else (max\
    \ (floor (/ (- x y) 2))\n              (floor (/ (- y x) 2)))]))\n", "  (cond\
    \ ((= x y) -1)\n        ((even? x) (even? y))\n        (else (max (min x y) x))))\n",
  "  (cond ((< x y) -1)\n        ((even? x) (max (+ x y) x))\n        (else (max (+\
    \ x y) -1))))\n", "  (cond\n    [(or (< x y) (- (- x y) y)) -1]\n    [(= x y)\
    \ x]\n    [(= y x) y]\n    [else (max (+ x y) (- (- x y) y))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
