name: HumanEval_54_same_chars
language: rkt
prompt: "#lang racket\n\n;; Check if two words have the same characters.\n;; >>> (same_chars\
  \ \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\"\
  )\n;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars\
  \ \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\"\
  )\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f\n(define\
  \ (same_chars s0 s1)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate same_chars))\n\
  \    (check-equal? (candidate \"eabcdzzzz\" \"dddzzzzzzzddeddabc\") #t)\n    (check-equal?\
  \ (candidate \"abcd\" \"dddddddabc\") #t)\n    (check-equal? (candidate \"dddddddabc\"\
  \ \"abcd\") #t)\n    (check-equal? (candidate \"eabcd\" \"dddddddabc\") #f)\n  \
  \  (check-equal? (candidate \"abcd\" \"dddddddabcf\") #f)\n    (check-equal? (candidate\
  \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\") #f)\n    (check-equal? (candidate \"aabb\"\
  \ \"aaccc\") #f)\n))\n\n(test-humaneval)"
completions: ["  (let ([c (char-code s0)])\n    (cond [(char-code s0) (char-code s1)]\
    \ [(char-code s1) (char-code s0)]\n          [(char-code s0) (char-code s1)] [(char-code\
    \ s1) (char-code s0)]\n          [(char-code s0) (char-code s1)] [(char-code s1)\
    \ (char-code s0)]\n          [(char-code s0) (char-code s1)] [(char-code s1) (char-code\
    \ s0)]\n          [(char-code s0) (char-code s1)] [(char-code s1) (char-code s0)]\n\
    \          [(char-code s0) (char-code s1)] [(char-code s1) (char-code s0)]\n \
    \         [(char-code s0) (char-code s1)] [(char-code s1) (char-code s0)]\n  \
    \        [(char-code s0) (char-code s1)] [(char-code s1) (char-code s0)]\n   \
    \       [(char-code s0) (char-code s1)] [(char-code s1) (char-code s0)]\n    \
    \      [(char-code s0) (char-code s1)] [(char-code s1) (char-code s0)]\n     \
    \     [(char-code s0) (char-code s1)] [(char-code s1) (char-code s0)]\n      \
    \    [(char-code s0) (char-code s1)] [(char-code s1) (char-code s0)]\n       \
    \   [(char-code s0) (char-code s1)] [(char-code s1) (char-code s0)]\n        \
    \  [(char-code s0) (char-code s1)] [(char-code s1) (char-code s0)]\n         \
    \ [(char-code s0) (char-code s1)] [(char-code s1) (char-code s0)]\n          [(char-code\
    \ s0) (char-code s1)] [(char-code s1) (char-code s0)]\n          [(char-code s0)\
    \ (char-code s1)] [(char-code s1) (char-code s0)]\n          [(char-code s0) (char-code\
    \ s1)] [(char-code s1) (char-code s0)]\n          [(char-code s0) (char-code s1)]\
    \ [(char-code s1) (char-code s0)]\n          [(char-", "  (if (or (null? s0) (null?\
    \ s1))\n      #f\n      (let ((s0 (string->list s0))\n            (s1 (string->list\
    \ s1))\n            (s0 (append s0 #\\space))\n            (s1 (append s1 #\\\
    space))\n            (s0 (append s0 #\\newline))\n            (s1 (append s1 #\\\
    newline)))\n        (let ((s0 (string->list s0))\n              (s1 (string->list\
    \ s1))\n              (len (length s0))\n              (len1 (length s1))\n  \
    \            (result #f)\n              (i 0))\n          (if (= i len)\n    \
    \          #t\n              (if (= i len1)\n                  (set! result #t)\n\
    \                  (set! result (= (first s0) (first s1))))\n              (set!\
    \ i (+ i 1))\n              (set! result (or (eqv? (first s0) (first s1))\n  \
    \                            (eqv? (first s1) (first s0)))))\n          result)))\n",
  "  (let ([c (char-code s0)])\n    (cond [(char-code s0) (char-code s1)] [(char-code\
    \ s1) (char-code s0)]\n          [(char-code s0) (char-code s1)] [(char-code s1)\
    \ (char-code s0)]\n          [(char-code s0) (char-code s1)] [(char-code s1) (char-code\
    \ s0)]\n          [(char-code s0) (char-code s1)] [(char-code s1) (char-code s0)]\n\
    \          [(char-code s0) (char-code s1)] [(char-code s1) (char-code s0)]\n \
    \         [(char-code s0) (char-code s1)] [(char-code s1) (char-code s0)]\n  \
    \        [(char-code s0) (char-code s1)] [(char-code s1) (char-code s0)]\n   \
    \       [(char-code s0) (char-code s1)] [(char-code s1) (char-code s0)]\n    \
    \      [(char-code s0) (char-code s1)] [(char-code s1) (char-code s0)]\n     \
    \     [(char-code s0) (char-code s1)] [(char-code s1) (char-code s0)]\n      \
    \    [(char-code s0) (char-code s1)] [(char-code s1) (char-code s0)]\n       \
    \   [(char-code s0) (char-code s1)] [(char-code s1) (char-code s0)]\n        \
    \  [(char-code s0) (char-code s1)] [(char-code s1) (char-code s0)]\n         \
    \ [(char-code s0) (char-code s1)] [(char-code s1) (char-code s0)]\n          [(char-code\
    \ s0) (char-code s1)] [(char-code s1) (char-code s0)]\n          [(char-code s0)\
    \ (char-code s1)] [(char-code s1) (char-code s0)]\n          [(char-code s0) (char-code\
    \ s1)] [(char-code s1) (char-code s0)]\n          [(char-code s0) (char-code s1)]\
    \ [(char-code s1) (char-code s0)]\n          [(char-code s0) (char-code s1)] [(char-code\
    \ s1) (char-code s0)]\n          [(char-", "  (cond\n    [(empty? s0) #t]\n  \
    \  [(empty? s1) #t]\n    [(equal? (first s0) (first s1)) #t]\n    [else (and (equal?\
    \ (first s0) (first s1)) \n               (same_chars (rest s0) (rest s1))\n \
    \              (same_chars (rest s1) (rest s0)))]))\n", "  (let ([c (char-code\
    \ s0)])\n    (cond [(char-code s0) (char-code s1)] [(char-code s0) (char-code\
    \ s1)] [(char-code s0) (char-code s1)] [(char-code s0) (char-code s1)] [(char-code\
    \ s0) (char-code s1)] [(char-code s0) (char-code s1)] [(char-code s0) (char-code\
    \ s1)] [(char-code s0) (char-code s1)] [(char-code s0) (char-code s1)] [(char-code\
    \ s0) (char-code s1)] [(char-code s0) (char-code s1)] [(char-code s0) (char-code\
    \ s1)] [(char-code s0) (char-code s1)] [(char-code s0) (char-code s1)] [(char-code\
    \ s0) (char-code s1)] [(char-code s0) (char-code s1)] [(char-code s0) (char-code\
    \ s1)] [(char-code s0) (char-code s1)] [(char-code s0) (char-code s1)] [(char-code\
    \ s0) (char-code s1)] [(char-code s0) (char-code s1)] [(char-code s0) (char-code\
    \ s1)] [(char-code s0) (char-code s1)] [(char-code s0) (char-code s1)] [(char-code\
    \ s0) (char-code s1)] [(char-code s0) (char-code s1)] [(char-code s0) (char-code\
    \ s1)] [(char-code s0) (char-code s1)] [(char-code s0) (char-code s1)] [(char-code\
    \ s0) (char-code s1)] [(char-code s0) (char-code s1)] [(char-code s0) (char-code\
    \ s1)] [(char-code s0) (char-code s1)] [(char-code s0) (char-code s1)] [(char-code\
    \ s0) (char-code s1)] [(char-code s0) (char-code s1)] [(char-code s0) (char-code\
    \ s1)] [(char-code s0) (char-code s1)] [(char-code s0) (char-code s1)] [(char-code\
    \ s0) (char-code s1)] [(char-code s0) (char-code s1)] [(char-code s", "  (= (length\
    \ s0) (length s1))\n  (for/fold ((acc #t) (c0 #f) (c1 #f))\n            ((i (length\
    \ s0))\n             (char (substring s0 i 1)))\n            (if (char=? (c0 c1)\
    \ c0)\n                (set! acc (set! acc #t) (set! c0 c1) (set! c1 #f))\n  \
    \              (set! acc (set! acc #f) (set! c0 #t) (set! c1 c1))))\n  acc)\n",
  "  (let ([c (char-code s0)])\n    (and (char-code s0) (char-code s1)\n         (=\
    \ c 0) (= c 1))))\n", "  (cond [(string=? s0 s1) #t]\n        [(string=? s1 s0)\
    \ #f]\n        [(equal? (string-ref s0 0) (string-ref s1 0)) #f]\n        [(equal?\
    \ (string-ref s0 0) (string-ref s1 -1)) #f]\n        [else (equal? (string-ref\
    \ s0 0) (string-ref s1 1))]))\n", "  (cond [(empty? s0) #t]\n        [(empty?\
    \ s1) #t]\n        [(equal? (first s0) (first s1)) #t]\n        [else (equal?\
    \ (first s0) (first s1)) \n              (same_chars (rest s0) (rest s1))]))\n",
  "  (cond [(empty? s0) #t]\n        [(empty? s1) #t]\n        [(equal? (first s0)\
    \ (first s1)) #t]\n        [else (same_chars (rest s0) (rest s1))]))\n", "  (cond\n\
    \    [(empty? s0) #t]\n    [(empty? s1) #t]\n    [(equal? (first s0) (first s1))\
    \ #t]\n    [else (and (equal? (first s0) (first s1)) (same_chars (rest s0) (rest\
    \ s1))))]))\n", "  (cond ((null? s0) #f)\n        ((null? s1) #f)\n        ((char=?\
    \ (car s0) (car s1)) #t)\n        (else (same_chars (cdr s0) (cdr s1)))))\n",
  "  (cond [(empty? s0) #t]\n        [(empty? s1) #t]\n        [(equal? (first s0)\
    \ (first s1)) #t]\n        [else (equal? (first s0) (first s1)) (same_chars (rest\
    \ s0) (rest s1))]))\n", "  (cond ((null? s0) #f)\n        ((null? s1) #f)\n  \
    \      ((char-equal? (car s0) (car s1)) (same_chars (cdr s0) (cdr s1))))\n  (cond\
    \ ((char-equal? (car s0) #\\Space) (same_chars (cdr s0) (cdr s1)))\n        ((char-equal?\
    \ (car s0) #\\Newline) (same_chars (cdr s0) (cdr s1)))\n        ((char-equal?\
    \ (car s0) #\\Tab) (same_chars (cdr s0) (cdr s1)))\n        ((char-equal? (car\
    \ s0) #\\Newline) (same_chars (cdr s0) (cdr s1)))\n        ((char-equal? (car\
    \ s0) #\\Space) (same_chars (cdr s0) (cdr s1)))\n        (else (same_chars (cdr\
    \ s0) (cdr s1)))))\n", "  (let ([c (char-code s0)])\n    (let ([c1 (char-code\
    \ s1)])\n      (or (= c c1)\n          (and (= c #\\space)\n               (=\
    \ c1 #\\space)))))\n", "  (cond\n    [(empty? s0) #t]\n    [(empty? s1) #t]\n\
    \    [(equal? (first s0) (first s1)) #t]\n    [else (or (equal? (first s0) (first\
    \ s1)) \n               (equal? (rest s0) (rest s1))\n               (equal? (rest\
    \ s0) (first s1))\n               (equal? (rest s1) (first s0))\n            \
    \   (equal? (rest s1) (rest s0)))))\n", "  (cond [(empty? s0) #t]\n        [(empty?\
    \ s1) #t]\n        [(equal? (first s0) (first s1)) #t]\n        [else (equal?\
    \ (first s0) (first s1)) (same_chars (rest s0) (rest s1))]))\n", "  (cond [(empty?\
    \ s0) #f]\n        [(empty? s1) #f]\n        [(equal? (first s0) (first s1)) #t]\n\
    \        [else (same_chars (rest s0) (rest s1))]))\n", "  (cond ((null? s0) #f)\n\
    \        ((null? s1) #f)\n        ((char=? (car s0) (car s1)) #t)\n        (else\
    \ (same_chars (cdr s0) (cdr s1)))))\n", "  (if (or (null? s0) (null? s1))\n  \
    \    #f\n      (let ((s0 (string->list s0))\n            (s1 (string->list s1))\n\
    \            (s0 (append s0 '()))\n            (s1 (append s1 '())))\n       \
    \ (let loop ((s0 s0)\n                  (s1 s1))\n          (if (null? s0)\n \
    \             #t\n              (if (null? s1)\n                  #t\n       \
    \           (let ((c (first s0))\n                        (s0 (rest s0))\n   \
    \                     (c (first s1))\n                        (s1 (rest s1)))\n\
    \                    (if (eq? c c)\n                        #t\n             \
    \           (loop (rest s0) (rest s1)))))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
