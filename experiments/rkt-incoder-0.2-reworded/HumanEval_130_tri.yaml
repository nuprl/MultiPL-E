name: HumanEval_130_tri
language: rkt
prompt: "#lang racket\n\n;; Everyone knows Fibonacci sequence, it was studied deeply\
  \ by mathematicians in \n;; the last couple centuries. However, what people don't\
  \ know is Tribonacci sequence.\n;; Tribonacci sequence is defined by the recurrence:\n\
  ;; tri(1) = 3\n;; tri(n) = 1 + n / 2, if n is even.\n;; tri(n) =  tri(n - 1) + tri(n\
  \ - 2) + tri(n + 1), if n is odd.\n;; For example:\n;; tri(2) = 1 + (2 / 2) = 2\n\
  ;; tri(4) = 3\n;; tri(3) = tri(2) + tri(1) + tri(4)\n;; = 2 + 3 + 3 = 8 \n;; You\
  \ are given a non-negative integer number n, you have to a return a list of the\
  \ \n;; first n + 1 numbers of the Tribonacci sequence.\n;; Examples:\n;; >>> (tri\
  \ 3)\n;; (list 1 3 2 8)\n(define (tri n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n\
  \    (check-equal? (candidate 3) (list 1 3 2 8))\n    (check-equal? (candidate 4)\
  \ (list 1 3 2 8 3))\n    (check-equal? (candidate 5) (list 1 3 2 8 3 15))\n    (check-equal?\
  \ (candidate 6) (list 1 3 2 8 3 15 4))\n    (check-equal? (candidate 7) (list 1\
  \ 3 2 8 3 15 4 24))\n    (check-equal? (candidate 8) (list 1 3 2 8 3 15 4 24 5))\n\
  \    (check-equal? (candidate 9) (list 1 3 2 8 3 15 4 24 5 35))\n    (check-equal?\
  \ (candidate 20) (list 1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11))\n\
  \    (check-equal? (candidate 0) (list 1))\n    (check-equal? (candidate 1) (list\
  \ 1 3))\n))\n\n(test-humaneval)"
completions: ["  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n      \
    \        (tri (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n  \
    \    '()\n      (cons (+ (/ n 2) (tri (- n 1))) (tri (- n 2)))))\n", "  (if (=\
    \ n 0)\n      (list 1)\n      (append (tri (- n 1))\n              (tri (- n 2))\n\
    \              (tri (+ n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (+\
    \ (/ n 2) (tri (- n 1))) (tri (- n 2)))))\n", "  (cond [(= n 0) (list 1)]\n  \
    \      [(even? (modulo n 2)) (cons (+ 1 n) (tri (- n 1)))]\n        [else (tri\
    \ (- n 1)) (tri (+ n 1))]))\n", "  (if (= n 0)\n      (list 1)\n      (cons (+\
    \ (/ n 2) (tri (- n 1))) (tri (- n 2)))))\n", "  (if (= n 0)\n      (list 1)\n\
    \      (append (tri (- n 1))\n              (tri (- n 2))\n              (tri\
    \ (+ n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (+ (/ n 2) (tri (- n\
    \ 1))) (tri (- n 2)))))\n", "  (if (= n 0)\n      (list 0)\n      (let ((a (+\
    \ (tri (- n 1)) (tri (- n 2)))))\n        (cons a\n              (tri (+ n 1))))))\n",
  "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1)) (tri (- n 2)) (tri (+\
    \ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (let ((tri (tri (- n 1))))\n\
    \        (if (even? n)\n            (cons (+ tri (/ n 2)) (cons (+ tri (/ n 2))\
    \ (cons (+ tri (+ n 1) tri))))\n            (cons (+ tri (/ n 2)) (cons (+ tri\
    \ (/ n 2)) (cons (+ tri (+ n 1) tri))))))))\n", "  (cond [(= n 0) (list 1)]\n\
    \        [(even? (modulo n 2)) (cons (+ 1 n) (tri (- n 1)))]\n        [else (tri\
    \ (- n 1)) (tri (+ n 1))]))\n", "  (if (= n 0)\n      (list 0)\n      (append\
    \ (tri (- n 1)) (tri (- n 2)) (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list\
    \ 0)\n      (cons (+ (/ n 2) (tri (- n 1))) (tri (- n 2)))))\n", "  (if (= n 0)\n\
    \      (list 1)\n      (append (tri (- n 1)) (tri (- n 2)) (tri (+ n 1)))))\n",
  "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n              (tri\
    \ (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n\
    \      (let ((a (+ (tri (- n 1)) (tri (- n 2)))))\n        (list a a a))))\n",
  "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n              (tri\
    \ (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n\
    \      (append (tri (- n 1))\n              (tri (- n 2))\n              (tri\
    \ (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (cons (+ (/ n 2) (tri\
    \ (- n 1))) (tri (+ n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (+ (/\
    \ n 2) (tri (- n 1))) (tri (- n 2)))))\n", "  (if (= n 0)\n      (list 0)\n  \
    \    (cons (+ (/ n 2) (tri (- n 1)))\n            (tri (- n 2))\n            (+\
    \ (/ n 3) (tri (+ n 1))))))\n", "  (if (= n 0)\n      (list 1)\n      (append\
    \ (tri (- n 1))\n              (tri (- n 2))\n              (tri (+ n 1)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (+ (/ n 2) (tri (- n 1))) (tri (- n 2)))))\n",
  "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n              (tri\
    \ (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 0)\n\
    \      (append (tri (- n 1))\n              (tri (- n 2))\n              (tri\
    \ (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (cons (+ (/ n 2) (tri\
    \ (- n 1))) (tri (- n 2)))))\n", "  (if (= n 0)\n      (list 1)\n      (append\
    \ (tri (- n 1))\n              (tri (- n 2))\n              (tri (+ n 1)))))\n",
  "  (if (= n 0)\n      (list 1)\n      (let ((tri (tri (- n 1))))\n        (cons\
    \ (+ tri (/ n 2)) (tri tri))))))\n", "  (if (= n 0)\n      (list 0)\n      (append\
    \ (tri (- n 1))\n              (tri (- n 2))\n              (tri (+ n 1)))))\n",
  "  (if (= n 0)\n      (list 0)\n      (let ((tri1 (tri (sub1 n))))\n        (append\
    \ (list tri1)\n                (tri (sub1 n))\n                (tri (add1 n))))))\
    \ \n", "  (if (= n 0)\n      '()\n      (cons (+ (/ n 2) (tri (- n 1))) (tri (-\
    \ n 2)))))\n", "  (cond [(= n 0) (list 1)]\n        [(even? (modulo n 2)) (cons\
    \ (+ (/ n 2) (tri (- n 1))) (tri (- n 1)))]\n        [(odd? (modulo n 2)) (cons\
    \ (+ (/ n 2) (tri (- n 1))) (tri (- n 1))) (tri (+ n 1))]))\n", "  (if (= n 0)\n\
    \      (list 1)\n      (append (tri (- n 1))\n              (tri (- n 2))\n  \
    \            (tri (+ n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (+ (/\
    \ n 2) (tri (- n 1))) (tri (- n 2)))))\n", "  (if (= n 0)\n      '()\n      (cons\
    \ (+ (/ n 2) (tri (- n 1))) (tri (- n 2)))))\n", "  (if (= n 0)\n      (list 0)\n\
    \      (append (tri (- n 1))\n              (tri (- n 2))\n              (tri\
    \ (+ n 1)))))\n", "  (cond [(= n 0) (list 0)]\n        [(even? (modulo n 2)) (cons\
    \ 1 (tri (sub1 n)))]\n        [(odd? (modulo n 2)) (cons 1 (tri (sub1 n) (sub1\
    \ n)))]\n        [else (tri (sub1 n) (tri (sub1 n) (tri (sub1 n))))]))\n", " \
    \ (if (= n 0)\n      '()\n      (cons (+ (/ n 2) (tri (- n 1))) (tri (- n 2)))))\n",
  "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n              (tri\
    \ (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n      '()\n   \
    \   (cons (+ (/ n 2) (tri (- n 1))) (tri (- n 2)))))\n", "  (if (= n 0)\n    \
    \  (list 1)\n      (append (tri (- n 1)) (tri (- n 2)) (tri (+ n 1)))))\n", " \
    \ (if (= n 0)\n      (list 1)\n      (cons (+ (/ n 2) (tri (- n 1))) (tri (- n\
    \ 2)))))\n", "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n   \
    \           (tri (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n\
    \      (list 1)\n      (append (tri (- n 1))\n              (tri (- n 2))\n  \
    \            (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append\
    \ (tri (- n 1))\n              (tri (- n 2))\n              (tri (+ n 1)))))\n",
  "  (if (= n 0)\n      (list 1)\n      (cons (+ (/ n 2) (tri (- n 1))) (tri (- n\
    \ 2)))))\n", "  (if (= n 0)\n      '()\n      (cons (+ (/ n 2) (tri (- n 1)))\
    \ (tri (- n 2)))))\n", "  (if (= n 0)\n      (list 1)\n      (append (tri (- n\
    \ 1))\n              (tri (- n 2))\n              (tri (+ n 1)))))\n", "  (if\
    \ (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n              (tri (-\
    \ n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n \
    \     (append (tri (- n 1))\n              (tri (- n 2))\n              (tri (+\
    \ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n \
    \             (tri (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n\
    \      (list 1)\n      (append (tri (- n 1))\n              (tri (- n 2))\n  \
    \            (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (cons\
    \ (+ (/ n 2) (tri (- n 1))) (tri (- n 2)))))\n", "  (if (= n 0)\n      (list 1)\n\
    \      (append (tri (- n 1))\n              (tri (- n 2))\n              (tri\
    \ (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n\
    \              (tri (- n 2))\n              (tri (+ n 1)))))\n", "  (cond [(=\
    \ n 0) (list 3)]\n        [(even? (modulo n 2)) (cons (+ n 1) (tri (- n 1)))]\n\
    \        [else (cons (+ n 1) (tri (- n 1))) (+ n 1)]))\n", "  (cond [(= n 0) (list\
    \ 1)]\n        [(even? n) (cons (+ (/ n 2) (tri (- n 1))) (tri (- n 2)))]\n  \
    \      [(odd? n) (cons (+ (/ n 2) (tri (- n 1))) (tri (- n 2))) (+ (/ n 2) (tri\
    \ (+ n 1)))]))\n", "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n\
    \              (tri (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n\
    \      (list 1)\n      (append (tri (- n 1))\n              (tri (- n 2))\n  \
    \            (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append\
    \ (tri (- n 1))\n              (tri (- n 2))\n              (tri (+ n 1)))))\n",
  "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n              (tri\
    \ (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n      '()\n   \
    \   (cons (+ (/ n 2) (tri (- n 1))) (tri (- n 2)))))\n", "  (if (= n 0)\n    \
    \  (list 1)\n      (append (tri (- n 1))\n              (tri (- n 2))\n      \
    \        (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append (tri\
    \ (- n 1)) (tri (- n 2)) (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 0)\n\
    \      (append (tri (- n 1))\n              (tri (- n 2))\n              (tri\
    \ (+ n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (+ (/ n 2) (tri (- n\
    \ 1)))\n            (tri (- n 1))\n            (tri (+ n 1))))))\n", "  (if (=\
    \ n 0)\n      (list 1)\n      (append (tri (- n 1))\n              (tri (- n 2))\n\
    \              (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append\
    \ (tri (- n 1))\n              (tri (- n 2))\n              (tri (+ n 1)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (+ (/ n 2) (tri (- n 1))) (tri (+ n 1)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (+ (/ n 2) (tri (- n 1))) (tri (- n 2)))))\n",
  "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n              (tri\
    \ (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n\
    \      (append (tri (- n 1))\n              (tri (- n 2))\n              (tri\
    \ (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n\
    \              (tri (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n\
    \      (list 1)\n      (append (tri (- n 1))\n              (tri (- n 2))\n  \
    \            (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 0)\n      (let ((tri1\
    \ (tri (sub1 n))))\n        (cons (+ tri1 tri1) (tri (add1 n))))))\n", "  (if\
    \ (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n              (tri (-\
    \ n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 0)\n \
    \     (let ((tri (+ (tri (- n 1)) (tri (- n 2)) (tri (+ n 1)))))\n        (list\
    \ tri))))\n", "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n  \
    \            (tri (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n\
    \      (list 1)\n      (append (tri (- n 1)) (tri (- n 2)) (tri (+ n 1)))))\n",
  "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n              (tri\
    \ (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n\
    \      (append (tri (- n 1))\n              (tri (- n 2))\n              (tri\
    \ (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (cons (+ (/ n 2) (tri\
    \ (- n 1))) (tri (- n 2)))))\n", "  (if (= n 0)\n      (list 0)\n      (append\
    \ (tri (- n 1))\n              (tri (- n 2))\n              (tri (+ n 1)))))\n",
  "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n              (tri\
    \ (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n\
    \      (append (tri (- n 1))\n              (tri (- n 2))\n              (tri\
    \ (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\
    \ (tri (- n 2)) (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append\
    \ (tri (- n 1))\n              (tri (- n 2))\n              (tri (+ n 1)))))\n",
  "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n              (tri\
    \ (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n\
    \      (append (tri (- n 1))\n              (tri (- n 2))\n              (tri\
    \ (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (cons (+ (/ n 2) (tri\
    \ (- n 1))) (tri (- n 2)))))\n", "  (if (= n 0)\n      (list 1)\n      (append\
    \ (tri (- n 1)) (tri (- n 2)) (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list\
    \ 1)\n      (append (tri (- n 1))\n              (tri (- n 2))\n             \
    \ (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append (tri (- n\
    \ 1)) (tri (- n 2)) (tri (+ n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons\
    \ (+ (/ n 2) (tri (- n 1))) (tri (- n 2)))))\n", "  (if (= n 0)\n      (list 1)\n\
    \      (append (tri (- n 1))\n              (tri (- n 2))\n              (tri\
    \ (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\
    \ (tri (- n 2)) (tri (+ n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (+\
    \ (/ n 2) (tri (- n 1))) (tri (- n 2)))))\n", "  (if (= n 0)\n      (list 1)\n\
    \      (append (tri (- n 1))\n              (tri (- n 2))\n              (tri\
    \ (+ n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (+ (/ n 2) (tri (- n\
    \ 1)))\n            (tri (- n 1))\n            (tri (+ n 1))))))\n", "  (if (=\
    \ n 0)\n      (list 1)\n      (append (tri (- n 1)) (tri (- n 2)) (tri (+ n 1)))))\n",
  "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n              (tri\
    \ (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n\
    \      (append (tri (- n 1))\n              (tri (- n 2))\n              (tri\
    \ (+ n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (+ (/ n 2) (tri (- n\
    \ 1))) (tri (- n 2)))))\n", "  (if (= n 0)\n      (list 1)\n      (cons (+ (/\
    \ n 2) (tri (- n 1))) (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n  \
    \    (append (tri (- n 1))\n              (tri (- n 2))\n              (tri (+\
    \ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n \
    \             (tri (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n\
    \      (list 1)\n      (append (tri (- n 1))\n              (tri (- n 2))\n  \
    \            (tri (+ n 1)))))\n", "  (cond ((= n 0) '())\n        ((even? n) (cons\
    \ (+ (/ n 2) 1) (tri (- n 1))))\n        (else (cons (+ (/ n 3) 1) (tri (- n 2))))))\n",
  "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n              (tri\
    \ (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n\
    \      (cons (+ (/ n 2) (tri (- n 1))) (tri (- n 2)))))\n", "  (if (= n 0)\n \
    \     (list 1)\n      (append (tri (- n 1)) (tri (- n 2)) (tri (+ n 1)))))\n",
  "  (if (= n 0)\n      (list 1)\n      (cons (+ (/ n 2) (tri (- n 1))) (tri (- n\
    \ 2)))))\n", "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n   \
    \           (tri (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n\
    \      (list 1)\n      (append (tri (- n 1))\n              (tri (- n 2))\n  \
    \            (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (let ((tri\
    \ (+ (tri (- n 1)) (tri (- n 2)) (tri (+ n 1)))))\n        (list tri))))\n", " \
    \ (if (= n 0)\n      (list 1)\n      (cons (+ (/ n 2) (tri (- n 1))) (tri (- n\
    \ 2)))))\n", "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n   \
    \           (tri (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n\
    \      (list 1)\n      (append (tri (- n 1))\n              (tri (- n 2))\n  \
    \            (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append\
    \ (tri (- n 1))\n              (tri (- n 2))\n              (tri (+ n 1)))))\n",
  "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n              (tri\
    \ (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n\
    \      (append (tri (- n 1))\n              (tri (- n 2))\n              (tri\
    \ (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n\
    \              (tri (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n\
    \      '()\n      (cons (+ (/ n 2) (tri (- n 1))) (tri (- n 2)))))\n", "  (if\
    \ (= n 0)\n      (list 1)\n      (append (tri (- n 1)) (tri (- n 2)) (tri (+ n\
    \ 1)))))\n", "  (if (= n 0)\n      (list 0)\n      (append (tri (- n 1))\n   \
    \           (tri (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n\
    \      '()\n      (cons (+ (/ n 2) (tri (- n 1))) (tri (- n 2)))))\n", "  (if\
    \ (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n              (tri (-\
    \ n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n \
    \     (append (tri (- n 1)) (tri (- n 2)) (tri (+ n 1)))))\n", "  (if (= n 0)\n\
    \      (list 1)\n      (append (tri (- n 1))\n              (tri (- n 2))\n  \
    \            (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 0)\n      (cons\
    \ (+ (/ n 2) (tri (- n 1))) (tri (- n 2)))))\n", "  (if (= n 0)\n      (list 1)\n\
    \      (append (tri (- n 1))\n              (tri (- n 2))\n              (tri\
    \ (+ n 1)))))\n", "  (cond ((= n 0) (list 3))\n        ((even? (modulo n 2)) (cons\
    \ (+ n 1) (tri (- n 1))))\n        (else (cons (+ n 1) (tri (- n 1))) (tri (+\
    \ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n \
    \             (tri (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n\
    \      (list 1)\n      (cons (+ (/ n 2) (tri (- n 1))) (tri (+ n 1)))))\n", " \
    \ (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n              (tri\
    \ (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n\
    \      (let ((tri1 (tri (sub1 n))))\n        (append (list tri1)\n           \
    \     (tri (sub1 n))\n                (tri (add1 n))))))\n", "  (if (= n 0)\n\
    \      (list 1)\n      (append (tri (- n 1))\n              (tri (- n 2))\n  \
    \            (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append\
    \ (tri (- n 1))\n              (tri (- n 2))\n              (tri (+ n 1)))))\n",
  "  (if (= n 0)\n      (list 0)\n      (append (tri (- n 1))\n              (tri\
    \ (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n      '()\n   \
    \   (cons (+ (/ n 2) (tri (- n 1))) (tri (- n 2)))))\n", "  (cond [(= n 0) (list\
    \ 1)]\n        [(even? (modulo n 2)) (cons (+ 1 n) (tri (- n 1)))]\n        [else\
    \ (tri (- n 1)) (tri (+ n 1))]))\n", "  (if (= n 0)\n      (list 1)\n      (append\
    \ (tri (- n 1))\n              (tri (- n 2))\n              (tri (+ n 1)))))\n",
  "  (if (= n 0)\n      (list 0)\n      (append (tri (- n 1))\n              (tri\
    \ (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n\
    \      (append (tri (- n 1))\n              (tri (- n 2))\n              (tri\
    \ (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (let ((tri (+ (tri (-\
    \ n 1)) (tri (- n 2)) (tri (+ n 1)))))\n        (list tri))))\n", "  (if (= n\
    \ 0)\n      (list 1)\n      (append (tri (- n 1)) (tri (- n 2)) (tri (+ n 1)))))\n",
  "  (if (= n 0)\n      (list 0)\n      (append (tri (- n 1))\n              (tri\
    \ (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n\
    \      (append (tri (- n 1))\n              (tri (- n 2))\n              (tri\
    \ (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\
    \ (tri (- n 2)) (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append\
    \ (tri (- n 1)) (tri (- n 2)) (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list\
    \ 1)\n      (append (tri (- n 1)) (tri (- n 2)) (tri (+ n 1)))))\n", "  (if (=\
    \ n 0)\n      (list 1)\n      (append (tri (- n 1)) (tri (- n 2)) (tri (+ n 1)))))\n",
  "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n              (tri\
    \ (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n\
    \      (append (tri (- n 1))\n              (tri (- n 2))\n              (tri\
    \ (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\
    \ (tri (- n 2)) (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append\
    \ (tri (- n 1))\n              (tri (- n 2))\n              (tri (+ n 1)))))\n",
  "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n              (tri\
    \ (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 0)\n\
    \      (append (tri (- n 1))\n              (tri (- n 2))\n              (tri\
    \ (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n\
    \              (tri (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n\
    \      '()\n      (cons (+ (/ n 2) (tri (- n 1))) (tri (- n 2)))))\n", "  (if\
    \ (= n 0)\n      (list 1)\n      (cons (+ (/ n 2) (tri (- n 1))) (tri (- n 2)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (+ (/ n 2) (tri (- n 1))) (tri (- n 2)))))\n",
  "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n              (tri\
    \ (- n 2))\n              (tri (+ n 1)))))\n", "  (cond [(= n 0) (list 1)]\n \
    \       [(even? (modulo n 2)) (cons (+ (/ n 2) 1) (tri (- n 1)))]\n        [else\
    \ (tri (- n 1))]))\n", "  (if (= n 0)\n      '()\n      (cons (+ (/ n 2) (tri\
    \ (- n 1))) (tri (- n 2)))))\n", "  (if (= n 0)\n      (list 0)\n      (append\
    \ (tri (- n 1))\n              (tri (- n 2))\n              (tri (+ n 1)))))\n",
  "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n              (tri\
    \ (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n      '()\n   \
    \   (cons (+ (/ n 2) (tri (- n 1))) (tri (- n 2)))))\n", "  (if (= n 0)\n    \
    \  (list 0)\n      (append (tri (- n 1)) (tri (- n 2)) (tri (+ n 1)))))\n", " \
    \ (if (= n 0)\n      (list 0)\n      (append (tri (- n 1))\n              (tri\
    \ (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n\
    \      (append (tri (- n 1))\n              (tri (- n 2))\n              (tri\
    \ (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n\
    \              (tri (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n\
    \      (list 1)\n      (append (tri (- n 1))\n              (tri (- n 2))\n  \
    \            (tri (+ n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (+ (/\
    \ n 2) (tri (- n 1))) (tri (- n 2)))))\n", "  (if (= n 0)\n      (list 0)\n  \
    \    (append (tri (- n 1))\n              (tri (- n 2))\n              (tri (+\
    \ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n \
    \             (tri (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n\
    \      (list 1)\n      (cons (+ (/ n 2) (tri (- n 1))) (tri (- n 2)))))\n", " \
    \ (if (= n 0)\n      (list 1)\n      (cons (+ (/ n 2) (tri (- n 1))) (tri (- n\
    \ 2)))))\n", "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1)) (tri\
    \ (- n 2)) (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append\
    \ (tri (- n 1))\n              (tri (- n 2))\n              (tri (+ n 1)))))\n",
  "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n              (tri\
    \ (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n\
    \      (append (tri (- n 1)) (tri (- n 2)) (tri (+ n 1)))))\n", "  (if (= n 0)\n\
    \      (list 0)\n      (append (tri (- n 1))\n              (tri (- n 2))\n  \
    \            (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append\
    \ (tri (- n 1))\n              (tri (- n 2))\n              (tri (+ n 1)))))\n",
  "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1)) (tri (- n 2)) (tri (+\
    \ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1)) (tri\
    \ (- n 2)) (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append\
    \ (tri (- n 1))\n              (tri (- n 2))\n              (tri (+ n 1)))))\n",
  "  (cond [(= n 0) (list 0)]\n        [(even? n) (cons (+ (/ n 2) 1) (tri (- n 1)))]\n\
    \        [else (cons (+ (/ n 2) 1) (tri (- n 1))) (+ (/ n 2) 1)]))\n", "  (if\
    \ (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n              (tri (-\
    \ n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n \
    \     (append (tri (- n 1))\n              (tri (- n 2))\n              (tri (+\
    \ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n \
    \             (tri (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n\
    \      '()\n      (cons (+ (/ n 2) (tri (- n 1)))\n            (tri (- n 1))\n\
    \            (tri (+ n 1))))))\n", "  (if (= n 0)\n      (list 1)\n      (cons\
    \ (+ (/ n 2) (tri (- n 1))) (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 0)\n\
    \      (let ((tri1 (tri (sub1 n))))\n        (append (list tri1)\n           \
    \     (tri (sub1 n))\n                (tri (add1 n))))))\n", "  (if (= n 0)\n\
    \      (list 1)\n      (append (tri (- n 1))\n              (tri (- n 2))\n  \
    \            (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n      (append\
    \ (tri (- n 1))\n              (tri (- n 2))\n              (tri (+ n 1)))))\n",
  "  (if (= n 0)\n      (list 1)\n      (append (tri (- n 1))\n              (tri\
    \ (- n 2))\n              (tri (+ n 1)))))\n", "  (if (= n 0)\n      (list 1)\n\
    \      (append (tri (- n 1)) (tri (- n 2)) (tri (+ n 1)))))\n", "  (if (= n 0)\n\
    \      (list 1)\n      (append (tri (- n 1)) (tri (- n 2)) (tri (+ n 1)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
