name: HumanEval_118_get_closest_vowel
language: rkt
prompt: "#lang racket\n\n;; You are given a word. Your task is to find the closest\
  \ vowel that stands between \n;; two consonants from the right side of the word\
  \ (case sensitive).\n;; Vowels in the beginning and ending doesn't count. Return\
  \ empty string if you didn't\n;; find any vowel met the above condition. \n;; You\
  \ may assume that the given string contains English letter only.\n;; Example:\n\
  ;; >>> (get_closest_vowel \"yogurt\")\n;; \"u\"\n;; >>> (get_closest_vowel \"FULL\"\
  )\n;; \"U\"\n;; >>> (get_closest_vowel \"quick\")\n;; \"\"\n;; >>> (get_closest_vowel\
  \ \"ab\")\n;; \"\"\n(define (get_closest_vowel word)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_closest_vowel))\n\
  \    (check-equal? (candidate \"yogurt\") \"u\")\n    (check-equal? (candidate \"\
  full\") \"u\")\n    (check-equal? (candidate \"easy\") \"\")\n    (check-equal?\
  \ (candidate \"eAsy\") \"\")\n    (check-equal? (candidate \"ali\") \"\")\n    (check-equal?\
  \ (candidate \"bad\") \"a\")\n    (check-equal? (candidate \"most\") \"o\")\n  \
  \  (check-equal? (candidate \"ab\") \"\")\n    (check-equal? (candidate \"ba\")\
  \ \"\")\n    (check-equal? (candidate \"quick\") \"\")\n    (check-equal? (candidate\
  \ \"anime\") \"i\")\n    (check-equal? (candidate \"Asia\") \"\")\n    (check-equal?\
  \ (candidate \"Above\") \"o\")\n))\n\n(test-humaneval)"
completions: ["  (define (vowel-check vowel)\n    (cond [(string=? (vowel-char vowel)\
    \ vowel) vowel]\n          [(string=? (vowel-char vowel) (string-ref word (- vowel\
    \ (string-length word)))) vowel]\n          [else \"\"]))\n  (define (vowel-char\
    \ vowel)\n    (string->char (string->string vowel)))\n  (define (vowel-check vowel)\n\
    \    (cond [(string=? (vowel-char vowel) vowel) vowel]\n          [(string=? (vowel-char\
    \ vowel) (string-ref word (- vowel (string-length word)))) vowel]\n          [else\
    \ \"\"]))\n  (define (vowel-char vowel)\n    (string->char (string->string vowel)))\n\
    \  (define (vowel-check vowel)\n    (cond [(string=? (vowel-char vowel) vowel)\
    \ vowel]\n          [(string=? (vowel-char vowel) (string-ref word (- vowel (string-length\
    \ word)))) vowel]\n          [else \"\"]))\n  (define (vowel-char vowel)\n   \
    \ (string->char (string->string vowel)))\n  (define (vowel-check vowel)\n    (cond\
    \ [(string=? (vowel-char vowel) vowel) vowel]\n          [(string=? (vowel-char\
    \ vowel) (string-ref word (- vowel (string-length word)))) vowel]\n          [else\
    \ \"\"]))\n  (define (vowel-char vowel)\n    (string->char (string->string vowel)))\n\
    \  (define (vowel-check vowel)\n    (cond [(string=? (vowel-char vowel) vowel)\
    \ vowel]\n          [(string=? (vowel-char vowel) (string-ref word (- vowel (string-length\
    \ word)))) vowel]\n          [else \"\"]))\n  (define (vowel-char vowel)\n   \
    \ (string->char (string->string vowel)))\n  (define (vowel-check vowel)\n    (cond\
    \ [(string=? (vowel-char vowel) vowel) vowel]\n          [(string=? (vowel-char\
    \ vowel) (string-ref word (- vowel (string-length word)))) vowel]\n          [else\
    \ \"\"]))\n  (define (vowel-char vowel)\n    (string->char (string->string vowel)))\n\
    \  (define (vowel-check vowel)\n    (cond [(string=? (vowel-char vowel) vowel)\
    \ vowel]\n          [(string=? (vowel-char vowel) (string-ref word (- vowel (",
  "  (define (vowel-check word)\n    (cond [(empty? word) \"\"]\n          [(char=?\
    \ (first word) 'a) (vowel-check (rest word))]\n          [(char=? (first word)\
    \ 'e) (vowel-check (rest word))]\n          [(char=? (first word) 'i) (vowel-check\
    \ (rest word))]\n          [(char=? (first word) 'o) (vowel-check (rest word))]\n\
    \          [(char=? (first word) 'u) (vowel-check (rest word))]\n          [else\
    \ (vowel-check (rest word))]\n          ))\n  (vowel-check word))\n", "  (cond\
    \ [(empty? word) \"\"]\n        [(equal? (first word) 'a) (get_closest_vowel (rest\
    \ word))]\n        [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'o) (get_closest_vowel (rest word))]\n        [(equal? (first word)\
    \ 'u) (get_closest_vowel (rest word))]\n        [else (cons (first word) (get_closest_vowel\
    \ (rest word)))]))\n", "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first\
    \ word) 'a) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n    [else (get-vowel (rest\
    \ word))]))\n", "  (cond [(empty? word) \"\"]\n        [(equal? (first word) 'a)\
    \ (get_closest_vowel (rest word))]\n        [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n        [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n        [else (first word)]\n\
    \        ))\n", "  (define (vowel-check word)\n    (cond [(empty? word) \"\"]\n\
    \          [(char=? (first word) 'a) (vowel-check (rest word))]\n          [(char=?\
    \ (first word) 'e) (vowel-check (rest word))]\n          [(char=? (first word)\
    \ 'i) (vowel-check (rest word))]\n          [(char=? (first word) 'o) (vowel-check\
    \ (rest word))]\n          [(char=? (first word) 'u) (vowel-check (rest word))]\n\
    \          [else (vowel-check (rest word))]))\n  (vowel-check word))\n", "  (cond\n\
    \    [(empty? word) \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel (rest\
    \ word))]\n    [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n  \
    \  [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n    [(equal? (first\
    \ word) 'o) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'u) (get_closest_vowel\
    \ (rest word))]\n    [else (get-vowel (rest word))]))\n", "  (define (vowel-check\
    \ word)\n    (let loop ((vowels '(a e i o u))\n               (vowel-count 0))\n\
    \      (cond ((null? word) \"\")\n            ((char=? (car word) (car vowels))\
    \ \n             (loop (cdr vowels) (+ vowel-count 1)))\n            (else (loop\
    \ (cdr vowels) vowel-count)))))\n  (vowel-check word))\n", "  (let loop ((word\
    \ word) (vowels '(a e i o u)))\n    (cond\n      [(empty? word) \"\"]\n      [(equal?\
    \ (first word) a) (first vowels)]\n      [(equal? (first word) e) (first vowels)]\n\
    \      [(equal? (first word) i) (first vowels)]\n      [(equal? (first word) o)\
    \ (first vowels)]\n      [(equal? (first word) u) (first vowels)]\n      [else\
    \ (loop (rest word) (cons (first vowels) vowels))])))\n", "  (let loop ((word\
    \ word)\n             (vowels '(a e i o u)))\n    (cond ((null? word) \"\")\n\
    \          ((member (char-code (car word)) vowels) (car word))\n          ((member\
    \ (char-code (cadr word)) vowels) (cadr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char", "  (cond\n \
    \   [(empty? word) \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel (rest\
    \ word))]\n    [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n  \
    \  [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n    [(equal? (first\
    \ word) 'o) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'u) (get_closest_vowel\
    \ (rest word))]\n    [else (first word)]\n  )\n)\n", "  (define (vowel-check vowel\
    \ word)\n    (cond\n      [(empty? word) \"\"]\n      [(equal? vowel (first word))\
    \ (vowel-check vowel (rest word))]\n      [else (vowel-check vowel (rest word))]\n\
    \      ))\n  (vowel-check (first word) word))\n", "  (define (helper word vowel\
    \ vowel-count)\n    (cond\n      [(empty? word) \"\"]\n      [(equal? vowel (first\
    \ word)) vowel-count]\n      [else (helper (rest word) (first word) (+ vowel-count\
    \ 1))]))\n  (helper (reverse word) 'u (length word)))\n", "  (cond [(empty? word)\
    \ \"\"]\n        [(equal? (first word) 'a) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'i) (get_closest_vowel (rest word))]\n        [(equal? (first word)\
    \ 'o) (get_closest_vowel (rest word))]\n        [(equal? (first word) 'u) (get_closest_vowel\
    \ (rest word))]\n        [else (cons (first word) (get_closest_vowel (rest word)))]))\n",
  "  (define (helper word vowel index)\n    (cond\n      [(empty? word) empty]\n \
    \     [(equal? vowel (first word)) (first word)]\n      [(equal? (first word)\
    \ vowel) (first word)]\n      [(equal? (first word) (first vowel)) (first word)]\n\
    \      [(equal? (first word) (first vowel) (second word)) (first word)]\n    \
    \  [(equal? (first word) (first vowel) (second word) (second vowel)) (first word)]\n\
    \      [(equal? (first word) (first vowel) (second word) (second vowel) (third\
    \ word)) (first word)]\n      [(equal? (first word) (first vowel) (second word)\
    \ (second vowel) (third word) (fourth word)) (first word)]\n      [(equal? (first\
    \ word) (first vowel) (second word) (second vowel) (third word) (fourth word)\
    \ (fifth word)) (first word)]\n      [(equal? (first word) (first vowel) (second\
    \ word) (second vowel) (third word) (fourth word) (fifth word) (sixth word)) (first\
    \ word)]\n      [(equal? (first word) (first vowel) (second word) (second vowel)\
    \ (third word) (fourth word) (fifth word) (sixth word) (seventh word)) (first\
    \ word)]\n      [(equal? (first word) (first vowel) (second word) (second vowel)\
    \ (third word) (fourth word) (fifth word) (sixth word) (seventh word) (eigth word))\
    \ (first word)]\n      [(equal? (first word) (first vowel) (second word) (second\
    \ vowel) (third word) (fourth word) (fifth word) (sixth word) (seventh word) (eigth\
    \ word) (tenth word)) (first word)]\n      [(equal? (first word) (first vowel)\
    \ (second word) (second vowel) (third word) (fourth word) (fifth word) (sixth\
    \ word) (seventh word) (eigth word) (tenth word) (eleventh word)) (first word)]\n\
    \      [(equal? (first word) (first vowel) (second word) (second vowel) (third\
    \ word) (fourth word) (fifth word) (sixth word) (seventh word) (eigth word) (tenth\
    \ word) (eleventh word) (twelfth word)) (first word)]\n      [(equal? (first word)\
    \ (first vowel) (second word) (second vowel) (third word) (fourth word) (fifth\
    \ word) (sixth word) (seventh word) (eigth word) (ten", "  (define (helper word\
    \ vowel vowels)\n    (cond [(empty? vowels) \"\"]\n          [(equal? (first vowels)\
    \ vowel) (helper (rest word) vowel (rest vowels))]\n          [else (helper (rest\
    \ word) vowel (append vowels (first vowels)))]))\n  (helper word (first word)\
    \ '()))\n", "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first word) 'a)\
    \ (get_closest_vowel (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n    [else (first word)]))\n",
  "  (define (helper word vowel count)\n    (cond\n      [(empty? word) \"\"]\n  \
    \    [(equal? vowel (first word)) (helper word (first word) (+ count 1))]\n  \
    \    [(equal? (first word) (first vowel)) (helper word (first word) (+ count 1))]\n\
    \      [(equal? (first word) (first vowel) (+ count 1))\n       (helper (rest\
    \ word) (first vowel) (+ count 1))]\n      [(equal? (first word) (first vowel)\
    \ (+ count 1))\n       (helper (rest word) (first vowel) (+ count 1))]\n     \
    \ [(equal? (first word) (first vowel) (+ count 1))\n       (helper (rest word)\
    \ (first vowel) (+ count 1))]\n      [(equal? (first word) (first vowel) (+ count\
    \ 1))\n       (helper (rest word) (first vowel) (+ count 1))]\n      [(equal?\
    \ (first word) (first vowel) (+ count 1))\n       (helper (rest word) (first vowel)\
    \ (+ count 1))]\n      [(equal? (first word) (first vowel) (+ count 1))\n    \
    \   (helper (rest word) (first vowel) (+ count 1))]\n      [(equal? (first word)\
    \ (first vowel) (+ count 1))\n       (helper (rest word) (first vowel) (+ count\
    \ 1))]\n      [(equal? (first word) (first vowel) (+ count 1))\n       (helper\
    \ (rest word) (first vowel) (+ count 1))]\n      [(equal? (first word) (first\
    \ vowel) (+ count 1))\n       (helper (rest word) (first vowel) (+ count 1))]\n\
    \      [(equal? (first word) (first vowel) (+ count 1))\n       (helper (rest\
    \ word) (first vowel) (+ count 1))]\n      [(equal? (first word) (first vowel)\
    \ (+ count 1))\n       (helper (rest word) (first vowel) (+ count 1))]\n     \
    \ [(equal? (first word) (first vowel) (+ count 1))\n       (helper (rest word)\
    \ (first vowel) (+ count 1))]\n      [(equal? (first word) (first vowel) (+ count\
    \ 1))\n       (helper (rest word) (first vowel) (+ count 1))]\n      [(equal?\
    \ (first word) (first vowel) (+ count 1))\n       (helper (rest word) (first vowel)\
    \ (+ count 1))]\n      [(equal? (first word) (first vowel) (+ count 1))\n    \
    \   (helper (rest word) (first vowel) (+ count 1))]\n      [(equal? (first word)\
    \ (first vowel) (+ count 1))\n       (helper (rest word) (first vowel) (+ count\
    \ 1))]\n", "  (define (helper word vowel)\n    (cond\n      [(empty? word) \"\"\
    ]\n      [(equal? (first word) vowel) (second word)]\n      [else (helper (rest\
    \ word) (cons (first word) vowel))]\n      ))\n  (helper word '()))\n", "  (define\
    \ (vowel-count vowel)\n    (cond\n      [(equal? vowel 'a) (+ 1 (vowel-count 'u))]\n\
    \      [(equal? vowel 'e) (+ 1 (vowel-count 'u))]\n      [(equal? vowel 'i) (+\
    \ 1 (vowel-count 'u))]\n      [(equal? vowel 'o) (+ 1 (vowel-count 'u))]\n   \
    \   [(equal? vowel 'u) (+ 1 (vowel-count 'u))]\n      [else 0]))\n  (define (vowel-count\
    \ vowel count)\n    (cond\n      [(equal? vowel 'a) (+ 1 (vowel-count 'u count))]\n\
    \      [(equal? vowel 'e) (+ 1 (vowel-count 'u count))]\n      [(equal? vowel\
    \ 'i) (+ 1 (vowel-count 'u count))]\n      [(equal? vowel 'o) (+ 1 (vowel-count\
    \ 'u count))]\n      [(equal? vowel 'u) (+ 1 (vowel-count 'u count))]\n      [else\
    \ 0]))\n  (define (vowel-count vowel count)\n    (cond\n      [(equal? vowel 'a)\
    \ (+ 1 (vowel-count 'u count))]\n      [(equal? vowel 'e) (+ 1 (vowel-count 'u\
    \ count))]\n      [(equal? vowel 'i) (+ 1 (vowel-count 'u count))]\n      [(equal?\
    \ vowel 'o) (+ 1 (vowel-count 'u count))]\n      [(equal? vowel 'u) (+ 1 (vowel-count\
    \ 'u count))]\n      [else 0]))\n  (define (vowel-count vowel count)\n    (cond\n\
    \      [(equal? vowel 'a) (+ 1 (vowel-count 'u count))]\n      [(equal? vowel\
    \ 'e) (+ 1 (vowel-count 'u count))]\n      [(equal? vowel 'i) (+ 1 (vowel-count\
    \ 'u count))]\n      [(equal? vowel 'o) (+ 1 (vowel-count 'u count))]\n      [(equal?\
    \ vowel 'u) (+ 1 (vowel-count 'u count))]\n      [else 0]))\n  (define (vowel-count\
    \ vowel count)\n    (cond\n      [(equal? vowel 'a) (+ 1 (vowel-count 'u count))]\n\
    \      [(equal? vowel 'e) (+ 1 (vowel-count 'u count))]\n      [(equal? vowel\
    \ 'i) (+ 1 (vowel-count 'u count))]\n      [(equal? vowel 'o) (+ 1 (vowel-count\
    \ 'u count))]\n      "]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
