name: HumanEval_18_how_many_times
language: rkt
prompt: "#lang racket\n\n;; Find how many times a given substring can be found in\
  \ the original string. Count overlaping cases.\n;; >>> (how_many_times \"\" \"a\"\
  )\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times \"\
  aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
  \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\"\
  \ \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal?\
  \ (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
completions: ["  (let loop ((count 0) (index 0))\n    (if (string-empty? string)\n\
    \        count\n        (if (equal? substring (string-ref string index))\n   \
    \         (loop (+ count 1) (+ index 1))\n            (loop (+ count 1) index))))))\n",
  "  (let ((count 0))\n    (for ((i 0 (+ i 1))) (if (equal? string \"\") count (if\
    \ (equal? (substring i) string) (incf count) 0)))))\n", "  (cond\n    [(empty?\
    \ string) 0]\n    [(equal? (first string) substring) (+ 1 (how_many_times (rest\
    \ string) substring))]\n    [else (+ 1 (how_many_times (rest string) substring))]))\n",
  "  (let ((count 0))\n    (loop for i from 0 to (string-length string)\n        \
    \  for j from 0 to (string-length substring)\n          when (string= (string-ref\
    \ string i) (substring-ref substring j))\n          do (incf count)\n        \
    \  finally (return count))))\n", "  (let ((count 0))\n    (loop for i from 0 to\
    \ (string-length string)\n          for j from 0 to (string-length substring)\n\
    \          when (string= (string-ref string i) (string-ref substring j))\n   \
    \       do (incf count)\n          finally (return count))))\n", "  (cond\n  \
    \  [(empty? string) 0]\n    [(equal? (first string) substring) 1]\n    [else (+\
    \ 1 (how_many_times (rest string) substring))]))\n", "  (cond\n    [(empty? string)\
    \ 0]\n    [(equal? (first string) substring) 1]\n    [else (+ 1 (how_many_times\
    \ (rest string) substring))]))\n", "  (cond [(empty? string) 0]\n        [(equal?\
    \ (first string) substring) (+ 1 (how_many_times (rest string) substring))]\n\
    \        [else (+ 1 (how_many_times (rest string) (first string)))]))\n", "  (cond\n\
    \    [(empty? string) 0]\n    [(equal? (first string) substring) 1]\n    [else\
    \ (+ (how_many_times (rest string) substring) (how_many_times string (first string)))]))\n",
  "  (cond\n    [(empty? string) 0]\n    [(equal? (first string) substring) 1]\n \
    \   [else (+ 1 (how_many_times (rest string) substring))]))\n", "  (define (how_many\
    \ substring string count)\n    (cond\n      [(empty? string) count]\n      [(equal?\
    \ substring (car string)) (how_many substring (cdr string) (+ count 1))]\n   \
    \   [else (how_many substring (cdr string) (+ count 1))]))\n  (how_many substring\
    \ string 0))\n", "  (cond [(empty? string) 0]\n        [(equal? (first string)\
    \ substring) (+ 1 (how_many_times (rest string) substring))]\n        [else (+\
    \ (how_many_times (rest string) substring) (how_many_times (first string) substring))]))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (substring string) (string-ref string\
    \ 0)) 1]\n        [else (+ 1 (how_many_times (string->list string) (substring\
    \ string)))]))\n", "  (let ((count 0))\n    (for-each (lambda (c)\n          \
    \      (if (string-equal? c substring)\n                    (set! count (add1\
    \ count))\n                    (set! count 0))\n              (string-length string))\n\
    \              string)))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (substring\
    \ string) \"\") 0]\n    [else (+ 1 (how_many_times (substring string) (substring\
    \ string)))]))\n", "  (cond [(empty? string) 0]\n        [(equal? (substring string)\
    \ (string-ref string 0)) 1]\n        [else (+ 1 (how_many_times (string->list\
    \ string) (substring string)))]))\n", "  (cond\n    [(empty? string) 0]\n    [(equal?\
    \ (first string) substring) 1]\n    [else (+ 1 (how_many_times (rest string) substring))]))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (substring string) (string-ref string\
    \ 0)) 1]\n        [else (+ 1 (how_many_times (string->list string) (substring\
    \ string)))]))\n", "  (cond [(empty? string) 0]\n        [(equal? (substring string)\
    \ (string-ref string 0)) 1]\n        [else (+ 1 (how_many_times (string->list\
    \ string) (substring string)))]))\n", "  (cond [(empty? string) 0]\n        [(equal?\
    \ (substring string) substring) 1]\n        [else (+ 1 (how_many_times (rest string)\
    \ substring))]))\n", "  (define (count-overlapping substring string)\n    (if\
    \ (string-empty? string)\n        0\n        (if (string-equal? substring (string-ref\
    \ string 0))\n            (+ 1 (count-overlapping substring (substring 1))) \n\
    \            (count-overlapping substring (substring 1)))))\n  (count-overlapping\
    \ substring string))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (first\
    \ string) substring) 1]\n    [else (+ 1 (how_many_times (rest string) substring))]))\n",
  "  (let ((count 0))\n    (for-each (lambda (c)\n                (when (string=?\
    \ c substring)\n                  (set! count (add1 count)))))\n    count))\n",
  "  (define (how_many_times-helper string substring index count)\n    (cond ((null?\
    \ string) count)\n          ((eq? substring (car string)) (how_many_times-helper\
    \ (cdr string) substring index (+ count 1)))\n          (else (how_many_times-helper\
    \ (cdr string) substring index (+ count 0)))))\n  (how_many_times-helper string\
    \ substring 0 0))\n", "  (let loop ((i 0) (count 0))\n    (if (= i string-length)\n\
    \        count\n        (loop (+ i 1) (if (equal? (substring string) (string-ref\
    \ string i)) (+ count 1) count))))))\n", "  (let ((count 0))\n    (loop for i\
    \ from 0 to (string-length string)\n          for j from 0 to (string-length substring)\n\
    \          when (string=? (substring i j) string)\n          do (set! count (+\
    \ count 1)))\n    count))\n", "  (let loop ((count 0) (index 0))\n    (if (eq?\
    \ index string-length)\n        count\n        (loop (+ count (substring-count\
    \ substring string index))\n              (+ index 1)))))\n", "  (define (how_many_times-helper\
    \ string substring count)\n    (cond [(empty? string) count]\n          [(equal?\
    \ (first string) substring) (how_many_times-helper (rest string) substring (+\
    \ count 1))]\n          [else (how_many_times-helper (rest string) substring (+\
    \ count 1))]))\n  (how_many_times-helper string substring 0))\n", "  (let loop\
    \ ((i 0)\n             (count 0))\n    (cond ((null? string) count)\n        \
    \  ((eq? (char-code (char string i)) (char-code (char substring 0))) (loop (+\
    \ i 1) (+ count 1)))\n          ((char-code (char string i)) (loop (+ i 1) count))\n\
    \          (else (loop (+ i 1) count)))))\n", "  (cond [(empty? string) 0]\n \
    \       [(equal? (substring string) (string-ref string 0)) 1]\n        [else (+\
    \ 1 (how_many_times (string->list string) (substring string)))]))\n", "  (cond\
    \ [(empty? string) 0]\n        [(equal? (substring string) (substring (rest string)))\
    \ 1]\n        [else (+ 1 (how_many_times (rest string) substring))]))\n", "  (define\
    \ (how_many_times-helper string substring count)\n    (cond\n      [(empty? string)\
    \ count]\n      [(equal? (first string) substring) (how_many_times-helper (rest\
    \ string) substring (incf count))]\n      [else (how_many_times-helper (rest string)\
    \ substring (+ count 1))]))\n  (how_many_times-helper string substring 0))\n",
  "  (let loop ((i 0)\n             (count 0))\n    (if (= i string-length)\n    \
    \    count\n        (loop (+ i 1)\n              (if (equal? (substring string)\
    \ (string-ref string i))\n                  (+ count 1)\n                  count))))))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (substring string) substring) (+\
    \ 1 (how_many_times (rest string) substring))]\n        [else (+ (how_many_times\
    \ (rest string) substring) (how_many_times (rest string) substring))]))\n", " \
    \ (cond\n    [(empty? string) 0]\n    [(equal? (substring string) (string-ref\
    \ string 0)) 1]\n    [else (+ 1 (how_many_times (string->list string) (substring\
    \ string)))]))\n", "  (let loop ((count 0) (index 0))\n    (if (string-empty?\
    \ string)\n        count\n        (loop (+ count (substring-count string index\
    \ substring)) (substring-index string index substring))))))\n", "  (cond\n   \
    \ [(empty? string) 0]\n    [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n    [else (how_many_times (rest string) (append\
    \ substring (string)))]))\n", "  (cond [(empty? string) 0]\n        [(equal? (substring\
    \ string) (string-ref string 0)) 1]\n        [else (+ 1 (how_many_times (string->list\
    \ string) (substring string)))]))\n", "  (define (how_many_times-helper string\
    \ substring i count)\n    (cond ((null? string) count)\n          ((eq? substring\
    \ (car string)) (how_many_times-helper (cdr string) substring (+ i 1) (+ count\
    \ 1)))\n          (else (how_many_times-helper (cdr string) substring (+ i 1)\
    \ count))))\n  (how_many_times-helper string substring 0 0))\n", "  (cond [(empty?\
    \ string) 0]\n        [(equal? (substring string) (string-ref string 0)) 1]\n\
    \        [else (+ 1 (how_many_times (string->list string) (substring string)))]))\n",
  "  (define (how_many_times-helper string substring i count)\n    (cond [(empty?\
    \ string) count]\n          [(equal? substring (car string)) (how_many_times-helper\
    \ (cdr string) substring (i + 1) (+ count 1))]\n          [else (how_many_times-helper\
    \ (cdr string) substring (i + 1) count)]\n          ))\n  (how_many_times-helper\
    \ string substring 0 0))\n", "  (let loop ((i 0)\n             (count 0))\n  \
    \  (cond\n      [(empty? string) count]\n      [(equal? (substring string) (string-ref\
    \ string i)) (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) (+ count 1))])))\n",
  "  (let loop ((i 0)\n             (count 0))\n    (cond ((null? string) count)\n\
    \          ((eq? (substring string) (string-ref string i)) (loop (+ i 1) (+ count\
    \ 1)))\n          (else (loop (+ i 1) count))))\n)\n", "  (let loop ((i 0)\n \
    \            (count 0))\n    (cond ((eq? i string) count)\n          ((eq? (string-ref\
    \ string i) substring) (loop (+ i 1) (+ count 1)))\n          (else (loop (+ i\
    \ 1) count))))\n)\n", "  (let loop ((count 0) (index 0))\n    (if (string-equal?\
    \ string \"\")\n        count\n        (loop (+ count (substring-count string\
    \ index substring)) (+ index 1)))))\n", "  (cond\n    [(empty? string) 0]\n  \
    \  [(equal? (first string) substring) (+ 1 (how_many_times (rest string) substring))]\n\
    \    [else (+ (how_many_times (rest string) substring) (how_many_times (first\
    \ string) substring))]))\n", "  (let loop ((count 0) (index 0))\n    (if (= index\
    \ string-length)\n        count\n        (loop (+ count (substring-count string\
    \ substring index))\n              (+ index 1)))))\n", "  (cond\n    [(empty?\
    \ string) 0]\n    [(equal? (first string) substring) 1]\n    [else (+ 1 (how_many_times\
    \ (rest string) substring))]))\n", "  (cond\n    [(empty? string) 0]\n    [(equal?\
    \ (first string) substring) 1])\n  (+ (how_many_times (rest string) substring)\
    \ (how_many_times string substring)))\n", "  (cond [(empty? string) 0]\n     \
    \   [(equal? (first string) substring) (+ 1 (how_many_times (rest string) substring))]\n\
    \        [else (+ 1 (how_many_times (rest string) (first string)))]))\n", "  (cond\n\
    \    [(empty? string) 0]\n    [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n    [else (how_many_times (rest string) (substring\
    \ string))]))\n", "  (cond [(empty? string) 0]\n        [(equal? (substring string)\
    \ (string-ref string 0)) 1]\n        [else (+ 1 (how_many_times (string->list\
    \ string) (substring string)))]))\n", "  (define (helper string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(equal? (first string) substring)\
    \ (helper (rest string) substring (inc count))]\n      [else (helper (rest string)\
    \ substring (+ count 1))]))\n  (helper string substring 0))\n", "  (let loop ((i\
    \ 0)\n             (count 0))\n    (if (string-empty? string)\n        count\n\
    \        (loop (+ i 1)\n              (if (equal? (substring string) (string-ref\
    \ string i))\n                  (+ count 1)\n                  count))))))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (substring string) substring) (+\
    \ 1 (how_many_times (rest string) substring))]\n        [else (+ (how_many_times\
    \ (rest string) substring) (how_many_times (rest string) substring))]))\n", " \
    \ (define (how_many-times string substring count)\n    (cond ((null? string) count)\n\
    \          ((equal? (substring string) substring) (how_many-times string (substring\
    \ string) (add1 count)))\n          (else (how_many-times string (substring string)\
    \ (add1 count)))))\n  (how_many-times string substring 0))\n", "  (cond [(empty?\
    \ string) 0]\n        [(equal? (first string) substring) 1]\n        [else (+\
    \ (how_many_times (rest string) substring) (how_many_times string (first string)))]))\n",
  "  (let loop ((i 0)\n             (count 0))\n    (if (string-empty? string)\n \
    \       count\n        (loop (+ i 1) (if (equal? (substring string) (string-ref\
    \ string i)) (+ count 1) count))))))\n", "  (cond [(empty? string) 0]\n      \
    \  [(equal? (substring string) (string-ref string 0)) 1]\n        [else (+ 1 (how_many_times\
    \ (string->list string) (substring string)))]))\n", "  (cond\n    [(empty? string)\
    \ 0]\n    [(equal? (first string) substring) (+ 1 (how_many_times (rest string)\
    \ substring))]\n    [else (+ (how_many_times (rest string) substring) (how_many_times\
    \ (first string) substring))]))\n", "  (cond [(empty? string) 0]\n        [(equal?\
    \ (substring string) (string-ref string 0)) 1]\n        [else (+ 1 (how_many_times\
    \ (string->list string) (substring string)))]))\n", "  (cond [(empty? string)\
    \ 0]\n        [(equal? (first string) substring) (+ 1 (how_many_times (rest string)\
    \ substring))]\n        [else (+ 1 (how_many_times (rest string) substring))]))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (substring string) (string-ref string\
    \ 0)) 1]\n        [else (+ (how_many_times (string->list string) (substring string))\n\
    \                (how_many_times (string->list string) (substring string)))]))\n",
  "  (let ((count 0))\n    (loop for i from 0 to (string-length string)\n        \
    \  for j from 0 to (string-length substring)\n          when (string= (string-ref\
    \ string i) (string-ref substring j))\n          do (set! count (incf count))\n\
    \          finally (return count))\n  )\n)\n", "  (cond\n    [(empty? string)\
    \ 0]\n    [(equal? (first string) substring) 1]\n    [else (+ (how_many_times\
    \ (rest string) substring) (how_many_times string (first string)))]))\n", "  (define\
    \ (how_many_times-helper string substring i count)\n    (cond ((null? string)\
    \ count)\n          ((equal? (char-code (car string)) (char-code (car substring)))\
    \ (how_many_times-helper (cdr string) substring (i + 1) (+ count 1)))\n      \
    \    (else (how_many_times-helper (cdr string) substring (i + 1) count))))\n \
    \ (how_many_times-helper string substring 0 0))\n", "  (cond [(empty? string)\
    \ 0]\n        [(equal? (first string) substring) 1]\n        [else (+ 1 (how_many_times\
    \ (rest string) substring))]))\n", "  (let loop ((i 0)\n             (count 0))\n\
    \    (cond\n      [(empty? string) count]\n      [(equal? (substring string) (string-ref\
    \ string i)) (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) (+ count 1))])))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (substring string) (string-ref string\
    \ 0)) 1]\n        [else (+ 1 (how_many_times (string->list string) (substring\
    \ string)))]))\n", "  (let ((count 0))\n    (loop for i from 0 to (string-length\
    \ string)\n          for j from 0 to (string-length substring)\n          when\
    \ (string=? (substring string j) (string-ref string i))\n          do (set! count\
    \ (incf count))\n          finally (return count))\n  )\n)\n", "  (cond [(empty?\
    \ string) 0]\n        [(equal? (substring string) substring) 1]\n        [else\
    \ (+ 1 (how_many_times (rest string) substring))]))\n", "  (cond\n    [(empty?\
    \ string) 0]\n    [(equal? (first string) substring) 1])\n  (+ (how_many_times\
    \ (rest string) substring) (how_many_times string substring)))\n", "  (let loop\
    \ ((count 0) (string string) (substring substring))\n    (if (equal? string \"\
    \")\n        count\n        (loop (+ count (count (equal? (substring string) substring)))\
    \ (substring string) (substring (string-tail string))))))\n", "  (cond [(empty?\
    \ string) 0]\n        [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n        [else (+ 1 (how_many_times (rest string)\
    \ (first string)))]))\n", "  (let ((count 0))\n    (loop for i from 0 to (string-length\
    \ string)\n          for j from 0 to (string-length substring)\n          when\
    \ (string= (string-ref string i) (string-ref substring j))\n          do (incf\
    \ count)\n          finally (return count))))\n", "  (let loop ((i 0)\n      \
    \       (count 0))\n    (cond ((null? string) count)\n          ((eq? (car string)\
    \ substring) (loop (+ i 1) (+ count 1)))\n          ((eq? (car string) (substring\
    \ i)) (loop (+ i 1) count))\n          (else (loop (+ i 1) count))))))\n", " \
    \ (cond\n    [(empty? string) 0]\n    [(equal? (first string) substring) 1])\n\
    \  (+ (how_many_times (rest string) substring) (how_many_times (rest string) substring)))\n",
  "  (define (how_many_times-helper string substring index count)\n    (cond ((null?\
    \ string) count)\n          ((eq? substring (car string)) (how_many_times-helper\
    \ (cdr string) substring index (+ count 1)))\n          (else (how_many_times-helper\
    \ (cdr string) substring index (+ count 0)))))\n  (how_many_times-helper string\
    \ substring 0 0))\n", "  (let loop ((i 0)\n             (count 0))\n    (if (string?\
    \ string)\n        (if (equal? string substring)\n            (add1 count)\n \
    \           (loop (+ i 1) (add1 count)))\n        (loop (+ i 1) count))))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (substring string) substring) (+\
    \ 1 (how_many_times (rest string) substring))]\n        [else (+ 1 (how_many_times\
    \ (rest string) substring))]))\n", "  (let ((count 0))\n    (for ((i 0 (+ i 1)))\
    \ (\n      (when (eqv? substring (string-ref string i))\n        (set! count (+\
    \ count 1))\n        (break))\n      (when (eqv? (string-ref string i) substring)\n\
    \        (set! count (+ count 1))\n        (break))))\n  count)\n", "  (let loop\
    \ ((count 0) (index 0) (substring substring))\n    (if (string? substring)\n \
    \       (if (equal? substring \"\")\n            count\n            (loop (+ count\
    \ 1) (+ index 1) (substring (reverse substring))))\n        (loop (+ count 1)\
    \ index substring))\n    count))\n", "  (cond\n    [(empty? string) 0]\n    [(equal?\
    \ (first string) substring) (+ 1 (how_many_times (rest string) substring))]\n\
    \    [else (+ (how_many_times (rest string) substring) (how_many_times (first\
    \ string) substring))]))\n", "  (define (how_many_times-helper string substring\
    \ count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string)\
    \ substring) (how_many_times-helper (rest string) substring (inc count))]\n  \
    \    [else (how_many_times-helper (rest string) substring (+ count 1))]))\n  (how_many_times-helper\
    \ string substring 0))\n", "  (define (how_many_times-helper string substring\
    \ count)\n    (cond [(empty? string) count]\n          [(equal? (first string)\
    \ substring) (how_many_times-helper (rest string) substring (+ count 1))]\n  \
    \        [else (how_many_times-helper (rest string) substring (+ count 1))]))\n\
    \  (how_many_times-helper string substring 0))\n", "  (let ((count 0))\n    (for\
    \ ((i (in-range 0 (string-length string)))\n          (j (in-range 0 (string-length\
    \ substring)))\n          (j (in-range 0 (string-length substring))))\n      (when\
    \ (equal? (substring string i j) substring)\n        (set! count (add1 count)))))\n\
    \  count)\n", "  (let loop ((i 0)\n             (count 0))\n    (cond\n      [(empty?\
    \ string) count]\n      [(equal? (substring string) (string-ref string i)) (loop\
    \ (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) (+ count 1))])))\n", "  (cond\n\
    \    [(empty? string) 0]\n    [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n    [else (+ 1 (how_many_times (rest string) substring))]))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (substring string) (string-ref string\
    \ 0)) 1]\n        [else (+ 1 (how_many_times (string->list string) (substring\
    \ string)))]))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (first string)\
    \ substring) (+ 1 (how_many_times (rest string) substring))]\n    [else (+ 1 (how_many_times\
    \ (rest string) substring))]))\n", "  (cond\n    [(empty? string) 0]\n    [(equal?\
    \ (first string) substring) 1]\n    [else (+ 1 (how_many_times (rest string) substring))]))\n",
  "  (let ((count 0))\n    (for-each (lambda (c)\n                (when (string=?\
    \ c substring)\n                  (set! count (add1 count))))\n              string)))\n",
  "  (let ((count 0))\n    (loop for i from 0 to (string-length string)\n        \
    \  for j from 0 to (string-length substring)\n          when (string= (string-ref\
    \ string i) (string-ref substring j))\n          do (incf count)\n          finally\
    \ (return count))))\n", "  (let ((count 0))\n    (for-each (lambda (c)\n     \
    \           (when (string=? c substring)\n                  (set! count (add1\
    \ count)))\n                (c))\n              string))\n  count)\n", "  (cond\n\
    \    [(empty? string) 0]\n    [(equal? (substring string) (string-ref string 0))\
    \ 1]\n    [else (+ 1 (how_many_times (string->list string) (substring string)))]))\n",
  "  (cond\n    [(empty? string) 0]\n    [(equal? (substring string) \"\") 0]\n  \
    \  [else (+ 1 (how_many_times (substring string) (substring string)))]))\n", " \
    \ (let loop ((i 0)\n             (count 0))\n    (if (string-empty? string)\n\
    \        count\n        (loop (+ i 1)\n              (if (equal? substring (string-ref\
    \ string i))\n                  (+ count 1)\n                  count))))))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (substring string) substring) (+\
    \ 1 (how_many_times (rest string) substring))]\n        [else (+ 1 (how_many_times\
    \ (rest string) (substring string)))]))\n", "  (cond\n    [(empty? string) 0]\n\
    \    [(equal? (first string) substring) (+ 1 (how_many_times (rest string) substring))]\n\
    \    [else (how_many_times (rest string) (append substring (string)))]))\n", " \
    \ (let ((count 0))\n    (for-each (lambda (c)\n                (when (string=?\
    \ c substring)\n                  (set! count (+ count 1)))\n                )\n\
    \              string\n              )\n    count\n    )\n  )\n", "  (cond\n \
    \   [(empty? string) 0]\n    [(equal? (first string) substring) 1]\n    [else\
    \ (+ (how_many_times (rest string) substring) (how_many_times (first string) substring))]))\n",
  "  (cond\n    [(empty? string) 0]\n    [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n    [else (+ (how_many_times (rest string) substring)\
    \ (how_many_times (first string) substring))]))\n", "  (cond [(empty? string)\
    \ 0]\n        [(equal? (substring string) (string-ref string 0)) 1]\n        [else\
    \ (+ 1 (how_many_times (string->list string) (substring string)))]))\n", "  (define\
    \ (how_many_times-helper string substring count)\n    (cond\n      [(empty? string)\
    \ count]\n      [(equal? (first string) substring) (how_many_times-helper (rest\
    \ string) substring (+ count 1))]\n      [else (how_many_times-helper (rest string)\
    \ substring (+ count 1))]))\n  (how_many_times-helper string substring 0))\n",
  "  (let ((count 0))\n    (for-each (lambda (c)\n                (if (equal? c substring)\n\
    \                    (set! count (add1 count))\n                    count))\n\
    \              string))\n  count)\n", "  (cond [(empty? string) 0]\n        [(equal?\
    \ (substring string) (string-ref string 0)) 1]\n        [else (+ 1 (how_many_times\
    \ (string->list string) (substring string)))]))\n", "  (cond [(empty? string)\
    \ 0]\n        [(equal? (substring string) (string-ref string 0)) 1]\n        [else\
    \ (+ 1 (how_many_times (string->list string) (substring string)))]))\n", "  (cond\
    \ [(empty? string) 0]\n        [(equal? (substring string) (string-ref string\
    \ 0)) 1]\n        [else (+ 1 (how_many_times (string->list string) (substring\
    \ string)))]))\n", "  (cond [(empty? string) 0]\n        [(equal? (first string)\
    \ substring) (+ 1 (how_many_times (rest string) substring))]\n        [else (+\
    \ 1 (how_many_times (rest string) substring))]))\n", "  (let ((count 0))\n   \
    \ (for-each (lambda (c)\n                (when (string=? c substring)\n      \
    \            (set! count (add1 count))))\n              string)))\n", "  (let\
    \ ((count 0))\n    (for-each (lambda (c)\n                (when (string=? c substring)\n\
    \                  (set! count (+ count 1)))\n                (when (string=?\
    \ (string-append c substring) substring)\n                  (set! count (+ count\
    \ 1)))\n                (when (string=? (string-append c substring) (string-append\
    \ substring c))\n                  (set! count (+ count 1)))\n               \
    \ (when (string=? (string-append c substring) (string-append substring (string-append\
    \ c substring)))\n                  (set! count (+ count 1)))\n              \
    \  (when (string=? (string-append c substring) (string-append substring (string-append\
    \ c substring)))\n                  (set! count (+ count 1)))\n              \
    \  (when (string=? (string-append c substring) (string-append substring (string-append\
    \ c substring)))\n                  (set! count (+ count 1)))\n              \
    \  (when (string=? (string-append c substring) (string-append substring (string-append\
    \ c substring)))\n                  (set! count (+ count 1)))\n              \
    \  (when (string=? (string-append c substring) (string-append substring (string-append\
    \ c substring)))\n                  (set! count (+ count 1)))\n              \
    \  (when (string=? (string-append c substring) (string-append substring (string-append\
    \ c substring)))\n                  (set! count (+ count 1)))\n              \
    \  (when (string=? (string-append c substring) (string-append substring (string-append\
    \ c substring)))\n                  (set! count (+ count 1)))\n              \
    \  (when (string=? (string-append c substring) (string-append substring (string-append\
    \ c substring)))\n                  (set! count (+ count 1)))\n              \
    \  (when (string=? (string-append c substring) (string-append substring (string-append\
    \ c substring)))\n                  (set! count (+ count 1)))\n              \
    \  (when (string=? (string-append c substring) (string-append substring (string-append\
    \ c substring)))\n                  (set! count (+ count 1)))\n              \
    \  (when (string=? (string-append c substring) (string-append substring (string-append\
    \ c substring)))\n                  (set! count (+ count 1)))\n              \
    \  (when (string=? (string-append c substring) (string-append substring (string-append\
    \ c substring)))\n                  (set! count (+ count 1)))\n              \
    \  (when (string=? (string-append c substring) (string-append substring (string-append\
    \ c substring)))\n                  (set! count (+ ", "  (let loop ((count 0)\
    \ (index 0))\n    (if (= index string-length)\n        count\n        (loop (+\
    \ count (substring-count string index substring)) (+ index 1)))))\n", "  (define\
    \ (how_many_times-helper string substring count)\n    (cond [(empty? string) count]\n\
    \          [(equal? (first string) substring) (how_many_times-helper (rest string)\
    \ substring (+ count 1))]\n          [else (how_many_times-helper (rest string)\
    \ substring (+ count 1))]))\n  (how_many_times-helper string substring 0))\n",
  "  (define (helper string substring count)\n    (cond [(empty? string) count]\n\
    \          [(equal? (first string) substring) (helper (rest string) substring\
    \ (+ count 1))]\n          [else (helper (rest string) substring (+ count 1))]))\n\
    \  (helper string substring 0))\n", "  (cond [(empty? string) 0]\n        [(equal?\
    \ (substring string) substring) (+ 1 (how_many_times (rest string) substring))]\n\
    \        [else (+ 1 (how_many_times (rest string) (substring string)))]))\n",
  "  (let ((count 0))\n    (for-each (lambda (c)\n                (when (string=?\
    \ c substring)\n                  (set! count (add1 count)))))\n    count))\n",
  "  (let loop ((count 0) (index 0))\n    (if (= index string-length)\n        count\n\
    \        (loop (+ count (substring-count string index substring)) (+ index 1)))))\n",
  "  (define (how_many_times-helper string substring count)\n    (cond [(empty? string)\
    \ count]\n          [(equal? (first string) substring) (how_many_times-helper\
    \ (rest string) substring (+ count 1))]\n          [else (how_many_times-helper\
    \ (rest string) substring (+ count 1))]))\n  (how_many_times-helper string substring\
    \ 0))\n", "  (cond [(empty? string) 0]\n        [(equal? (first string) substring)\
    \ (+ 1 (how_many_times (rest string) substring))]\n        [else (+ (how_many_times\
    \ (rest string) substring) (how_many_times (first string) substring))]))\n", " \
    \ (cond\n    [(empty? string) 0]\n    [(equal? (substring string) (string-ref\
    \ string 0)) 1]\n    [else (+ 1 (how_many_times (string->list string) (substring\
    \ string)))]))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (first string)\
    \ substring) 1]\n    [else (+ (how_many_times (rest string) substring) (how_many_times\
    \ (first string) substring))]))\n", "  (cond [(empty? string) 0]\n        [(equal?\
    \ (first string) substring) (+ 1 (how_many_times (rest string) substring))]\n\
    \        [else (+ (how_many_times (rest string) substring) (how_many_times (first\
    \ string) substring))]))\n", "  (cond [(empty? string) 0]\n        [(equal? (substring\
    \ string) (string-ref string 0)) 1]\n        [else (+ (how_many_times (string->list\
    \ string) (substring string)) 1)]))\n", "  (cond [(empty? string) 0]\n       \
    \ [(equal? (substring string) (string-ref string 0)) 1]\n        [else (+ 1 (how_many_times\
    \ (string->list string) (substring string)))]))\n", "  (let ((count 0))\n    (for-each\
    \ (lambda (c)\n                (if (string=? c substring)\n                  \
    \  (set! count (add1 count))\n                    (set! count 0))\n          \
    \    (string-length string))\n              string)))\n", "  (let loop ((count\
    \ 0) (index 0))\n    (cond\n      [(empty? string) count]\n      [(equal? (substring\
    \ string) (string-ref string index)) (loop (add1 count) (add1 index))\n      \
    \ (loop (add1 count) (add1 index))]\n      [else (loop (add1 count) (add1 index))]))))\n",
  "  (cond\n    [(empty? string) 0]\n    [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n    [else (+ 1 (how_many_times (rest string) substring))]))\n",
  "  (let loop ((i 0)\n             (count 0))\n    (if (string-empty? string)\n \
    \       count\n        (loop (+ i 1)\n              (if (equal? (substring string)\
    \ (string-ref string i))\n                  (+ count 1)\n                  count))))))\n",
  "  (define (how_many_times-helper string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(equal? (first string) substring) (how_many_times-helper\
    \ (rest string) substring (+ count 1))]\n      [else (how_many_times-helper (rest\
    \ string) substring (+ count 1))]))\n  (how_many_times-helper string substring\
    \ 0))\n", "  (cond [(empty? string) 0]\n        [(equal? (substring string) substring)\
    \ 1]\n        [else (+ 1 (how_many_times (substring string) (substring string)))]))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (substring string) (string-ref string\
    \ 0)) 1]\n        [else (+ 1 (how_many_times (string->list string) (substring\
    \ string)))]))\n", "  (cond [(empty? string) 0]\n        [(equal? (first string)\
    \ substring) (+ 1 (how_many_times (rest string) substring))]\n        [else (+\
    \ (how_many_times (rest string) substring) (how_many_times (first string) substring))]))\n",
  "  (let ((count 0))\n    (for-each (lambda (c)\n                (when (string=?\
    \ c substring)\n                  (set! count (add1 count)))))\n    count))\n",
  "  (let loop ((count 0) (string string) (substring substring))\n    (cond ((null?\
    \ string) count)\n          ((eq? (car string) substring) (loop (+ count 1) (cdr\
    \ string) substring))\n          (else (loop (+ count 1) (cdr string) substring)))))\n",
  "  (let ((count 0))\n    (for-each (lambda (c)\n                (when (string=?\
    \ c substring)\n                  (set! count (add1 count)))))\n    count))\n",
  "  (let loop ((i 0) (count 0))\n    (if (string-empty? string)\n        count\n\
    \        (loop (+ i 1) (if (equal? (substring string) (string-ref string i)) (+\
    \ count 1) count))))))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (substring\
    \ string) (string-ref string 0)) 1])\n  (+ (how_many_times (substring string)\
    \ (substring string)) (how_many_times (substring string) (substring string))))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (substring string) (string-ref string\
    \ 0)) 1]\n        [else (+ 1 (how_many_times (string->list string) (substring\
    \ string)))]))\n", "  (cond [(empty? string) 0]\n        [(equal? (substring string)\
    \ (string-ref string 0)) 1]\n        [else (+ 1 (how_many_times (string->list\
    \ string) (substring string)))]))\n", "  (define (how_many_times-helper string\
    \ substring i count)\n    (cond ((null? string) count)\n          ((eq? substring\
    \ (car string)) (how_many_times-helper string (cdr string) i (+ count 1)))\n \
    \         (else (how_many_times-helper (cdr string) substring (+ i 1) count))))\n\
    \  (how_many_times-helper string substring 0 0))\n", "  (cond [(empty? string)\
    \ 0]\n        [(equal? (substring string) (string-ref string 0)) 1]\n        [else\
    \ (+ 1 (how_many_times (string->list string) (substring string)))]))\n", "  (let\
    \ loop ((i 0)\n             (count 0))\n    (cond ((null? string) count)\n   \
    \       ((eqv? (char-code (char string i)) (char-code (char substring 0))) (loop\
    \ (+ i 1) (+ count 1)))\n          ((eqv? (char-code (char string i)) (char-code\
    \ (char substring 1))) (loop (+ i 1) count))\n          (else (loop (+ i 1) count))))\n\
    )\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (substring string) (string-ref\
    \ string 0)) 1]\n    [else (+ 1 (how_many_times (string->list string) (substring\
    \ string)))]))\n", "  (let loop ((i 0)\n             (count 0))\n    (if (string-empty?\
    \ string)\n        count\n        (loop (+ i 1)\n              (if (equal? (substring\
    \ string) (string-ref string i))\n                  (+ count 1)\n            \
    \      count))))))\n", "  (cond [(empty? string) 0]\n        [(equal? (substring\
    \ string) substring) (+ 1 (how_many_times (rest string) substring))]\n       \
    \ [else (+ (how_many_times (rest string) substring) (how_many_times (rest string)\
    \ (substring string)))]))\n", "  (cond [(empty? string) 0]\n        [(equal? (substring\
    \ string) (string-ref string 0)) 1]\n        [else (+ 1 (how_many_times (string->list\
    \ string) (substring string)))]))\n", "  (let ((count 0))\n    (loop for i from\
    \ 0 to (string-length string)\n          for j from 0 to (string-length substring)\n\
    \          when (string= (string-ref string i) (string-ref substring j))\n   \
    \       do (set! count (incf count))\n          finally (return count))\n  )\n\
    )\n", "  (cond [(empty? string) 0]\n        [(equal? (first string) substring)\
    \ 1]\n        [else (+ (how_many_times (rest string) substring) (how_many_times\
    \ string (first string)))]))\n", "  (define (how_many string substring i count)\n\
    \    (if (eq? string \"\")\n        count\n        (if (eq? substring \"\")\n\
    \            (how_many (string-ref string i) substring (i+ count) count)\n   \
    \         (how_many (string-ref string i) substring (+ i 1) (+ count 1)))))\n\
    \  (how_many string substring 0 0))\n", "  (cond [(empty? string) 0]\n       \
    \ [(equal? (first string) substring) (+ 1 (how_many_times (rest string) substring))]\n\
    \        [else (+ (how_many_times (rest string) substring) (how_many_times (first\
    \ string) substring))]))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (first\
    \ string) substring) 1]\n    [else (+ (how_many_times (rest string) substring)\
    \ (how_many_times string substring))]))\n", "  (define (how_many_times-helper\
    \ string substring count)\n    (cond [(empty? string) count]\n          [(equal?\
    \ (first string) substring) (how_many_times-helper (rest string) substring (+\
    \ count 1))]\n          [else (how_many_times-helper (rest string) substring (+\
    \ count 1))]))\n  (how_many_times-helper string substring 0))\n", "  (let ((count\
    \ 0))\n    (loop for i from 0 to (string-length string)\n          for j from\
    \ 0 to (string-length substring)\n          when (string=? (substring i j) string)\n\
    \          do (set! count (incf count))\n          finally (return count))\n \
    \   count))\n", "  (cond [(empty? string) 0]\n        [(equal? (substring string)\
    \ (string-ref string 0)) 1]\n        [else (+ 1 (how_many_times (string->list\
    \ string) (substring string)))]))\n", "  (let ((count 0))\n    (loop for i from\
    \ 0 to (string-length string)\n          for j from 0 to (string-length substring)\n\
    \          when (string= (string-ref string i) (string-ref substring j))\n   \
    \       do (set! count (incf count))\n          finally (return count))\n  )\n\
    )\n", "  (let ((count 0))\n    (for-each (lambda (c)\n                (when (string=?\
    \ c substring)\n                  (set! count (add1 count))))\n              string)))\n",
  "  (define (how_many_times-helper string substring count)\n    (cond [(empty? string)\
    \ count]\n          [(equal? (first string) substring) (how_many_times-helper\
    \ (rest string) substring (+ count 1))]\n          [else (how_many_times-helper\
    \ (rest string) substring (+ count 1))]))\n  (how_many_times-helper string substring\
    \ 0))\n", "  (cond [(empty? string) 0]\n        [(equal? (substring string) (string-ref\
    \ string 0)) 1]\n        [else (+ 1 (how_many_times (string->list string) (substring\
    \ string)))]))\n", "  (let loop ((i 0)\n             (count 0))\n    (cond ((null?\
    \ string) count)\n          ((eq? (substring string) (string-ref string i)) (loop\
    \ (+ i 1) (+ count 1)))\n          (else (loop (+ i 1) count))))))\n", "  (cond\n\
    \    [(empty? string) 0]\n    [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n    [else (+ 1 (how_many_times (rest string) substring))]))\n",
  "  (let ((count 0))\n    (for-each (lambda (c)\n                (if (equal? c substring)\n\
    \                    (set! count (add1 count))\n                    (set! count\
    \ 0))\n              string)\n              (lambda (c)\n                (if (equal?\
    \ c substring)\n                    (set! count (add1 count))\n              \
    \      (set! count 0))\n              string)))\n  count)\n", "  (define (how_many_times-helper\
    \ string substring i count)\n    (cond\n      [(empty? string) count]\n      [(equal?\
    \ substring (car string)) (how_many_times-helper (cdr string) substring (+ i 1)\
    \ (+ count 1))]\n      [else (how_many_times-helper (cdr string) substring (+\
    \ i 1) count)]\n      ))\n  (how_many_times-helper string substring 0 0))\n",
  "  (let loop ((count 0) (index 0) (substring substring))\n    (if (eq? index 0)\n\
    \        (add1 count)\n        (loop (add1 count) (substring (substring index\
    \ 0))))))\n", "  (define (how_many_times-helper string substring count)\n    (if\
    \ (string-empty? string)\n        count\n        (how_many_times-helper (cdr string)\
    \ (substring (string-ref string 0)) (+ count 1))))\n  (how_many_times-helper string\
    \ substring 0))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (substring\
    \ string) (string-ref string 0)) 1]\n    [else (+ 1 (how_many_times (string->list\
    \ string) (substring string)))]))\n", "  (cond\n    [(empty? string) 0]\n    [(equal?\
    \ (first string) substring) (+ 1 (how_many_times (rest string) substring))]\n\
    \    [else (+ (how_many_times (rest string) substring) (how_many_times string\
    \ substring))]))\n", "  (define (count-overlapping-cases string substring)\n \
    \   (define (count-overlapping-cases-helper string substring index count)\n  \
    \    (cond\n        [(string-equal string substring) (+ count 1)]\n        [else\
    \ (count-overlapping-cases-helper\n                  (string-append string substring)\n\
    \                  (substring index)\n                  (+ index 1))]))\n    (count-overlapping-cases-helper\
    \ string substring 0 0))\n  (count-overlapping-cases string substring))\n", " \
    \ (define (how_many_times-helper string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(equal? (first string) substring) (how_many_times-helper\
    \ (rest string) substring (+ count 1))]\n      [else (how_many_times-helper (rest\
    \ string) substring (+ count 1))]))\n  (how_many_times-helper string substring\
    \ 0))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (first string) substring)\
    \ (+ 1 (how_many_times (rest string) substring))]\n    [else (+ (how_many_times\
    \ (rest string) substring) (how_many_times (first string) substring))]))\n", " \
    \ (cond\n    [(empty? string) 0]\n    [(equal? (substring string) \"\") 0]\n \
    \   [else (+ 1 (how_many_times (rest string) (substring string)))]))\n", "  (let\
    \ ((count 0))\n    (for-each (lambda (c)\n                (when (eq? c substring)\n\
    \                  (set! count (add1 count)))))\n    count))\n", "  (let loop\
    \ ((i 0)\n             (count 0))\n    (if (string-empty? string)\n        count\n\
    \        (loop (+ i 1)\n              (if (equal? (substring string) (string-ref\
    \ string i))\n                  (+ count 1)\n                  count))))))\n",
  "  (cond\n    [(empty? string) 0]\n    [(equal? (substring string) \"\") 0]\n  \
    \  [else (+ 1 (how_many_times (substring string) (substring string)))]))\n", " \
    \ (cond\n    [(empty? string) 0]\n    [(equal? (first string) substring) 1]\n\
    \    [else (+ 1 (how_many_times (rest string) substring))]))\n", "  (cond [(empty?\
    \ string) 0]\n        [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n        [else (+ (how_many_times (rest string) substring)\
    \ (how_many_times (first string) substring))]))\n", "  (let ((count 0))\n    (loop\
    \ for i from 0 to (string-length string)\n          for j from 0 to (string-length\
    \ substring)\n          if (string= (string-ref string i) (string-ref substring\
    \ j))\n          collect (+ count 1))\n    count))\n", "  (define (how_many substring\
    \ string)\n    (if (string-empty? string)\n        0\n        (if (string-equal?\
    \ substring (string-ref string 0))\n            (+ 1 (how_many substring (string-tail\
    \ string)))\n            (+ 1 (how_many substring (string-tail (string-tail string))))))\n\
    \  (how_many substring string))\n", "  (let loop ((count 0) (index 0))\n    (if\
    \ (string-match substring string)\n        (loop (+ count 1) index)\n        count)))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n        [else (+ (how_many_times (rest string) substring)\
    \ (how_many_times (first string) substring))]))\n", "  (let ((count 0))\n    (for-each\
    \ (lambda (c)\n                (if (equal? c substring)\n                    (set!\
    \ count (add1 count))\n                    (set! count 0))\n              (string-chars\
    \ string))\n              (string-chars string))\n    count))\n", "  (cond [(empty?\
    \ string) 0]\n        [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n        [else (+ (how_many_times (rest string) substring)\
    \ (how_many_times (first string) substring))]))\n", "  (cond\n    [(empty? string)\
    \ 0]\n    [(equal? (substring string) (string-ref string 0)) 1]\n    [else (+\
    \ 1 (how_many_times (string->list string) (substring string)))]))\n", "  (let\
    \ loop ((count 0) (index 0))\n    (if (string= string substring)\n        (add1\
    \ count)\n        (loop (add1 count) (add1 index))\n      )\n    )\n  )\n", " \
    \ (define (how_many_times-helper string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(equal? (first string) substring) (how_many_times-helper\
    \ (rest string) substring (inc count))]\n      [else (how_many_times-helper (rest\
    \ string) substring (inc count))]))\n  (how_many_times-helper string substring\
    \ 0))\n", "  (define (count-overlap string substring count)\n    (if (string-empty?\
    \ string)\n        count\n        (count-overlap (substring string) (substring\
    \ (string-ref string 0)) (add1 count))))\n  (count-overlap string substring 0))\n",
  "  (cond\n    [(empty? string) 0]\n    [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n    [else (+ (how_many_times (rest string) substring)\
    \ (how_many_times string substring))]))\n", "  (let loop ((count 0) (index 0)\
    \ (substring substring))\n    (if (= index 0)\n        count\n        (loop (+\
    \ count (substring-index string index)) (substring-index string index) (substring\
    \ substring)))))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (first string)\
    \ substring) 1]\n    [else (+ (how_many_times (rest string) substring) (how_many_times\
    \ string substring))]))\n", "  (define (how_many string substring count)\n   \
    \ (cond\n      [(empty? string) count]\n      [(equal? (first string) substring)\
    \ (how_many (rest string) substring (inc count))]\n      [else (how_many (rest\
    \ string) substring (+ count 1))]))\n  (how_many string substring 0))\n", "  (let\
    \ ((count 0))\n    (for-each (lambda (c)\n                (if (equal? c substring)\n\
    \                    (set! count (add1 count))\n                    (set! count\
    \ 0))\n              (string-length string))\n              (string-chars string))\n\
    \    count))\n", "  (let ((count 0))\n    (for-each (lambda (c)\n            \
    \    (if (string-equal? c substring)\n                    (set! count (add1 count))\n\
    \                    (set! count 0))\n              (string-length string))\n\
    \              (string-chars string))\n    count))\n", "  (let ((count 0))\n \
    \   (loop for i from 0 to (string-length string)\n          for j from 0 to (string-length\
    \ substring)\n          when (string=? (substring string j) (string-ref string\
    \ i))\n          do (incf count)\n          finally (return count))\n  )\n)\n",
  "  (let loop ((i 0)\n             (count 0))\n    (if (string-empty? string)\n \
    \       count\n        (loop (+ i 1)\n              (if (equal? (substring string)\
    \ (string-ref string i))\n                  (+ count 1)\n                  count))))))\n",
  "  (let ((count 0))\n    (loop for i from 0 to (string-length string)\n        \
    \  for j from 0 to (string-length substring)\n          when (string= (string-ref\
    \ string i) (string-ref substring j))\n          do (set! count (add1 count))\n\
    \          finally (return count))\n  )\n)\n", "  (cond\n    [(empty? string)\
    \ 0]\n    [(equal? (substring string) \"\") 0]\n    [else (+ 1 (how_many_times\
    \ (substring string) (substring string)))]))\n", "  (let loop ((i 0)\n       \
    \      (count 0))\n    (cond\n      [(empty? string) count]\n      [(equal? (substring\
    \ string) (string-ref string i)) (loop (+ i 1) (+ count 1))]\n      [else (loop\
    \ (+ i 1) (+ count 1))])))\n", "  (let ((count 0))\n    (loop for i from 0 to\
    \ (string-length string)\n          for j from 0 to (string-length substring)\n\
    \          when (string= (string-ref string i) (string-ref substring j))\n   \
    \       do (incf count)\n          finally (return count))\n  )\n)\n", "  (cond\n\
    \    [(empty? string) 0]\n    [(equal? (first string) substring) 1]\n    [else\
    \ (+ 1 (how_many_times (rest string) substring))]))\n", "  (let loop ((i 0)\n\
    \             (count 0))\n    (cond\n      [(empty? string) count]\n      [(equal?\
    \ (substring string) (string-ref string i)) (loop (+ i 1) (+ count 1))]\n    \
    \  [else (loop (+ i 1) (+ count 1))])))\n", "  (let ((count 0))\n    (for-each\
    \ (lambda (c)\n                (when (string-match substring c)\n            \
    \      (set! count (add1 count))))\n              string)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
