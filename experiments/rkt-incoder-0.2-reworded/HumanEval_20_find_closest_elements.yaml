name: HumanEval_20_find_closest_elements
language: rkt
prompt: "#lang racket\n\n;; From a supplied list of numbers (of length at least two)\
  \ select and return two that are the closest to each\n;; other and return them in\
  \ order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0\
  \ 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list\
  \ 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)\n(define (find_closest_elements numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_closest_elements))\n\
  \    (check-equal? (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2)) (list 3.9 4.0))\n\
  \    (check-equal? (candidate (list 1.0 2.0 5.9 4.0 5.0)) (list 5.0 5.9))\n    (check-equal?\
  \ (candidate (list 1.0 2.0 3.0 4.0 5.0 2.2)) (list 2.0 2.2))\n    (check-equal?\
  \ (candidate (list 1.0 2.0 3.0 4.0 5.0 2.0)) (list 2.0 2.0))\n    (check-equal?\
  \ (candidate (list 1.1 2.2 3.1 4.1 5.1)) (list 2.2 3.1))\n))\n\n(test-humaneval)"
completions: ["  (let ((smallest (car numbers))\n        (largest (car numbers)))\n\
    \    (if (null? numbers)\n        (list smallest largest)\n        (let ((smallest\
    \ (car numbers))\n              (largest (car numbers)))\n          (if (< (abs\
    \ (- smallest largest)) (abs (- largest smallest)))\n              (find_closest_elements\
    \ (cdr numbers))\n              (find_closest_elements (cdr numbers))))))))\n",
  "  (let ((smallest (car numbers))\n        (largest (car numbers)))\n    (if (null?\
    \ numbers)\n        (list smallest largest)\n        (let ((smallest (car numbers))\n\
    \              (largest (car numbers)))\n          (if (< (abs (- smallest largest))\
    \ (abs (- largest smallest)))\n              (find_closest_elements (cdr numbers))\n\
    \              (find_closest_elements (cdr numbers))))))))\n", "  (define (helper\
    \ numbers smallest-number largest-number)\n    (cond\n      [(empty? numbers)\
    \ (list smallest-number largest-number)]\n      [(< (first numbers) smallest-number)\
    \ \n       (helper (rest numbers) smallest-number (first numbers))]\n      [(>\
    \ (first numbers) largest-number) \n       (helper (rest numbers) (first numbers)\
    \ largest-number)]\n      [else (helper (rest numbers) (first numbers) largest-number)]))\n\
    \  (helper numbers #f #f))\n", "  (define (helper numbers smallest-number largest-number)\n\
    \    (cond [(null? numbers) (list smallest-number largest-number)]\n         \
    \ [(< (first numbers) smallest-number)\n           (helper (rest numbers) smallest-number\
    \ (first numbers))]\n          [(> (first numbers) largest-number)\n         \
    \  (helper (rest numbers) (first numbers) largest-number)]\n          [else (helper\
    \ (rest numbers) (first numbers) largest-number)]))\n  (helper numbers numbers\
    \ (first numbers)))\n", "  (let ((smallest (first numbers))\n        (largest\
    \ (first numbers)))\n    (if (null? numbers)\n        (list smallest largest)\n\
    \        (let ((smallest (min smallest numbers))\n              (largest (max\
    \ largest numbers)))\n          (if (< (abs (- smallest largest)) (abs (- largest\
    \ smallest)))\n              (list smallest largest)\n              (list largest\
    \ smallest)))))) ; <<< #lang racket\n", "  (let ((smallest (car numbers))\n  \
    \      (largest (car numbers)))\n    (if (null? numbers)\n        (list smallest\
    \ largest)\n        (let ((next (find_closest_elements (cdr numbers))))\n    \
    \      (if (< (car next) largest)\n              (list smallest largest)\n   \
    \           (list smallest largest)\n              (if (> (car next) smallest)\n\
    \                  (list smallest largest)\n                  (list smallest largest)\n\
    \                  (if (= (car next) largest)\n                      (list smallest\
    \ largest)\n                      (list smallest largest)\n                  \
    \    (if (= (car next) smallest)\n                          (list smallest largest)\n\
    \                          (list smallest largest)\n                         \
    \ (list smallest largest)\n                          (list smallest largest))\n\
    \                      (list smallest largest))))))))\n", "  (let ((smallest (car\
    \ numbers))\n        (largest (car numbers)))\n    (if (null? numbers)\n     \
    \   (list smallest largest)\n        (let ((smallest-diff (abs (- smallest largest)))\n\
    \              (largest-diff (abs (- largest smallest))))\n          (if (< smallest-diff\
    \ largest-diff)\n              (list smallest largest)\n              (list largest\
    \ smallest)))))\n", "  (let ((smallest (car numbers))\n        (largest (car numbers)))\n\
    \    (if (null? numbers)\n        (list smallest largest)\n        (let ((smallest-diff\
    \ (abs (- smallest largest)))\n              (largest-diff (abs (- largest smallest))))\n\
    \          (if (< smallest-diff largest-diff)\n              (list smallest largest)\n\
    \              (list largest smallest)))))\n", "  (let ((smallest (car numbers))\n\
    \        (largest (car numbers)))\n    (if (null? (cdr numbers))\n        (list\
    \ smallest largest)\n        (let ((smallest (car numbers))\n              (largest\
    \ (car numbers)))\n          (if (< (car numbers) largest)\n              (find_closest_elements\
    \ (cdr numbers))\n              (find_closest_elements (cdr (cons (car numbers)\
    \ numbers)))))))) ; <<< #lang racket\n", "  (let ((smallest (car numbers))\n \
    \       (largest (car numbers)))\n    (if (null? (cdr numbers))\n        (list\
    \ smallest largest)\n        (let ((smallest (car numbers))\n              (largest\
    \ (car numbers)))\n          (if (< (car numbers) largest)\n              (find_closest_elements\
    \ (cdr numbers))\n              (find_closest_elements (cdr numbers))))))))\n",
  "  (let ((smallest (car numbers))\n        (largest (car numbers)))\n    (if (null?\
    \ (cdr numbers))\n        (list smallest largest)\n        (let ((smallest (car\
    \ numbers))\n              (largest (car numbers)))\n          (if (< (car numbers)\
    \ largest)\n              (find_closest_elements (cdr numbers))\n            \
    \  (find_closest_elements (cdr numbers))))))))\n", "  (let ((smallest (car numbers))\n\
    \        (largest (car numbers)))\n    (if (null? numbers)\n        (list smallest\
    \ largest)\n        (let ((smallest (car numbers))\n              (largest (car\
    \ numbers)))\n          (if (< (abs (- smallest largest)) (abs (- largest smallest)))\n\
    \              (find_closest_elements (cdr numbers))\n              (find_closest_elements\
    \ (cdr numbers))))))))\n", "  (let ((smallest (car numbers))\n        (largest\
    \ (car numbers)))\n    (if (null? numbers)\n        (list smallest largest)\n\
    \        (let ((smallest (min smallest largest))\n              (largest (max\
    \ smallest largest)))\n          (if (< smallest largest)\n              (list\
    \ smallest largest)\n              (list largest smallest)))))\n  ", "  (let ((smallest\
    \ (car numbers))\n        (largest (car numbers)))\n    (if (null? (cdr numbers))\n\
    \        (list smallest largest)\n        (let ((smallest (min smallest largest))\n\
    \               (largest (max smallest largest)))\n          (if (< (abs (- smallest\
    \ largest)) (abs (- largest smallest)))\n              (list smallest largest)\n\
    \              (list smallest largest))))))\n", "  (let ((smallest (car numbers))\n\
    \        (largest (car numbers)))\n    (if (null? (cdr numbers))\n        (list\
    \ smallest largest)\n        (let ((smallest (min smallest largest))\n       \
    \       (largest (max smallest largest)))\n          (if (< smallest largest)\n\
    \              (list smallest largest)\n              (list largest smallest))))))\n",
  "  (let ((smallest (car numbers))\n        (largest (car numbers)))\n    (if (null?\
    \ numbers)\n        (list smallest largest)\n        (let ((smallest (min smallest\
    \ largest))\n               (largest (max smallest largest)))\n          (if (<\
    \ smallest largest)\n              (list smallest largest)\n              (list\
    \ largest smallest)))))\n  ", "  (define (helper numbers smallest-number largest-number)\n\
    \    (cond\n      [(null? numbers) (list smallest-number largest-number)]\n  \
    \    [(< (car numbers) largest-number) \n       (helper (cdr numbers) smallest-number\
    \ (car numbers))]\n      [(>= (car numbers) smallest-number) \n       (helper\
    \ (cdr numbers) (car numbers) largest-number)]\n      [else (helper (cdr numbers)\
    \ (car numbers) largest-number)]))\n  (helper numbers #f #f))\n", "  (define (helper\
    \ numbers smallest-number largest-number)\n    (cond [(null? numbers) (list smallest-number\
    \ largest-number)]\n          [(< (car numbers) largest-number) \n           (helper\
    \ (cdr numbers) smallest-number (car numbers))]\n          [(>= (car numbers)\
    \ smallest-number) \n           (helper (cdr numbers) (car numbers) largest-number)]\n\
    \          [else (helper (cdr numbers) (car numbers) largest-number)]))\n  (helper\
    \ numbers numbers (car numbers)))\n", "  (define (helper numbers result index)\n\
    \    (cond [(null? numbers) (list result)]\n          [(< (car numbers) (car result))\
    \ (helper (cdr numbers) result (+ index 1))]\n          [else (helper (cdr numbers)\
    \ (cdr result) (+ index 1))]))\n  (helper numbers nil 0))\n", "  (let ((smallest\
    \ (first numbers))\n        (largest (second numbers)))\n    (if (null? numbers)\n\
    \        (list smallest largest)\n        (let ((smallest (min smallest largest))\n\
    \              (largest (max smallest largest)))\n          (if (< smallest smallest\
    \ largest)\n              (list smallest largest)\n              (list smallest\
    \ largest))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
