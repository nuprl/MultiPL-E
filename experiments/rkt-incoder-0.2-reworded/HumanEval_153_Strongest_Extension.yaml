name: HumanEval_153_Strongest_Extension
language: rkt
prompt: "#lang racket\n\n;; You will be given the name of a class (a string) and a\
  \ list of extensions.\n;; The extensions are to be used to load additional classes\
  \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
  \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
  \ number of lowercase letters \n;; in the extension's name, the strength is given\
  \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
  \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there are\
  \ two or more extensions with the same strength, you should\n;; choose the one that\
  \ comes first in the list.\n;; For example, if you are given \"Slices\" as the class\
  \ and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then\
  \ you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest\
  \ extension \n;; (its strength is -1).\n;; Example:\n;; >>> (Strongest_Extension\
  \ \"my_class\" (list \"AA\" \"Be\" \"CC\"))\n;; \"my_class.AA\"\n(define (Strongest_Extension\
  \ class_name extensions)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
  \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
  \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
  \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
  \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
  \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\"\
  \ (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate\
  \ \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal?\
  \ (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"\
  -_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
  \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
  \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
  \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? extensions) (list class_name)]\n    [(equal?\
    \ (first extensions) (first extensions)) (cons class_name (Strongest_Extension\
    \ class_name (rest extensions)))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (let ((cap (length class_name)) (sm\
    \  (length class_name))) (set! cap 0 (set! sm 0) (set! strongest_extension \"\"\
    ) (set! strongest_extension_name \"\") (set! strongest_extension_strength 0))\n\
    \    (for ((i (length extensions))) (if (char-upper? (substring class_name 0 i))\
    \ (set! cap (+ cap (length extensions))) (set! sm (+ sm (length extensions))))\n\
    \    (for ((i (length extensions))) (if (char-lower? (substring class_name 0 i))\
    \ (set! sm  (+ sm (length extensions))) (set! cap (+ cap (length extensions))))\n\
    \    (if (> cap sm) (set! strongest_extension (substring class_name 0 cap)) (set!\
    \ strongest_extension (substring class_name 0 sm))) (set! strongest_extension\
    \ (substring strongest_extension 1 cap)) (set! strongest_extension (substring\
    \ strongest_extension 1 sm)) (set! strongest_extension (substring strongest_extension\
    \ 0 cap)) (set! strongest_extension (substring strongest_extension 0 sm)) (set!\
    \ strongest_extension_strength (- (char-upper? (substring class_name 0 cap)) (char-lower?\
    \ (substring class_name 0 sm)))))\n    (if (> strongest_extension_strength 0)\
    \ (set! strongest_extension_strength 0) (set! strongest_extension_strength (-\
    \ strongest_extension_strength 1))) (set! strongest_extension_strength (- strongest_extension_strength\
    \ 1)) (strongest_extension_name (strongest_extension_name (strongest_extension_name\
    \ (strongest_extension_name (strongest_extension_name (strongest_extension_name\
    \ (strongest_extension_name (strongest_extension_name (strongest_extension_name\
    \ (strongest_extension_name (strongest_extension_name (strongest_extension_name\
    \ (strongest_extension_name (strongest_extension_name (strongest_extension_name\
    \ (strongest_extension_name (strongest_extension_name (strongest_extension_name\
    \ (strongest_extension_name (strongest_extension_name (strongest_extension_name\
    \ (strongest_extension_name (strongest_extension_name (strongest_extension_name\
    \ (strongest_extension_name (strongest_extension_name (strongest_extension_name\
    \ (strongest_extension_name (strongest_", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (list class_name)]\n\
    \    [else (append (Strongest_Extension (first extensions) (rest extensions))\n\
    \                  (list class_name)\n                  (Strongest_Extension (first\
    \ extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (list class_name)]\n\
    \    [else (append (Strongest_Extension (first extensions) (rest extensions))\n\
    \                  (list class_name))]))\n", "  (cond\n    [(empty? extensions)\
    \ (error \"No extensions given\")]\n    [(equal? (first extensions) (first extensions))\
    \ (Strongest_Extension class_name (drop 1 extensions))]\n    [else (cons (first\
    \ extensions) (Strongest_Extension class_name (drop 1 extensions)))]))\n", " \
    \ (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension (first extensions) (rest extensions))]\n \
    \   [else (cons (first extensions) (Strongest_Extension (first extensions) (rest\
    \ extensions)))]))\n", "  (let ((cap (length class_name)) (sm  (length class_name)))\
    \ \n    (cond\n      [(= cap sm) (list class_name)]\n      [(= cap 1) (list class_name)]\n\
    \      [(= sm 1) (list class_name)]\n      [(< cap sm) (list class_name)]\n  \
    \    [(< sm 1) (list class_name)]\n      [else (let ((cap (length extensions)))\
    \ (let ((sm (length extensions))) (cond\n                                    [(=\
    \ cap sm) (list class_name)]\n                                    [(= cap 1) (list\
    \ class_name)]\n                                    [(= sm 1) (list class_name)]\n\
    \                                    [(< cap sm) (list class_name)]\n        \
    \                            [(< sm 1) (list class_name)]\n                  \
    \                  [else (let ((cap (length extensions))) (let ((sm (length extensions)))\
    \ (cond\n                                                          [(= cap sm)\
    \ (list class_name)]\n                                                       \
    \   [(= cap 1) (list class_name)]\n                                          \
    \                [(= sm 1) (list class_name)]\n                              \
    \                            [(< cap sm) (list class_name)]\n                \
    \                                          [(< sm 1) (list class_name)]\n    \
    \                                                      [else (let ((cap (length\
    \ extensions))) (let ((sm (length extensions))) (cond\n                      \
    \                                                                            \
    \  [(= cap sm) (list class_name)]\n                                          \
    \                                                          [(= cap 1) (list class_name)]\n\
    \                                                                            \
    \                        [(= sm 1) (list class_name)]\n                      \
    \                                                                            \
    \  [(< cap sm) (list class_name)]\n                                          \
    \                                                          [(< sm 1) (list class_name)]\n\
    \                                                                            \
    \                        [else (let ((cap (length extensions))) (let ((sm (length\
    \ extensions))) (cond\n                                                      \
    \                                                                            \
    \            [(= cap sm) (list class_name)]\n                                \
    \                                                                            \
    \                                  [(= cap 1) (list class_name)]\n           \
    \                                                                            \
    \                                                       [(= sm 1) (list class_name)]\n\
    \                                                                            \
    \                                                                  [(< cap sm)\
    \ (list class_name)]\n                                                       \
    \                                                                            \
    \           [(< sm 1) (list class_name)]\n                                   \
    \                                                                            \
    \                               [else (list class_name)]\n                   \
    \                                                                            \
    \                                               ))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) (format nil \"~a\" class_name)]\n    [(equal? (first\
    \ extensions) (first extensions)) (Strongest_Extension \n                    \
    \                                  (substring (second class_name) 0 \n       \
    \                                                       (length (first class_name))\
    \ \n                                                              extensions))]\n\
    \    [else (Strongest_Extension (substring (second class_name) 0 \n          \
    \                                (length (first class_name)) \n              \
    \                            extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ (list class_name)]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ (first extensions) (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (first extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (first extensions) (rest extensions))]\n    [else (Strongest_Extension (first\
    \ class_name) (cons (first extensions) (rest extensions)))]))\n", "  (cond\n \
    \   [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first extensions))\
    \ (Strongest_Extension class_name (drop 1 extensions))]\n    [else (cons (first\
    \ extensions) (Strongest_Extension class_name (drop 1 extensions)))]))\n", " \
    \ (cond\n    [(empty? extensions) (format nil \"~a\" class_name)]\n    [(equal?\
    \ (first extensions) (first extensions)) (Strongest_Extension (rest extensions)\
    \ (rest extensions))]\n    [else (Strongest_Extension (rest extensions) (append\
    \ (rest extensions) (list (first extensions))))]))\n", "  (cond\n    [(empty?\
    \ extensions) \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (tail extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (tail extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension class_name\
    \ (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (define (strength extension)\n    (string-length\
    \ extension))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (", "  (let ((cap (length class_name)))\n\
    \    (let ((sm (length extensions)))\n      (let ((strength (/ cap sm)))\n   \
    \     (cond\n          [(= strength 0) (error \"No extensions found\")]\n    \
    \      [(= strength 1) (cons class_name extensions)]\n          [else (let ((extension\
    \ (car extensions))\n                       (extensions (cdr extensions)))\n \
    \               (cond\n                  [(= (length extensions) 0) (error \"\
    No extensions found\")]\n                  [(= (length extensions) 1) (cons class_name\
    \ extension)]\n                  [else (let ((extension (car extensions))\n  \
    \                           (extensions (cdr extensions)))\n                 \
    \       (cond\n                          [(= (length extensions) 0) (error \"\
    No extensions found\")]\n                          [(= (length extensions) 1)\
    \ (cons class_name extension)]\n                          [else (let ((extension\
    \ (car extensions))\n                                       (extensions (cdr extensions)))\n\
    \                                (cond\n                                  [(=\
    \ (length extensions) 0) (error \"No extensions found\")]\n                  \
    \                [(= (length extensions) 1) (cons class_name extension)]\n   \
    \                               [else (let ((extension (car extensions))\n   \
    \                                          (extensions (cdr extensions)))\n  \
    \                                      (cond\n                               \
    \           [(= (length extensions) 0) (error \"No extensions found\")]\n    \
    \                                      [(= (length extensions) 1) (cons class_name\
    \ extension)]\n                                          [else (let ((extension\
    \ (car extensions))\n                                                     (extensions\
    \ (cdr extensions)))\n                                                (cond\n\
    \                                                  [(= (length extensions) 0)\
    \ (error \"No extensions found\")]\n                                         \
    \         [(= (length extensions) 1) (cons class_name extension)]\n          \
    \                                        [else (let ((extension (car extensions))\n\
    \                                                             (extensions (cdr\
    \ extensions)))\n                                                        (cond\n\
    \                                                          [(= (length extensions)\
    \ 0) (error \"No extensions found\")]\n                                      \
    \                    [(= (length extensions) 1) (cons class_name extension)]\n\
    \                                                          [else (let ((extension\
    \ (car extensions))\n                                                        \
    \             (extensions (cdr extensions)))\n                               \
    \                             (cond\n                                        \
    \                      [(= (length extensions) 0) (error \"No extensions found\"\
    )]\n                                                              [(= (length\
    \ extensions) 1) (cons class_name extension)]\n                              \
    \                                [else (let ((extension (car extensions))\n  \
    \                                                                       (extensions\
    \ (cdr extensions)))\n                                                       \
    \     (cond\n                                                              [(=\
    \ (length extensions) 0) (error \"No ", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension class_name\
    \ (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ (first extensions) (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (first extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (drop 1 extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (drop 1 extensions)))]))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (list class_name)]\n\
    \    [else (append (Strongest_Extension (first extensions) (rest extensions))\n\
    \                  (list class_name)\n                  )]))\n", "  (let ((cap\
    \ (length class_name)))\n    (let ((sm (length extensions)))\n      (cond\n  \
    \      ((= cap sm) (list class_name))\n        ((< cap sm) (list class_name extensions))\n\
    \        (else (let ((cap (- cap sm)))\n                  (let ((sm (- sm cap)))\n\
    \                    (cond\n                      ((= cap sm) (list class_name\
    \ extensions))\n                      ((< cap sm) (list class_name extensions))\n\
    \                      (else (let ((cap (- cap sm)))\n                       \
    \         (let ((sm (- sm cap)))\n                                  (cond\n  \
    \                                  ((= cap sm) (list class_name extensions))\n\
    \                                    ((< cap sm) (list class_name extensions))\n\
    \                                    (else (let ((cap (- cap sm)))\n         \
    \                                     (let ((sm (- sm cap)))\n               \
    \                                 (cond\n                                    \
    \              ((= cap sm) (list class_name extensions))\n                   \
    \                               ((< cap sm) (list class_name extensions))\n  \
    \                                                (else (list class_name extensions)))))))))))\n\
    \        ))))))\n", "  (cond\n    [(empty? extensions) (list class_name)]\n  \
    \  [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (first class_name)\
    \ (append (rest extensions) (list class_name)))]))\n", "  (cond\n    [(empty?\
    \ extensions) \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (drop 1 extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (drop 1 extensions)))]))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (list class_name)]\n\
    \    [else (append (Strongest_Extension (first extensions) (rest extensions))\n\
    \                  (list class_name)\n                  (Strongest_Extension (first\
    \ extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\
    \"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (drop 1 extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (drop 1 extensions)))]))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) class_name) (Strongest_Extension\
    \ (first extensions) (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (first extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (first extensions) (rest extensions))]\n    [else (Strongest_Extension (first\
    \ class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (list class_name)]\n\
    \    [else (append (Strongest_Extension (first extensions) (rest extensions))\n\
    \                  (list class_name))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (tail extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (tail extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension class_name\
    \ (tail extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (tail extensions)))]))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (list class_name)]\n\
    \    [else (append (Strongest_Extension (first extensions) (rest extensions))\n\
    \                  (list class_name)\n                  (Strongest_Extension (first\
    \ extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\
    \"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ (rest extensions) extensions)]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (rest extensions) extensions))]))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (list class_name)]\n\
    \    [else (cons (first extensions) (Strongest_Extension (rest extensions) extensions))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension class_name (rest extensions))]\n    [else\
    \ (cons (first extensions) (Strongest_Extension class_name (rest extensions)))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension class_name (rest extensions))]\n    [else\
    \ (cons (first extensions) (Strongest_Extension class_name (rest extensions)))]))\n",
  "  (cond\n    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ (first extensions)) (cons class_name (Strongest_Extension (rest extensions)\
    \ extensions))]\n    [else (cons (first extensions) (Strongest_Extension (rest\
    \ extensions) extensions))]))\n", "  (define (strength extension)\n    (string-length\
    \ extension))\n  (define (best_extension extensions)\n    (let ((best (first extensions)))\n\
    \      (if (null? extensions)\n          best\n          (if (> (strength extension)\
    \ \n                (strength best))\n              best\n              (best_extension\
    \ (rest extensions))))))\n  (best_extension (reverse extensions)))\n", "  (cond\n\
    \    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ class_name) (Strongest_Extension (first extensions) (rest extensions))]\n  \
    \  [else (Strongest_Extension (first extensions) (append (rest extensions) (list\
    \ (first extensions))))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first extensions)) (Strongest_Extension class_name (rest\
    \ extensions))]\n    [else (cons (first extensions) (Strongest_Extension class_name\
    \ (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first class_name)) (Strongest_Extension (first extensions)\
    \ (rest extensions))]\n    [else (Strongest_Extension (first class_name) (cons\
    \ (first extensions) (rest extensions)))]))\n", "  (let ((strength (/ (length\
    \ class_name) 2))\n        (extension (first extensions)))\n    (cond\n      [(empty?\
    \ extensions) (list class_name)]\n      [(equal? (first extensions) class_name)\n\
    \       (cond\n         [(< strength (/ (length extension) 2))\n          (list\
    \ class_name extension)]\n         [(> strength (/ (length extension) 2))\n  \
    \        (list extension (first extensions))])]\n      [else\n       (cond\n \
    \        [(< strength (/ (length extension) 2))\n          (list extension (first\
    \ extensions))]\n         [(> strength (/ (length extension) 2))\n          (list\
    \ class_name extension)]\n         [else\n          (list extension (first extensions))])]))))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension class_name (rest extensions))]\n    [else\
    \ (cons (first extensions) (Strongest_Extension class_name (rest extensions)))]))\n",
  "  (let ((cap (length class_name))\n        (sm (length class_name))\n        (strongest))\n\
    \    (for ([i (in-range (length extensions))])\n      (let ((ext (substring extensions\
    \ i 1)))\n        (if (string=? (substring ext 0 cap) (substring class_name 0\
    \ cap))\n            (set! strongest (cons ext strongest))\n            (set!\
    \ strongest (cons (substring ext 0 sm) (cons ext strongest)))))))\n", "  (cond\n\
    \    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ (first extensions)) (Strongest_Extension (first extensions) (rest extensions))]\n\
    \    [else (cons (first extensions) (Strongest_Extension (first extensions) (rest\
    \ extensions)))]))\n", "  (let ((strength (/ (length class_name) \n          \
    \          (length extensions))))\n    (cond\n      [(< strength 0) \"\"]\n  \
    \    [(< strength 1) (substring class_name 0 1)]\n      [(< strength 2) (substring\
    \ class_name 0 2)]\n      [(< strength 3) (substring class_name 0 3)]\n      [(<\
    \ strength 4) \n       (substring class_name 0 4)\n       (substring class_name\
    \ 1 1)]\n      [(< strength 5)\n       (substring class_name 0 5)\n       (substring\
    \ class_name 1 2)]\n      [(< strength 6)\n       (substring class_name 0 6)\n\
    \       (substring class_name 1 3)]\n      [(< strength 7)\n       (substring\
    \ class_name 0 7)\n       (substring class_name 1 4)]\n      [(< strength 8)\n\
    \       (substring class_name 0 8)\n       (substring class_name 1 5)]\n     \
    \ [(< strength 9)\n       (substring class_name 0 9)\n       (substring class_name\
    \ 1 6)]\n      [(< strength 10)\n       (substring class_name 0 10)\n       (substring\
    \ class_name 1 7)]\n      [(< strength 11)\n       (substring class_name 0 11)\n\
    \       (substring class_name 1 8)]\n      [(< strength 12)\n       (substring\
    \ class_name 0 12)\n       (substring class_name 1 9)]\n      [(< strength 13)\n\
    \       (substring class_name 0 13)\n       (substring class_name 1 10)]\n   \
    \   [(< strength 14)\n       (substring class_name 0 14)\n       (substring class_name\
    \ 1 11)]\n      [(< strength 15)\n       (substring class_name 0 15)\n       (substring\
    \ class_name 1 12)]\n      [(< strength 16)\n       (substring class_name 0 16)\n\
    \       (substring class_name 1 13)]\n      [(< strength 17)\n       (substring\
    \ class_name 0 17)\n       (substring class_name 1 14)]\n      [(< strength 18)\n\
    \       (substring class_name 0 18)\n       (substring class_name 1 15)]\n   \
    \   [(< strength 19)\n       (substring class_name 0 19)\n       (substring class_name\
    \ 1 16)]\n      [(< strength 20)\n       (substring class_name 0 20)\n       (substring\
    \ class_name 1 17)]\n      [(< strength 21)\n       (substring class_name 0 21)\n\
    \       (substring class_name 1 18)]\n      [(< strength 22)\n       (substring ",
  "  (let ((cap (length class_name)))\n    (let ((sm (length extensions)))\n     \
    \ (let ((strength (/ (- cap sm) (- cap sm))))\n        (if (< strength 0)\n  \
    \          (error \"Strongest_Extension: invalid extensions list\")\n        \
    \    (let ((extension (first extensions)))\n              (if (eqv? class_name\
    \ extension)\n                  (error \"Strongest_Extension: invalid extensions\
    \ list\")\n                  (list class_name extension (- strength 1)))))))))\n",
  "  (cond\n    [(empty? extensions) (format nil \"~a\" class_name)]\n    [(equal?\
    \ (first extensions) (first extensions)) (Strongest_Extension (rest extensions)\
    \ (rest extensions))]\n    [else (Strongest_Extension (rest extensions) (append\
    \ (list (first extensions)) (rest extensions)))]))\n", "  (cond\n    [(empty?\
    \ extensions) \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (first\
    \ extensions) (rest extensions))]\n    [else (Strongest_Extension (first class_name)\
    \ (append (rest extensions) (list class_name)))]))\n", "  (define (strength extension)\n\
    \    (string-length extension))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) \n     (cons (first extensions) (Strongest_Extension \n       \
    \                     (substring (second class_name) 0 \n                    \
    \                (length (second class_name))) \n                            (rest\
    \ extensions)))]\n    [else (cons (first extensions) (Strongest_Extension \n \
    \                                   (substring (second class_name) 0 \n      \
    \                                      (length (second class_name))) \n      \
    \                              (rest extensions)))]))\n", "  (cond\n    [(empty?\
    \ extensions) (list class_name)]\n    [(equal? (first extensions) (first extensions))\
    \ (list class_name)]\n    [else (append (Strongest_Extension (first extensions)\
    \ (rest extensions))\n                  (list class_name)\n                  (first\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) (list class_name)]\n\
    \    [(equal? (first extensions) (first extensions)) (list class_name)]\n    [else\
    \ (append (Strongest_Extension (first extensions) (rest extensions))\n       \
    \           (list class_name)\n                  (first extensions))]))\n", " \
    \ (cond\n    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ (first extensions)) (list class_name)]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension class_name\
    \ (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension (rest\
    \ extensions) (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (rest extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) (error\
    \ \"No extensions given\")]\n    [(equal? (first extensions) (first extensions))\
    \ (second extensions)]\n    [else (Strongest_Extension (first extensions) (append\
    \ (rest extensions) (list class_name))]))\n  )\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension class_name\
    \ (tail extensions))]\n    [else (Strongest_Extension class_name (append (list\
    \ extensions) (Strongest_Extension class_name (tail extensions))))]\n  ))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension class_name (rest extensions))]\n    [else\
    \ (cons (first extensions) (Strongest_Extension class_name (rest extensions)))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ (first extensions)) (list class_name)]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (first extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions)\
    \ (format nil \"~a\" class_name)]\n    [(equal? (first extensions) (first extensions))\
    \ (Strongest_Extension (rest extensions) (rest extensions))]\n    [else (Strongest_Extension\
    \ (first extensions) (append (rest extensions) (list (first extensions))))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension class_name (drop 1 extensions))]\n    [else\
    \ (cons (first extensions) (Strongest_Extension class_name (drop 1 extensions)))]))\n",
  "  (cond\n    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ (first extensions)) (Strongest_Extension (first extensions) (rest extensions))]\n\
    \    [else (cons (first extensions) (Strongest_Extension (first extensions) (rest\
    \ extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first extensions)) \n     (Strongest_Extension class_name\
    \ (drop 1 extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (drop 1 extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\
    \"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (define (strength extension)\n    (string-length\
    \ extension))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength :key (lambda\
    \ (extension) (length extension))))\n  (define (best_extension extensions)\n \
    \   (sort extensions strength :key (lambda (extension) (length extension) :ascending)))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength :key (lambda\
    \ (extension) (length extension) :descending)))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength :key (lambda (extension) (length extension) :ascending\
    \ :key (lambda (extension) (length extension))))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength :key (lambda (extension) (length extension) :descending\
    \ :key (lambda (extension) (length extension))))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength :key (lambda (extension) (length extension) :ascending\
    \ :key (lambda (extension) (length extension) :descending))))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength :key (lambda (extension) (length\
    \ extension) :descending :key (lambda (extension) (length extension) :ascending))))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength :key (lambda\
    \ (extension) (length extension) :ascending :key (lambda (extension) (length extension)\
    \ :descending))))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength :key (lambda (extension) (length extension) :descending :key (lambda\
    \ (extension) (length extension) :ascending))))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength :key (lambda (extension) (length extension) :ascending\
    \ :key (lambda (extension) (length extension) :descending))))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength :key (lambda (extension) (length\
    \ extension) :descending :key (lambda (extension) (length extension) :ascending))))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength :key (lambda\
    \ (extension) (length extension) :ascending :key (lambda (extension) (length extension)\
    \ :descending))))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength :key (lambda (extension) (length extension) :descending :key (lambda\
    \ (extension) (length extension) :ascending))))\n  (define (best_extension extensions)\n",
  "  (let ((cap (length class_name)) (sm  (length class_name))) (set! cap 0 (set!\
    \ sm 0))\n    (for ([i (in-range (length extensions))])\n      (if (string=? (substring\
    \ class_name 0 i) extensions[i])\n          (set! cap (+ cap (length extensions)))\n\
    \          (set! sm (+ sm (length extensions))))\n      (if (< cap sm)\n     \
    \     (set! cap sm)\n          (set! sm cap)\n          (set! cap 0)\n       \
    \   (set! sm 0))\n      (if (string=? (substring class_name 0 cap) (substring\
    \ extensions 0 sm))\n          (set! cap (+ cap (length extensions)))\n      \
    \    (set! sm (+ sm (length extensions))))\n      (if (< cap sm)\n          (set!\
    \ cap sm)\n          (set! sm cap)\n          (set! cap 0)\n          (set! sm\
    \ 0))\n      (if (string=? (substring class_name 0 cap) (substring extensions\
    \ 0 sm))\n          (set! cap (+ cap (length extensions)))\n          (set! sm\
    \ (+ sm (length extensions))))\n      (if (< cap sm)\n          (set! cap sm)\n\
    \          (set! sm cap)\n          (set! cap 0)\n          (set! sm 0))\n   \
    \   (if (string=? (substring class_name 0 cap) (substring extensions 0 sm))\n\
    \          (set! cap (+ cap (length extensions)))\n          (set! sm (+ sm (length\
    \ extensions))))\n      (if (< cap sm)\n          (set! cap sm)\n          (set!\
    \ sm cap)\n          (set! cap 0)\n          (set! sm 0))\n      (if (string=?\
    \ (substring class_name 0 cap) (substring extensions 0 sm))\n          (set! cap\
    \ (+ cap (length extensions)))\n          (set! sm (+ sm (length extensions))))\n\
    \      (if (< cap sm)\n          (set! cap sm)\n          (set! sm cap)\n    \
    \      (set! cap 0)\n          (set! sm 0))\n      (if (string=? (substring class_name\
    \ 0 cap) (substring extensions 0 sm))\n          (set! cap (+ cap (length extensions)))\n\
    \          (set! sm (+ sm (length extensions))))", "  (cond\n    [(empty? extensions)\
    \ (error \"No extensions given\")]\n    [(equal? (first extensions) (first extensions))\
    \ (cons class_name extensions)]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (first extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension class_name\
    \ (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (cons class_name\
    \ (Strongest_Extension (rest extensions) (rest extensions)))]\n    [else (cons\
    \ (first extensions) (Strongest_Extension (rest extensions) (rest extensions)))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension class_name (drop 1 extensions))]\n    [else\
    \ (cons (first extensions) (Strongest_Extension class_name (drop 1 extensions)))]))\n",
  "  (define (strength extension)\n    (string-length (string->symbol (string->string\
    \ extension))))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength ",
  "  (define (strength extension)\n    (string-length extension))\n  (define (best_extension\
    \ extensions)\n    (if (null? extensions)\n        '()\n        (let ((extension\
    \ (first extensions))\n              (strength (strength extension)))\n      \
    \    (if (> strength 0)\n              (cons extension best_extension)\n     \
    \         (cons extension extensions)))))\n  (define (best_extensions extensions)\n\
    \    (if (null? extensions)\n        '()\n        (let ((extension (first extensions))\n\
    \              (strength (strength extension)))\n          (if (> strength 0)\n\
    \              (cons extension best_extensions)\n              (cons extension\
    \ best_extension (best_extensions extensions))))))\n  (define (best_extensions_list\
    \ extensions)\n    (if (null? extensions)\n        '()\n        (let ((extension\
    \ (first extensions))\n              (strength (strength extension)))\n      \
    \    (if (> strength 0)\n              (cons extension best_extensions_list)\n\
    \              (cons extension best_extensions_list (best_extensions_list extensions))))))\n\
    \  (define (best_extensions_string extensions)\n    (if (null? extensions)\n \
    \       '()\n        (let ((extension (first extensions))\n              (strength\
    \ (strength extension)))\n          (if (> strength 0)\n              (cons extension\
    \ best_extensions_string)\n              (cons extension best_extensions_string\
    \ (best_extensions_string extensions))))))\n  (define (best_extensions_char extensions)\n\
    \    (if (null? extensions)\n        '()\n        (let ((extension (first extensions))\n\
    \              (strength (strength extension)))\n          (if (> strength 0)\n\
    \              (cons extension best_extensions_char)\n              (cons extension\
    \ best_extensions_char (best_extensions_char extensions))))))\n  (define (best_extensions_number\
    \ extensions)\n    (if (null? extensions)\n        '()\n        (let ((extension\
    \ (first extensions))\n              (strength (strength extension)))\n      \
    \    (if (> strength 0)\n              (cons extension best_extensions_number)\n\
    \              (cons extension best_extensions_number (best_extensions_number\
    \ extensions))))))\n  (define (best_extensions_boolean extensions)\n    (if (null?\
    \ extensions)\n        '()\n        (let ((extension (first extensions))\n   \
    \           (strength (strength extension)))\n          (if (> strength 0)\n \
    \             (cons extension best_extensions_boolean)\n              (cons extension\
    \ best_extensions_boolean (best_extensions_boolean extensions))))))\n", "  (define\
    \ (strength extension)\n    (string-length extension))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength string<))\n  (let ((extension (best_extension\
    \ extensions)))\n    (string-append class_name \".\" extension)))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first extensions))\
    \ (Strongest_Extension class_name (rest extensions))]\n    [else (cons (first\
    \ extensions) (Strongest_Extension class_name (rest extensions)))]))\n", "  (let\
    \ ((strength (/ (length class_name) 2))\n        (extension (first extensions)))\n\
    \    (cond\n      [(empty? extensions) (list class_name)]\n      [(equal? (first\
    \ extensions) class_name)\n       (cons class_name (append (Strongest_Extension\
    \ (rest extensions) extensions)\n                             (list extension)))]\n\
    \      [else\n       (cond\n         [(equal? (first extensions) (substring (first\
    \ extensions) 0 strength))\n          (cons (substring (first extensions) 0 strength)\n\
    \                (append (Strongest_Extension (rest extensions) extensions)\n\
    \                        (list extension)))]\n         [else\n          (cond\n\
    \            [(equal? (first extensions) (substring (first extensions) strength\
    \ strength))\n             (cons (substring (first extensions) strength strength)\n\
    \                    (append (Strongest_Extension (rest extensions) extensions)\n\
    \                            (list extension)))]\n            [else\n        \
    \     (cond\n               [(equal? (first extensions) (substring (first extensions)\
    \ strength strength))\n                (cons (substring (first extensions) strength\
    \ strength)\n                      (append (Strongest_Extension (rest extensions)\
    \ extensions)\n                              (list extension)))]\n           \
    \    [else\n                (cond\n                  [(equal? (first extensions)\
    \ (substring (first extensions) strength strength))\n                   (cons\
    \ (substring (first extensions) strength strength)\n                        (append\
    \ (Strongest_Extension (rest extensions) extensions)\n                       \
    \         (list extension)))]\n                  [else\n                   (cond\n\
    \                     [(equal? (first extensions) (substring (first extensions)\
    \ strength strength))\n                      (cons (substring (first extensions)\
    \ strength strength)\n                            (append (Strongest_Extension\
    \ (rest extensions) extensions)\n                                    (list extension)))]\n\
    \                     [else\n                      (cond\n                   \
    \     [(equal? (first extensions) (substring (first extensions) strength strength))\n\
    \                         (cons (substring (first extensions) strength strength)\n\
    \                                (append (Strongest_Extension (rest extensions)\
    \ extensions)\n                                        (list extension)))]\n \
    \                       [else\n                         (cond\n              \
    \            [(equal? (first extensions) (substring (first extensions) strength\
    \ strength))\n                           (cons (substring (first extensions) strength\
    \ strength)\n                                (append (Strongest_Extension (rest\
    \ extensions) extensions)\n                                        (list extension)))]\n\
    \                          [else\n                           (cond\n         \
    \                    [(equal? (first extensions) (substring (first extensions)\
    \ strength strength", "  (define (strength extension)\n    (string-length extension))\n\
    \  (define (strength-extension extension strength)\n    (if (string=? extension\
    \ (string-append class_name \".\" (string-append extension \".\"))) \n       \
    \ strength \n        (strength-extension (string-append extension \".\") strength)))\n\
    \  (define (strength-extensions extensions strength)\n    (if (null? extensions)\
    \ \n        strength \n        (strength-extensions (cdr extensions) (if (null?\
    \ (car extensions)) \n            (strength \n             (string-append class_name\
    \ \".\" (string-append (car extensions) \".\"))) \n            (if (null? (car\
    \ extensions)) \n                (strength \n                 (string-append class_name\
    \ \".\"))\n                (if (> (strength-extension (car extensions) strength)\
    \ \n                       (strength-extensions (cdr extensions) strength))\n\
    \                    (if (> (strength-extension (car extensions) strength) \n\
    \                           (strength-extensions (cdr extensions) strength))\n\
    \                        (if (> (strength-extension (car extensions) strength)\
    \ \n                               (strength-extensions (cdr extensions) strength))\n\
    \                            (if (> (strength-extension (car extensions) strength)\
    \ \n                                   (strength-extensions (cdr extensions) strength))\n\
    \                                (if (> (strength-extension (car extensions) strength)\
    \ \n                                       (strength-extensions (cdr extensions)\
    \ strength))\n                                    (if (> (strength-extension (car\
    \ extensions) strength) \n                                          (strength-extensions\
    \ (cdr extensions) strength))\n                                        (if (>\
    \ (strength-extension (car extensions) strength) \n                          \
    \                    (strength-extensions (cdr extensions) strength))\n      \
    \                                    (if (> (strength-extension (car extensions)\
    \ strength) \n                                                  (strength-extensions\
    \ (cdr extensions) strength))\n                                          (if (>\
    \ (strength-extension (car extensions) strength) \n                          \
    \                        (strength-extensions (cdr extensions) strength))\n  \
    \                                        (if (> (strength-extension (car extensions)\
    \ strength) \n                                                  (strength-extensions\
    \ (cdr extensions) strength))\n                                          (if (>\
    \ (strength-extension (car extensions) strength) \n                          \
    \                        (strength-extensions (cdr extensions) strength))\n  \
    \                                        (if (> (strength-extension (car extensions)\
    \ strength) \n                                                  (strength-extensions\
    \ (cdr extensions) strength))\n                                          (if (>\
    \ (strength-extension (car extensions) strength) \n                          \
    \                        (strength-extensions (cdr extensions) strength))\n  \
    \                                        (if (", "  (cond\n    [(empty? extensions)\
    \ (list class_name)]\n    [(equal? (first extensions) (first extensions)) (list\
    \ class_name)]\n    [else (append (Strongest_Extension (first extensions) (rest\
    \ extensions))\n                  (list class_name)\n                  )]))\n",
  "  (cond\n    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ (first extensions)) (list class_name)]\n    [else (append (Strongest_Extension\
    \ (first extensions) (rest extensions))\n                  (list (first extensions))))]\n\
    \  )\n)\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions)\
    \ (first extensions)) (Strongest_Extension class_name (rest extensions))]\n  \
    \  [else (cons (first extensions) (Strongest_Extension class_name (rest extensions)))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension class_name (tail extensions))]\n    [else\
    \ (Strongest_Extension class_name (append (list extensions) (Strongest_Extension\
    \ class_name (tail extensions))))]\n  )\n)\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (drop 1 extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (drop 1 extensions)))]))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ (first extensions) (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (first extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first extensions)) \n     (append class_name\
    \ \".\" (first extensions))]\n    [else (Strongest_Extension (append class_name\
    \ \".\") (rest extensions))]))\n", "  (cond\n    [(empty? extensions) (list class_name)]\n\
    \    [(equal? (first extensions) (first extensions)) (cons (first extensions)\
    \ (Strongest_Extension (rest extensions) extensions))]\n    [else (cons (first\
    \ extensions) (Strongest_Extension (rest extensions) extensions))]))\n", "  (let\
    \ ([cap (length class_name)]\n        [sm  (length class_name)])\n    (for ([i\
    \ (in-range extensions)])\n      (let ([ext (substring extensions i)])\n     \
    \   (if (and (char-upper-case? ext)\n                 (char-lower-case? ext))\n\
    \            (set! cap (- cap (length ext)))\n            (set! sm (- sm (length\
    \ ext))))\n        (if (> cap sm)\n            (set! cap (- cap sm))\n       \
    \     (set! sm (- sm cap)))))\n    (format nil \"~s.~s\" (substring class_name\
    \ 0 cap) (substring class_name sm))))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (list class_name)]\n\
    \    [else (append (Strongest_Extension (first extensions) (rest extensions))\n\
    \                  (list class_name)\n                  (Strongest_Extension (first\
    \ extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\
    \"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ (rest extensions) extensions)]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (rest extensions) extensions))]))\n", "  (define (strength extension)\n    (string-length\
    \ extension))\n  (define (best_extension extensions)\n    (if (null? extensions)\n\
    \        '()\n        (let ((extension (car extensions)))\n          (if (> (strength\
    \ extension) 0)\n              (cons extension (best_extension (cdr extensions)))))))\n\
    \  (define (best_extensions extensions)\n    (if (null? extensions)\n        '()\n\
    \        (let ((extension (car extensions)))\n          (if (> (strength extension)\
    \ 0)\n              (cons extension (best_extensions (cdr extensions))))))\n \
    \ (if (null? extensions)\n      (list class_name)\n      (cons (car extensions)\
    \ (best_extensions (cdr extensions)))))\n", "  (let ((cap (length class_name))\
    \ (sm  (length class_name))) (set! cap 0 (set! sm 0))\n    (for ([i (in-range\
    \ (length extensions))])\n      (if (string=? (substring class_name 0 i) extensions[i])\n\
    \          (set! cap (+ cap (length extensions[i])))\n          (set! sm (+ sm\
    \ (length extensions[i]))))\n      (if (< cap sm)\n          (set! cap (- cap\
    \ sm))\n          (set! sm (- sm cap))\n          (set! cap 0)\n          (set!\
    \ sm 0))\n      (if (< cap sm)\n          (set! cap (- cap sm))\n          (set!\
    \ sm (- sm cap))\n          (set! cap 0)\n          (set! sm 0))\n      (if (<\
    \ cap sm)\n          (set! cap (- cap sm))\n          (set! sm (- sm cap))\n \
    \         (set! cap 0)\n          (set! sm 0))\n      (if (< cap sm)\n       \
    \   (set! cap (- cap sm))\n          (set! sm (- sm cap))\n          (set! cap\
    \ 0)\n          (set! sm 0))\n      (if (< cap sm)\n          (set! cap (- cap\
    \ sm))\n          (set! sm (- sm cap))\n          (set! cap 0)\n          (set!\
    \ sm 0))\n      (if (< cap sm)\n          (set! cap (- cap sm))\n          (set!\
    \ sm (- sm cap))\n          (set! cap 0)\n          (set! sm 0))\n      (if (<\
    \ cap sm)\n          (set! cap (- cap sm))\n          (set! sm (- sm cap))\n \
    \         (set! cap 0)\n          (set! sm 0))\n      (if (< cap sm)\n       \
    \   (set! cap (- cap sm))\n          (set! sm (- sm cap))\n          (set! cap\
    \ 0)\n          (set! sm 0))\n      (if (< cap sm)\n          (set! cap (- cap\
    \ sm))\n          (set! sm (- sm cap))\n          (set! cap 0)\n          (set!\
    \ sm 0))\n      (if (< cap sm)\n          (set! cap (- cap sm", "  (cond\n   \
    \ [(empty? extensions) (list class_name)]\n    [(equal? (first extensions) (first\
    \ extensions)) (list class_name)]\n    [else (append (Strongest_Extension (first\
    \ extensions) (rest extensions))\n                  (list class_name))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension class_name (drop 1 extensions))]\n    [else\
    \ (cons (first extensions) (Strongest_Extension class_name (drop 1 extensions)))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension class_name (drop 1 extensions))]\n    [else\
    \ (cons (first extensions) (Strongest_Extension class_name (drop 1 extensions)))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) \n     (Strongest_Extension class_name (drop 1 extensions))]\n\
    \    [else (cons (first extensions) (Strongest_Extension \n                  \
    \              (substring class_name \n                                      \
    \  (length (first extensions)) \n                                        (length\
    \ (first extensions)))))]))\n", "  (cond\n    [(empty? extensions) (list class_name)]\n\
    \    [(equal? (first extensions) (first extensions)) (list class_name)]\n    [else\
    \ (append (Strongest_Extension (first extensions) (rest extensions))\n       \
    \           (list (first extensions))))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (drop 1 extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (drop 1 extensions)))]))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (list class_name)]\n\
    \    [else (cons (first extensions) (Strongest_Extension (first extensions) (rest\
    \ extensions)))]))\n", "  (cond\n    [(empty? extensions) (list class_name)]\n\
    \    [(equal? (first extensions) class_name) (Strongest_Extension (rest extensions)\
    \ extensions)]\n    [else (cons (first extensions) (Strongest_Extension (rest\
    \ extensions) extensions))]))\n", "  (define (strength extension)\n    (string-length\
    \ (substring extension 0 (string-length extension)))\n  )\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength)\n    (first extensions)\n  )\n \
    \ (let ((extension (best_extension extensions)))\n    (string-append class_name\
    \ \".\" (substring extension 0 (string-length extension)))\n  )\n)\n", "  (cond\n\
    \    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ (first extensions)) (list class_name)]\n    [else (append (Strongest_Extension\
    \ (first extensions) (rest extensions))\n                  (list class_name)\n\
    \                  (Strongest_Extension (first extensions) (rest extensions)))]))\n",
  "  (cond\n    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ (first extensions)) (cons class_name extensions)]\n    [else (Strongest_Extension\
    \ (first extensions)\n                          (append (Strongest_Extension (rest\
    \ extensions))\n                                  (list (first extensions))))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (first extensions) (rest extensions))]\n \
    \   [else (Strongest_Extension (first class_name) (append (rest extensions) (list\
    \ (first extensions))))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first extensions)) (Strongest_Extension class_name (drop\
    \ 1 extensions))]\n    [else (cons (first extensions) (Strongest_Extension class_name\
    \ (drop 1 extensions)))]))\n", "  (cond\n    [(empty? extensions) (list class_name)]\n\
    \    [(equal? (first extensions) (first extensions)) (Strongest_Extension (rest\
    \ extensions) (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (rest extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions)\
    \ (list class_name)]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ (first extensions) (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (first extensions) (rest extensions)))]))\n", "  (let ((cap (length class_name))\
    \ (sm  (length class_name))) (cond ((= cap sm) (cons class_name extensions))\n\
    \                                                                ((= cap 0) (cons\
    \ class_name extensions))\n                                                  \
    \              ((< cap sm) (cons (substring class_name 0 cap) (cons class_name\
    \ extensions))\n                                                             \
    \   ((< sm cap) (cons (substring class_name cap) (cons class_name extensions))\n\
    \                                                                ((< sm 0) (cons\
    \ (substring class_name 0 sm) (cons class_name extensions))\n                \
    \                                                ((< 0 sm) (cons (substring class_name\
    \ 0 cap) (cons class_name extensions))\n                                     \
    \                           ((< 0 cap) (cons (substring class_name 0 sm) (cons\
    \ class_name extensions))\n                                                  \
    \              ((< 0 cap) (cons class_name extensions))\n                    \
    \                                            ((< 0 sm) (cons class_name extensions))\n\
    \                                                                ((< 0 cap) (cons\
    \ class_name extensions))\n                                                  \
    \              ((< 0 sm) (cons class_name extensions))\n                     \
    \                                           ((< 0 cap) (cons class_name extensions))\n\
    \                                                                ((< 0 sm) (cons\
    \ class_name extensions))\n                                                  \
    \              ((< 0 cap) (cons class_name extensions))\n                    \
    \                                            ((< 0 sm) (cons class_name extensions))\n\
    \                                                                ((< 0 cap) (cons\
    \ class_name extensions))\n                                                  \
    \              ((< 0 sm) (cons class_name extensions))\n                     \
    \                                           ((< 0 cap) (cons class_name extensions))\n\
    \                                                                ((< 0 sm) (cons\
    \ class_name extensions))\n                                                  \
    \              ((< 0 cap) (cons class_name extensions))\n                    \
    \                                            ((< 0 sm) (cons class_name extensions))\n\
    \                                                                ((< 0 cap) (cons\
    \ class_name extensions))\n                                                  \
    \              ((< 0 sm) (cons class_name extensions))\n                     \
    \                                           ((< 0 cap) (cons class_name extensions))\n\
    \                                                                ((< 0 sm) (cons\
    \ class_name extensions))\n                                                  \
    \              ((< 0 cap) (cons class_name extensions))\n                    \
    \                                            ((< 0 sm) (cons class_name extensions))\n\
    \                                                                ((< 0 cap) (cons\
    \ class_name extensions))\n                                                  \
    \              ((< 0 sm) (cons class_name extensions))\n                     \
    \                                           ((< 0 cap) (cons class_name extensions))\n\
    \                                                                ((< 0 sm) (cons\
    \ class_name extensions))\n                                                  \
    \              ((< 0 cap) (cons class_name extensions))\n                    \
    \                                            ((< 0 sm) (cons class_name extensions))\n\
    \                                                                ((< 0 cap) (cons\
    \ class_name extensions))\n                                                  \
    \              ((< 0 sm) (con", "  (let ([cap (length class_name)]\n        [sm\
    \ (length class_name)])\n    (let loop ([i 0])\n      (if (< i cap)\n        \
    \  (let ([ext (substring extensions i)])\n            (if (string=? ext \"\")\n\
    \                (loop (+ i 1))\n                (if (string=? (substring extensions\
    \ i) ext)\n                    (loop (+ i 1))\n                    (if (< (- cap\
    \ sm) (- sm cap))\n                        (cons (substring class_name 0 i) ext)\n\
    \                        (loop (+ i 1))))))\n          (cons (substring class_name\
    \ 0 i) \"\"))))))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) (first extensions)) (Strongest_Extension (rest extensions) (rest\
    \ extensions))]\n    [else (cons (first extensions) (Strongest_Extension (rest\
    \ extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\
    \"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (let ([cap (length class_name)]\n \
    \       [sm (length class_name)])\n    (if (= cap sm)\n        (let ([cap (length\
    \ extensions)])\n          (if (= cap sm)\n              (let ([sm (length extensions)])\n\
    \                (if (= cap sm)\n                    (let ([cap (length extensions)])\n\
    \                      (if (= cap sm)\n                          (let ([cap (length\
    \ extensions)])\n                            (if (= cap sm)\n                \
    \                (let ([cap (length extensions)])\n                          \
    \        (if (= cap sm)\n                                      (let ([cap (length\
    \ extensions)])\n                                        (if (= cap sm)\n    \
    \                                        (let ([cap (length extensions)])\n  \
    \                                            (if (= cap sm)\n                \
    \                                  (let ([cap (length extensions)])\n        \
    \                                            (if (= cap sm)\n                \
    \                                        (let ([cap (length extensions)])\n  \
    \                                                        (if (= cap sm)\n    \
    \                                                          (let ([cap (length\
    \ extensions)])\n                                                            \
    \    (if (= cap sm)\n                                                        \
    \            (let ([cap (length extensions)])\n                              \
    \                                        (if (= cap sm)\n                    \
    \                                                      (let ([cap (length extensions)])\n\
    \                                                                            (if\
    \ (= cap sm)\n                                                               \
    \                 (let ([cap (length extensions)])\n                         \
    \                                                         (if (= cap sm)\n   \
    \                                                                            \
    \       (let ([cap (length extensions)])\n                                   \
    \                                                     (if (= cap sm)\n       \
    \                                                                            \
    \         (let ([cap (length extensions)])\n                                 \
    \                                                             (if (= cap sm)\n\
    \                                                                            \
    \                      (let ([cap (length extensions)])\n                    \
    \                                                                            \
    \    (if (= cap sm)\n                                                        \
    \                                                (let ([cap (length extensions)])\n\
    \                                                                            \
    \                              (if (= cap sm)\n                              \
    \                                                                            \
    \    (let ([cap (length extensions)])\n                                      \
    \                                                                          (if\
    \ (= cap sm)\n                                                               \
    \                                                     (let ([cap (length extensions)])\n\
    \                                                                            \
    \                                          (if (= cap sm)\n                  \
    \                                                                            \
    \                            (let ([cap (length extensions)])\n              \
    \                                                                            \
    \                                  (if (= cap sm)\n                          \
    \                                                                            \
    \                          (let ([cap (length extensions)])\n                \
    \                                                                            \
    \                                      (if (= cap sm)\n                      \
    \                                                                            \
    \                                    (let ([cap (length extensions)])\n      \
    \                                                                            \
    \                                                      (if (= cap sm)\n      \
    \                                                                            \
    \                                                          (let ([cap (length\
    \ extensions)])\n                                                            \
    \                                                                            \
    \      (if (= cap sm)\n                                                      \
    \                                                                            \
    \                (let ([cap (length extensions)])\n                          \
    \                                                                            \
    \                                              (if (= cap sm)\n              \
    \                                                                            \
    \                                                              (let ([cap (",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ (first extensions)) (list class_name)]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (rest extensions) extensions))]))\n", "  (define (strength extension)\n    (string-length\
    \ extension))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (", "  (let ((strength (/ (length\
    \ class_name) \n                    (length extensions))))\n    (cond\n      [(<\
    \ strength 0) (error \"No extensions found\")]\n      [(< strength (length extensions))\
    \ (error \"No extensions found\")]\n      [else (cons (substring class_name 0\
    \ strength) (Strongest_Extension (substring class_name strength) (append extensions\
    \ (substring class_name strength length))))]\n      )))\n", "  (let ((cap (length\
    \ class_name)))\n    (let ((sm  (length extensions)))\n      (cond ((= cap sm)\n\
    \             (string-append class_name \".\" extensions))\n            ((< cap\
    \ sm)\n             (string-append (substring class_name 0 cap) (substring class_name\
    \ cap (- sm)))\n             (string-append (substring class_name 0 cap) (substring\
    \ class_name cap (- sm))))\n            (else\n             (string-append (substring\
    \ class_name 0 cap) (substring class_name cap (- sm))\n                      \
    \    (substring class_name 0 sm) (substring class_name sm (- cap)))\n        \
    \     (string-append (substring class_name 0 cap) (substring class_name cap (-\
    \ sm))\n                          (substring class_name 0 sm) (substring class_name\
    \ sm (- cap))))))))\n", "  (cond\n    [(empty? extensions) (list class_name)]\n\
    \    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (cons (first class_name) (Strongest_Extension\
    \ (rest class_name) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (let ((cap (length class_name)) (sm\
    \  (length class_name))) (* cap sm))\n  (let ((strongest_extension (car extensions)))\
    \ (* strongest_extension))\n  (let ((strength (- (length extensions) 1)))\n  \
    \  (if (> strength 0)\n        (let ((extension (car extensions))) (* extension))\n\
    \        (let ((extension (cdr extensions))) (* extension)))))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first extensions))\
    \ (Strongest_Extension (first extensions) (rest extensions))]\n    [else (cons\
    \ (first extensions) (Strongest_Extension (first extensions) (rest extensions)))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension class_name (drop 1 extensions))]\n    [else\
    \ (cons (first extensions) (Strongest_Extension class_name (drop 1 extensions)))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension class_name (tail extensions))]\n    [else\
    \ (cons (first extensions) (Strongest_Extension class_name (tail extensions)))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension class_name (rest extensions))]\n    [else\
    \ (cons (first extensions) (Strongest_Extension class_name (rest extensions)))]))\n",
  "  (define (strength extension)\n    (string-length extension))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength)\n    (first extensions))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength)\n    (first extensions))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength)\n    (first\
    \ extensions))\n  (define (best_extension extensions)\n    (sort extensions strength)\n\
    \    (first extensions))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength)\n    (first extensions))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength)\n    (first extensions))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength)\n    (first extensions))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength)\n    (first extensions))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength)\n    (first\
    \ extensions))\n  (define (best_extension extensions)\n    (sort extensions strength)\n\
    \    (first extensions))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength)\n    (first extensions))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength)\n    (first extensions))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength)\n    (first extensions))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength)\n    (first extensions))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength)\n    (first\
    \ extensions))\n  (define (best_extension extensions)\n    (sort extensions strength)\n\
    \    (first extensions))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength)\n    (first extensions))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength)\n    (first extensions))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength)\n    (first extensions))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength)\n    (first extensions))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength)\n    (first\
    \ extensions))\n  (define (best_extension extensions)\n    (sort extensions strength)\n\
    \    (first extensions))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength)\n    (first extensions))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength)\n    (first extensions))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength)\n    (first extension", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first extensions))\
    \ (Strongest_Extension class_name (rest extensions))]\n    [else (cons (first\
    \ extensions) (Strongest_Extension class_name (rest extensions)))]))\n", "  (define\
    \ (strength extension)\n    (string-length extension))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (", "  (let ((extension-count 0))\n    (for ([extension (in-list extensions)])\n\
    \      (if (string=? (string-length extension) 0)\n          (set! extension-count\
    \ (+ extension-count 1))\n        (set! extension-count 0))\n      (if (> extension-count\
    \ 0)\n          (set! extension-count 0)\n          (set! extension-count 1))\n\
    \      (if (> extension-count 0)\n          (set! extension-count 0)\n       \
    \   (set! extension-count 1))\n      (if (> extension-count 0)\n          (set!\
    \ extension-count 0)\n          (set! extension-count 1))\n      (if (> extension-count\
    \ 0)\n          (set! extension-count 0)\n          (set! extension-count 1))\n\
    \      (if (> extension-count 0)\n          (set! extension-count 0)\n       \
    \   (set! extension-count 1))\n      (if (> extension-count 0)\n          (set!\
    \ extension-count 0)\n          (set! extension-count 1))\n      (if (> extension-count\
    \ 0)\n          (set! extension-count 0)\n          (set! extension-count 1))\n\
    \      (if (> extension-count 0)\n          (set! extension-count 0)\n       \
    \   (set! extension-count 1))\n      (if (> extension-count 0)\n          (set!\
    \ extension-count 0)\n          (set! extension-count 1))\n      (if (> extension-count\
    \ 0)\n          (set! extension-count 0)\n          (set! extension-count 1))\n\
    \      (if (> extension-count 0)\n          (set! extension-count 0)\n       \
    \   (set! extension-count 1))\n      (if (> extension-count 0)\n          (set!\
    \ extension-count 0)\n          (set! extension-count 1))\n      (if (> extension-count\
    \ 0)\n          (set! extension-count 0)\n          (set! extension-count 1))\n\
    \      (if (> extension-count 0)\n          (set! extension-count 0)\n       \
    \   (set! extension-count 1))\n      (if (> extension-count 0)\n          (set!\
    \ extension-count 0)\n          (set! extension-count 1))\n      (if (> extension-count\
    \ 0)\n          (set! extension-count 0)\n          (set! extension-count 1))\n\
    \      (if (> extension-count 0)\n          (set! extension-count 0)\n       \
    \   (set! extension-count 1))\n      (if (> extension-count 0)\n          (set!\
    \ extension-count 0)\n          (", "  (cond\n    [(empty? extensions) \"\"]\n\
    \    [(equal? (first extensions) (first extensions)) \n     (Strongest_Extension\
    \ (first extensions) (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (first extensions) (rest extensions)))]))\n", "  (define (strength ext)\n  \
    \  (string-length \n     (string-map \n      (lambda (c)\n        (if (char-upper-case?\
    \ c)\n            (- \n             (char-code c) \n             (char-code (char-code\
    \ c))) \n            (- \n             (char-code c) \n             (char-code\
    \ (char-code c))))) \n      ext))\n  (define (best_extension extensions)\n   \
    \ (sort extensions \n         (lambda (ext1 ext2)\n           (if (> strength\
    \ ext1 ext2)\n               ext1\n               ext2))))\n  (if (null? extensions)\n\
    \      (error \"No extensions found\")\n      (best_extension extensions)))\n",
  "  (cond\n    [(empty? extensions) (error \"No extensions given\")]\n    [(equal?\
    \ (first extensions) (first extensions)) (error \"The first extension must be\
    \ unique\")]\n    [else (cons (first extensions) (Strongest_Extension class_name\
    \ (rest extensions))) ]))\n", "  (cond\n    [(empty? extensions) (list class_name)]\n\
    \    [(equal? (first extensions) (first class_name)) (Strongest_Extension (first\
    \ class_name) (tail extensions))]\n    [else (Strongest_Extension (first class_name)\
    \ (append (list class_name) (tail extensions)))]))\n", "  (cond\n    [(empty?\
    \ extensions) (list class_name)]\n    [(equal? (first extensions) (first extensions))\
    \ (list class_name)]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (define (strength ext)\n    (string-length\
    \ (substring ext 0 (string-length ext)))\n  )\n  (define (best_extension extensions)\n\
    \    (sort extensions strength)\n    (first extensions)\n  )\n  (let ([best (best_extension\
    \ extensions)])\n    (string-append class_name \".\" (string best))\n  )\n)\n",
  "  (let ((cap (length class_name)))\n    (let ((sm (length extensions)))\n     \
    \ (cond\n        ((= cap sm)\n         (string-append class_name \".\" extensions))\n\
    \        ((< cap sm)\n         (string-append (substring class_name 0 cap) \"\
    .\" extensions))\n        (else\n         (string-append (substring class_name\
    \ 0 sm) \".\" extensions)))))\n", "  (cond\n    [(empty? extensions) \"\"]\n \
    \   [(equal? (first extensions) (first extensions)) (Strongest_Extension (rest\
    \ extensions) (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (rest extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions) (format\
    \ nil \"~a\" class_name)]\n    [(equal? (first extensions) (first extensions))\
    \ (Strongest_Extension (rest extensions) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest extensions) (append (list (first extensions)) (rest extensions)))]))\n",
  "  (define (strength extension)\n    (string-length extension))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength reverse))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength reverse #:key string<))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength reverse #:key string<))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength reverse #:key string<))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength reverse\
    \ #:key string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength reverse #:key string<))\n  (define (best_extension extensions)\n  \
    \  (sort extensions strength reverse #:key string<))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength reverse #:key string<))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength reverse #:key string<))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength reverse\
    \ #:key string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength reverse #:key string<))\n  (define (best_extension extensions)\n  \
    \  (sort extensions strength reverse #:key string<))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength reverse #:key string<))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength reverse #:key string<))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength reverse\
    \ #:key string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength reverse #:key string<))\n  (define (best_extension extensions)\n  \
    \  (sort extensions strength reverse #:key string<))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength reverse #:key string<))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength reverse #:key string<))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength reverse\
    \ #:key string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength reverse #:key string<))\n  (define (best_extension extensions)\n  \
    \  (sort extensions strength reverse #:key string<))\n  (define (best_", "  (let\
    \ ((cap (length class_name)))\n    (let ((sm (length class_name))) (let ((strength\
    \ (- (cap - sm) 1)))\n      (if (> strength 0)\n          (let ((extension (car\
    \ extensions))) (if (> (length extension) 0)\n              (let ((lowercase (substring\
    \ extension 0 (length extension))))\n                (if (> (length lowercase)\
    \ 0)\n                    (let ((uppercase (substring lowercase 0 (length lowercase))))\n\
    \                      (if (> (length uppercase) 0)\n                        \
    \  (let ((strength (- (length uppercase) 1)))\n                            (if\
    \ (> strength 0)\n                                (cons (cons class_name extension)\
    \ extensions)\n                                (cons class_name extension))\n\
    \                            (cons class_name extension))\n                  \
    \    (cons class_name extension))\n                  (cons class_name extension))\n\
    \              (cons class_name extension))\n          (cons class_name extension)))))\n\
    \    (if (> strength 0)\n        (let ((extension (car extensions))) (if (> (length\
    \ extension) 0)\n            (let ((lowercase (substring extension 0 (length extension))))\n\
    \              (if (> (length lowercase) 0)\n                  (let ((uppercase\
    \ (substring lowercase 0 (length lowercase))))\n                    (if (> (length\
    \ uppercase) 0)\n                        (let ((strength (- (length uppercase)\
    \ 1)))\n                          (if (> strength 0)\n                       \
    \       (cons (cons class_name extension) extensions)\n                      \
    \        (cons class_name extension))\n                        (cons class_name\
    \ extension))\n                  (cons class_name extension))\n            (cons\
    \ class_name extension))\n        (cons class_name extension))))))\n", "  (cond\n\
    \    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ (first extensions)) (list class_name)]\n    [else (append (Strongest_Extension\
    \ (first extensions) (rest extensions))\n                  (list class_name))]))\n",
  "  (define (strength extension)\n    (string-length (string-upcase extension) (string-length\
    \ (string-upcase class_name))))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (if (null? extensions)\n      (format nil \"~a\" class_name)\n\
    \      (let ([extension (best_extension extensions)])\n        (format nil \"\
    ~a.~a\" class_name extension))))\n", "  (cond\n    [(empty? extensions) \"\"]\n\
    \    [(equal? (first extensions) (first extensions)) (Strongest_Extension class_name\
    \ (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (let ((cap (length class_name)))\n\
    \    (let ((sm (length extensions)))\n      (cond\n        ((= cap sm)\n     \
    \    (string-append class_name \".\" extensions))\n        ((= cap 0)\n      \
    \   (string-append class_name \".\" extensions))\n        ((< cap sm)\n      \
    \   (string-append (substring class_name 0 cap) \".\" extensions))\n        (else\n\
    \         (string-append (substring class_name 0 sm) \".\" extensions)))))\n",
  "  (cond\n    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ (first extensions)) (Strongest_Extension (rest extensions) (rest extensions))]\n\
    \    [else (cons (first extensions) (Strongest_Extension (rest extensions) (rest\
    \ extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first extensions)) \n     (Strongest_Extension (first extensions)\
    \ (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (first extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions)\
    \ (list class_name)]\n    [(equal? (first extensions) (first extensions)) (list\
    \ class_name)]\n    [else (cons (first extensions) (Strongest_Extension (first\
    \ extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (first class_name) (next extensions))]\n    [else (Strongest_Extension (first\
    \ class_name) (next extensions))]))\n", "  (define (strength extension)\n    (string-length\
    \ extension))\n  (define (best_extension extensions)\n    (if (null? extensions)\n\
    \        '()\n        (let ((strength (strength extension)))\n          (if (>\
    \ strength 0)\n              (cons extension (best_extension (cdr extensions)))))))\n\
    \  (define (best_extensions extensions)\n    (if (null? extensions)\n        '()\n\
    \        (let ((best_extension (best_extension extensions)))\n          (if (null?\
    \ best_extension)\n              (best_extensions (cdr extensions))\n        \
    \      (cons best_extension (best_extensions (cdr extensions)))))))\n  (define\
    \ (best_extensions_list extensions)\n    (if (null? extensions)\n        '()\n\
    \        (let ((best_extension (best_extension extensions)))\n          (if (null?\
    \ best_extension)\n              (cons (car extensions) (best_extensions_list\
    \ (cdr extensions))))\n              (cons (car best_extension) (best_extensions_list\
    \ (cdr best_extension)))))\n  (define (best_extensions_string extensions)\n  \
    \  (if (null? extensions)\n        '()\n        (let ((best_extension (best_extension\
    \ extensions)))\n          (if (null? best_extension)\n              (cons (string-append\
    \ class_name \".\" (car extensions)) (best_extensions_string (cons (car extensions)\
    \ (best_extensions_string (cons (cdr extensions) '())))))))\n              (cons\
    \ (string-append class_name \".\" (car best_extension)) (best_extensions_string\
    \ (cons (car best_extension) (best_extensions_string (cons (cdr best_extension)\
    \ '())))))))\n  (define (best_extensions_list extensions)\n    (if (null? extensions)\n\
    \        '()\n        (let ((best_extension (best_extension extensions)))\n  \
    \        (if (null? best_extension)\n              (cons (car extensions) (best_extensions_list\
    \ (cdr extensions))))\n              (cons (car best_extension) (best_extensions_list\
    \ (cdr best_extension)))))\n  (define (best_extensions_string extensions)\n  \
    \  (if (null? extensions)\n        '()\n        (let ((best_extension (best_extension\
    \ extensions)))\n          (if (null? best_extension)\n              (cons (string-append\
    \ class_name \".\" (car extensions)) (best_extensions_string (cons (car extensions)\
    \ (best_extensions_string (cons (cdr extensions) '())))))))\n              (cons\
    \ (string-append class_name \".\" (car best_extension)) (best_", "  (define (strength\
    \ extension)\n    (string-length extension))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength compare))\n  (define (best_extension ", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first extensions))\
    \ (Strongest_Extension class_name (rest extensions))]\n    [else (cons (first\
    \ extensions) (Strongest_Extension class_name (rest extensions)))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first extensions))\
    \ \n     (Strongest_Extension class_name (drop 1 extensions))]\n    [else (cons\
    \ (first extensions) (Strongest_Extension class_name (drop 1 extensions)))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension class_name (drop 1 extensions))]\n    [else\
    \ (cons (first extensions) (Strongest_Extension class_name (drop 1 extensions)))]))\n",
  "  (cond\n    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ class_name) (Strongest_Extension (first extensions) (rest extensions))]\n  \
    \  [else (Strongest_Extension (first extensions) (append (rest extensions) (list\
    \ (first extensions))))]))\n", "  (define (strength extension)\n    (string-length\
    \ extension))\n  (define (strength-sort extension)\n    (let ((strength (strength\
    \ extension)))\n      (if (< strength 0)\n          (cons extension extensions)\n\
    \          (cons extension (sort extensions #<\n                            (lambda\
    \ (x y)\n                              (if (string-equal? x y)\n             \
    \                     0\n                                  (if (string-equal?\
    \ (substring x 0 1) (substring y 0 1))\n                                     \
    \ (- strength 1)\n                                      (- strength 0)))))))\n\
    \  (sort extensions #<\n        (lambda (x y)\n          (if (string-equal? x\
    \ y)\n              0\n              (if (string-equal? (substring x 0 1) (substring\
    \ y 0 1))\n                  (- strength 1)\n                  (- strength 0)))))\n\
    \  (let ((extension (first extensions)))\n    (if (string-equal? class_name extension)\n\
    \        (substring extension 0 (string-length extension))\n        (let ((extensions\
    \ (sort extensions #<\n                            (lambda (x y)\n           \
    \                   (if (string-equal? x y)\n                                \
    \  0\n                                  (if (string-equal? (substring x 0 1) (substring\
    \ y 0 1))\n                                      (- strength 1)\n            \
    \                          (- strength 0)))))))\n          (if (string-equal?\
    \ class_name extension)\n              (substring extension 0 (string-length extension))\n\
    \              (let ((extensions (sort extensions #<\n                       \
    \         (lambda (x y)\n                                  (if (string-equal?\
    \ x y)\n                                      0\n                            \
    \          (if (string-equal? (substring x 0 1) (substring y 0 1))\n         \
    \                                 (- strength 1)\n                           \
    \               (- strength 0)))))))\n                (if (string-equal? class_name\
    \ extension)\n                    (substring extension 0 (string-length extension))\n\
    \                    (let ((extensions (sort extensions #<\n                 \
    \                     (lambda (x y)\n                                        (if\
    \ (string-equal? x y)\n                                            0\n       \
    \                                     (if (string-equal? (substring x 0 1) (substring\
    \ y 0 1))\n                                                (- strength 1)\n  \
    \                                              (- strength 0)))))))\n        \
    \              (if (string-equal? class_name extension)\n                    \
    \      (substring extension 0 (string-length extension))\n                   \
    \       (let ((extensions (sort extensions #<\n                              \
    \              (lambda (x y)\n                                              (if\
    \ (string-equal? x y)\n                                                  0\n \
    \                                                 (if (string-equal? (substring\
    \ x 0 1) (substring y 0 1))\n                                                \
    \      (- strength 1)", "  (cond\n    [(empty? extensions) (list class_name)]\n\
    \    [(equal? (first extensions) (first extensions)) (list class_name)]\n    [else\
    \ (cons (first extensions) (Strongest_Extension (rest extensions) extensions))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension class_name (rest extensions))]\n    [else\
    \ (cons (first extensions) (Strongest_Extension class_name (rest extensions)))]))\n",
  "  (define (strength extension)\n    (string-length extension))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (", "  (define (strength extension)\n    (string-length extension))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength compare))\n\
    \  (if (null? extensions)\n      \"\"\n      (append class_name \n           \
    \   (best_extension extensions))))\n", "  (cond\n    [(empty? extensions) (format\
    \ nil \"~A\" class_name)]\n    [(equal? (first extensions) (first extensions))\
    \ (Strongest_Extension (rest extensions) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest extensions) (append (rest extensions) (list (first extensions))))]))\n",
  "  (cond\n    [(empty? extensions) (format nil \"~a\" class_name)]\n    [(equal?\
    \ (first extensions) (first extensions)) (Strongest_Extension (rest extensions)\
    \ (rest extensions))]\n    [else (Strongest_Extension (first extensions) (append\
    \ (rest extensions) (list (first extensions))))]))\n", "  (define (strength extension)\n\
    \    (string-length extension))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension-name best_extension)\n\
    \    (substring class_name 0 (string-length best_extension)))\n  (define (best_extension-extension\
    \ best_extension)\n    (substring best_extension 0 (string-length best_extension)))\n\
    \  (if (null? best_extension)\n      (error \"No extensions found\")\n      (cons\
    \ best_extension-name best_extension-extension)))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first extensions)) \n     (Strongest_Extension\
    \ class_name (drop 1 extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (drop 1 extensions)))]))\n", "  (cond\n    [(empty? extensions) (format\
    \ nil \"~a.\" class_name)]\n    [(equal? (first extensions) (first extensions))\
    \ (Strongest_Extension (rest extensions) (rest extensions))]\n    [else (Strongest_Extension\
    \ (first extensions) (rest extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ (list class_name)]\n    [(equal? (first extensions) (first extensions)) (list\
    \ class_name)]\n    [else (append (Strongest_Extension (first extensions) (rest\
    \ extensions))\n                  (list class_name)\n                  (first\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) (list class_name)]\n\
    \    [(equal? (first extensions) (first extensions)) (list class_name)]\n    [else\
    \ (cons (first extensions) (Strongest_Extension (first extensions) (rest extensions)))]))\n",
  "  (cond\n    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ (first extensions)) (Strongest_Extension (first extensions) (rest extensions))]\n\
    \    [else (cons (first extensions) (Strongest_Extension (first extensions) (rest\
    \ extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first extensions)) (Strongest_Extension class_name (drop\
    \ 1 extensions))]\n    [else (cons (first extensions) (Strongest_Extension class_name\
    \ (drop 1 extensions)))]))\n", "  (define (strength extension)\n    (string-length\
    \ extension))\n  (define (best_extension extensions)\n    (if (null? extensions)\n\
    \        '()\n        (let ((extension (first extensions))\n              (strength\
    \ (strength extension)))\n          (if (> strength 0)\n              (cons extension\
    \ best_extension)\n              (cons extension extensions)))))\n  (define (best_extensions\
    \ extensions)\n    (if (null? extensions)\n        '()\n        (let ((extension\
    \ (first extensions))\n              (strength (strength extension)))\n      \
    \    (if (> strength 0)\n              (cons extension best_extensions)\n    \
    \          (cons extension best_extension (best_extensions extensions))))))\n\
    \  (define (best_extensions_list extensions)\n    (if (null? extensions)\n   \
    \     '()\n        (let ((extension (first extensions))\n              (strength\
    \ (strength extension)))\n          (if (> strength 0)\n              (cons extension\
    \ best_extensions_list)\n              (cons extension best_extensions_list (best_extensions_list\
    \ extensions))))))\n  (define (best_extensions_string extensions)\n    (if (null?\
    \ extensions)\n        '()\n        (let ((extension (first extensions))\n   \
    \           (strength (strength extension)))\n          (if (> strength 0)\n \
    \             (cons extension best_extensions_string)\n              (cons extension\
    \ best_extensions_string (best_extensions_string extensions))))))\n  (define (best_extensions_list\
    \ extensions)\n    (if (null? extensions)\n        '()\n        (let ((extension\
    \ (first extensions))\n              (strength (strength extension)))\n      \
    \    (if (> strength 0)\n              (cons extension best_extensions_list)\n\
    \              (cons extension best_extensions_list (best_extensions_list extensions))))))\n\
    \  (define (best_extensions_string extensions)\n    (if (null? extensions)\n \
    \       '()\n        (let ((extension (first extensions))\n              (strength\
    \ (strength extension)))\n          (if (> strength 0)\n              (cons extension\
    \ best_extensions_string)\n              (cons extension best_extensions_string\
    \ (best_extensions_string extensions))))))\n  (define (best_extensions_list extensions)\n\
    \    (if (null? extensions)\n        '()\n        (let ((extension (first extensions))\n\
    \              (strength (strength extension)))\n          (if (> strength 0)\n\
    \              (cons extension best_extensions_list)\n              (cons extension\
    \ best_extensions_list (best_extensions_list extensions))))))\n  (define (best_extension",
  "  (let ((strength (length extensions)))\n    (cond\n      [(= strength 0) (error\
    \ \"No extensions found\")]\n      [(= strength 1) (error \"Only one extension\
    \ found\")]\n      [(= strength 2) (error \"Two or more extensions found\")]\n\
    \      [else (let ((extension (car extensions)))\n              (if (string=?\
    \ (string-length extension) 0)\n                  (error \"Extension name cannot\
    \ be empty\")\n                  (let ((cap (string-length extension)))\n    \
    \                (let ((sm (string-length extension)))\n                     \
    \ (cond \n                        [(= cap sm) (error \"Extension name cannot be\
    \ empty\")]\n                        [(= cap 0) (error \"Extension name cannot\
    \ be empty\")]\n                        [(= sm 0) (error \"Extension name cannot\
    \ be empty\")]\n                        [else (let ((strength (- (cap sm) cap)))\n\
    \                              (cond\n                                [(< strength\
    \ 0) (error \"Extension name cannot be empty\")]\n                           \
    \     [(< strength 1) (error \"Extension name cannot be empty\")]\n          \
    \                      [(< strength 2) (error \"Extension name cannot be empty\"\
    )]\n                                [(< strength 3) (error \"Extension name cannot\
    \ be empty\")]\n                                [(< strength 4) \n           \
    \                      (error \"Extension name cannot be empty\")]\n         \
    \                       [(< strength 5)\n                                 (error\
    \ \"Extension name cannot be empty\")]\n                                [(< strength\
    \ 6)\n                                 (error \"Extension name cannot be empty\"\
    )]\n                                [(< strength 7)\n                        \
    \         (error \"Extension name cannot be empty\")]\n                      \
    \          [(< strength 8)\n                                 (error \"Extension\
    \ name cannot be empty\")]\n                                [(< strength 9)\n\
    \                                 (error \"Extension name cannot be empty\")]\n\
    \                                [(< strength 10)\n                          \
    \       (error \"Extension name cannot be empty\")]\n                        \
    \        [(< strength 11)\n                                 (error \"Extension\
    \ name cannot be empty\")]\n                                [(< strength 12)\n\
    \                                 (error \"Extension name cannot be empty\")]\n\
    \                                [(< strength 13)\n                          \
    \       (error \"Extension name cannot be empty\")]\n                        \
    \        [(< strength 14)\n                                 (error \"Extension\
    \ name cannot be empty\")]\n                                [(< strength 15)\n\
    \                                 (error \"Extension name cannot be empty\")]\n\
    \                                [(< strength 16)\n                          \
    \       (error \"Extension name cannot be empty\")]\n                        \
    \        [(< strength 17)\n                                 (error \"Extension\
    \ name cannot be empty\")]\n                                [(< strength 18)\n\
    \                                 (error \"", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (cons class_name\
    \ (Strongest_Extension class_name (rest extensions)))]\n    [else (cons (first\
    \ extensions) (Strongest_Extension class_name (rest extensions)))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (drop 1 extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (drop 1 extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\
    \"]\n    [(equal? (first extensions) (first extensions)) \n     (Strongest_Extension\
    \ class_name (drop 1 extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (drop 1 extensions)))]))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (cons class_name\
    \ (Strongest_Extension (rest extensions) extensions))]\n    [else (cons (first\
    \ extensions) (Strongest_Extension (rest extensions) extensions))]))\n", "  (let\
    \ ((cap (length class_name)))\n    (let ((sm (length extensions)))\n      (let\
    \ ((strength (- (cap sm) (cap cap))))\n        (cond\n          [(= strength 0)\
    \ (error \"Not enough extensions\")]\n          [(< strength 1) (error \"Too many\
    \ extensions\")]\n          [else (cons class_name (append (substring class_name\
    \ 0 cap) (map car (sort extensions <)))\n                      (substring class_name\
    \ cap (+ sm 1)))])))\n    (error \"No extensions found\")))\n", "  (cond\n   \
    \ [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (drop 1 extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (drop 1 extensions)))]))\n", "  (define (strength extension)\n  \
    \  (string-length (string->symbol (string->string extension))))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength string<))\n  (let ((best_extension\
    \ (best_extension extensions)))\n    (string-append class_name \".\" (symbol->string\
    \ best_extension))))\n", "  (define (strength ext)\n    (string-length \n    \
    \ (string-map \n      (lambda (c)\n        (if (char-upper-case? c)\n        \
    \    (substring ext 0 1)\n            (substring ext 1 1)))) \n     (string-length\
    \ ext)))\n  (define (best_extension extensions)\n    (sort extensions \n     \
    \    (lambda (ext ext2)\n           (if (> strength ext2 strength)\n         \
    \      ext2\n               ext))))\n  (if (null? extensions)\n      \"\"\n  \
    \    (string-append class_name \n                    (best_extension extensions))))\n",
  "  (let ((cap (length class_name)) (sm  (length class_name))) (set! cap (- cap sm))\n\
    \    (cond\n      [(= cap sm)\n       (string-append class_name \".\" (reverse\
    \ extensions))]\n      [(< cap sm)\n       (string-append (substring class_name\
    \ 0 cap) \".\" (reverse extensions))]\n      [else\n       (string-append (substring\
    \ class_name 0 sm) \".\" (reverse extensions))])))\n", "  (define (strength extension)\n\
    \    (string-length extension))\n  (define (best_extension extensions)\n    (if\
    \ (null? extensions)\n        '()\n        (let ((extension (car extensions)))\n\
    \          (if (> (strength extension) 0)\n              (cons extension extensions)\n\
    \              (best_extension (cdr extensions))))))\n  (define (best_extensions\
    \ extensions)\n    (if (null? extensions)\n        '()\n        (let ((extension\
    \ (car extensions)))\n          (if (> (strength extension) 0)\n             \
    \ (cons extension extensions)\n              (best_extensions (cdr extensions))))))\n\
    \  (define (best_extensions_sort extensions)\n    (if (null? extensions)\n   \
    \     '()\n        (let ((extension (car extensions)))\n          (if (> (strength\
    \ extension) 0)\n              (cons extension extensions)\n              (best_extensions_sort\
    \ (cdr extensions))))))\n  (define (best_extensions_sort_by_strength extensions)\n\
    \    (if (null? extensions)\n        '()\n        (let ((extension (car extensions)))\n\
    \          (if (> (strength extension) 0)\n              (cons extension extensions)\n\
    \              (best_extensions_sort_by_strength (cdr extensions))))))\n  (define\
    \ (best_extensions_sort_by_strength_then_name extensions)\n    (if (null? extensions)\n\
    \        '()\n        (let ((extension (car extensions)))\n          (if (> (strength\
    \ extension) 0)\n              (cons extension extensions)\n              (best_extensions_sort_by_strength_then_name\
    \ (cdr extensions))))))\n  (define (best_extensions_sort_by_strength_then_name_then_name\
    \ extensions)\n    (if (null? extensions)\n        '()\n        (let ((extension\
    \ (car extensions)))\n          (if (> (strength extension) 0)\n             \
    \ (cons extension extensions)\n              (best_extensions_sort_by_strength_then_name_then_name\
    \ (cdr extensions))))))\n  (define (best_extensions_sort_by_strength_then_name_then_name_then_name\
    \ extensions)\n    (if (null? extensions)\n        '()\n        (let ((extension\
    \ (car extensions)))\n          (if (> (strength extension) 0)\n             \
    \ (cons extension extensions)\n              (best_extensions_sort_by_strength_then_name_then_name_then_name\
    \ (cdr extensions))))))\n  (define (best_extensions_sort_by_strength_then_name_then_name_then_name_then_name\
    \ extensions)\n    (if (null", "  (define (strength extension)\n    (string-length\
    \ extension))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (drop 1 extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (drop 1 extensions)))]))\n", "  (define (strength extension)\n  \
    \  (string-length extension))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension ", "  (cond\n    [(empty?\
    \ extensions) \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (let ((cap (length class_name)))\n\
    \    (let ((sm (length class_name))) (let ((strength (- cap sm)))\n      (cond\n\
    \        ((= 0 strength) \"\")\n        ((< strength 0) \"\")\n        ((< strength\
    \ (/ cap sm)) (substring class_name 0 cap))\n        (else (substring class_name\
    \ (- cap sm) (- sm cap)))))))\n", "  (let ((cap (length class_name)))\n    (let\
    \ ((sm (length extensions)))\n      (cond\n        ((= cap sm)\n         (string-append\
    \ class_name \".\" extensions))\n        ((< cap sm)\n         (string-append\
    \ (substring class_name 0 cap) (substring class_name cap (- sm cap)))\n      \
    \                \".\" (substring extensions 0 sm) (substring extensions sm (-\
    \ cap sm))))\n        (else\n         (string-append class_name \".\" (substring\
    \ extensions 0 cap))\n                      \".\" (substring extensions cap (-\
    \ sm cap)))))))\n", "  (cond\n    [(empty? extensions) (list class_name)]\n  \
    \  [(equal? (first extensions) (first extensions)) (Strongest_Extension (first\
    \ extensions) (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (first extensions) (rest extensions)))]))\n", "  (let ([cap (length class_name)]\n\
    \        [sm  (length class_name)])\n    (cond\n      [(= cap sm)\n       (string-append\
    \ class_name \".\" extensions \".\" class_name)]\n      [(< cap sm)\n       (string-append\
    \ class_name \".\" extensions \".\" \n                      (substring class_name\
    \ 0 sm) \".\" class_name)]\n      [else\n       (string-append class_name \".\"\
    \ extensions \".\" \n                      (substring class_name 0 cap) \".\"\
    \ class_name)])))\n", "  (cond\n    [(empty? extensions) (list class_name)]\n\
    \    [(equal? (first extensions) (first extensions)) (Strongest_Extension (first\
    \ extensions) (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (first extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions)\
    \ (list class_name)]\n    [(equal? (first extensions) (first extensions)) (list\
    \ class_name)]\n    [else (append (Strongest_Extension (first extensions) (rest\
    \ extensions))\n                  (list class_name)\n                  (first\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) (first class_name)) (Strongest_Extension (rest class_name) (rest\
    \ extensions))]\n    [else (Strongest_Extension (rest class_name) (rest extensions))]))\n",
  "  (define (strength ext)\n    (string-length \n     (string-map \n      (lambda\
    \ (c)\n        (if (char-upper-case? c)\n            (- \n             (string-length\
    \ \n               (string-map \n                (lambda (l)\n               \
    \   (if (char-lower-case? l)\n                      (- \n                    \
    \   (string-length \n                         (string-map \n                 \
    \         (lambda (l)\n                            (if (char-upper-case? l)\n\
    \                                (- \n                                 (string-length\
    \ \n                                   (string-map \n                        \
    \            (lambda (l)\n                                      (if (char-lower-case?\
    \ l)\n                                          (- \n                        \
    \                   (string-length \n                                        \
    \     (string-map \n                                              (lambda (l)\n\
    \                                                (if (char-upper-case? l)\n  \
    \                                                  (- \n                     \
    \                                (string-length \n                           \
    \                            (string-map \n                                  \
    \                      (lambda (l)\n                                         \
    \                 (if (char-lower-case? l)\n                                 \
    \                             (- \n                                          \
    \                     (string-length \n                                      \
    \                           (string-map \n                                   \
    \                               (lambda (l)\n                                \
    \                                    (if (char-upper-case? l)\n              \
    \                                                          (- \n             \
    \                                                            (string-length \n\
    \                                                                           (string-map\
    \ \n                                                                         \
    \   (lambda (l)\n                                                            \
    \                  (if (char-lower-case? l)\n                                \
    \                                                  (- \n                     \
    \                                                              (string-length\
    \ \n                                                                         \
    \            (string-map \n                                                  \
    \                       (lambda (l)\n                                        \
    \                                   (if (char-upper-case? l)\n               \
    \                                                               (- \n        \
    \                                                                       (string-length\
    \ \n                                                                         \
    \        (string-map \n                                                      \
    \               (lambda (l)\n                                                \
    \                                      (if (char-lower-case? l)\n            \
    \                                                                            \
    \  (- \n                                                                     \
    \                      (string-length \n                                     \
    \                                                        (string-map \n      \
    \                                                                            \
    \            (lambda (l)\n                                                   \
    \                                             (if (char-upper-case? l)\n     \
    \                                                                            \
    \                   (- \n                                                    \
    \                                                 (string-length \n          \
    \                                                                            \
    \                 (string-map \n                                             \
    \                                                            (lambda (l)\n   \
    \                                                                            \
    \                            (if (char-lower-case? l)\n                      \
    \                                                                            \
    \            (- \n                                                           \
    \                                                    (string-length \n       \
    \                                                                            \
    \                              (string-map \n                                \
    \                                                                            \
    \      (lambda (l)\n                                                         \
    \                                                           (if (char-upper-case?\
    \ l)\n                                                                       \
    \                                                 (- \n                      \
    \                                                                            \
    \                       (string-length \n                                    \
    \                                                                            \
    \           (string-map \n                                                   \
    \                                                                         (lambda\
    \ (l)\n                                                                      \
    \                                                        (if (char-lower-case?\
    \ l)\n                                                                       \
    \                                                           (- \n            \
    \                                                                            \
    \                                           (string-length \n                \
    \                                                                            \
    \                                         (string-map \n                     \
    \                                                                            \
    \                                    (lambda (l)\n                           \
    \                                                                            \
    \                               (if (char-upper-case? l)\n                   \
    \                                                                            \
    \                                         (- \n                              \
    \                                                                            \
    \                               (string-", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first extensions)) (rest extensions)]\n\
    \    [else (cons (first extensions) (Strongest_Extension class_name (rest extensions)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
