name: HumanEval_153_Strongest_Extension
language: rkt
prompt: "#lang racket\n\n;; You will be given the name of a class (a string) and a\
  \ list of extensions.\n;; The extensions are to be used to load additional classes\
  \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
  \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
  \ number of lowercase letters \n;; in the extension's name, the strength is given\
  \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
  \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there are\
  \ two or more extensions with the same strength, you should\n;; choose the one that\
  \ comes first in the list.\n;; For example, if you are given \"Slices\" as the class\
  \ and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then\
  \ you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest\
  \ extension \n;; (its strength is -1).\n;; Example:\n;; >>> (Strongest_Extension\
  \ \"my_class\" (list \"AA\" \"Be\" \"CC\"))\n;; \"my_class.AA\"\n(define (Strongest_Extension\
  \ class_name extensions)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
  \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
  \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
  \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
  \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
  \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\"\
  \ (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate\
  \ \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal?\
  \ (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"\
  -_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
  \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
  \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
  \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? extensions) (list class_name)]\n    [(equal?\
    \ (first extensions) (first extensions)) (cons class_name (Strongest_Extension\
    \ class_name (rest extensions)))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (let ((cap (length class_name)) (sm\
    \  (length class_name))) (set! cap 0 (set! sm 0) (set! strongest_extension \"\"\
    ) (set! strongest_extension_name \"\") (set! strongest_extension_strength 0))\n\
    \    (for ((i (length extensions))) (if (char-upper? (substring class_name 0 i))\
    \ (set! cap (+ cap (length extensions))) (set! sm (+ sm (length extensions))))\n\
    \    (for ((i (length extensions))) (if (char-lower? (substring class_name 0 i))\
    \ (set! sm  (+ sm (length extensions))) (set! cap (+ cap (length extensions))))\n\
    \    (if (> cap sm) (set! strongest_extension (substring class_name 0 cap)) (set!\
    \ strongest_extension (substring class_name 0 sm))) (set! strongest_extension\
    \ (substring strongest_extension 1 cap)) (set! strongest_extension (substring\
    \ strongest_extension 1 sm)) (set! strongest_extension (substring strongest_extension\
    \ 0 cap)) (set! strongest_extension (substring strongest_extension 0 sm)) (set!\
    \ strongest_extension_strength (- (char-upper? (substring class_name 0 cap)) (char-lower?\
    \ (substring class_name 0 sm)))))\n    (if (> strongest_extension_strength 0)\
    \ (set! strongest_extension_strength 0) (set! strongest_extension_strength (-\
    \ strongest_extension_strength 1))) (set! strongest_extension_strength (- strongest_extension_strength\
    \ 1)) (strongest_extension_name (strongest_extension_name (strongest_extension_name\
    \ (strongest_extension_name (strongest_extension_name (strongest_extension_name\
    \ (strongest_extension_name (strongest_extension_name (strongest_extension_name\
    \ (strongest_extension_name (strongest_extension_name (strongest_extension_name\
    \ (strongest_extension_name (strongest_extension_name (strongest_extension_name\
    \ (strongest_extension_name (strongest_extension_name (strongest_extension_name\
    \ (strongest_extension_name (strongest_extension_name (strongest_extension_name\
    \ (strongest_extension_name (strongest_extension_name (strongest_extension_name\
    \ (strongest_extension_name (strongest_extension_name (strongest_extension_name\
    \ (strongest_extension_name (strongest_", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (list class_name)]\n\
    \    [else (append (Strongest_Extension (first extensions) (rest extensions))\n\
    \                  (list class_name)\n                  (Strongest_Extension (first\
    \ extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (list class_name)]\n\
    \    [else (append (Strongest_Extension (first extensions) (rest extensions))\n\
    \                  (list class_name))]))\n", "  (cond\n    [(empty? extensions)\
    \ (error \"No extensions given\")]\n    [(equal? (first extensions) (first extensions))\
    \ (Strongest_Extension class_name (drop 1 extensions))]\n    [else (cons (first\
    \ extensions) (Strongest_Extension class_name (drop 1 extensions)))]))\n", " \
    \ (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension (first extensions) (rest extensions))]\n \
    \   [else (cons (first extensions) (Strongest_Extension (first extensions) (rest\
    \ extensions)))]))\n", "  (let ((cap (length class_name)) (sm  (length class_name)))\
    \ \n    (cond\n      [(= cap sm) (list class_name)]\n      [(= cap 1) (list class_name)]\n\
    \      [(= sm 1) (list class_name)]\n      [(< cap sm) (list class_name)]\n  \
    \    [(< sm 1) (list class_name)]\n      [else (let ((cap (length extensions)))\
    \ (let ((sm (length extensions))) (cond\n                                    [(=\
    \ cap sm) (list class_name)]\n                                    [(= cap 1) (list\
    \ class_name)]\n                                    [(= sm 1) (list class_name)]\n\
    \                                    [(< cap sm) (list class_name)]\n        \
    \                            [(< sm 1) (list class_name)]\n                  \
    \                  [else (let ((cap (length extensions))) (let ((sm (length extensions)))\
    \ (cond\n                                                          [(= cap sm)\
    \ (list class_name)]\n                                                       \
    \   [(= cap 1) (list class_name)]\n                                          \
    \                [(= sm 1) (list class_name)]\n                              \
    \                            [(< cap sm) (list class_name)]\n                \
    \                                          [(< sm 1) (list class_name)]\n    \
    \                                                      [else (let ((cap (length\
    \ extensions))) (let ((sm (length extensions))) (cond\n                      \
    \                                                                            \
    \  [(= cap sm) (list class_name)]\n                                          \
    \                                                          [(= cap 1) (list class_name)]\n\
    \                                                                            \
    \                        [(= sm 1) (list class_name)]\n                      \
    \                                                                            \
    \  [(< cap sm) (list class_name)]\n                                          \
    \                                                          [(< sm 1) (list class_name)]\n\
    \                                                                            \
    \                        [else (let ((cap (length extensions))) (let ((sm (length\
    \ extensions))) (cond\n                                                      \
    \                                                                            \
    \            [(= cap sm) (list class_name)]\n                                \
    \                                                                            \
    \                                  [(= cap 1) (list class_name)]\n           \
    \                                                                            \
    \                                                       [(= sm 1) (list class_name)]\n\
    \                                                                            \
    \                                                                  [(< cap sm)\
    \ (list class_name)]\n                                                       \
    \                                                                            \
    \           [(< sm 1) (list class_name)]\n                                   \
    \                                                                            \
    \                               [else (list class_name)]\n                   \
    \                                                                            \
    \                                               ))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) (format nil \"~a\" class_name)]\n    [(equal? (first\
    \ extensions) (first extensions)) (Strongest_Extension \n                    \
    \                                  (substring (second class_name) 0 \n       \
    \                                                       (length (first class_name))\
    \ \n                                                              extensions))]\n\
    \    [else (Strongest_Extension (substring (second class_name) 0 \n          \
    \                                (length (first class_name)) \n              \
    \                            extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ (list class_name)]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ (first extensions) (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (first extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (first extensions) (rest extensions))]\n    [else (Strongest_Extension (first\
    \ class_name) (cons (first extensions) (rest extensions)))]))\n", "  (cond\n \
    \   [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first extensions))\
    \ (Strongest_Extension class_name (drop 1 extensions))]\n    [else (cons (first\
    \ extensions) (Strongest_Extension class_name (drop 1 extensions)))]))\n", " \
    \ (cond\n    [(empty? extensions) (format nil \"~a\" class_name)]\n    [(equal?\
    \ (first extensions) (first extensions)) (Strongest_Extension (rest extensions)\
    \ (rest extensions))]\n    [else (Strongest_Extension (rest extensions) (append\
    \ (rest extensions) (list (first extensions))))]))\n", "  (cond\n    [(empty?\
    \ extensions) \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (tail extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (tail extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension class_name\
    \ (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (define (strength extension)\n    (string-length\
    \ extension))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (", "  (let ((cap (length class_name)))\n\
    \    (let ((sm (length extensions)))\n      (let ((strength (/ cap sm)))\n   \
    \     (cond\n          [(= strength 0) (error \"No extensions found\")]\n    \
    \      [(= strength 1) (cons class_name extensions)]\n          [else (let ((extension\
    \ (car extensions))\n                       (extensions (cdr extensions)))\n \
    \               (cond\n                  [(= (length extensions) 0) (error \"\
    No extensions found\")]\n                  [(= (length extensions) 1) (cons class_name\
    \ extension)]\n                  [else (let ((extension (car extensions))\n  \
    \                           (extensions (cdr extensions)))\n                 \
    \       (cond\n                          [(= (length extensions) 0) (error \"\
    No extensions found\")]\n                          [(= (length extensions) 1)\
    \ (cons class_name extension)]\n                          [else (let ((extension\
    \ (car extensions))\n                                       (extensions (cdr extensions)))\n\
    \                                (cond\n                                  [(=\
    \ (length extensions) 0) (error \"No extensions found\")]\n                  \
    \                [(= (length extensions) 1) (cons class_name extension)]\n   \
    \                               [else (let ((extension (car extensions))\n   \
    \                                          (extensions (cdr extensions)))\n  \
    \                                      (cond\n                               \
    \           [(= (length extensions) 0) (error \"No extensions found\")]\n    \
    \                                      [(= (length extensions) 1) (cons class_name\
    \ extension)]\n                                          [else (let ((extension\
    \ (car extensions))\n                                                     (extensions\
    \ (cdr extensions)))\n                                                (cond\n\
    \                                                  [(= (length extensions) 0)\
    \ (error \"No extensions found\")]\n                                         \
    \         [(= (length extensions) 1) (cons class_name extension)]\n          \
    \                                        [else (let ((extension (car extensions))\n\
    \                                                             (extensions (cdr\
    \ extensions)))\n                                                        (cond\n\
    \                                                          [(= (length extensions)\
    \ 0) (error \"No extensions found\")]\n                                      \
    \                    [(= (length extensions) 1) (cons class_name extension)]\n\
    \                                                          [else (let ((extension\
    \ (car extensions))\n                                                        \
    \             (extensions (cdr extensions)))\n                               \
    \                             (cond\n                                        \
    \                      [(= (length extensions) 0) (error \"No extensions found\"\
    )]\n                                                              [(= (length\
    \ extensions) 1) (cons class_name extension)]\n                              \
    \                                [else (let ((extension (car extensions))\n  \
    \                                                                       (extensions\
    \ (cdr extensions)))\n                                                       \
    \     (cond\n                                                              [(=\
    \ (length extensions) 0) (error \"No ", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension class_name\
    \ (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ (first extensions) (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (first extensions) (rest extensions)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
