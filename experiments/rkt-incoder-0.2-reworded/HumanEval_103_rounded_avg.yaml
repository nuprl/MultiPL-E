name: HumanEval_103_rounded_avg
language: rkt
prompt: "#lang racket\n\n;; You are given two positive integers n and m, and your\
  \ task is to compute the\n;; average of the integers from n through m (including\
  \ n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n\
  ;; If n is greater than m, return -1.\n;; Example:\n;; >>> (rounded_avg 1 5)\n;;\
  \ \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"0b1111\"\
  \n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rounded_avg))\n\
  \    (check-equal? (candidate 1 5) \"0b11\")\n    (check-equal? (candidate 7 13)\
  \ \"0b1010\")\n    (check-equal? (candidate 964 977) \"0b1111001010\")\n    (check-equal?\
  \ (candidate 996 997) \"0b1111100100\")\n    (check-equal? (candidate 560 851) \"\
  0b1011000010\")\n    (check-equal? (candidate 185 546) \"0b101101110\")\n    (check-equal?\
  \ (candidate 362 496) \"0b110101101\")\n    (check-equal? (candidate 350 902) \"\
  0b1001110010\")\n    (check-equal? (candidate 197 233) \"0b11010111\")\n    (check-equal?\
  \ (candidate 7 5) -1)\n    (check-equal? (candidate 5 1) -1)\n    (check-equal?\
  \ (candidate 5 5) \"0b101\")\n))\n\n(test-humaneval)"
completions: ["  (let ((avg 0))\n    (if (< n m)\n        -1\n        (set! avg (/\
    \ (+ n m) 2))\n        (set! avg (string->number ((string-append \"0b\" (string->binary\
    \ avg)))))))\n", "  (cond\n    [(< n m) -1]\n    [else (let ([sum (+ n m)]\n \
    \              [count (- n m)]\n               [result (/ sum count)])\n     \
    \      (if (< result 1)\n               (string-append \"0b\" (string-to-int (binary->string\
    \ result)))\n               (string-append \"0b\" (string-to-int (binary->string\
    \ (- (/ result 1) 1))))))]))\n", "  (let ((sum (+ n m)))\n    (cond\n      [(<\
    \ sum m) -1]\n      [(< sum n) 0]\n      [(< sum 0) (quotient sum 2)]))))\n",
  "  (cond\n    [(< n m) -1]\n    [else (let ([a (/ n 2)])\n             (cond\n \
    \              [(= a 0) (/ m 2)]\n               [(= a 1) (/ m 3)]\n         \
    \      [(= a 2) (/ m 4)]\n               [(= a 3) (/ m 5)]\n               [(=\
    \ a 4) (/ m 6)]\n               [(= a 5) (/ m 7)]\n               [(= a 6) (/\
    \ m 8)]\n               [(= a 7) (/ m 9)]\n               [(= a 8) (/ m 10)]\n\
    \               [(= a 9) (/ m 11)]\n               [(= a 10) (/ m 12)]\n     \
    \          [(= a 11) (/ m 13)]\n               [(= a 12) (/ m 14)]\n         \
    \      [(= a 13) (/ m 15)]\n               [(= a 14) (/ m 16)]\n             \
    \  [(= a 15) (/ m 17)]\n               [(= a 16) (/ m 18)]\n               [(=\
    \ a 17) (/ m 19)]\n               [(= a 18) (/ m 20)]\n               [(= a 19)\
    \ (/ m 21)]\n               [(= a 20) (/ m 22)]\n               [(= a 21) (/ m\
    \ 23)]\n               [(= a 22) (/ m 24)]\n               [(= a 23) (/ m 25)]\n\
    \               [(= a 24) (/ m 26)]\n               [(= a 25) (/ m 27)]\n    \
    \           [(= a 26) (/ m 28)]\n               [(= a 27) (/ m 29)]\n        \
    \       [(= a 28) (/ m 30)]\n               [(= a 29) (/ m 31)]\n            \
    \   [(= a 30) (/ m 32)]\n               [(= a 31) (/ m 33)]\n               [(=\
    \ a 32) (/ m 34)]\n               [(= a 33) (/ m 35)]\n               [(= a 34)\
    \ (/ m 36)]\n               [(= a 35) (/ m 37)]\n               [(= a 36) (/ m\
    \ 38)]\n               [(= a 37) (/ m 39)]\n               [(= a 38) (/ m 40)]\n\
    \               [(= a 39) (/ m 41)]\n               [(= a 40) (/ m 42)]\n    \
    \           [(= a 41) (/ m 43)]\n               [(= a 42) (/ m 44)]\n        \
    \       [(= a 43) (/ m 45)]\n               [(= ", "  (let ((sum (+ n m)))\n \
    \   (cond\n      [(< sum m) -1]\n      [else (quotient->binary (quotient sum m))])))\
    \ \n", "  (cond\n    [(< n m) -1]\n    [else (let ([n (floor n)]\n           \
    \    [m  (floor m)]\n               [sum (+ n m)]\n               [count 2])\n\
    \           (cond\n             [(< sum m) (rounded_avg n m)]\n             [(<\
    \ sum n) (+ sum (- n m))]\n             [else (+ sum (* count 2))])))]))\n", " \
    \ (let ([sum (+ n m)]\n        [count (- n m)]\n        [result (/ sum count)])\n\
    \    (if (< sum 0)\n        -1\n        (string-append (format \"0b\" (quotient\
    \ result 2))\n                       (format \"0\" result))))))\n", "  (cond\n\
    \    [(or (< n m) (< m n)) -1]\n    [else (let ([a (/ n 2)])\n            (let\
    \ ([b (/ m 2)])\n              (cond\n                [(< a b) (/ a 2)\n     \
    \            (< b a) (/ b 2)]\n                [else (+ a b)]))]))])\n", "  (if\
    \ (> n m)\n      -1\n      (let ((sum (+ (* n m) (floor m))))\n        (string-append\
    \ (format \"0b\" (quotient sum 2)) \n                       (string-append (format\
    \ \"0\" \n                                               (remainder sum 2)))))))\n",
  "  (cond [(< n m) -1]\n        [else (let ([n (floor n)]\n                    [m\
    \ (floor m)]\n                    [sum (+ n m)]\n                    [count 2])\n\
    \              (if (< n m)\n                  (let ([new (+ n m)]\n          \
    \              [newsum (+ sum new)])\n                    (if (= count 2)\n  \
    \                      (let ([newcount (- count 1)]\n                        \
    \      [newsum (/ newsum newcount)])\n                          (if (= newcount\
    \ 0)\n                              (let ([newsum (/ sum new)])\n            \
    \                    (if (= newsum 0)\n                                    (let\
    \ ([newsum (- sum new)])\n                                      (if (= newsum\
    \ 0)\n                                          (let ([newsum (- sum new)])\n\
    \                                            (if (= newsum 0)\n              \
    \                                  (let ([newsum (- sum new)])\n             \
    \                                     (if (= newsum 0)\n                     \
    \                                 (let ([newsum (- sum new)])\n              \
    \                                          (if (= newsum 0)\n                \
    \                                            (let ([newsum (- sum new)])\n   \
    \                                                           (if (= newsum 0)\n\
    \                                                                  (let ([newsum\
    \ (- sum new)])\n                                                            \
    \        (if (= newsum 0)\n                                                  \
    \                      (let ([newsum (- sum new)])\n                         \
    \                                                 (if (= newsum 0)\n         \
    \                                                                     (let ([newsum\
    \ (- sum new)])\n                                                            \
    \                    (if (= newsum 0)\n                                      \
    \                                              (let ([newsum (- sum new)])\n \
    \                                                                            \
    \         (if (= newsum 0)\n                                                 \
    \                                         (let ([newsum (- sum new)])\n      \
    \                                                                            \
    \          (if (= newsum 0)\n                                                \
    \                                                (let ([newsum (- sum new)])\n\
    \                                                                            \
    \                      (if (= newsum 0)\n                                    \
    \                                                                  (let ([newsum\
    \ (- sum new)])\n                                                            \
    \                                            (if (= newsum 0)\n              \
    \                                                                            \
    \                  (let ([newsum (- sum new)])\n                             \
    \                                                                            \
    \     (if (= newsum 0)\n                                                     \
    \                                                             (let ([newsum (-\
    \ sum new)])\n                                                               \
    \                                                     (if (= newsum 0)\n     \
    \                                                                            \
    \                                       (let ([newsum (- sum new)])\n        \
    \                                                                            \
    \                                      (if (= newsum 0)\n                    \
    \                                                                            \
    \                              (let ([newsum (- sum new)])\n                 \
    \                                                                            \
    \                                   (if (= newsum 0)\n                       \
    \                                                                            \
    \                                 (let ([newsum (- sum new)])\n              \
    \                                                                            \
    \                                            (if (= newsum 0)\n              \
    \                                                                            \
    \                                                (let ([newsum (- sum new)])\n\
    \                                                                            \
    \                                                                (if (= newsum\
    \ 0)\n                                                                       \
    \                                                         ", "  (cond [(< n m)\
    \ -1]\n        [else (let ([sum (+ n m)]\n                   [count (- n m)]\n\
    \                   [remainder (- sum (* 2 count))])\n              (if (< remainder\
    \ 10)\n                  (let ([remainder (- remainder 10)])\n               \
    \     (format #b (string->list remainder))\n                    (cons remainder\
    \ (rounded_avg (+ n 1) m)))\n                  (let ([remainder (- remainder 10)])\n\
    \                    (format #b (string->list remainder))\n                  \
    \  (cons remainder (rounded_avg n m))))]))\n", "  (cond [(< n m) -1]\n       \
    \ [else (let ([s (- m n)]\n                   ([a (- n s)] \n                \
    \   ([b (- m s)]))\n                 (string-append (number->string a)\n     \
    \                           (number->string b)\n                             \
    \   (number->string s))\n                 (string->number (string-append (number->string\
    \ a)\n                                              (number->string b)\n     \
    \                                         (number->string s))))]))\n", "  (cond\n\
    \    [(or (< n m) (< m n)) -1]\n    [else (let ([sum (+ n m)]\n              \
    \ [count (- n m)]\n               [remainder (- m n)]\n               [quotient\
    \ (/ sum count)]\n               [remainder2 (/ remainder count)]\n          \
    \     [quotient2 (/ quotient count)]\n               [remainder3 (/ remainder2\
    \ count)]\n               [quotient3 (/ quotient2 count)]\n               [remainder4\
    \ (/ remainder3 count)]\n               [quotient4 (/ quotient3 count)]\n    \
    \           [remainder5 (/ remainder4 count)]\n               [quotient5 (/ quotient4\
    \ count)])\n           (cond\n             [(< quotient 1) (cond\n           \
    \                    [(< remainder1 1) (cond\n                               \
    \                  [(< quotient1 1) (cond\n                                  \
    \                                 [(< remainder2 1) (cond\n                  \
    \                                                   [(< quotient2 1) (cond\n \
    \                                                                      [(< remainder3\
    \ 1) (cond\n                                                                 \
    \        [(< quotient3 1) (cond\n                                            \
    \                               [(< remainder4 1) (cond\n                    \
    \                                                         [(< quotient4 1) (cond\n\
    \                                                                            \
    \   [(< remainder5 1) (cond\n                                                \
    \                                 [(< quotient5 1) (cond\n                   \
    \                                                                [(< quotient5\
    \ 1) (cond\n                                                                 \
    \                    [(< quotient5 1) (cond\n                                \
    \                                                       [(< quotient5 1) (cond\n\
    \                                                                            \
    \             [(< quotient5 1) (cond\n                                       \
    \                                                    [(< quotient5 1) (cond\n\
    \                                                                            \
    \                 [(< quotient5 1) (cond\n                                   \
    \                                                            [(< quotient5 1)\
    \ (cond\n                                                                    \
    \                             [(< quotient5 1) (cond\n                       \
    \                                                                            [(<\
    \ quotient5 1) (cond\n                                                       \
    \                                              [(< quotient5 1) (cond\n      \
    \                                                                            \
    \                     [(< quotient5 1) (cond\n                               \
    \                                                                          [(<\
    \ quotient5 1) (cond\n                                                       \
    \                                                    [(< quotient5 1) (cond\n\
    \                                                                            \
    \                                 [(< quotient5 1) (cond\n                   \
    \                                                                            \
    \                [(< quotient5 1) (cond\n                                    \
    \                                                                            \
    \ [(< quotient5 1) (cond\n                                                   \
    \                                                                [(< quotient5\
    \ 1) (cond\n                                                                 \
    \                                                    [(< quotient5 1) (cond\n\
    \                                                                            \
    \                                           [(< quotient5 1) (cond\n         \
    \                                                                            \
    \                                    [(< quotient5 1) (cond\n                \
    \                                                                            \
    \                               [(< quotient5 1) (cond\n                     \
    \                                                                            \
    \                            [(< quotient", "  (cond [(> n m) -1]\n        [else\
    \ (let ([n (floor n)]\n                    [m (floor m)]\n                   \
    \ [sum (+ n m)]\n                    [count (- n m)]\n                    [result\
    \ (if (= n m) '0b 0)])\n              (if (= n m) '0b 0)\n              (if (=\
    \ n m) (+ result '0b0)\n                  (+ result (quotient sum count))))]))\n",
  "  (cond\n    [(< n m) -1]\n    [else (let ([sum (+ n m)]\n               [count\
    \ (- n m)]\n               [remainder (quotient sum count)])\n           (cond\n\
    \             [(< remainder 1) (quotient sum count)]\n             [(< remainder\
    \ 2) (quotient sum (- count 1))]\n             [(< remainder 4) (quotient sum\
    \ (- count 2))]\n             [(< remainder 8) (quotient sum (- count 4))]\n \
    \            [(< remainder 16) (quotient sum (- count 8))])]\n         ))]\n))\n",
  "  (cond ((or (< n m) (> n m)) -1)\n        ((< n m) (/ n 2))\n        (else (/\
    \ (- n m) 2))))\n", "  (cond\n    [(< n m) -1]\n    [(< m n) -1]\n    [else (let\
    \ ([sum (+ n m)]\n               [count (- n m)]\n               [result (/ sum\
    \ count)])\n           (string-append (format \"0b\" (quotient result 2))\n  \
    \                         (quotient result 2))]))]))\n", "  (cond [(< n m) -1]\n\
    \        [else (let ([n (floor n)]\n                    [m (floor m)]\n      \
    \              [sum (+ n m)]\n                    [count (- n m)]\n          \
    \          [result (quotient sum count)])\n              (if (= count 0)\n   \
    \               (number->string result)\n                  (number->string result\n\
    \                                (quotient result 2)\n                       \
    \         (quotient result 4)\n                                (quotient result\
    \ 8)\n                                (quotient result 16))))]))\n", "  (cond\
    \ [(< n m) -1]\n        [else (let ([n (- n m)]\n                    [m (- m n)]\n\
    \                    [sum (+ n m)]\n                    [sum2 (* sum 2)])\n  \
    \            (if (= n 0)\n                  (if (= m 0)\n                    \
    \  (if (= sum 0)\n                          -1\n                          (/ sum\
    \ 2))\n                      (/ sum 2))\n                  (if (= m 0)\n     \
    \                 (if (= sum 0)\n                          -1\n              \
    \            (/ sum 2))\n                      (/ sum 2))\n                  (if\
    \ (= n 0)\n                      (if (= sum 0)\n                          -1\n\
    \                          (/ sum 2))\n                      (/ sum 2))\n    \
    \              (if (= n 0)\n                      (if (= sum 0)\n            \
    \              -1\n                          (/ sum 2))\n                    \
    \  (/ sum 2))\n                  (if (= n 0)\n                      (if (= sum\
    \ 0)\n                          -1\n                          (/ sum 2))\n   \
    \                   (/ sum 2))\n                  (if (= n 0)\n              \
    \        (if (= sum 0)\n                          -1\n                       \
    \   (/ sum 2))\n                      (/ sum 2))\n                  (if (= n 0)\n\
    \                      (if (= sum 0)\n                          -1\n         \
    \                 (/ sum 2))\n                      (/ sum 2))\n             \
    \     (if (= n 0)\n                      (if (= sum 0)\n                     \
    \     -1\n                          (/ sum 2))\n                      (/ sum 2))\n\
    \                  (if (= n 0)\n                      (if (= sum 0)\n        \
    \                  -1\n                          (/ sum 2))\n                \
    \      (/ sum 2))\n                  (if (= n 0)\n                      (if (=\
    \ sum 0)\n                          -1\n                          (/ sum 2))\n\
    \                      (/ sum 2))\n                  (if (= n 0)\n           \
    \           (if (= sum 0)\n                          -1\n                    \
    \      (/ sum 2))\n                      (/ sum 2))\n                  (if (=\
    \ n 0)\n                      (if (= sum 0)\n                          -1\n  \
    \                        (/ sum 2))\n                      (/ sum 2))\n      \
    \            (if (= n 0)\n                      (if (= sum 0)\n              \
    \            -1\n                          (/ sum 2))\n                      (/\
    \ sum 2))\n                  (if (= n 0)\n                      (if (= sum 0)\n\
    \                          -1\n                          (/ sum 2))\n        \
    \              (/ sum 2))\n                  (if (= n 0)\n                   \
    \   (if (= sum 0)\n                          -1\n                          (/\
    \ sum 2))\n                      (/ sum 2))\n                  (if (= n 0)\n \
    \                     (if (= sum 0)\n                          -1\n          \
    \                (/ sum 2))\n                      ", "  (if (> n m)\n      -1\n\
    \      (let ((sum (+ n m)))\n        (let ((res (quotient sum 2)))\n         \
    \ (if (= res 0)\n              (format #b \"0b~a\" (- sum (quotient sum 2)))\n\
    \              (format #b \"0b~a\" res))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
