name: HumanEval_95_check_dict_case
language: rkt
prompt: "#lang racket\n\n;; Given a hash, return #t if all keys are strings in lower\
  \ \n;; case or all keys are strings in upper case, else return #f.\n;; The function\
  \ should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case\
  \ #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case\
  \ #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n\
  ;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"\
  apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\"\
  \ .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"\
  STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t\n(define (check_dict_case dict)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_dict_case))\n\
  \    (check-equal? (candidate #hash((\"p\" .  \"pineapple\") (\"b\" .  \"banana\"\
  ))) #t)\n    (check-equal? (candidate #hash((\"p\" .  \"pineapple\") (\"A\" .  \"\
  banana\") (\"B\" .  \"banana\"))) #f)\n    (check-equal? (candidate #hash((\"p\"\
  \ .  \"pineapple\") (\"5\" .  \"banana\") (\"a\" .  \"apple\"))) #f)\n    (check-equal?\
  \ (candidate #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\"\
  ))) #f)\n    (check-equal? (candidate #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"\
  12345\"))) #t)\n    (check-equal? (candidate #hash((\"fruit\" .  \"Orange\") (\"\
  taste\" .  \"Sweet\"))) #t)\n    (check-equal? (candidate #hash()) #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? dict) #f]\n    [(equal? (car dict) (string-equal?\
    \ (car dict) (string-downcase (car dict))) #t) #t]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? dict) #f]\n    [(equal? (car dict) (string-equal? (car dict) (string-lower\
    \ \"a\"))) #t]\n    [(equal? (car dict) (string-equal? (car dict) (string-upper\
    \ \"A\"))) #t]\n    [else #f]))\n", "  (cond ((null? dict) #f)\n        ((equal?\
    \ (car dict) (string-equal? (car dict) (string-downcase (car dict))) #t) #t)\n\
    \        (else (equal? (car dict) (string-upcase (car dict))) #t)))\n", "  (cond\n\
    \    [(empty? dict) #t]\n    [(equal? (car dict) (string-equal? (car dict) (string-downcase\
    \ (car dict))))\n     (check_dict_case (cdr dict))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? dict) #t]\n    [(equal? (car dict) (string-equal? (car dict) (make-string\
    \ (string-length (car dict))))) #t]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #t]\n    [(equal? (car dict) (string-equal? (car dict) (string-downcase\
    \ (car dict))) #t) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(equal? (car dict) (string-equal? (car dict) (string-downcase (car dict))))\n\
    \     (check_dict_case (cdr dict))]\n    [else (check_dict_case (cdr dict))]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(equal? (car dict) (string-equal? (car dict)\
    \ (string-downcase (car dict))) #t) #t]\n    [else (equal? (car dict) (string-equal?\
    \ (car dict) (string-upcase (car dict))) #t) #t]\n  ))\n", "  (cond\n    [(empty?\
    \ dict) #t]\n    [(equal? (car dict) (string-equal? (car dict) (string-downcase\
    \ (car dict))) #t) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #t]\n\
    \    [(equal? (car dict) (string->symbol (string->lower (car dict))))\n     (check_dict_case\
    \ (cdr dict))]\n    [(equal? (car dict) (string->symbol (string->upper (car dict))))\n\
    \     (check_dict_case (cdr dict))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(equal? (caar dict) (string-equal? (string-downcase (car dict))\
    \ (string-downcase (cadar dict))))\n     (check_dict_case (caddr dict))]\n   \
    \ [else #f]))\n", "  (cond\n    [(empty? dict) #t]\n    [(equal? (car dict) (string->symbol\
    \ (string->lower (car dict))))\n     (check_dict_case (cdr dict))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #t]\n    [(equal? (car dict) (string-equal?\
    \ (car dict) (string-downcase (car dict))))\n     (check_dict_case (cdr dict))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(equal? (car dict)\
    \ (string->symbol (string->lower \"a\"))) #t]\n    [(equal? (car dict) (string->symbol\
    \ (string->upper \"A\"))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(equal? (car dict) (string->symbol (string->lower (car dict))))\n\
    \     (check_dict_case (cdr dict))]\n    [else (equal? (car dict) (string->symbol\
    \ (string->upper (car dict))))]\n    [else (check_dict_case (cdr dict))]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(equal? (car dict) (string->symbol (string->lower\
    \ (car dict))))\n     (check_dict_case (cdr dict))]\n    [else (check_dict_case\
    \ (cdr dict))]))\n", "  (cond\n    [(empty? dict) #t]\n    [(equal? (caar dict)\
    \ (string-equal? (string-case (car dict)) (string-case (cadr dict))))\n     (check_dict_case\
    \ (caddr dict))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #t]\n    [(equal?\
    \ (car dict) (string->symbol (string->lower (car dict))))\n     (check_dict_case\
    \ (cdr dict))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #t]\n    [(equal?\
    \ (car dict) (string-equal? (car dict) (string-downcase (car dict))))\n     (check_dict_case\
    \ (cdr dict))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(equal?\
    \ (car dict) (string-equal? (car dict) (string-lower-case? (car dict))) #t) #t]\n\
    \    [else (equal? (car dict) (string-equal? (car dict) (string-upper-case? (car\
    \ dict))) #f)]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
