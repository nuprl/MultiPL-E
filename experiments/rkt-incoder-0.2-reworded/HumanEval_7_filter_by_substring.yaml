name: HumanEval_7_filter_by_substring
language: rkt
prompt: "#lang racket\n\n;; Filter an input list of strings only for ones that contain\
  \ given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>>\
  \ (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list\
  \ \"abc\" \"bacd\" \"array\")\n(define (filter_by_substring strings substring)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n\
  \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
  \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
  \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
  \ \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"\
  xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"\
  prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
completions: ["  (cond [(empty? strings) strings]\n        [(equal? (first strings)\
    \ substring) (filter_by_substring (rest strings) substring)]\n        [else (cons\
    \ (first strings)\n                    (filter_by_substring (filter_by_substring\
    \ (rest strings) substring) substring))]))\n", "  (cond [(empty? strings) empty]\n\
    \        [(equal? (first strings) substring) (cons (first strings) strings)]\n\
    \        [else (filter_by_substring (rest strings) substring)]))\n", "  (filter\
    \ (lambda (s) (member s substring)) strings))\n", "  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) substring) (filter_by_substring (rest strings)\
    \ substring)]\n        [else (cons (first strings)\n                    (filter_by_substring\
    \ (filter_by_substring (rest strings) substring) substring))]))\n", "  (cond\n\
    \    [(empty? strings) strings]\n    [(equal? (first strings) substring) (filter_by_substring\
    \ (tail strings) substring)]\n    [else (cons (first strings)\n              \
    \  (filter_by_substring (tail strings) substring))]))\n", "  (cond [(empty? strings)\
    \ strings]\n        [(equal? (first strings) substring) (filter_by_substring (rest\
    \ strings) substring)]\n        [else (cons (first strings)\n                \
    \    (filter_by_substring (filter_by_substring (rest strings) substring) substring))]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) substring)\
    \ (filter_by_substring (rest strings) substring)]\n        [else (cons (first\
    \ strings)\n                    (filter_by_substring (filter_by_substring (rest\
    \ strings) substring) substring))]))\n", "  (cond\n    [(empty? strings) '()]\n\
    \    [(equal? (first strings) substring) (filter_by_substring (tail strings) substring)]\n\
    \    [else (cons (first strings)\n                (filter_by_substring (tail strings)\
    \ substring))]))\n", "  (cond [(empty? strings) strings]\n        [(equal? (first\
    \ strings) substring) (filter_by_substring (rest strings) substring)]\n      \
    \  [else (cons (first strings)\n                    (filter_by_substring (filter_by_substring\
    \ (rest strings) substring) substring))]))\n", "  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) substring) (filter_by_substring (rest strings)\
    \ substring)]\n        [else (cons (first strings) (filter_by_substring (filter_by_substring\
    \ (rest strings) substring) substring))]))\n", "  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) substring) (filter_by_substring (rest strings)\
    \ substring)]\n        [else (cons (first strings)\n                    (filter_by_substring\
    \ (filter_by_substring (rest strings) substring) substring))]))\n", "  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (filter_by_substring (rest strings) substring) substring))]))\n", "  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (tail strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (tail strings) substring))]))\n", "  (cond [(empty? strings) strings]\n    \
    \    [(equal? (first strings) substring) (filter_by_substring (rest strings) substring)]\n\
    \        [else (cons (first strings)\n                    (filter_by_substring\
    \ (filter_by_substring (rest strings) substring) substring))]))\n", "  (cond\n\
    \    [(empty? strings) strings]\n    [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n    [else (cons (first strings)\n              \
    \  (filter_by_substring (filter_by_substring (rest strings) substring) substring))]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) substring)\
    \ (filter_by_substring (rest strings) substring)]\n        [else (cons (first\
    \ strings) (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n", "  (cond [(empty? strings) strings]\n        [(equal? (first\
    \ strings) substring) (filter_by_substring (rest strings) substring)]\n      \
    \  [else (cons (first strings)\n                    (filter_by_substring (filter_by_substring\
    \ (rest strings) substring) substring))]))\n", "  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) substring) (filter_by_substring (rest strings)\
    \ substring)]\n        [else (cons (first strings)\n                    (filter_by_substring\
    \ (filter_by_substring (rest strings) substring) substring))]))\n", "  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n", "  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) substring) (filter_by_substring (rest strings) substring)]\n\
    \    [else (cons (first strings) (filter_by_substring (rest strings) substring))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
