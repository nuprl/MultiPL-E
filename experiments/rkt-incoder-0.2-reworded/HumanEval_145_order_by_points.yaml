name: HumanEval_145_order_by_points
language: rkt
prompt: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
  ;; in ascending order according to the sum of their digits.\n;; Note: if there are\
  \ several items with similar sum of their digits,\n;; order them based on their\
  \ index in original list.\n;; For example:\n;; >>> (order_by_points (list 1 11 -1\
  \ -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list ))\n;; (list\
  \ )\n(define (order_by_points nums)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
  \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
  \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56\
  \ 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
  \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
  \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list\
  \ 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
  \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
completions: ["  (if (null? nums)\n      (list)\n      (let ([sum (+ (first nums)\
    \ (second nums))])\n        (cons (if (> (sum nums) 0)\n                   (cons\
    \ (first nums) (order_by_points (rest nums)))\n                   (cons (first\
    \ nums) (order_by_points (rest nums))))\n               (order_by_points (rest\
    \ nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (+ (first\
    \ nums) (second nums))))\n        (cons (if (= sum 0)\n                   (first\
    \ nums)\n                   (second nums))\n              (order_by_points (rest\
    \ nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (sum (map\
    \ digit nums))))\n        (cond ((= sum 0) nums)\n              ((< sum 0) (list\
    \ nums))\n              ((> sum 0) (list nums))\n              (else (cons (first\
    \ nums)\n                         (order_by_points (rest nums)))))))\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>", "  (if (null? nums)\n      (list)\n     \
    \ (let ((sum (sum-digits (first nums))))\n        (cons (first nums)\n       \
    \        (order_by_points (rest nums)\n                                 (lambda\
    \ (x y)\n                                   (if (= x y)\n                    \
    \                   x\n                                       (+ (- x y)\n   \
    \                                       (if (= x sum)\n                      \
    \                        0\n                                              1)))\n\
    \                                   y))))))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ([sum (sum (map digit nums))])\n        (cond [(< sum 0) (order_by_points\
    \ nums)]\n              [(= sum 0) (list nums)]\n              [else (cons (first\
    \ nums)\n                         (order_by_points (rest nums))])))))\n", "  (if\
    \ (null? nums)\n      (list)\n      (let ((sum (sum (cdr nums))))\n        (if\
    \ (= sum 0)\n            (append (list (car nums))\n                    (order_by_points\
    \ (cdr nums)))\n            (append (list (car nums))\n                    (order_by_points\
    \ (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (+\
    \ (first nums) (second nums))))\n        (cons (if (> (+ sum 10) 0)\n        \
    \          (cons (first nums) (order_by_points (rest nums)))\n               \
    \   (cons (first nums) (order_by_points (rest nums))))\n              (order_by_points\
    \ (rest nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (+\
    \ (first nums) (second nums))))\n        (cond ((< sum 0) (cons (first nums) nums))\n\
    \              ((> sum 0) (cons (second nums) nums))\n              (else (order_by_points\
    \ (rest nums)))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (+\
    \ (first nums) (second nums))))\n        (cons (if (> (+ sum 10) 0)\n        \
    \          (cons sum (rest nums))\n                  (cons sum (list nums))))\n\
    \              (order_by_points (rest nums)))))\n", "  (define (helper nums acc)\n\
    \    (if (null? nums)\n        acc\n        (helper (cdr nums) (cons (+ (car nums)\
    \ (first acc)) acc))))\n  (helper nums '()))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ((sum (+ (first nums) (second nums))))\n        (cons (if (> (+ sum\
    \ 10) 0)\n                  (cons sum (rest nums))\n                  (cons (first\
    \ nums) (order_by_points (rest nums))))\n              (order_by_points (rest\
    \ nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (sum (cdr\
    \ nums))))\n        (if (= sum 0)\n            (cons (car nums) (order_by_points\
    \ (cdr nums)))\n            (cons (cons (car nums) (order_by_points (cdr nums)))\
    \ (order_by_points (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n  \
    \    (let ((sum (sum (map digit nums))))\n        (cond ((= sum 0) nums)\n   \
    \           ((< sum 0) (list nums))\n              (else (cons (car nums) (order_by_points\
    \ (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (+\
    \ (first nums) (second nums))))\n        (cons (if (> (+ sum 10) (first nums))\n\
    \                  (cons (first nums) (order_by_points (rest nums)))\n       \
    \           (cons (first nums) (order_by_points (rest nums))))\n             \
    \ (order_by_points (rest nums))))))\n", "  (if (null? nums)\n      (list)\n  \
    \    (let ((sum (foldr (lambda (x y) (+ x y)) 0 nums)))\n        (cond ((< sum\
    \ 0) (list nums))\n              ((= sum 0) (list nums))\n              ((> sum\
    \ 0) (cons (car nums) (order_by_points (cdr nums))))\n              (else (order_by_points\
    \ (cdr nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ([sum (+ (first\
    \ nums) (second nums))])\n        (if (> (length nums) 1)\n            (cons (first\
    \ nums)\n                   (order_by_points (rest nums))))\n        (if (> (length\
    \ nums) 2)\n            (cons (first nums)\n                   (order_by_points\
    \ (rest nums))))\n        (if (> (length nums) 3)\n            (cons (first nums)\n\
    \                   (order_by_points (rest nums))))\n        (if (> (length nums)\
    \ 4)\n            (cons (first nums)\n                   (order_by_points (rest\
    \ nums))))\n        (if (> (length nums) 5)\n            (cons (first nums)\n\
    \                   (order_by_points (rest nums))))\n        (if (> (length nums)\
    \ 6)\n            (cons (first nums)\n                   (order_by_points (rest\
    \ nums))))\n        (if (> (length nums) 7)\n            (cons (first nums)\n\
    \                   (order_by_points (rest nums))))\n        (if (> (length nums)\
    \ 8)\n            (cons (first nums)\n                   (order_by_points (rest\
    \ nums))))\n        (if (> (length nums) 9)\n            (cons (first nums)\n\
    \                   (order_by_points (rest nums))))\n        (if (> (length nums)\
    \ 10)\n            (cons (first nums)\n                   (order_by_points (rest\
    \ nums))))\n        (if (> (length nums) 11)\n            (cons (first nums)\n\
    \                   (order_by_points (rest nums))))\n        (if (> (length nums)\
    \ 12)\n            (cons (first nums)\n                   (order_by_points (rest\
    \ nums))))\n        (if (> (length nums) 13)\n            (cons (first nums)\n\
    \                   (order_by_points (rest nums))))\n        (if (> (length nums)\
    \ 14)\n            (cons (first nums)\n                   (order_by_points (rest\
    \ nums))))\n        (if (> (length nums) 15)\n            (cons (first nums)\n\
    \                   (order_by_points (rest nums))))\n        (if (> (length nums)\
    \ 16)\n            (cons (first nums)\n                   (order_by_points (rest\
    \ nums))))\n        (if (> (length nums) 17)\n            (cons (first nums)\n\
    \                   (order_by_points (rest nums))))\n        (if (> (length nums)\
    \ 18)\n            (cons (first nums)\n                   (order_by_points (rest\
    \ nums))))\n        (if (> (length nums) 19)\n            (cons (first nums)\n\
    \                   (order_", "  (if (null? nums)\n      (list)\n      (let ((sum\
    \ (+ (first nums) (second nums))))\n        (if (= sum 0)\n            (cons (first\
    \ nums) (order_by_points (rest nums)))\n            (cons (first nums) (order_by_points\
    \ (rest nums))\n                   (order_by_points (rest nums))))))))\n", " \
    \ (if (null? nums)\n      (list)\n      (let ([sum (sum (car nums))])\n      \
    \  (if (= sum 0)\n            (cons (car nums) (order_by_points (cdr nums)))\n\
    \            (cons (cons (car nums) (order_by_points (cdr nums))) (order_by_points\
    \ (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (sum\
    \ (cdr nums))))\n        (if (= sum 0)\n            (cons (car nums) (order_by_points\
    \ (cdr nums)))\n            (cons (cons (car nums) (order_by_points (cdr nums)))\
    \ (order_by_points (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n  \
    \    (let ((sum (sum-of-digits (first nums))))\n        (cons (first nums)\n \
    \             (if (> (sum-of-digits (first nums)) sum)\n                  (cons\
    \ (first nums)\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
