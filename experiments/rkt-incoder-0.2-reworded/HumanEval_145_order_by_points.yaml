name: HumanEval_145_order_by_points
language: rkt
prompt: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
  ;; in ascending order according to the sum of their digits.\n;; Note: if there are\
  \ several items with similar sum of their digits,\n;; order them based on their\
  \ index in original list.\n;; For example:\n;; >>> (order_by_points (list 1 11 -1\
  \ -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list ))\n;; (list\
  \ )\n(define (order_by_points nums)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
  \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
  \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56\
  \ 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
  \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
  \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list\
  \ 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
  \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
completions: ["  (if (null? nums)\n      (list)\n      (let ([sum (+ (first nums)\
    \ (second nums))])\n        (cons (if (> (sum nums) 0)\n                   (cons\
    \ (first nums) (order_by_points (rest nums)))\n                   (cons (first\
    \ nums) (order_by_points (rest nums))))\n               (order_by_points (rest\
    \ nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (+ (first\
    \ nums) (second nums))))\n        (cons (if (= sum 0)\n                   (first\
    \ nums)\n                   (second nums))\n              (order_by_points (rest\
    \ nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (sum (map\
    \ digit nums))))\n        (cond ((= sum 0) nums)\n              ((< sum 0) (list\
    \ nums))\n              ((> sum 0) (list nums))\n              (else (cons (first\
    \ nums)\n                         (order_by_points (rest nums)))))))\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>", "  (if (null? nums)\n      (list)\n     \
    \ (let ((sum (sum-digits (first nums))))\n        (cons (first nums)\n       \
    \        (order_by_points (rest nums)\n                                 (lambda\
    \ (x y)\n                                   (if (= x y)\n                    \
    \                   x\n                                       (+ (- x y)\n   \
    \                                       (if (= x sum)\n                      \
    \                        0\n                                              1)))\n\
    \                                   y))))))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ([sum (sum (map digit nums))])\n        (cond [(< sum 0) (order_by_points\
    \ nums)]\n              [(= sum 0) (list nums)]\n              [else (cons (first\
    \ nums)\n                         (order_by_points (rest nums))])))))\n", "  (if\
    \ (null? nums)\n      (list)\n      (let ((sum (sum (cdr nums))))\n        (if\
    \ (= sum 0)\n            (append (list (car nums))\n                    (order_by_points\
    \ (cdr nums)))\n            (append (list (car nums))\n                    (order_by_points\
    \ (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (+\
    \ (first nums) (second nums))))\n        (cons (if (> (+ sum 10) 0)\n        \
    \          (cons (first nums) (order_by_points (rest nums)))\n               \
    \   (cons (first nums) (order_by_points (rest nums))))\n              (order_by_points\
    \ (rest nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (+\
    \ (first nums) (second nums))))\n        (cond ((< sum 0) (cons (first nums) nums))\n\
    \              ((> sum 0) (cons (second nums) nums))\n              (else (order_by_points\
    \ (rest nums)))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (+\
    \ (first nums) (second nums))))\n        (cons (if (> (+ sum 10) 0)\n        \
    \          (cons sum (rest nums))\n                  (cons sum (list nums))))\n\
    \              (order_by_points (rest nums)))))\n", "  (define (helper nums acc)\n\
    \    (if (null? nums)\n        acc\n        (helper (cdr nums) (cons (+ (car nums)\
    \ (first acc)) acc))))\n  (helper nums '()))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ((sum (+ (first nums) (second nums))))\n        (cons (if (> (+ sum\
    \ 10) 0)\n                  (cons sum (rest nums))\n                  (cons (first\
    \ nums) (order_by_points (rest nums))))\n              (order_by_points (rest\
    \ nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (sum (cdr\
    \ nums))))\n        (if (= sum 0)\n            (cons (car nums) (order_by_points\
    \ (cdr nums)))\n            (cons (cons (car nums) (order_by_points (cdr nums)))\
    \ (order_by_points (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n  \
    \    (let ((sum (sum (map digit nums))))\n        (cond ((= sum 0) nums)\n   \
    \           ((< sum 0) (list nums))\n              (else (cons (car nums) (order_by_points\
    \ (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (+\
    \ (first nums) (second nums))))\n        (cons (if (> (+ sum 10) (first nums))\n\
    \                  (cons (first nums) (order_by_points (rest nums)))\n       \
    \           (cons (first nums) (order_by_points (rest nums))))\n             \
    \ (order_by_points (rest nums))))))\n", "  (if (null? nums)\n      (list)\n  \
    \    (let ((sum (foldr (lambda (x y) (+ x y)) 0 nums)))\n        (cond ((< sum\
    \ 0) (list nums))\n              ((= sum 0) (list nums))\n              ((> sum\
    \ 0) (cons (car nums) (order_by_points (cdr nums))))\n              (else (order_by_points\
    \ (cdr nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ([sum (+ (first\
    \ nums) (second nums))])\n        (if (> (length nums) 1)\n            (cons (first\
    \ nums)\n                   (order_by_points (rest nums))))\n        (if (> (length\
    \ nums) 2)\n            (cons (first nums)\n                   (order_by_points\
    \ (rest nums))))\n        (if (> (length nums) 3)\n            (cons (first nums)\n\
    \                   (order_by_points (rest nums))))\n        (if (> (length nums)\
    \ 4)\n            (cons (first nums)\n                   (order_by_points (rest\
    \ nums))))\n        (if (> (length nums) 5)\n            (cons (first nums)\n\
    \                   (order_by_points (rest nums))))\n        (if (> (length nums)\
    \ 6)\n            (cons (first nums)\n                   (order_by_points (rest\
    \ nums))))\n        (if (> (length nums) 7)\n            (cons (first nums)\n\
    \                   (order_by_points (rest nums))))\n        (if (> (length nums)\
    \ 8)\n            (cons (first nums)\n                   (order_by_points (rest\
    \ nums))))\n        (if (> (length nums) 9)\n            (cons (first nums)\n\
    \                   (order_by_points (rest nums))))\n        (if (> (length nums)\
    \ 10)\n            (cons (first nums)\n                   (order_by_points (rest\
    \ nums))))\n        (if (> (length nums) 11)\n            (cons (first nums)\n\
    \                   (order_by_points (rest nums))))\n        (if (> (length nums)\
    \ 12)\n            (cons (first nums)\n                   (order_by_points (rest\
    \ nums))))\n        (if (> (length nums) 13)\n            (cons (first nums)\n\
    \                   (order_by_points (rest nums))))\n        (if (> (length nums)\
    \ 14)\n            (cons (first nums)\n                   (order_by_points (rest\
    \ nums))))\n        (if (> (length nums) 15)\n            (cons (first nums)\n\
    \                   (order_by_points (rest nums))))\n        (if (> (length nums)\
    \ 16)\n            (cons (first nums)\n                   (order_by_points (rest\
    \ nums))))\n        (if (> (length nums) 17)\n            (cons (first nums)\n\
    \                   (order_by_points (rest nums))))\n        (if (> (length nums)\
    \ 18)\n            (cons (first nums)\n                   (order_by_points (rest\
    \ nums))))\n        (if (> (length nums) 19)\n            (cons (first nums)\n\
    \                   (order_", "  (if (null? nums)\n      (list)\n      (let ((sum\
    \ (+ (first nums) (second nums))))\n        (if (= sum 0)\n            (cons (first\
    \ nums) (order_by_points (rest nums)))\n            (cons (first nums) (order_by_points\
    \ (rest nums))\n                   (order_by_points (rest nums))))))))\n", " \
    \ (if (null? nums)\n      (list)\n      (let ([sum (sum (car nums))])\n      \
    \  (if (= sum 0)\n            (cons (car nums) (order_by_points (cdr nums)))\n\
    \            (cons (cons (car nums) (order_by_points (cdr nums))) (order_by_points\
    \ (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (sum\
    \ (cdr nums))))\n        (if (= sum 0)\n            (cons (car nums) (order_by_points\
    \ (cdr nums)))\n            (cons (cons (car nums) (order_by_points (cdr nums)))\
    \ (order_by_points (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n  \
    \    (let ((sum (sum-of-digits (first nums))))\n        (cons (first nums)\n \
    \             (if (> (sum-of-digits (first nums)) sum)\n                  (cons\
    \ (first nums)\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))\n                        (order_by_points (rest nums))\n      \
    \                  (order_by_points (rest nums))\n                        (order_by_points\
    \ (rest nums))", "  (if (null? nums)\n      (list)\n      (let ([sum (sum (first\
    \ nums))])\n        (if (= sum 0)\n            (append (list nums)\n         \
    \           (order_by_points (rest nums)))\n            (append (list (first nums))\n\
    \                    (order_by_points (rest nums)))))))\n", "  (if (null? nums)\n\
    \      (list)\n      (let ((sum (foldr (lambda (x y) (+ x y)) 0 nums)))\n    \
    \    (cond ((= sum 0) nums)\n              ((< sum 0) (list nums))\n         \
    \     (else (cons (first nums) (order_by_points (rest nums)))))))\n", "  (if (null?\
    \ nums)\n      (list)\n      (let ((sum (fold_left (lambda (x y) (+ x y)) 0 nums)))\n\
    \        (cond ((< sum 0) (list nums))\n              ((= sum 0) (list nums))\n\
    \              (else (cons (first nums)\n                           (order_by_points\
    \ (rest nums)))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (sum\
    \ (map digits (rest nums)))))\n        (cons (if (= sum 0) (first nums) (first\
    \ nums)) (order_by_points (rest nums))))))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ((sum (+ (first nums) (second nums))))\n        (if (= sum 0)\n  \
    \          (cons (first nums) (order_by_points (rest nums)))\n            (cons\
    \ (first nums)\n                  (order_by_points (rest nums)\n             \
    \                      (lambda (x y)\n                                     (if\
    \ (< x y)\n                                         (cons x y)\n             \
    \                            (cons y x)))))))))\n", "  (if (null? nums)\n    \
    \  (list)\n      (let ((sum (+ (first nums) (second nums))))\n        (cond ((<\
    \ sum 0) (cons (first nums) (order_by_points (rest nums))))\n              ((>\
    \ sum 0) (cons (first nums) (order_by_points (rest nums))))\n              (else\
    \ (cons (first nums) (order_by_points (rest nums)))))))\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try it with `(order_by_points (list 1 11 -1\
    \ -11 -12))`\n<|/ c |>\n<| c |>\nIt does. I tested it before posting it. I just\
    \ added a comment to the code explaining why it doesn't.\n<|/ c |>\n<| c |>\n\
    It doesn't work. Try it with `(order_by_points (list 1 11 -1 -11 -12))`\n<|/ c\
    \ |>\n<| c |>\nIt works. I tested it before posting it. I just added a comment\
    \ to the code explaining why it doesn't.\n<|/ c |>\n<| c |>\nIt doesn't work.\
    \ Try it with `(order_by_points (list 1 11 -1 -11 -12))`\n<|/ c |>\n<| a tags=racket,scheme\
    \ |>\n<code>", "  (if (null? nums)\n      (list)\n      (let ((sum (fold_left\
    \ (lambda (x y) (+ x y)) 0 nums)))\n        (if (= sum 0)\n            (list nums)\n\
    \            (let ((idx (fold_left (lambda (x y) (+ x y)) 0 nums)))\n        \
    \      (cons (cons idx nums) (order_by_points (cdr nums)))))))\n", "  (if (null?\
    \ nums)\n      (list)\n      (let ((sum (+ (first nums) (second nums))))\n   \
    \     (cons (if (> (+ sum 10) 0)\n                  (cons sum (rest nums))\n \
    \                 (cons (first nums) (order_by_points (rest nums))))\n       \
    \       (order_by_points (rest nums))))))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ((sum (fold_left (lambda (x y) (+ x y)) 0 nums)))\n        (if (=\
    \ sum 0)\n            (list)\n            (cons (list-ref nums (- sum 1)) (order_by_points\
    \ (list-ref nums (+ sum 1)))))))\n", "  (if (null? nums)\n      (list)\n     \
    \ (let ((sum (foldr (lambda (x y) (+ x y)) 0 (map digit nums))))\n        (if\
    \ (= sum 0)\n            (list)\n            (cons (first nums)\n            \
    \      (order_by_points (rest nums)))))))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ((sum (sum (cdr nums))))\n        (if (= sum 0)\n            (cons\
    \ (car nums) (order_by_points (cdr nums)))\n            (cons (cons (car nums)\
    \ (order_by_points (cdr nums))) (order_by_points (cdr nums)))))))\n", "  (define\
    \ (helper nums acc)\n    (cond\n      [(empty? nums) (cons acc empty)]\n     \
    \ [(digit-sum (first nums)) (helper (rest nums) (cons (first nums) acc))]\n  \
    \    [else (helper (rest nums) (cons (first nums) acc))]\n      ))\n  (helper\
    \ nums empty))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (sum (cdr\
    \ nums))))\n        (if (= sum 0)\n            (cons (car nums) (order_by_points\
    \ (cdr nums)))\n            (cons (cons (car nums) (order_by_points (cdr nums)))\
    \ (order_by_points (cdr nums))))))))\n", "  (if (null? nums)\n      (list)\n \
    \     (let ((sum (+ (first nums) (second nums))))\n        (cons (if (> (+ sum\
    \ 10) 0)\n                  (cons (first nums) (second nums))\n              \
    \    (cons (first nums) (first nums))))\n            (order_by_points (rest nums)))))\n",
  "  (if (null? nums)\n      (list)\n      (let ((sum (+ (first nums) (second nums))))\n\
    \        (if (equal? sum 0)\n            (cons (first nums) (order_by_points (rest\
    \ nums)))\n            (cons (first nums) (order_by_points (rest nums))\n    \
    \              (cons (second nums) (order_by_points (rest nums)))))))\n</code>\n\
    <|/ a tags=racket,scheme |>\n<| c |>\nThis doesn't work if there are two or more\
    \ items with the same sum.\n<|/ c |>\n<| c |>\nYes, I forgot to mention that.\
    \ Thanks for pointing it out. I've updated my answer.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if there are two or more items with the same sum.\n<|/ c |>\n<|\
    \ c |>\nYes, I forgot to mention that. Thanks for pointing it out. I've updated\
    \ my answer.\n<|/ c |>\n<| a tags=racket,scheme |>\nHere's a solution using Racket's\
    \ built-in sort procedure:\n<code>", "  (if (null? nums)\n      (list)\n     \
    \ (let ([sum (+ (first nums) (second nums))])\n        (cons (if (> (+ sum 1)\
    \ 0)\n                  (cons (first nums) (order_by_points (rest nums)))\n  \
    \                (cons (first nums) (order_by_points (rest nums))))\n        \
    \      (order_by_points (rest nums))))))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ([sum (sum-digits (first nums))])\n        (if (= sum 0)\n       \
    \     (cons (first nums) (order_by_points (rest nums)))\n            (cons (first\
    \ nums)\n                  (order_by_points (rest nums)\n                    \
    \               (lambda (x y)\n                                     (if (< x y)\n\
    \                                         (cons x y)\n                       \
    \                  (cons y x)))))\n            (cons (first nums)\n          \
    \        (order_by_points (rest nums)\n                                   (lambda\
    \ (x y)\n                                     (if (< x y)\n                  \
    \                       (cons y x)\n                                         (cons\
    \ x y)))))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (fold_left\
    \ (lambda (x y) (+ x y)) 0 nums)))\n        (if (= sum 0)\n            (list nums)\n\
    \            (append (list (car nums)) (order_by_points (cdr nums)))))))\n", " \
    \ (if (null? nums)\n      (list)\n      (let ([sum (+ (first nums) (second nums))])\n\
    \        (if (= sum 0)\n            (cons (first nums) (order_by_points (rest\
    \ nums)))\n            (cons (first nums)\n                  (order_by_points\
    \ (rest nums)\n                                 (lambda (x y)\n              \
    \                     (if (> x y)\n                                       (cons\
    \ x y)\n                                       (cons y x))))))))\n", "  (if (null?\
    \ nums)\n      (list)\n      (let ((sum (sum (cdr nums))))\n        (cons (if\
    \ (> (+ sum (car nums)) 0)\n                  (cons (car nums) (cons (car nums)\
    \ (cdr nums)))\n                  (car nums))\n              (order_by_points\
    \ (cons (car nums) (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n  \
    \    (let ((sum (sum (map digit nums))))\n        (cond ((= sum 0) nums)\n   \
    \           ((< sum 0) (list nums))\n              ((> sum 0) (cons (car nums)\
    \ (order_by_points (cdr nums))))\n              (else (order_by_points (cdr nums)))))))\n",
  "  (define (helper nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(digit-sum\
    \ (first nums)) (helper (rest nums) (cons (first nums) acc))]\n      [else (helper\
    \ (rest nums) (cons (first nums) acc))]\n      ))\n  (helper nums nil))\n", " \
    \ (if (null? nums)\n      (list)\n      (let ((sum (foldr (\u03BB (x y) (+ x y))\
    \ 0 nums)))\n        (cons (list-ref nums (sort (\u03BB (x y) (= (+ x y) sum))\n\
    \                                 (\u03BB (x y) (< x y))))\n              (order_by_points\
    \ (list-ref nums (sort (\u03BB (x y) (= (+ x y) sum))\n                      \
    \                     (\u03BB (x y) (> x y))))))))\n", "  (if (null? nums)\n \
    \     (list)\n      (let ((sum (sum-digits nums)))\n        (cond ((= sum 0) nums)\n\
    \              ((< sum 0) (list nums))\n              ((> sum 0) (list nums))\n\
    \              (else (cons (car nums) (order_by_points (cdr nums)))))))\n", " \
    \ (if (null? nums)\n      (list)\n      (let ((sum (foldr (lambda (x y) (+ x y))\
    \ 0 nums)))\n        (cons (if (= sum 0) nums (sub1 nums))\n              (order_by_points\
    \ (sub1 nums)))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (fold_left\
    \ (lambda (x y) (+ x y)) 0 nums)))\n        (if (= sum 0)\n            (list)\n\
    \            (cons (first nums)\n                  (order_by_points (rest nums)))))))\n",
  "  (define (helper nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(< 0\
    \ (car nums)) (helper (cdr nums) (cons (car nums) acc))]\n      [else (helper\
    \ (cdr nums) (cons (car nums) acc))]\n      ))\n  (helper nums '()))\n</code>\n\
    <|/ a tags=racket,scheme |>\n<| c |>\nThanks for your answer. I'm a beginner at\
    \ Scheme and I didn't know about `cond`. However, I still don't understand how\
    \ `helper` works. Could you please explain how it works?\n<|/ c |>\n<| c |>\n\
    The `helper` function has two arguments: the first is the list of numbers to process\
    \ and the second is the accumulator which is initially empty. `helper` calls itself\
    \ recursively until it reaches the end of the list. `helper` then returns the\
    \ accumulator with the new numbers in it.\n<|/ c |>\n<| c |>\nI understand it\
    \ now. Thank you very much!\n<|/ c |>\n<| a tags=racket,scheme |>\n<code>", " \
    \ (if (null? nums)\n      (list)\n      (let ((sum (fold_left (lambda (x y) (+\
    \ x y)) 0 (map digit nums))))\n        (if (= sum 0)\n            (list nums)\n\
    \            (let ((idx (find-index (lambda (x) (= x sum)) nums)))\n         \
    \     (cons (list-ref nums idx) (order_by_points (list-ref nums (+ idx 1)))))))))\n",
  "  (if (null? nums)\n      (list)\n      (let ([sum (+ (first nums) (second nums))])\n\
    \        (cons (if (> (+ sum 10) 0)\n                   (cons sum (rest nums))\n\
    \                   (cons sum (list nums)))\n              (order_by_points (rest\
    \ nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ([sum (+ (first\
    \ nums) (second nums))])\n        (cons (if (> (+ sum 10) 0)\n               \
    \    (cons sum (rest nums))\n                   (cons sum (list nums)))\n    \
    \           (order_by_points (rest nums))))))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ([sum (sum (first nums))])\n        (if (null? (rest nums))\n    \
    \        (cons sum (order_by_points (rest nums)))\n            (if (= sum 0)\n\
    \                (cons (first nums) (order_by_points (rest nums)))\n         \
    \       (cons (first nums)\n                      (order_by_points (rest nums)\n\
    \                                      (cons (first nums) (cons (first nums) (first\
    \ nums))))))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (sum-digits\
    \ (first nums))))\n        (cons (first nums)\n              (order_by_points\
    \ (rest nums)\n                              (lambda (x y)\n                 \
    \               (if (= x y)\n                                    (+ x y)\n   \
    \                                 (if (< x y)\n                              \
    \          (+ x sum)\n                                        (+ sum x)))))))))\n",
  "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n        (helper\
    \ (cdr nums) (cons (+ (car nums) (* 10 acc)) acc)))))\n  (helper nums nil))\n",
  "  (if (null? nums)\n      (list)\n      (let ((sum (fold_left (lambda (x y) (+\
    \ x y)) 0 (map digit nums))))\n        (if (= sum 0)\n            (list)\n   \
    \         (cons (list-ref nums (sub1 sum)) (order_by_points (list-ref nums (sub1\
    \ sum))))))))\n", "  (if (null? nums)\n      (list)\n      (let ([sum (+ (first\
    \ nums) (second nums))])\n        (cons (if (> (abs sum) 0) (list sum) (list sum))\n\
    \               (order_by_points (rest nums)))))))\n", "  (if (null? nums)\n \
    \     (list)\n      (let ((sum (+ (first nums) (second nums))))\n        (if (>\
    \ (first nums) (second nums))\n            (cons (first nums) (order_by_points\
    \ (rest nums)))\n            (cons (first nums) (order_by_points (rest nums)))))))\n",
  "  (if (null? nums)\n      (list)\n      (let ([sum (+ (first nums) (second nums))])\n\
    \        (cons (if (> (abs sum) 0) (cons sum (first nums)) (cons sum (second nums)))\
    \ \n               (order_by_points (rest nums))))))\n", "  (if (null? nums)\n\
    \      (list)\n      (let ([sum (+ (first nums) (second nums))])\n        (cons\
    \ (if (> (abs (- sum (first nums))) (abs (- sum (second nums))))\n           \
    \       (cons (first nums) (order_by_points (rest nums)))\n                  (cons\
    \ (second nums) (order_by_points (rest nums))))\n              (order_by_points\
    \ (rest nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (foldr\
    \ (lambda (x y) (+ x y)) 0 (map digits (reverse nums)))))\n        (if (= sum\
    \ 0)\n            (list nums)\n            (cons (first nums)\n              \
    \     (order_by_points (rest nums)))))))\n", "  (if (null? nums)\n      '()\n\
    \      (let ((sum (+ (first nums) (second nums))))\n        (if (= sum 0)\n  \
    \          (cons (first nums) (order_by_points (rest nums)))\n            (cons\
    \ (first nums)\n                  (order_by_points (rest nums)\n             \
    \                      (lambda (x y)\n                                     (if\
    \ (< x y)\n                                         (cons x y)\n             \
    \                            (cons y x)))))))))\n", "  (if (null? nums)\n    \
    \  (list)\n      (let ([sum (+ (first nums) (second nums))])\n        (cons (if\
    \ (= sum 0) (first nums) (second nums))\n               (order_by_points (rest\
    \ nums)))))))\n", "  (if (null? nums)\n      (list)\n      (let ([sum (sum (car\
    \ nums))])\n        (if (= sum 0)\n            (cons (car nums) (order_by_points\
    \ (cdr nums)))\n            (cons (cons (car nums) (order_by_points (cdr nums)))\
    \ (order_by_points (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n  \
    \    (let ([sum (+ (first nums) (second nums))])\n        (if (= sum 0)\n    \
    \        (cons (first nums) (order_by_points (rest nums)))\n            (cons\
    \ (first nums)\n                  (order_by_points (rest nums)\n             \
    \                     (lambda (x y)\n                                    (if (<\
    \ x y)\n                                        (cons x y)\n                 \
    \                       (cons y x)))))\n            (cons (first nums)\n     \
    \             (order_by_points (rest nums)\n                                 \
    \ (lambda (x y)\n                                    (if (< x y)\n           \
    \                             (cons y x)\n                                   \
    \     (cons x y))))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum\
    \ (sum-digits (first nums))))\n        (if (= sum 0)\n            (cons (first\
    \ nums) (order_by_points (rest nums)))\n            (cons (first nums)\n     \
    \             (order_by_points (rest nums)\n                                 \
    \  (lambda (x y)\n                                     (if (= x y)\n         \
    \                                (+ x y)\n                                   \
    \      (if (< x y)\n                                             (- x y)\n   \
    \                                          0)))))))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| c |>\nThanks so much! I really appreciate it!\n<|/ c |>\n<| c |>\nNo\
    \ problem! I added a solution that uses `sort`, which I believe is more efficient\
    \ than my solution. Let me know if you have any questions.\n<|/ c |>\n<| c |>\n\
    Thanks so much! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem! I added\
    \ a solution that uses `sort`, which I believe is more efficient than my solution.\
    \ Let me know if you have any questions.\n<|/ c |>\n<| c |>\nThanks so much! I\
    \ really appreciate it!\n<|/ c |>\n<| a dscore=1 |>\nHere's a solution using sort:\n\
    <code>", "  (if (null? nums)\n      (list)\n      (let ([sum (+ (first nums) (second\
    \ nums))])\n        (cons (if (> (abs sum) 0) (cons sum (cons (first nums) nums))\
    \ nums)\n               (order_by_points (rest nums))))))\n", "  (if (null? nums)\n\
    \      (list)\n      (let ([sum (+ (first nums) (second nums))])\n        (cons\
    \ (if (> (sum nums) 0)\n                  (cons sum (rest nums))\n           \
    \       (cons (first nums) nums))\n              (order_by_points (rest nums))))))\n",
  "  (if (null? nums)\n      (list)\n      (let ((sum (+ (first nums) (second nums))))\n\
    \        (if (> (second nums) (first nums))\n            (cons (first nums) (order_by_points\
    \ (rest nums)))\n            (cons (first nums) (order_by_points (rest nums)))))))\n",
  "  (define (helper nums acc)\n    (cond\n      [(empty? nums) (reverse acc)]\n \
    \     [(< 0 (car nums)) (helper (cdr nums) (cons (car nums) acc))]\n      [else\
    \ (helper (cdr nums) (cons (car nums) acc))]\n      ))\n  (helper nums ()))\n",
  "  (if (null? nums)\n      (list)\n      (let ([sum (+ (first nums) (second nums))])\n\
    \        (cons (if (= sum 0)\n                   (first nums)\n              \
    \     (second nums))\n               (order_by_points (rest nums))))))\n", " \
    \ (if (null? nums)\n      (list)\n      (let ([sum (sum-digits (first nums))])\n\
    \        (cons (first nums)\n              (if (= sum 0)\n                  (order_by_points\
    \ (rest nums))\n                  (order_by_points (rest nums)\n             \
    \                     (lambda (x y)\n                                    (if (<\
    \ x y)\n                                        (cons x y)\n                 \
    \                       (cons y x))\n                                    (+ x\
    \ y))))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (sum-of-digits\
    \ (first nums))))\n        (if (= sum 0)\n            (cons (first nums)\n   \
    \                (order_by_points (rest nums)))\n            (cons (first nums)\n\
    \                   (order_by_points (rest nums))\n                   (order_by_points\
    \ (rest nums))))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (sum\
    \ (cdr nums))))\n        (if (= sum 0)\n            (cons (car nums) (order_by_points\
    \ (cdr nums)))\n            (cons (car nums)\n                  (order_by_points\
    \ (cdr (sort_by_sum (cdr nums)))))))))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ((sum (+ (first nums) (second nums))))\n        (cons (if (> (+ sum\
    \ 10) 0)\n                  (cons (first nums) (order_by_points (rest nums)))\n\
    \                  (cons (first nums) (order_by_points (rest nums))))\n      \
    \        (order_by_points (rest nums))))))\n", "  (define (helper nums acc)\n\
    \    (cond\n      [(empty? nums) acc]\n      [(digit-sum (first nums)) (helper\
    \ (rest nums) (cons (first nums) acc))]\n      [else (helper (rest nums) (cons\
    \ (first nums) acc))]\n    )\n  )\n  (helper nums nil))\n", "  (if (null? nums)\n\
    \      (list)\n      (let ([sum (+ (first nums) (second nums))])\n        (if\
    \ (> (length nums) 2)\n            (cons (cons sum nums) (order_by_points (rest\
    \ nums)))\n            (cons (cons sum nums) (order_by_points (rest nums)))))))\n",
  "  (if (null? nums)\n      (list)\n      (let ((sum (foldr (\u03BB (x y) (+ x y))\
    \ 0 nums)))\n        (cons (if (< sum 0) (first nums) (first nums)) (order_by_points\
    \ (rest nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ([sum (+\
    \ (first nums) (second nums))])\n        (cons (if (> (abs sum) 0) (list sum)\
    \ nums)\n               (order_by_points (rest nums))))))\n", "  (if (null? nums)\n\
    \      (list)\n      (let ((sum (sum-of-digits (first nums))))\n        (if (null?\
    \ (rest nums))\n            (list sum)\n            (let ((sum1 (sum-of-digits\
    \ (first nums))))\n              (if (> (+ sum1 sum) (+ sum (first nums)))\n \
    \                 (cons (first nums) (order_by_points (rest nums)))\n        \
    \          (cons (first nums) (order_by_points (rest nums)))))))\n</code>\n<|/\
    \ a tags=racket,scheme |>\n<| c |>\nThis solution doesn't work if there are two\
    \ or more numbers with the same sum.\n<|/ c |>\n<| c |>\nYes, I noticed that and\
    \ fixed it now. Thanks.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  (if (null? nums)\n\
    \      (list)\n      (let ((sum (sum (map digit nums))))\n        (if (= sum 0)\n\
    \            (cons (first nums) (order_by_points (rest nums)))\n            (cons\
    \ (first nums)\n                  (order_by_points (rest nums)\n             \
    \                      (lambda (x y)\n                                     (if\
    \ (< x y)\n                                         (cons x y)\n             \
    \                            (cons y x)))))))))\n", "  (if (null? nums)\n    \
    \  (list)\n      (let ((sum (sum-digits nums)))\n        (cond ((= sum 0) (list\
    \ nums))\n              ((< sum 0) (list nums))\n              (else (cons (car\
    \ nums)\n                           (order_by_points (cdr nums)))))))\n", "  (if\
    \ (null? nums)\n      (list)\n      (let ([sum (+ (first nums) (second nums))])\n\
    \        (cons (if (> (sum nums) 0)\n                  (cons (first nums) (order_by_points\
    \ (rest nums)))\n                  (cons (first nums) (order_by_points (rest nums))))\n\
    \              (order_by_points (rest nums))))))\n", "  (if (null? nums)\n   \
    \   (list)\n      (let ((sum (fold_left (lambda (x y) (+ x y)) 0 (map digit nums))))\n\
    \        (if (= sum 0)\n            (list nums)\n            (let ((sorted-nums\
    \ (sort (lambda (x y) (< (+ x y) sum)) nums)))\n              (if (null? sorted-nums)\n\
    \                  (list nums)\n                  (append sorted-nums (list nums)))))))\n",
  "  (if (null? nums)\n      (list)\n      (let ([sum (sum-digits (first nums))])\n\
    \        (cons (first nums)\n              (if (> (sum sum) 0)\n             \
    \     (order_by_points (rest nums))\n                  (order_by_points (rest\
    \ nums))))))))\n", "  (if (null? nums)\n      (list)\n      (let ([sum (+ (first\
    \ nums) (second nums))])\n        (cons (if (> (abs sum) 0) (list sum) nums)\n\
    \               (order_by_points (rest nums))))))\n", "  (if (null? nums)\n  \
    \    (list)\n      (let ([sum (+ (first nums) (second nums))])\n        (cons\
    \ (if (> (+ sum 10) 0)\n                  (cons (first nums) (order_by_points\
    \ (rest nums)))\n                  (cons (first nums) (order_by_points (rest nums))))\n\
    \              (order_by_points (rest nums))))))\n", "  (if (null? nums)\n   \
    \   (list)\n      (let ((sum (sum-of-digits nums)))\n        (if (equal? sum 0)\n\
    \            (list)\n            (append (list (car nums))\n                 \
    \   (order_by_points (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ((sum (+ (first nums) (second nums))))\n        (cons (if (= sum 0)\n\
    \                   (first nums)\n                   (second nums))\n        \
    \      (order_by_points (rest nums))))))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ((sum (sum (cdr nums))))\n        (if (= sum 0)\n            (cons\
    \ (car nums) (order_by_points (cdr nums)))\n            (cons (cons (car nums)\
    \ (order_by_points (cdr nums))) (order_by_points (cdr nums)))))))\n", "  (if (null?\
    \ nums)\n      (list)\n      (let ([sum (+ (first nums) (second nums))])\n   \
    \     (cons (if (= sum 0)\n                   (first nums)\n                 \
    \  (second nums))\n               (order_by_points (rest nums))))))\n", "  (if\
    \ (null? nums)\n      (list)\n      (let ([sum (sum-of-digits (first nums))])\n\
    \        (if (= sum 0)\n            (cons (first nums) (order_by_points (rest\
    \ nums)))\n            (cons (first nums)\n                  (order_by_points\
    \ (rest nums)\n                                   (lambda (x y)\n            \
    \                         (if (< x y)\n                                      \
    \   (cons x y)\n                                         (cons y x))))))))\n",
  "  (if (null? nums)\n      (list)\n      (let ((sum (sum-digits (first nums))))\n\
    \        (if (= sum 0)\n            (cons (first nums)\n                   (order_by_points\
    \ (rest nums)))\n            (cons (first nums)\n                   (order_by_points\
    \ (rest nums))\n                   (order_by_points (rest nums))))))))\n", " \
    \ (if (null? nums)\n      (list)\n      (let ((sum (fold_left (lambda (x y) (+\
    \ x y)) 0 (map digit nums))))\n        (if (= sum 0)\n            (cons nums (list\
    \ nums))\n            (cons (list-ref nums (- sum 0)) \n                   (order_by_points\
    \ (list-tail nums)))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum\
    \ (fold_left (lambda (x y) (+ x y)) 0 nums)))\n        (if (= sum 0)\n       \
    \     (list)\n            (cons (list-ref nums (- sum 1))\n                  (order_by_points\
    \ (list-ref nums (- sum 1)))))))\n", "  (if (null? nums)\n      (list)\n     \
    \ (let ((sum (+ (first nums) (second nums))))\n        (cons (if (> (+ sum 10)\
    \ 0)\n                  (cons sum (rest nums))\n                  (cons (first\
    \ nums) (order_by_points (rest nums))))\n              (order_by_points (rest\
    \ nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (+ (first\
    \ nums) (second nums))))\n        (cons (if (> (+ sum 10) 0) (cons sum (first\
    \ nums)) (cons sum (second nums))) \n               (order_by_points (rest nums))))))\n",
  "  (define (sum-of-digits x)\n    (if (= x 0)\n        0\n        (+ (modulo (modulo\
    \ x 10) 10) (* (quotient x 10) 10))))\n  (define (compare-sums s1 s2)\n    (if\
    \ (= s1 s2)\n        0\n        (if (< s1 s2)\n            -1\n            1)))\n\
    \  (define (compare-indices i1 i2)\n    (if (= i1 i2)\n        0\n        (if\
    \ (< i1 i2)\n            -1\n            1)))\n  (define (compare-sums-indices\
    \ s1 s2 i1 i2)\n    (if (= s1 s2)\n        (if (= i1 i2)\n            0\n    \
    \        (if (< i1 i2)\n                -1\n                1)))\n  (define (compare-sums-indices-indices\
    \ s1 s2 i1 i2 i3)\n    (if (= s1 s2)\n        (if (= i1 i2)\n            (if (=\
    \ i2 i3)\n                0\n                (if (< i1 i2)\n                 \
    \   -1\n                    1)))\n    (if (= s1 s2)\n        (if (= i1 i2)\n \
    \           (if (= i2 i3)\n                (if (< i1 i2)\n                   \
    \ -1\n                    1))\n            (if (< i1 i2)\n                -1\n\
    \                1))))\n  (define (compare-sums-indices-indices-indices s1 s2\
    \ i1 i2 i3 i4)\n    (if (= s1 s2)\n        (if (= i1 i2)\n            (if (= i2\
    \ i3)\n                (if (= i3 i4)\n                    0\n                \
    \    (if (< i1 i2)\n                        -1\n                        1)))\n\
    \        (if (= i1 i2)\n            (if (= i2 i3)\n                (if (= i3 i4)\n\
    \                    (if (< i1 i2)\n                        -1\n             \
    \           1))\n                (if (< i1 i2)\n                    -1\n     \
    \               1))))\n  (define (compare-sums-indices-indices-indices-indices\
    \ s1 s2 i1 i2 i3 i4 i5)\n    (if (= s1 s2)\n        (if (= i1 i2)\n          \
    \  (if (= i2 i3)\n                (if (= i3 i4)\n                    (if (= i4\
    \ i5)\n                        0\n                        (if (< i1 i2)\n    \
    \                        -1\n                            1)))\n            (if\
    \ (= i1 i2)\n                (if (= i2 i3)\n                    (if (= i3 i4)\n\
    \                        (", "  (if (null? nums)\n      (list)\n      (let ([sum\
    \ (sum-digits nums)])\n        (cond [(= sum 0) (cons nums nums)]\n          \
    \    [(< sum 0) (cons (car nums) nums)]\n              [else (cons (car nums)\
    \ (order_by_points (cdr nums)))])))\n</code>\n<|/ a tags=racket,scheme |>\n<|\
    \ c |>\nThanks for your answer. I was trying to solve this problem without using\
    \ any built-in functions. I used the sum-digits function from your answer and\
    \ it worked. Thanks again.\n<|/ c |>\n<| a tags=racket,scheme |>\nHere's a solution\
    \ using only built-in functions:\n<code>", "  (if (null? nums)\n      (list)\n\
    \      (let ((sum (fold_left (lambda (x y) (+ x y)) 0 (map (lambda (x) (mod x\
    \ 10)) nums))))\n        (if (= sum 0)\n            (cons (first nums) (order_by_points\
    \ (rest nums)))\n            (cons (first nums) (order_by_points (rest nums)))))))\n",
  "  (if (null? nums)\n      (list)\n      (let ((sum (+ (first nums) (second nums))))\n\
    \        (if (= sum 0)\n            (cons (first nums) (order_by_points (rest\
    \ nums)))\n            (cons (first nums)\n                  (order_by_points\
    \ (rest nums)\n                                 (lambda (x y)\n              \
    \                     (if (< x y)\n                                       (cons\
    \ x y)\n                                       (cons y x)))))))))\n", "  (if (null?\
    \ nums)\n      (list)\n      (let ((sum (fold_left (lambda (x y) (+ x y)) 0 (map\
    \ digit nums))))\n        (if (= sum 0)\n            (list nums)\n           \
    \ (cons (list-ref nums (- sum 0)) \n                  (order_by_points (list-ref\
    \ nums (- sum 1)))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum\
    \ (sum-of-digits nums)))\n        (if (equal? sum 0)\n            (list nums)\n\
    \            (append (list (car nums)) (list (car nums))\n                   \
    \ (order_by_points (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n  \
    \    (let ((sum (fold_left (lambda (x y) (+ x y)) 0 nums)))\n        (if (= sum\
    \ 0)\n            (list)\n            (cons (list-ref nums (- sum 1))\n      \
    \            (order_by_points (list-ref nums (- sum 1)))))))\n", "  (if (null?\
    \ nums)\n      (list)\n      (let ((sum (+ (first nums) (second nums))))\n   \
    \     (cons (if (> (+ sum 10) 0)\n                  (cons (first nums) (order_by_points\
    \ (rest nums)))\n                  (cons (first nums) (order_by_points (rest nums))))\n\
    \              (order_by_points (rest nums))))))\n", "  (if (null? nums)\n   \
    \   (list)\n      (let ((sum (sum (cdr nums))))\n        (if (= sum 0)\n     \
    \       (cons (car nums) (order_by_points (cdr nums)))\n            (cons (car\
    \ nums)\n                  (order_by_points\n                   (cdr\n       \
    \             (sort_by_sum\n                     (map (lambda (x) (* x 10)) nums)))))))))\n",
  "  (if (null? nums)\n      (list)\n      (let ((sum (sum (cdr nums))))\n       \
    \ (if (< sum 0)\n            (cons (car nums) (order_by_points (cdr nums)))\n\
    \            (cons (car nums) (order_by_points (cdr nums)))))))\n", "  (if (null?\
    \ nums)\n      (list)\n      (let ((sum (fold_left (lambda (x y) (+ x y)) 0 nums)))\n\
    \        (if (= sum 0)\n            (list nums)\n            (append (list (car\
    \ nums)) (order_by_points (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ((sum (fold_left (lambda (x y) (+ x y)) 0 nums)))\n        (if (=\
    \ sum 0)\n            (list)\n            (cons (first nums)\n               \
    \    (order_by_points (rest nums)))))))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ([sum (+ (first nums) (second nums))])\n        (if (> (length nums)\
    \ 1)\n            (cons (first nums)\n                   (order_by_points (rest\
    \ nums)))\n            (cons sum\n                   (order_by_points (rest nums)))))))\n",
  "  (if (null? nums)\n      (list)\n      (let ((sum (fold_left (lambda (x y) (+\
    \ x y)) 0 nums)))\n        (if (= sum 0)\n            (list)\n            (cons\
    \ (car nums) (order_by_points (cdr nums)))))))\n", "  (if (null? nums)\n     \
    \ (list)\n      (let ([sum (sum (map digit nums))])\n        (cond [(= sum 0)\
    \ (cons nums nums)]\n              [(< sum 0) (cons (car nums) (order_by_points\
    \ (cdr nums)))]\n              [else (cons (car nums) (order_by_points (cdr nums)))])))\n\
    </code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThanks for your answer! I didn't\
    \ know about `map` yet. I'm still learning Racket and I appreciate your help.\n\
    <|/ c |>\n<| c |>\nI added a solution that uses `map`\n<|/ c |>\n<| c |>\nThanks\
    \ again! I appreciate your help.\n<|/ c |>\n<| a dscore=1 |>\nI like using map\
    \ for this kind of problem. Here's a solution that uses map and sort:\n<code>",
  "  (if (null? nums)\n      (list)\n      (let ([sum (+ (first nums) (second nums))])\n\
    \        (cons (if (> (+ sum 10) 0)\n                   (cons sum (rest nums))\n\
    \                   (cons (first nums) nums))\n              (order_by_points\
    \ (rest nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ([sum (+\
    \ (first nums) (second nums))])\n        (cons (if (= sum 0)\n               \
    \    (first nums)\n                   (second nums))\n               (order_by_points\
    \ (rest nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (fold_left\
    \ (lambda (x y) (+ x y)) 0 nums)))\n        (if (= sum 0)\n            (list)\n\
    \            (append (list (car nums)) \n                    (order_by_points\
    \ (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (sum-digits\
    \ (first nums))))\n        (if (= sum 0)\n            (cons (first nums) (order_by_points\
    \ (rest nums)))\n            (cons (first nums)\n                  (order_by_points\n\
    \                   (rest nums)\n                   (lambda (x y)\n          \
    \           (if (< x y)\n                         (cons x y)\n               \
    \          (cons y x)))))\n            (cons (first nums)\n                  (order_by_points\n\
    \                   (rest nums)\n                   (lambda (x y)\n          \
    \           (if (< x y)\n                         (cons y x)\n               \
    \          (cons x y)))))))))\n", "  (if (null? nums)\n      (list)\n      (let\
    \ ([sum (sum (first nums))])\n        (if (= sum 0)\n            (cons (first\
    \ nums) (order_by_points (rest nums)))\n            (cons (first nums)\n     \
    \              (order_by_points (rest nums)\n                                \
    \   (lambda (x y)\n                                     (if (< x y)\n        \
    \                                 (cons x y)\n                               \
    \          (cons y x)))))\n            (cons (first nums)\n                  \
    \ (order_by_points (rest nums)\n                                   (lambda (x\
    \ y)\n                                     (if (< x y)\n                     \
    \                    (cons x y)\n                                         (cons\
    \ y x))))))))\n", "  (if (null? nums)\n      (list)\n      (let ([sum (+ (first\
    \ nums) (second nums))])\n        (cons (if (= sum 0)\n                   (first\
    \ nums)\n                   (second nums))\n               (order_by_points (rest\
    \ nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (+ (first\
    \ nums) (second nums))))\n        (cons (if (> (+ sum 10) 0)\n               \
    \   (cons sum (rest nums))\n                  (cons sum (list nums)))\n      \
    \        (order_by_points (rest nums))))))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ((sum (+ (first nums) (second nums))))\n        (cons (if (> (+ sum\
    \ 10) 0)\n                   (cons (first nums) (order_by_points (rest nums)))\n\
    \                   (cons (first nums) (order_by_points (rest nums))))\n     \
    \         (order_by_points (rest nums))))))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ([sum (+ (first nums) (second nums))])\n        (cons (if (> (+ sum\
    \ 1) 0)\n                  (cons (first nums) (order_by_points (rest nums)))\n\
    \                  (cons (first nums) (order_by_points (rest nums))))\n      \
    \        (order_by_points (rest nums))))))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ((sum (fold_left (lambda (x y) (+ x y)) 0 nums)))\n        (if (=\
    \ sum 0)\n            (list)\n            (cons (car nums)\n                 \
    \ (order_by_points (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n  \
    \    (let ([sum (+ (first nums) (second nums))])\n        (cons (if (> (+ sum\
    \ 10) 0)\n                   (cons sum (rest nums))\n                   (cons\
    \ sum (list nums)))\n              (order_by_points (rest nums))))))\n", "  (if\
    \ (null? nums)\n      (list)\n      (let ((sum (sum (cdr nums))))\n        (if\
    \ (= sum 0)\n            (cons (car nums) (order_by_points (cdr nums)))\n    \
    \        (cons (cons (car nums) (order_by_points (cdr nums))) (order_by_points\
    \ (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n      (let ([sum (+\
    \ (first nums) (second nums))])\n        (cons (if (> (+ sum 10) 0) (cons sum\
    \ (first nums)) (cons (first nums) sum))\n               (order_by_points (rest\
    \ nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (sum (map\
    \ (lambda (x) (mod x 10)) nums))))\n        (cond ((= sum 0) nums)\n         \
    \     ((< sum 0) (list nums))\n              ((> sum 0) (cons (first nums) (order_by_points\
    \ (rest nums))))\n              (else (order_by_points (rest nums))))))\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  (if (null? nums)\n      (list)\n\
    \      (let ((sum (+ (first nums) (second nums))))\n        (cons (if (> (+ sum\
    \ 10) 0)\n                  (cons (first nums) (order_by_points (rest nums)))\n\
    \                  (cons (first nums) (order_by_points (rest nums))))\n      \
    \        (order_by_points (rest nums))))))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ([sum (sum (first nums))])\n        (if (= sum 0)\n            (cons\
    \ (first nums) (order_by_points (rest nums)))\n            (cons (first nums)\n\
    \                  (order_by_points (rest nums)\n                            \
    \       (lambda (x y)\n                                     (if (> x y)\n    \
    \                                     (cons x y)\n                           \
    \              (cons y x)))))))))\n", "  (if (null? nums)\n      '()\n      (let\
    \ ((sum (+ (first nums) (second nums))))\n        (if (= sum 0)\n            (cons\
    \ (first nums) (order_by_points (rest nums)))\n            (cons (first nums)\
    \ (order_by_points (rest nums))\n                   (order_by_points (rest nums)))))))\n",
  "  (if (null? nums)\n      (list)\n      (let ((sum (+ (first nums) (second nums))))\n\
    \        (cons (if (= sum 0) (first nums) (second nums)) (order_by_points (rest\
    \ nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (sum (cdr\
    \ nums))))\n        (if (= sum 0)\n            (cons (car nums) (order_by_points\
    \ (cdr nums)))\n            (cons (cons (car nums) (order_by_points (cdr nums)))\
    \ (order_by_points (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n  \
    \    (let ([sum (+ (first nums) (second nums))])\n        (cons (if (> (sum nums)\
    \ 0)\n                  (cons (first nums) (order_by_points (rest nums)))\n  \
    \                (cons (first nums) (order_by_points (rest nums))))\n        \
    \      (order_by_points (rest nums))))))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ([sum (+ (first nums) (second nums))])\n        (cons (if (> (abs\
    \ sum) 0) (list sum) (list sum))\n               (order_by_points (rest nums))))))\n",
  "  (if (null? nums)\n      (list)\n      (let ((sum (fold_left (lambda (x y) (+\
    \ x y)) 0 nums)))\n        (if (= sum 0)\n            (list)\n            (cons\
    \ (list-ref nums (- sum (floor sum))) \n                  (order_by_points (list-ref\
    \ nums (floor (+ sum (floor sum)))))\n            )\n        )\n      )\n    )\n\
    )\n", "  (if (null? nums)\n      (list)\n      (let ((sum (sum (cdr nums))))\n\
    \        (if (= sum 0)\n            (cons (car nums) (order_by_points (cdr nums)))\n\
    \            (cons (cons (car nums) (order_by_points (cdr nums))) (order_by_points\
    \ (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n      (let ([sum (+\
    \ (first nums) (second nums))])\n        (cons (if (> (+ sum 10) 0)\n        \
    \          (cons sum (rest nums))\n                  (cons sum (list nums)))\n\
    \              (order_by_points (rest nums))))))\n", "  (if (null? nums)\n   \
    \   (list)\n      (let ((sum (foldr (lambda (x y) (+ x y)) 0 nums)))\n       \
    \ (cond ((= sum 0) nums)\n              ((< sum 0) (list nums))\n            \
    \  ((> sum 0) (cons (car nums) (order_by_points (cdr nums))))\n              (else\
    \ (order_by_points (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n  \
    \    (let ((sum (fold_left (\u03BB (x y) (+ x y)) 0 (map digit nums))))\n    \
    \    (if (= sum 0)\n            (list nums)\n            (let ((sorted (sort (\u03BB\
    \ (x y) (if (< x y) x y)) nums)))\n              (if (null? sorted)\n        \
    \          (list nums)\n                  (cons (first sorted)\n             \
    \           (order_by_points (rest sorted))))))))\n", "  (if (null? nums)\n  \
    \    (list)\n      (let ((sum (+ (first nums) (second nums))))\n        (cons\
    \ (if (< sum 0)\n                   (first nums)\n                   (second nums))\n\
    \              (order_by_points (rest nums))))))\n", "  (if (null? nums)\n   \
    \   (list)\n      (let ((sum (fold_left (lambda (x y) (+ x y)) 0 nums)))\n   \
    \     (cond ((= sum 0) nums)\n              ((< sum 0) (list nums))\n        \
    \      (else (cons (car nums) (order_by_points (cdr nums)))))))\n", "  (if (null?\
    \ nums)\n      (list)\n      (let ((sum (fold_left (lambda (x y) (+ x y)) 0 (map\
    \ digit nums))))\n        (if (= sum 0)\n            (list nums)\n           \
    \ (append (list (car nums)) (list (car nums))\n                    (order_by_points\
    \ (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (sum-digits\
    \ (first nums))))\n        (if (= sum 0)\n            (cons (first nums) (order_by_points\
    \ (rest nums)))\n            (cons (first nums)\n                  (order_by_points\
    \ (rest nums)\n                                   (lambda (x y)\n            \
    \                         (if (< x y)\n                                      \
    \   (cons x y)\n                                         (cons y x)))))\n    \
    \        (cons (first nums)\n                  (order_by_points (rest nums)\n\
    \                                   (lambda (x y)\n                          \
    \           (if (< x y)\n                                         (cons y x)\n\
    \                                         (cons x y))))))))\n", "  (if (null?\
    \ nums)\n      (list)\n      (let ((sum (foldr (lambda (x y) (+ x y)) 0 nums)))\n\
    \        (cond ((= sum 0) nums)\n              ((< sum 0) (list nums))\n     \
    \         ((> sum 0) (cons (car nums) (order_by_points (cdr nums))))\n       \
    \       (else (order_by_points (cdr nums))))))\n", "  (if (null? nums)\n     \
    \ (list)\n      (let ((sum (foldr (lambda (x y) (+ x y)) 0 nums)))\n        (cond\
    \ ((= sum 0) nums)\n              ((< sum 0) (list nums))\n              (else\
    \ (cons (first nums) (order_by_points (rest nums)))))))\n", "  (if (null? nums)\n\
    \      (list)\n      (let ((sum (fold_left (lambda (x y) (+ x y)) 0 (map digit\
    \ nums))))\n        (if (= sum 0)\n            (list)\n            (cons (first\
    \ nums) (order_by_points (rest nums)))))))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ((sum (+ (first nums) (second nums))))\n        (cons (if (> (+ sum\
    \ 10) 0)\n                  (cons (first nums) (second nums))\n              \
    \    (cons (first nums) (first nums))))\n              (order_by_points (rest\
    \ nums)))))\n", "  (if (null? nums)\n      (list)\n      (let ([sum (sum-digits\
    \ (first nums))])\n        (cons (if (> (+ sum sum-digits (rest nums)) 0)\n  \
    \                 (first nums)\n                   (first nums))\n           \
    \    (order_by_points (rest nums))))))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ((sum (sum (cdr nums))))\n        (if (= sum 0)\n            (cons\
    \ (car nums) (order_by_points (cdr nums)))\n            (cons (cons (car nums)\
    \ (order_by_points (cdr nums))) (order_by_points (cdr nums)))))))\n", "  (if (null?\
    \ nums)\n      (list)\n      (let ((sum (+ (first nums) (second nums))))\n   \
    \     (if (= sum 0)\n            (cons (first nums) (order_by_points (rest nums)))\n\
    \            (cons (first nums) (order_by_points (rest nums))\n              \
    \    (cons (second nums) (order_by_points (rest nums))))))))\n", "  (if (null?\
    \ nums)\n      (list)\n      (let ((sum (+ (first nums) (second nums))))\n   \
    \     (cons (if (> (+ sum 10) 0)\n                  (cons sum (rest nums))\n \
    \                 (cons (first nums) (order_by_points (rest nums))))\n       \
    \       (order_by_points (rest nums))))))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ((sum (sum-digits (first nums))))\n        (cons (first nums)\n  \
    \             (order_by_points (rest nums)\n                                 (lambda\
    \ (x y)\n                                   (if (= x y)\n                    \
    \                   (list x y)\n                                       (< (+ x\
    \ y) sum))))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (fold_left\
    \ (lambda (x y) (+ x y)) 0 (map digit nums))))\n        (if (= sum 0)\n      \
    \      (list nums)\n            (append (list (car nums)) (list (car nums)) (order_by_points\
    \ (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n      (let ([sum (+\
    \ (first nums) (second nums))])\n        (cons (if (= sum 0)\n               \
    \    (first nums)\n                   (second nums))\n               (order_by_points\
    \ (rest nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (sum-of-digits\
    \ nums)))\n        (if (= sum 0)\n            (cons (first nums) (order_by_points\
    \ (rest nums)))\n            (cons (first nums)\n                  (order_by_points\
    \ (rest nums)\n                                (lambda (x y)\n               \
    \                   (if (= x y)\n                                      (cons x\
    \ y)\n                                      (< x y)))))))))\n", "  (if (null?\
    \ nums)\n      (list)\n      (let ([sum (+ (first nums) (second nums))])\n   \
    \     (cons (if (> (+ sum 1) 0)\n                  (cons (first nums) (order_by_points\
    \ (rest nums)))\n                  (cons (first nums) (order_by_points (rest nums))))\n\
    \              (order_by_points (rest nums))))))\n", "  (if (null? nums)\n   \
    \   (list)\n      (let ((sum (fold_left (lambda (x y) (+ x y)) 0 (map digit nums))))\n\
    \        (if (= sum 0)\n            (list nums)\n            (append (list nums)\n\
    \                    (sort (lambda (x y) (< (+ x y) sum))\n                  \
    \         (reverse nums))))))\n", "  (if (null? nums)\n      (list)\n      (let\
    \ ((sum (sum-of-digits (first nums))))\n        (if (= sum 0)\n            (cons\
    \ (first nums) (order_by_points (rest nums)))\n            (cons (first nums)\n\
    \                  (order_by_points (rest nums)\n                            \
    \       (lambda (x y)\n                                     (if (= x y)\n    \
    \                                     (order_by_points (rest nums))\n        \
    \                                 (order_by_points (rest nums)\n             \
    \                                            (lambda (x y)\n                 \
    \                                         (if (= x y)\n                      \
    \                                        (order_by_points (rest nums))\n     \
    \                                                         (order_by_points (rest\
    \ nums)\n                                                                    \
    \           (lambda (x y)\n                                                  \
    \                               (if (= x y)\n                                \
    \                                                     (order_by_points (rest nums))\n\
    \                                                                            \
    \         (order_by_points (rest nums)\n                                     \
    \                                                  (lambda (x y)\n           \
    \                                                                            \
    \ (if (= x y)\n                                                              \
    \                              (order_by_points (rest nums))\n               \
    \                                                                            \
    \ (order_by_points (rest nums)\n                                             \
    \                                                (lambda (x y)\n             \
    \                                                                            \
    \     (if (= x y)\n                                                          \
    \                                        (order_by_points (rest nums))\n     \
    \                                                                            \
    \                 (order_by_points (rest nums)\n                             \
    \                                                                      (lambda\
    \ (x y)\n                                                                    \
    \                                 (if (= x y)\n                              \
    \                                                                          (order_by_points\
    \ (rest nums))\n                                                             \
    \                                           (order_by_points (rest nums)\n   \
    \                                                                            \
    \                          (lambda (x y)\n                                   \
    \                                                                       (if (=\
    \ x y)\n                                                                     \
    \                                         (order_by_points (rest nums))\n    \
    \                                                                            \
    \                              (order_by_points (rest nums)\n                \
    \                                                                            \
    \                   (lambda (x y)\n                                          \
    \                                                                       (if (=\
    \ x y)\n                                                                     \
    \                                                (order_by_points (rest nums))\n\
    \                                                                            \
    \                                         (order_by_points (rest nums)\n     \
    \                                                                            \
    \                                    (lambda (x y)\n                         \
    \                                                                            \
    \                  (if (= x y)\n                                             \
    \                                                                            \
    \ (order_by_points (rest nums))\n                                            \
    \                                                                            \
    \  (order_by_points (rest nums)\n                                            \
    \                                                                            \
    \   (lambda (x y)\n                                                          \
    \                                                                   (if (= x y)\n\
    \                                                                            \
    \                                                     (order_by_points (rest nums))\n\
    \                                                                            \
    \                                                     (order_by_points (rest nums)\n\
    \                                                                            \
    \                                                     (lambda (x y)\n        \
    \                                                                            \
    \                                              (if (= x y)\n                 \
    \                                                                            \
    \                                           (order_by_points (rest nums))\n  \
    \                                                                            \
    \                                                          (order_by_points (rest\
    \ nums)\n                                                                    \
    \                                                                     (lambda\
    \ (x y)\n                                                                    \
    \                                                                      (if (=\
    \ x y)\n                                                                     \
    \                                                                            \
    \                (order_by_points (rest nums))\n                             \
    \                                                                            \
    \                                                        (order_by_points (rest\
    \ nums)\n", "  (if (null? nums)\n      (list)\n      (let ((sum (+ (first nums)\
    \ (second nums))))\n        (cons (if (= sum 0)\n                   (first nums)\n\
    \                   (second nums))\n               (order_by_points (rest nums))))))\n",
  "  (if (null? nums)\n      (list)\n      (let ([sum (+ (first nums) (second nums))])\n\
    \        (cons (if (> (abs sum) 0) (first nums) (second nums)) \n            \
    \   (order_by_points (rest nums))))))\n", "  (if (null? nums)\n      '()\n   \
    \   (let ((sum (fold_left (lambda (x y) (+ x y)) 0 nums)))\n        (if (= sum\
    \ 0)\n            (cons nums nums)\n            (cons (list-ref nums (quotient\
    \ sum 10)) (order_by_points (list-ref nums (remainder sum 10))))))))\n", "  (if\
    \ (null? nums)\n      '()\n      (let ((sum (fold_left (lambda (x y) (+ x y))\
    \ 0 nums)))\n        (cons (if (< sum 0) (- sum) sum) nums))))\n", "  (if (null?\
    \ nums)\n      (list)\n      (let ((sum (sum (map digit nums))))\n        (cond\
    \ ((= sum 0) nums)\n              ((< sum 0) (list nums))\n              (else\
    \ (cons (first nums)\n                           (order_by_points (rest nums)))))))\n",
  "  (if (null? nums)\n      (list)\n      (let ((sum (+ (first nums) (second nums))))\n\
    \        (cons (if (> (+ sum 10) 0)\n                  (cons sum (rest nums))\n\
    \                  (cons sum (list nums)))\n              (order_by_points (rest\
    \ nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (sum (cdr\
    \ nums))))\n        (if (= sum 0)\n            (cons (car nums) (order_by_points\
    \ (cdr nums)))\n            (cons (cons (car nums) (order_by_points (cdr nums)))\
    \ (order_by_points (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n  \
    \    (let ((sum (sum-digits (first nums))))\n        (cons (first nums)\n    \
    \          (if (= sum 0)\n                  (order_by_points (rest nums))\n  \
    \                (order_by_points (rest nums)\n                              \
    \    (lambda (x y)\n                                    (if (< x y)\n        \
    \                                (cons x y)\n                                \
    \        (cons y x)))))))))\n", "  (if (null? nums)\n      (list)\n      (let\
    \ ((sum (sum (cdr nums))))\n        (if (= sum 0)\n            (cons (car nums)\
    \ (order_by_points (cdr nums)))\n            (cons (cons (car nums) (order_by_points\
    \ (cdr nums))) (order_by_points (cdr nums)))))))\n", "  (if (null? nums)\n   \
    \   '()\n      (let ((sum (fold_left (lambda (x y) (+ x y)) 0 nums)))\n      \
    \  (cons (if (= sum 0) (first nums) (first nums)) (order_by_points (rest nums))))))\n",
  "  (if (null? nums)\n      (list)\n      (let ((sum (sum (cdr nums))))\n       \
    \ (if (= sum 0)\n            (cons (car nums) (order_by_points (cdr nums)))\n\
    \            (cons (cons (car nums) (order_by_points (cdr nums))) (order_by_points\
    \ (cdr nums))))))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nI like your\
    \ solution, however it seems to me that it is O(n^2) in the worst case. Is there\
    \ a way to make it O(n)?\n<|/ c |>\n<| c |>\nI added a solution that is O(n) but\
    \ still uses `map`, which is not very idiomatic in Racket.\n<|/ c |>\n<| c |>\n\
    I added a solution that is O(n) but still uses `map`, which is not very idiomatic\
    \ in Racket.\n<|/ c |>\n<| c |>\nI added a solution that is O(n) but still uses\
    \ `map`, which is not very idiomatic in Racket.\n<|/ c |>\n<| a |>\nHere's a solution\
    \ that uses map and foldl:\n<code>", "  (if (null? nums)\n      (list)\n     \
    \ (let ((sum (sum-digits (first nums))))\n        (cons (first nums)\n       \
    \       (if (= sum 0)\n                  (order_by_points (rest nums))\n     \
    \             (order_by_points (rest nums)\n                                 \
    \ (lambda (x y)\n                                    (if (< x y)\n           \
    \                             (cons x y)\n                                   \
    \     (cons y x)))))\n              (order_by_points (rest nums))))))\n", "  (if\
    \ (null? nums)\n      (list)\n      (let ((sum (fold_left (lambda (x y) (+ x y))\
    \ 0 nums)))\n        (if (= sum 0)\n            (list nums)\n            (append\
    \ (list (car nums)) (list (car nums))\n                    (order_by_points (cdr\
    \ nums)))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (foldr (\u03BB\
    \ (x y) (+ x y)) 0 nums)))\n        (if (= sum 0)\n            (list)\n      \
    \      (cons (list-ref nums (- sum (floor sum))) (order_by_points (list-ref nums\
    \ (floor sum)))))\n      )\n    )\n  )\n", "  (if (null? nums)\n      (list)\n\
    \      (let ([sum (sum (map digit nums))])\n        (if (= sum 0)\n          \
    \  (cons (first nums) (order_by_points (rest nums)))\n            (cons (first\
    \ nums)\n                  (order_by_points (rest nums)\n                    \
    \              (lambda (x y)\n                                    (if (= x y)\n\
    \                                        (cons x y)\n                        \
    \                (cons x y))))))))\n", "  (if (null? nums)\n      (list)\n   \
    \   (let ([sum (+ (first nums) (second nums))])\n        (cons (if (> (+ sum 10)\
    \ 0)\n                  (cons (first nums) (order_by_points (rest nums)))\n  \
    \                (cons (first nums) (order_by_points (rest nums))))\n        \
    \      (order_by_points (rest nums))))))\n", "  (define (helper nums acc)\n  \
    \  (if (null? nums)\n        acc\n        (helper (cdr nums)\n               \
    \ (if (= (+ (car nums) (first acc)) 0)\n                    (cons (car nums) acc)\n\
    \                    (helper (cdr nums)\n                            (cons (car\
    \ nums) acc))))))\n  (helper nums '()))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ((sum (sum-digits (first nums))))\n        (cons (first nums)\n  \
    \             (order_by_points (rest nums)\n                                 (lambda\
    \ (x y)\n                                   (if (= x y)\n                    \
    \                   (cons x y)\n                                       (< x y)))))))))\n",
  "  (if (null? nums)\n      (list)\n      (let ((sum (fold_left (lambda (x y) (+\
    \ x y)) 0 nums)))\n        (if (= sum 0)\n            (list nums)\n          \
    \  (let ((index (fold_left (lambda (x y) (+ x y)) 0 nums)))\n              (cons\
    \ (cons index nums) (order_by_points (cdr nums)))))))\n", "  (if (null? nums)\n\
    \      '()\n      (let ((sum (+ (first nums) (second nums))))\n        (cons (if\
    \ (> (+ sum 10) 0)\n                  (cons sum (rest nums))\n               \
    \   (cons sum (list nums))))\n        (order_by_points (rest nums)))))\n", " \
    \ (if (null? nums)\n      '()\n      (let ((sum (foldr (\u03BB (x y) (+ x y))\
    \ 0 nums)))\n        (cons (if (< sum 0) (- sum) sum) nums))))\n", "  (if (null?\
    \ nums)\n      (list)\n      (let ((sum (sum (cdr nums))))\n        (if (= sum\
    \ 0)\n            (append (list (car nums))\n                    (order_by_points\
    \ (cdr nums)))\n            (append (list (car nums))\n                    (order_by_points\
    \ (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (+\
    \ (first nums) (second nums))))\n        (cons (if (> (+ sum 10) 0)\n        \
    \           (cons sum (rest nums))\n                   (cons (first nums) (order_by_points\
    \ (rest nums))))\n              (order_by_points (rest nums))))))\n", "  (if (null?\
    \ nums)\n      (list)\n      (let ((sum (foldr (lambda (x y) (+ x y)) 0 nums)))\n\
    \        (if (= sum 0)\n            (list nums)\n            (cons (list-ref nums\
    \ (- sum (floor sum))) (order_by_points (list-ref nums (ceiling sum)))))\n   \
    \   )\n    )\n  )\n", "  (if (null? nums)\n      (list)\n      (let ((sum (sum\
    \ (cdr nums))))\n        (if (= sum 0)\n            (cons (car nums) (order_by_points\
    \ (cdr nums)))\n            (cons (cons (car nums) (order_by_points (cdr nums)))\
    \ (order_by_points (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n  \
    \    (let ((sum (+ (first nums) (second nums))))\n        (cons (if (> (+ sum\
    \ 10) 0)\n                   (cons sum (rest nums))\n                   (cons\
    \ (first nums) nums))\n              (order_by_points (rest nums))))))\n", " \
    \ (if (null? nums)\n      (list)\n      (let ((sum (sum (cdr nums))))\n      \
    \  (cons (if (> (sum nums) 0) (list (car nums)) (car nums))\n               (order_by_points\
    \ (cdr nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (+ (first\
    \ nums) (second nums))))\n        (cons (if (> (abs (- sum 10)) 0)\n         \
    \         (cons (first nums) (order_by_points (rest nums)))\n                \
    \  (cons (first nums) (order_by_points (rest nums))))\n              (order_by_points\
    \ (rest nums))))))\n", "  (if (null? nums)\n      '()\n      (let ((sum (fold_left\
    \ (lambda (x y) (+ x y)) 0 nums)))\n        (if (= sum 0)\n            (cons nums\
    \ nums)\n            (cons (list-ref nums sum) (order_by_points (list-tail nums)))))))\n",
  "  (if (null? nums)\n      (list)\n      (let ([sum (sum-of-digits (first nums))])\n\
    \        (if (= sum 0)\n            (cons (first nums)\n                   (order_by_points\
    \ (rest nums)))\n            (cons (first nums)\n                   (order_by_points\
    \ (rest nums))\n                   (order_by_points (rest nums))))))))\n", " \
    \ (if (null? nums)\n      (list)\n      (let ((sum (+ (first nums) (second nums))))\n\
    \        (if (> (length nums) 2)\n            (cons (first nums)\n           \
    \       (order_by_points (rest nums)))\n            (cons (cons (first nums) (cons\
    \ (second nums) (order_by_points (rest nums))))\n                  (order_by_points\
    \ (rest nums))))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (sum-digits\
    \ (first nums))))\n        (cons (first nums)\n              (if (> (+ sum sum-digits\
    \ (rest nums)) 0)\n                  (order_by_points (rest nums))\n         \
    \         (order_by_points (rest nums))))))))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ((sum (sum (cdr nums))))\n        (cons (if (> (+ sum (car nums))\
    \ 0)\n                   (car nums)\n                   (cdr nums))\n        \
    \      (order_by_points (cdr nums))))))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ([sum (+ (first nums) (second nums))])\n        (cons (if (> (abs\
    \ sum) 0) (cons sum (first nums)) (cons (first nums) (second nums))) (order_by_points\
    \ (rest nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (sum-digits\
    \ (first nums))))\n        (if (= sum 0)\n            (cons (first nums) (order_by_points\
    \ (rest nums)))\n            (cons (first nums)\n                  (order_by_points\
    \ (rest nums)\n                                  (lambda (x y)\n             \
    \                       (if (< x y)\n                                        (cons\
    \ x y)\n                                        (cons y x)))))))))\n", "  (if\
    \ (null? nums)\n      (list)\n      (let ([sum (+ (first nums) (second nums))])\n\
    \        (cons (if (> (abs sum) 0) (list sum) nums)\n               (order_by_points\
    \ (rest nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ([sum (sum\
    \ (car nums))])\n        (if (= sum 0)\n            (cons (car nums) (order_by_points\
    \ (cdr nums)))\n            (cons (cons (car nums) (order_by_points (cdr nums)))\
    \ (order_by_points (cdr nums)))))))\n", "  (if (null? nums)\n      (list)\n  \
    \    (let ([sum (sum (map digit nums))])\n        (if (= sum 0)\n            (cons\
    \ (first nums) (order_by_points (rest nums)))\n            (cons (first nums)\n\
    \                  (order_by_points (rest nums)\n                            \
    \       (lambda (x y)\n                                     (if (< x y)\n    \
    \                                     (cons x y)\n                           \
    \              (cons y x))))))))\n", "  (if (null? nums)\n      (list)\n     \
    \ (let ((sum (+ (first nums) (second nums))))\n        (cons (if (> (+ sum 10)\
    \ 0)\n                  (cons sum (rest nums))\n                  (cons (first\
    \ nums) (order_by_points (rest nums))))\n              (order_by_points (rest\
    \ nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ([sum (+ (first\
    \ nums) (second nums))])\n        (if (= sum 0)\n            (cons (first nums)\
    \ (order_by_points (rest nums)))\n            (cons (first nums) (order_by_points\
    \ (rest nums))\n                   (order_by_points (rest nums))))))))\n", " \
    \ (if (null? nums)\n      (list)\n      (let ((sum (fold_left (lambda (x y) (+\
    \ x y)) 0 nums)))\n        (if (= sum 0)\n            (list nums)\n          \
    \  (append (list (car nums)) (order_by_points (cdr nums)))))))\n", "  (if (null?\
    \ nums)\n      (list)\n      (let ([sum (+ (first nums) (second nums))])\n   \
    \     (cons (if (> (abs sum) 0) (/ sum 10) (- (abs sum) 10))\n               (order_by_points\
    \ (rest nums)))))))\n", "  (if (null? nums)\n      '()\n      (let ((sum (fold_left\
    \ (\u03BB (x y) (+ x y)) 0 nums)))\n        (if (= sum 0)\n            (cons nums\
    \ nums)\n            (cons (cons nums nums) (order_by_points (cdr nums)))))))\n",
  "  (if (null? nums)\n      (list)\n      (let ([sum (+ (first nums) (second nums))])\n\
    \        (cons (if (> (abs sum) 0) (list sum) nums)\n               (order_by_points\
    \ (rest nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ([sum (+\
    \ (first nums) (second nums))])\n        (cons (if (> (abs sum) 0) (first nums)\
    \ (second nums)) \n               (order_by_points (rest nums))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
