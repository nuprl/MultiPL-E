name: HumanEval_104_unique_digits
language: rkt
prompt: "#lang racket\n\n;; Given a list of positive integers x. return a sorted list\
  \ of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should\
  \ be sorted in increasing order.\n;; For example:\n;; >>> (unique_digits (list 15\
  \ 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323 1422 10))\n\
  ;; (list )\n(define (unique_digits x)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
  \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
  \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
  \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103\
  \ 31)) (list 31 135))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first\
    \ x) \n                           (unique_digits (rest x)))]\n    [else (unique_digits\
    \ (rest x))]))\n", "  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons\
    \ (first x) (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n",
  "  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n      \
    \                    (unique_digits (rest x)))]\n    [else (unique_digits (rest\
    \ x))]))\n", "  (if (null? x)\n      '()\n      (if (even? (car x))\n        \
    \  (cons (car x) \n                (unique_digits (cdr x)))\n          (unique_digits\
    \ (cdr x)))))\n", "  (if (null? x)\n      '()\n      (let ((y (unique_digits (cdr\
    \ x))))\n        (if (null? y)\n            (cons (car x) y)\n            (append\
    \ y (list (car x)))))\n      )\n  )\n", "  (if (null? x)\n      '()\n      (let\
    \ ((y (unique_digits (cdr x))) \n            (z (unique_digits (cdr y))))\n  \
    \      (if (null? y)\n            (cons (car x) z)\n            (if (even? (car\
    \ y))\n                (cons (car x) z)\n                (cons (car x) y))))))\n",
  "  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) (unique_digits\
    \ (rest x)))]\n    [else (unique_digits (rest x))]))\n", "  (if (null? x)\n  \
    \    '()\n      (let ((y (unique_digits (cdr x))))\n        (if (null? y)\n  \
    \          (cons (car x) y)\n            (append y (list (car x)))))\n      )\n\
    \  )\n", "  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x)\
    \ \n                          (unique_digits (rest x)))]\n    [else (unique_digits\
    \ (rest x))]))\n", "  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons\
    \ (first x) \n                          (unique_digits (rest x)))]\n    [else\
    \ (unique_digits (rest x))]))\n", "  (cond [(empty? x) '()]\n        [(even? (first\
    \ x)) (cons (first x) \n                              (unique_digits (rest x)))]\n\
    \        [else (unique_digits (rest x))]))\n", "  (if (null? x)\n      '()\n \
    \     (let ((y (unique_digits (cdr x))) (z (unique_digits x)))\n        (if (null?\
    \ y)\n            (append z (list x))\n            (append y (append z (list x))))))))\n",
  "  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n      \
    \                    (unique_digits (rest x)))]\n    [else (unique_digits (rest\
    \ x))]))\n", "  (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first\
    \ x) (unique_digits (rest x)))]\n    [else (unique_digits (rest x))]))\n", " \
    \ (cond\n    [(empty? x) '()]\n    [(even? (first x)) (cons (first x) \n     \
    \                     (unique_digits (rest x)))]\n    [else (unique_digits (rest\
    \ x))]))\n", "  (if (null? x)\n      '()\n      (let ((y (unique_digits (cdr x))))\n\
    \        (if (null? y)\n            (cons (car x) y)\n            (cons (car x)\
    \ y)\n            (cons (car x) y)))))\n", "  (if (null? x)\n      '()\n     \
    \ (let ((result (sort (filter (lambda (x) (even? (modulo x 10))))\n          \
    \               (lambda (x y) (< (modulo x 10) y)))))\n        (if (null? result)\n\
    \            (cons (car x) result)\n            (cons (car x) result))))))\n",
  "  (if (null? x)\n      '()\n      (let ([y (unique_digits (rest x))])\n       \
    \ (if (null? y)\n            (cons (first x) y)\n            (append y (list (first\
    \ x)))))\n      )\n    )\n", "  (cond\n    [(empty? x) '()]\n    [(even? (first\
    \ x)) (cons (first x) \n                          (unique_digits (rest x)))]\n\
    \    [else (unique_digits (rest x))]))\n", "  (if (null? x)\n      '()\n     \
    \ (cons (first x)\n            (unique_digits (rest x)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
