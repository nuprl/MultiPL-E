name: HumanEval_136_largest_smallest_integers
language: rkt
prompt: "#lang racket\n\n;; Create a function that returns a list (a, b), where 'a'\
  \ is\n;; the largest of negative integers, and 'b' is the smallest\n;; of positive\
  \ integers in a list.\n;; If there is no negative or positive integers, return them\
  \ as #f.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2 4 1 3 5 7))\n\
  ;; (list #f 1)\n;; >>> (largest_smallest_integers (list ))\n;; (list #f #f)\n;;\
  \ >>> (largest_smallest_integers (list 0))\n;; (list #f #f)\n(define (largest_smallest_integers\
  \ lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_smallest_integers))\n\
  \    (check-equal? (candidate (list 2 4 1 3 5 7)) (list #f 1))\n    (check-equal?\
  \ (candidate (list 2 4 1 3 5 7 0)) (list #f 1))\n    (check-equal? (candidate (list\
  \ 1 3 2 4 5 6 -2)) (list -2 1))\n    (check-equal? (candidate (list 4 5 3 6 2 7\
  \ -7)) (list -7 2))\n    (check-equal? (candidate (list 7 3 8 4 9 2 5 -9)) (list\
  \ -9 2))\n    (check-equal? (candidate (list )) (list #f #f))\n    (check-equal?\
  \ (candidate (list 0)) (list #f #f))\n    (check-equal? (candidate (list -1 -3 -5\
  \ -6)) (list -1 #f))\n    (check-equal? (candidate (list -1 -3 -5 -6 0)) (list -1\
  \ #f))\n    (check-equal? (candidate (list -6 -4 -4 -3 1)) (list -3 1))\n    (check-equal?\
  \ (candidate (list -6 -4 -4 -3 -100 1)) (list -3 1))\n))\n\n(test-humaneval)"
completions: ["  (cond [(empty? lst)\n         (list #f #f)] \n        [(< (first\
    \ lst) 0)\n         (list #f (first lst))]\n        [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n\
    \        [(integer? (car lst))\n         (cons (car lst)\n               (largest_smallest_integers\
    \ (cdr lst)))\n         ]\n        [else\n         (largest_smallest_integers\
    \ (cdr lst))\n         ]))\n", "  (cond [(empty? lst) (list #f #f)] \n       \
    \ [(< (first lst) (first rest)) (cons (first lst) (largest_smallest_integers (rest\
    \ lst)))]\n        [else (largest_smallest_integers (rest lst))]))\n", "  (cond\
    \ [(empty? lst) (list #f #f)] \n        [(> (first lst) 0)\n         (cons (first\
    \ lst) (largest_smallest_integers (rest lst)))]\n        [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(number?\
    \ (first lst)) (cons (first lst) (largest_smallest_integers (rest lst)))]\n  \
    \  [else (cons (first lst) (largest_smallest_integers (rest lst)))]))\n", "  (cond\n\
    \    [(empty? lst) (list #f #f)]\n    [(integer? (first lst)) (list (first lst)\
    \ (first lst))]\n    [else (let ([a (largest_smallest_integers (rest lst))])\n\
    \            (cond\n              [(empty? a) (list #f #f)]\n              [(integer?\
    \ (first a)) (list (first a) (first a))]\n              [else (let ([b (largest_smallest_integers\
    \ (rest a))])\n                      (cond\n                        [(empty? b)\
    \ (list #f #f)]\n                        [(integer? (first b)) (list (first b)\
    \ (first b))]\n                        [else (list a (first b))])))]))]))\n",
  "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n        [(< (first lst)\
    \ (first lst))\n         (list (first lst) (first lst))\n         ]\n        [else\n\
    \         (largest_smallest_integers (rest lst))\n         ]\n        ))\n", " \
    \ (cond [(empty? lst)\n         (list #f #f)] \n        [(< (first lst) 0)\n \
    \        (largest_smallest_integers (rest lst))]\n        [else \n         (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond ((null? lst)\n         #f)\n        ((< (car lst)\
    \ 0)\n         (cons (car lst)\n               (largest_smallest_integers (cdr\
    \ lst))))\n        (else\n         (largest_smallest_integers (cdr lst)))))\n",
  "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n        [(integer? (first\
    \ lst))\n         (cons (first lst)\n              (largest_smallest_integers\
    \ (rest lst)))]\n        [else\n         (let ([a (largest_smallest_integers (first\
    \ lst))])\n           (cond [(< a b)\n                  (cons a\n            \
    \             (largest_smallest_integers (rest lst)))]\n                 [else\n\
    \                  (cons b\n                         (largest_smallest_integers\
    \ (rest lst)))]))]))\n", "  (cond [(empty? lst)\n         (list #f #f)] \n   \
    \     [(> (first lst) 0)\n         (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n        [else\n         (largest_smallest_integers (rest lst))]))\n",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(< (first lst) 0) (list #f (first\
    \ lst))]\n    [else (list (max 0 (first lst)) (min 1 (first lst)))]))\n", "  (cond\n\
    \    [(empty? lst) (list #f #f)]\n    [(< (first lst) (first lst)) (list (first\
    \ lst) (first lst))]\n    [else (largest_smallest_integers (rest lst))]))\n",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(> (first lst) (first lst)) (list\
    \ (first lst) (first lst))]\n    [else (largest_smallest_integers (rest lst))]))\n",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(integer? (first lst)) (list first\
    \ lst)]\n    [else (let ([a (largest_smallest_integers (rest lst))])\n       \
    \     (cond\n              [(empty? a) (list #f #f)]\n              [(integer?\
    \ (first a)) (list first a)]\n              [else (let ([b (largest_smallest_integers\
    \ (rest a))])\n                      (cond\n                        [(empty? b)\
    \ (list #f #f)]\n                        [(integer? (first b)) (list first b)]\n\
    \                        [else (cons (first a) (first b))])))]))]))\n", "  (cond\n\
    \    [(empty? lst) (list #f #f)]\n    [(> (first lst) 0) (list (first lst) #f)]\n\
    \    [else (list (first lst) (largest_smallest_integers (rest lst)))]))\n", " \
    \ (cond [(empty? lst)\n         (list #f #f)\n         (< (first lst) (first lst))\n\
    \         (largest_smallest_integers (rest lst))]\n        [(< (first lst) (first\
    \ lst))\n         (list (first lst) (first lst))\n         (largest_smallest_integers\
    \ (rest lst))]\n        [else\n         (list (first lst) (first lst))\n     \
    \    (largest_smallest_integers (rest lst))]))\n", "  (cond [(empty? lst) (list\
    \ #f #f)] \n        [(integer? (car lst)) (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n        [else (largest_smallest_integers (cdr lst))]))\n", " \
    \ (cond [(empty? lst)\n         (list #f #f)\n         ]\n        [(< (first lst)\
    \ 0)\n         (largest_smallest_integers (rest lst))\n         ]\n        [else\n\
    \         (largest_smallest_integers (rest lst))\n         ]\n        ))\n", " \
    \ (cond [(empty? lst)\n         (list #f #f)\n         ]\n        [(< (first lst)\
    \ (first rest))\n         (largest_smallest_integers (rest lst))\n         ]\n\
    \        [(< (first rest) (first lst))\n         (list (first lst) (first rest))\n\
    \         ]\n        [else\n         (largest_smallest_integers (rest lst))\n\
    \         ]\n        ))\n", "  (cond [(empty? lst) #f]\n        [(integer? (first\
    \ lst)) (first lst)]\n        [else (cons (largest_smallest_integers (rest lst))\n\
    \                    (largest_smallest_integers (rest lst)))]))\n", "  (cond [(empty?\
    \ lst)\n         (list #f #f)] \n        [(< (first lst) (first lst (rest lst)))\n\
    \         (largest_smallest_integers (rest lst))]\n        [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n\
    \        [(< (first lst) 0)\n         (list (first lst) #f (second lst))\n   \
    \      ]\n        [else\n         (largest_smallest_integers (rest lst))\n   \
    \      ]))\n", "  (cond [(empty? lst) (list #f #f)] \n        [(number? (first\
    \ lst)) (cons (first lst) (largest_smallest_integers (rest lst)))]\n        [else\
    \ (largest_smallest_integers (rest lst))]))\n", "  (cond\n    [(empty? lst)\n\
    \     (list #f #f)\n     (let ([a (first lst)\n             (b (second lst)])\n\
    \       (cond\n         [(< a b)\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [else\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))])))]\n    [else\n     (let ([a (first lst)\n             (b (second\
    \ lst)])\n       (cond\n         [(< a b)\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [else\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))])))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n     \
    \    ]\n        [(> (first lst) (first lst))\n         (list (first lst) (first\
    \ lst))\n         ]\n        [else\n         (largest_smallest_integers (rest\
    \ lst))\n         ]))\n", "  (cond [(null? lst) (list #f #f)] \n        [(number?\
    \ (car lst)) (cons (car lst) (largest_smallest_integers (cdr lst)))]\n       \
    \ [else (largest_smallest_integers (cdr lst))]))\n", "  (cond\n    [(empty? lst)\
    \ (list #f #f)]\n    [(> (first lst) 0) (list (first lst) 1)]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst)\n     (list #f #f)\n     (let\
    \ ([a (first lst)\n             (b (second lst)])\n       (cond\n         [(<\
    \ a b)\n          (list a b)\n          (largest_smallest_integers (rest lst))]\n\
    \         [(< b a)\n          (list b a)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [else\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))])))]\n    [else\n     (let ([a (first lst)\n             (b (second\
    \ lst)])\n       (cond\n         [(< a b)\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [(< b a)\n          (list b a)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [else\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))])))]))\n", "  (cond [(null? lst)\n         (list #f #f)\n      \
    \   ]\n        [(< (first lst) 0)\n         (largest_smallest_integers (rest lst))\n\
    \         ]\n        [else\n         (largest_smallest_integers (rest lst))\n\
    \         ]\n        ))\n", "  (cond [(empty? lst)\n         (list #f #f)\n  \
    \       ]\n        [(< (first lst) 0)\n         (largest_smallest_integers (rest\
    \ lst))\n         ]\n        [else\n         (largest_smallest_integers (rest\
    \ lst))\n         ]\n        ))\n", "  (cond [(empty? lst) #f]\n        [(integer?\
    \ (first lst)) (largest_smallest_integers (rest lst))]\n        [else (cons (max\
    \ (first lst) (first lst)) (largest_smallest_integers (rest lst)))]))\n", "  (cond\n\
    \    [(empty? lst) (list #f #f)]\n    [(number? (car lst)) (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n    [else (largest_smallest_integers (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) (list #f #f)]\n    [(number? (first lst)) (cons (first lst)\
    \ (largest_smallest_integers (rest lst)))]\n    [else (cons (largest_smallest_integers\
    \ (first lst)) (largest_smallest_integers (rest lst)))]))\n", "  (cond\n    [(empty?\
    \ lst)\n     (list #f #f)\n     (let ([a (largest_integer (first lst))\n     \
    \       b (smallest_integer (first lst))])\n       (cond\n         [(< a b)\n\
    \          (list (cons a b))\n          (list (cons a (- b a)))]\n         [else\n\
    \          (list (cons a b))]))]\n    [else\n     (largest_smallest_integers (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(> (first lst)\
    \ 0) (list (first lst) (first lst))]\n    [else (largest_smallest_integers (rest\
    \ lst))]))\n", "  (cond [(empty? lst)\n         (list #f #f)] \n        [(integer?\
    \ (car lst))\n         (cons (car lst) (largest_smallest_integers (cdr lst)))]\n\
    \        [else\n         (largest_smallest_integers (cdr lst))]))\n", "  (cond\
    \ [(empty? lst)\n         (list #f #f)] \n        [(< (first lst) 0)\n       \
    \  (list (first lst) #f)] \n        [else (largest_smallest_integers (rest lst))]))\n",
  "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n        [(< (first lst)\
    \ 0)\n         (largest_smallest_integers (rest lst))\n         ]\n        [else\n\
    \         (largest_smallest_integers (rest lst))\n         ]\n        ))\n", " \
    \ (cond [(empty? lst) (list #f #f)] \n        [(> (first lst) (first lst)) (list\
    \ (first lst) (first lst))]\n        [else (largest_smallest_integers (rest lst))]))\n",
  "  (cond [(empty? lst) (list #f #f)]\n        [(integer? (first lst)) (cons (first\
    \ lst) (largest_smallest_integers (rest lst)))]\n        [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(number?\
    \ (first lst)) (list first first)]\n    [else (cons (largest_smallest_integers\
    \ (rest lst))\n                (largest_smallest_integers (rest lst)))]))\n",
  "  (cond [(empty? lst)\n         (list #f #f)] \n        [(< (first lst) 0)\n  \
    \       (largest_smallest_integers (rest lst))]\n        [else \n         (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n\
    \        [(< (first lst) (first lst))\n         (list (first lst) (first lst))\n\
    \         ]\n        [else\n         (largest_smallest_integers (rest lst))\n\
    \         ]))\n", "  (cond ((null? lst)\n         (list #f #f))\n        ((< 0\
    \ (car lst))\n         (cons (car lst) (largest_smallest_integers (cdr lst))))\n\
    \        (else\n         (largest_smallest_integers (cdr lst)))))\n", "  (cond\
    \ [(null? lst)\n         (list #f #f)\n         ]\n        [(< (car lst) 0)\n\
    \         (largest_smallest_integers (cdr lst))\n         ]\n        [else\n \
    \        (largest_smallest_integers (cdr lst))\n         ]\n        ))\n", " \
    \ (cond [(empty? lst) (list #f #f)] \n        [(> (first lst) 0) (cons (first\
    \ lst) (largest_smallest_integers (rest lst)))]\n        [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(integer?\
    \ (first lst)) (list first lst)]\n    [else (let ([a (largest_smallest_integers\
    \ (rest lst))])\n            (cond\n              [(empty? a) (list #f #f)]\n\
    \              [(integer? (first a)) (list first a)]\n              [else (let\
    \ ([b (smallest_largest_integers (rest a))])\n                      (cond\n  \
    \                      [(empty? b) (list #f #f)]\n                        [(integer?\
    \ (first b)) (list first b)]\n                        [else (cons (first a) (cons\
    \ (first b) (largest_smallest_integers (rest b))))]))]))]))\n", "  (cond\n   \
    \ [(empty? lst) (list #f #f)]\n    [(< (first lst) (first lst)) (list (first lst)\
    \ (first lst))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\
    \ [(null? lst) (list #f #f)] \n        [(> (car lst) 0) (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n        [else (largest_smallest_integers (cdr lst))]))\n", " \
    \ (cond [(empty? lst)\n         (list #f #f)] \n        [(< (first lst) 0)\n \
    \        (list (first lst) \n               (smallest (rest lst)))]\n        [(<\
    \ (first lst) 0)\n         (list (first lst) \n               (smallest (rest\
    \ lst)))]\n        [else\n         (list (first lst) \n               (smallest\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(number?\
    \ (first lst)) (list #f (first lst))]\n    [else (let ([a (largest_smallest_integers\
    \ (rest lst))]\n               [b smallest_integer (first lst)])\n           \
    \  (cond\n              [(< a b) (list a b)]\n              [(< b a) (list b a)]\n\
    \              [else (list a b)]))]))\n", "  (cond [(empty? lst)\n         (list\
    \ #f #f)\n         ]\n        [(< (first lst) (first lst))\n         (list (first\
    \ lst) (first lst))\n         ]\n        [else\n         (largest_smallest_integers\
    \ (rest lst))\n         ]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n\
    \         ]\n        [(< (first lst) (first rest))\n         (list (first lst)\
    \ (first rest))\n         ]\n        [else\n         (largest_smallest_integers\
    \ (rest lst))\n         ]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n  \
    \  [(> (first lst) 0) (list (first lst) (first lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n\
    \        [(< (first lst) 0)\n         (list #f (first lst))\n         ]\n    \
    \    [else\n         (largest_smallest_integers (rest lst))\n         ]))\n",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(< 0 (car lst)) (cons (car lst)\
    \ (largest_smallest_integers (cdr lst)))]\n    [else (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst)\n     (list #f #f)\n     (let\
    \ ([a (first lst)\n             (b (rest lst)])\n       (cond\n         [(< a\
    \ b)\n          (list a b)\n          (largest_smallest_integers (rest lst))]\n\
    \         [else\n          (list a b)\n          (largest_smallest_integers (rest\
    \ lst))])))]\n    [else\n     (let ([a (first lst)\n             (b (rest lst)])\n\
    \       (cond\n         [(< a b)\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [else\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))])))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n     \
    \    ]\n        [(integer? (car lst))\n         (cons (car lst)\n            \
    \   (largest_smallest_integers (cdr lst)))\n         ]\n        [else\n      \
    \   (largest_smallest_integers (cdr lst))]))\n", "  (cond\n    [(empty? lst) (list\
    \ #f #f)]\n    [(number? (car lst)) (list car lst)]\n    [else (let ([a (largest_smallest_integers\
    \ (cdr lst))])\n             (cond\n               [(empty? a) (list #f #f)]\n\
    \               [(number? (car a)) (list car a)]\n               [else (let ([b\
    \ (largest_smallest_integers (cdr a))])\n                        (cond\n     \
    \                    [(empty? b) (list #f #f)]\n                         [(number?\
    \ (car b)) (list car b)]\n                         [else (let ([c (largest_smallest_integers\
    \ (cdr b))])\n                                  (cond\n                      \
    \              [(empty? c) (list #f #f)]\n                                   \
    \ [(number? (car c)) (list car c)]\n                                    [else\
    \ (let ([d (largest_smallest_integers (cdr c))])\n                           \
    \               (cond\n                                           [(empty? d)\
    \ (list #f #f)]\n                                           [(number? (car d))\
    \ (list car d)]\n                                           [else (let ([e (largest_smallest_integers\
    \ (cdr d))])\n                                                    (cond\n    \
    \                                                 [(empty? e) (list #f #f)]\n\
    \                                                     [(number? (car e)) (list\
    \ car e)]\n                                                     [else (let ([f\
    \ (largest_smallest_integers (cdr e))])\n                                    \
    \                        (cond\n                                             \
    \                [(empty? f) (list #f #f)]\n                                 \
    \                            [(number? (car f)) (list car f)]\n              \
    \                                               [else (list car f #f)]))]))]))]))]))]))]))\n",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(number? (car lst)) (list car lst)]\n\
    \    [else (cons (max (car lst) (largest_smallest_integers (cdr lst)))\n     \
    \           (largest_smallest_integers (cdr lst)))]))\n", "  (cond [(empty? lst)\n\
    \         (list #f #f)] \n        [(< (first lst) (first rest))\n         (list\
    \ (first lst) (first rest))]\n        [else\n         (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst)\n     (list #f #f)\n     (let\
    \ ([a (first lst)\n             (b (second lst)])\n       (cond\n         [(<\
    \ a b)\n          (list (cons a b))\n          (list (cons a (- b a)))]\n    \
    \     [(< b a)\n          (list (cons a b))\n          (list (cons (- a b) a))]))]\n\
    \    [else\n     (let ([a (first lst)\n             (b (second lst)])\n      \
    \ (cond\n         [(< a b)\n          (list (cons a b))\n          (list (cons\
    \ a (- b a)))]\n         [(< b a)\n          (list (cons a b))\n          (list\
    \ (cons (- a b) a))])\n       (largest_smallest_integers (rest lst))]))]))\n",
  "  (cond [(empty? lst) (list #f #f)] \n        [(negative? (first lst)) (cons (first\
    \ lst) (largest_smallest_integers (rest lst)))]\n        [else (cons (first lst)\
    \ (largest_smallest_integers (rest lst)))]))\n", "  (cond\n    [(empty? lst)\n\
    \     (list #f #f)\n     (let ([a (first lst)\n             (b (second lst)])\n\
    \       (cond\n         [(< a b)\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [(< b a)\n          (list b a)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [else\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))])))]\n    [else\n     (let ([a (first lst)\n             (b (second\
    \ lst)])\n       (cond\n         [(< a b)\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [(< b a)\n          (list b a)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [else\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))])))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n     \
    \    ]\n        [(integer? (first lst))\n         (cons (first lst)\n        \
    \       (largest_smallest_integers (rest lst)))\n         ]\n        [else\n \
    \        (let ([a (largest_smallest_integers (first lst))])\n           (cond\
    \ [(< a b)\n                   (cons a\n                         (largest_smallest_integers\
    \ (rest lst)))\n                  ]\n                 [else\n                \
    \   (cons b\n                         (largest_smallest_integers (rest lst)))\n\
    \                  ]\n               )\n         ]\n        ))\n", "  (cond [(empty?\
    \ lst) (list #f #f)]\n        [(negative? (first lst)) (largest_smallest_integers\
    \ (rest lst))]\n        [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond [(empty? lst)\n         (list #f #f)] \n        [(< (first lst) 0)\n \
    \        (list (first lst) #f #f)] \n        [else \n         (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(< 0 (car\
    \ lst)) (cons (car lst) (largest_smallest_integers (cdr lst)))]\n    [else (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond [(empty? lst) (list #f #f)] \n        [(< (first\
    \ lst) (first lst)) (list (first lst) (first lst))]\n        [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n\
    \        [(< (first lst) 0)\n         (list #f (first lst))\n         ]\n    \
    \    [else\n         (largest_smallest_integers (rest lst))\n         ]))\n",
  "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n        [(< (first lst)\
    \ (first lst))\n         (list (first lst) (first lst))\n         ]\n        [else\n\
    \         (largest_smallest_integers (rest lst))\n         ]\n        ))\n", " \
    \ (cond [(empty? lst) (list #f #f)] \n        [(integer? (first lst)) (cons (first\
    \ lst) (largest_smallest_integers (rest lst)))]\n        [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst)\n     (list #f #f)\n     (let\
    \ ([a (first lst)\n             (b (second lst)])\n       (cond\n         [(<\
    \ a b)\n          (list a b)\n          (let ([c (first lst)\n               \
    \    (d (second lst)])\n             (cond\n               [(< c d)\n        \
    \        (list c d)\n                (let ([e (first lst)\n                  \
    \     (f (second lst)])\n                   (cond\n                     [(< e\
    \ f)\n                       (list e f)\n                       (let ([g (first\
    \ lst)\n                               (h (second lst)])\n                   \
    \         (cond\n                             [(< g h)\n                     \
    \          (list g h)\n                               (let ([i (first lst)\n \
    \                                      (j (second lst)])\n                   \
    \              (cond\n                                 [(< i j)\n            \
    \                       (list i j)\n                                   (let ([k\
    \ (first lst)\n                                         (l (second lst)])\n  \
    \                                  (cond\n                                   \
    \  [(< k l)\n                                       (list k l)\n             \
    \                          (let ([m (first lst)\n                            \
    \                  (n (second lst)])\n                                     (cond\n\
    \                                     [(< m n)\n                             \
    \          (list m n)\n                                       (let ([o (first\
    \ lst)\n                                               (p (second lst)])\n   \
    \                                  (cond\n                                   \
    \  [(< o p)\n                                       (list o p)\n             \
    \                          (let ([q (first lst)\n                            \
    \                   (r (second lst)])\n                                     (cond\n\
    \                                     [(< q r)\n                             \
    \          (list q r)\n                                       (let ([s (first\
    \ lst)\n                                               (t (second lst)])\n   \
    \                                  (cond\n                                   \
    \  [(< s t)\n                                       (list s t)\n             \
    \                          (let ([u (first lst)\n                            \
    \                   (v (second lst)])\n                                     (cond\n\
    \                                     [(< u v)\n                             \
    \          (list u v)\n                                       (let ([w (first\
    \ lst)\n                                               (x (second lst)])\n   \
    \                                  (cond\n                                   \
    \  [(< w x)\n                                       (list w x)\n             \
    \                          (let ([y (first lst)\n                            \
    \                   (z (second lst)])\n                                     (cond\n\
    \                                     [(< y z)\n                             \
    \          (list y z)\n                                       (let ([a (first\
    \ lst)\n                                               (b (second lst)])\n   \
    \                                  (cond\n                                   \
    \  [(< a b)\n                                       (list a b)\n             \
    \                          (let ([c (first lst)\n                            \
    \                   (d (second lst)])\n                                     (cond\n\
    \                                     [(< c d)\n                             \
    \          (list c d)\n                                       (", "  (cond [(empty?\
    \ lst)\n         (list #f #f)] \n        [(> (first lst) 0)\n         (cons (first\
    \ lst) (largest_smallest_integers (rest lst)))]\n        [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst)\n     (list #f #f)\n     (cons\
    \ (car lst) (largest_smallest_integers (cdr lst)))]\n    [(integer? (car lst))\n\
    \     (cons (car lst) (largest_smallest_integers (cdr lst)))]\n    [else\n   \
    \  (let ([a (largest_smallest_integers (car lst))]\n           [b (largest_smallest_integers\
    \ (cdr lst))])\n       (cond\n         [(< a b)\n          (cons a (largest_smallest_integers\
    \ (cdr lst)))]\n         [(< b a)\n          (cons b (largest_smallest_integers\
    \ (car lst)))]\n         [else\n          (cons a b)]))]))\n", "  (cond\n    [(empty?\
    \ lst) (list #f #f)]\n    [(> (first lst) 0) (list (first lst) (first lst))]\n\
    \    [else (largest_smallest_integers (rest lst))]))\n", "  (cond [(empty? lst)\n\
    \         (list #f #f)] \n        [(integer? (first lst))\n         (cons (first\
    \ lst)\n               (largest_smallest_integers (rest lst)))]\n        [else\n\
    \         (let ([a (largest_smallest_integers (first lst))])\n           (let\
    \ ([b (largest_smallest_integers (rest lst))])\n             (cond [(< a b)\n\
    \                    (cons a (cons b (first lst)))]\n                   [(< b\
    \ a)\n                    (cons (first lst) b)]\n                   [else\n  \
    \                  (cons a b)]))]))\n", "  (cond [(empty? lst) (list #f #f)]\n\
    \        [(< (first lst) 0) (list #f (first lst))]\n        [(< (first lst) -1)\
    \ (list #f (first lst))]\n        [else (largest_smallest_integers (rest lst))]))\n",
  "  (cond [(empty? lst)\n         (list #f #f)] \n        [(or (< 0 (car lst)) (<\
    \ 0 (cdr lst)))\n         (cons (car lst) (largest_smallest_integers (cdr lst)))]\n\
    \        [else\n         (largest_smallest_integers (cdr lst))]))\n", "  (cond\
    \ [(null? lst) #f]\n        [(< 0 (car lst)) (largest_smallest_integers (cdr lst))]\n\
    \        [else (largest_smallest_integers (cdr lst))]))\n", "  (cond [(empty?\
    \ lst) (list #f #f)] \n        [(< 0 (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n        [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond [(empty? lst)\n         (list #f #f)\n         ]\n        [(< (first lst)\
    \ 0)\n         (list (first lst) #f)\n         ]\n        [else\n         (largest_smallest_integers\
    \ (rest lst))\n         ]))\n", "  (cond [(empty? lst)\n         (list #f #f)]\
    \ \n        [(< (first lst) (first rest))\n         (list (first lst) (first rest))]\n\
    \        [else (largest_smallest_integers (rest lst)\n                       \
    \      (first lst)\n                             (first rest))]))\n", "  (cond\
    \ ((null? lst) #f)\n        ((< (car lst) 0) (cons (car lst) (largest_smallest_integers\
    \ (cdr lst))))\n        (else (largest_smallest_integers (cdr lst)))))\n", " \
    \ (cond [(null? lst)\n         (list #f #f)\n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n\
    \         \n         \n         \n         \n         \n         \n         \n",
  "  (cond [(empty? lst) (list #f #f)] \n        [(integer? (car lst)) (cons (car\
    \ lst) (largest_smallest_integers (cdr lst)))]\n        [else (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond [(empty? lst)\n         (list #f #f)] \n        [(<\
    \ (first lst) 0)\n         (list (first lst) #f)] \n        [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n\
    \        [(< (first lst) 0)\n         (largest_smallest_integers (rest lst))\n\
    \         ]\n        [else\n         (largest_smallest_integers (rest lst))\n\
    \         ]\n        ))\n", "  (cond [(null? lst)\n         (list #f #f)\n   \
    \      ]\n        [(< (car lst) 0)\n         (list #f (car lst))\n         ]\n\
    \        [else\n         (largest_smallest_integers (cdr lst))\n         ]))\n",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(< 0 (first lst)) (list (first lst)\
    \ (first lst))]\n    [else (list (first lst) (largest_smallest_integers (rest\
    \ lst)))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(> (first lst)\
    \ 0) (list (first lst) #f)]\n    [else (list (first lst) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond [(null? lst) #f]\n        [(< 0 (car lst)) (largest_smallest_integers\
    \ (cdr lst))]\n        [else (largest_smallest_integers (cdr lst))]))\n", "  (cond\
    \ [(empty? lst)\n         (list #f #f)] \n        [(< (first lst) 0)\n       \
    \  (list #f (first lst))]\n        [(< (first lst) 0)\n         (list (first lst)\
    \ (first lst))]\n        [else\n         (largest_smallest_integers (rest lst))]))\n",
  "  (cond [(null? lst)\n         (list #f #f)] \n        [(< (car lst) 0)\n     \
    \    (list #f (car lst))]\n        [(< (car lst) (cadr lst))\n         (list (car\
    \ lst) (cadr lst))]\n        [else\n         (largest_smallest_integers (cdr lst))]))\n",
  "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n        [(integer? (first\
    \ lst))\n         (cons (first lst)\n               (largest_smallest_integers\
    \ (rest lst)))\n         ]\n        [else\n         (let ([a (largest_smallest_integers\
    \ (first lst))])\n           (let ([b (largest_smallest_integers (rest lst))])\n\
    \             (cond [(< a b)\n                    (cons a (cons b (first lst)))\n\
    \                    (else (cons a (cons b (first lst))))]\n                 \
    \  [else (cons a (cons b (first lst)))]))]))\n", "  (cond ((null? lst) #f)\n \
    \       ((< (first lst) 0)\n         (cons (first lst)\n               (largest_smallest_integers\
    \ (rest lst))))\n        (else (largest_smallest_integers (rest lst)))))\n", " \
    \ (cond ((null? lst)\n         (list #f #f))\n        ((< (car lst) 0)\n     \
    \    (list (car lst) (car lst)))\n        (else\n         (largest_smallest_integers\
    \ (cdr lst)))))\n", "  (cond [(empty? lst) (list #f #f)] \n        [(negative?\
    \ (first lst)) (largest_smallest_integers (rest lst))]\n        [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(null? lst)\n         (list #f #f)\n         ]\n\
    \        [(< (first lst) 0)\n         (list (first lst) #f (second lst))\n   \
    \      ]\n        [else\n         (list (first lst) (second lst) (largest_smallest_integers\
    \ (rest lst)))\n         ]\n        ))\n", "  (cond [(empty? lst)\n         (list\
    \ #f #f)\n         ]\n        [(< (first lst) 0)\n         (largest_smallest_integers\
    \ (rest lst))\n         ]\n        [else\n         (largest_smallest_integers\
    \ (rest lst))\n         ]\n        ))\n", "  (cond\n    [(empty? lst) (list #f\
    \ #f)]\n    [(number? (car lst)) (list (car lst) (smallest (cdr lst)))]\n    [else\
    \ (largest_smallest_integers (cdr lst))]))\n", "  (cond\n    [(empty? lst)\n \
    \    (list #f #f)\n     (let ([a (first lst)\n             (b (second lst)])\n\
    \       (cond\n         [(< a b)\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [(> a b)\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [else\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))])))]\n    [else\n     (largest_smallest_integers (rest lst))]))\n",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(> (first lst) 0) (list (first lst)\
    \ 1)]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond [(empty?\
    \ lst)\n         (list #f #f)\n         ]\n        [(< (first lst) (first lst))\n\
    \         (list (first lst) (first lst))\n         ]\n        [else\n        \
    \ (largest_smallest_integers (rest lst))\n         ]))\n", "  (cond\n    [(empty?\
    \ lst)\n     (list #f #f)\n     (let ([a (first lst)\n             (b (second\
    \ lst)])\n       (cond\n         [(< a b)\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [else\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))])))]\n    [else\n     (largest_smallest_integers (rest lst))]))\n",
  "  (cond [(empty? lst)\n         (list #f #f)] \n        [(< (first lst) (first\
    \ rest))\n         (cons (first lst) (largest_smallest_integers (rest lst)))]\n\
    \        [else \n         (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst)\n     (list #f #f)\n     (let ([a (first lst)\n           \
    \  (b (second lst)])\n       (cond\n         [(< a b)\n          (list a b)\n\
    \          (largest_smallest_integers (rest lst))]\n         [(< b a)\n      \
    \    (list b a)\n          (largest_smallest_integers (rest lst))]\n         [else\n\
    \          (list a b)\n          (largest_smallest_integers (rest lst))])))]\n\
    \    [else\n     (let ([a (first lst)\n             (b (second lst)])\n      \
    \ (cond\n         [(< a b)\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [(< b a)\n          (list b a)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [else\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))])))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(< 0\
    \ (first lst)) (list (first lst) (first lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst)\n     (list #f #f)\n     (let\
    \ ([a (first lst)\n             (b (second lst)])\n       (cond\n         [(<\
    \ a b)\n          (list (first lst) b)\n          (list (first lst) a)\n     \
    \     (list (first lst) b)\n          (list (first lst) a)\n          (list (first\
    \ lst) b)\n          (list (first lst) a)\n          (list (first lst) b)\n  \
    \        (list (first lst) a)\n          (list (first lst) b)\n          (list\
    \ (first lst) a)\n          (list (first lst) b)\n          (list (first lst)\
    \ a)\n          (list (first lst) b)\n          (list (first lst) a)\n       \
    \   (list (first lst) b)\n          (list (first lst) a)\n          (list (first\
    \ lst) b)\n          (list (first lst) a)\n          (list (first lst) b)\n  \
    \        (list (first lst) a)\n          (list (first lst) b)\n          (list\
    \ (first lst) a)\n          (list (first lst) b)\n          (list (first lst)\
    \ a)\n          (list (first lst) b)\n          (list (first lst) a)\n       \
    \   (list (first lst) b)\n          (list (first lst) a)\n          (list (first\
    \ lst) b)\n          (list (first lst) a)\n          (list (first lst) b)\n  \
    \        (list (first lst) a)\n          (list (first lst) b)\n          (list\
    \ (first lst) a)\n          (list (first lst) b)\n          (list (first lst)\
    \ a)\n          (list (first lst) b)\n          (list (first lst) a)\n       \
    \   (list (first lst) b)\n          (list (first lst) a)\n          (list (first\
    \ lst) b)\n          (list (first lst) a)\n          (list (first lst) b)\n  \
    \        (list (first lst) a)\n          (list (first lst) b)\n          (list\
    \ (first lst) a)\n          (list (first lst) b)\n          (list (first lst)\
    \ a)\n          (list (first lst) b)\n          (list (first lst) a)\n       \
    \   (list (first lst) b)\n          (list (first lst) a)\n          (list (first\
    \ lst) b)\n          (list (first lst) a)\n          (list (first lst) b)\n  \
    \        (list (first lst) a)\n          (list (first lst) b)\n          (list\
    \ (first lst) a)\n          (list (first lst) b)", "  (cond [(empty? lst) (list\
    \ #f #f)]\n        [(integer? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n        [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond [(empty? lst) (list #f #f)] \n        [(< 0 (first lst)) (list (first\
    \ lst) (first lst))]\n        [else (largest_smallest_integers (rest lst))]))\n",
  "  (cond [(null? lst)\n         (list #f #f)\n         \n         [(integer? (car\
    \ lst))\n          (cons (car lst) (largest_smallest_integers (cdr lst)))]\n \
    \        \n         [else (largest_smallest_integers (cdr lst))]))\n", "  (cond\
    \ [(empty? lst)\n         (list #f #f)\n         ]\n        [(< (first lst) (first\
    \ lst (rest lst)))\n         (largest_smallest_integers (rest lst))\n        \
    \ ]\n        [else\n         (largest_smallest_integers (rest lst))\n        \
    \ ]\n        ))\n", "  (cond [(empty? lst) (list #f #f)] \n        [(negative?\
    \ (first lst)) (largest_smallest_integers (rest lst))] \n        [(positive? (first\
    \ lst)) (largest_smallest_integers (rest lst))] \n        [else (cons (first lst)\
    \ (largest_smallest_integers (rest lst)))]))\n", "  (cond [(empty? lst)\n    \
    \     (list #f #f)] \n        [(< (first lst) (first lst (rest lst)))\n      \
    \   (list (first lst) (first lst (rest lst)))]\n        [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(number?\
    \ (car lst)) (list car lst)]\n    [else (let ([largest (largest-integer (car lst))])\n\
    \               (if (number? (car lst))\n                   (let ([smallest (smallest-integer\
    \ (car lst))])\n                     (if (> smallest largest)\n              \
    \           (list largest smallest)\n                         (list smallest largest))\n\
    \                     (largest_smallest_integers (cdr lst)))\n               \
    \    (largest_smallest_integers (cdr lst)))]))]))\n", "  (cond [(empty? lst) (list\
    \ #f #f)] \n        [(> (first lst) 0)\n         (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n        [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond [(empty? lst)\n         (list #f #f)] \n        [(< (first lst) (first\
    \ lst))\n         (list (first lst) (first lst))]\n        [else \n         (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n\
    \        [(integer? (car lst))\n         (cons (car lst)\n               (largest_smallest_integers\
    \ (cdr lst)))\n         ]\n        [else\n         (largest_smallest_integers\
    \ (cdr lst))\n         ]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n   \
    \ [(> (first lst) 0) (list (first lst) (first lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst)\n         (list #f #f)] \n       \
    \ [(< (first lst) 0)\n         (list #f (first lst))]\n        [(< (first lst)\
    \ 0)\n         (list #f (first lst))]\n        [else\n         (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst)\n     (list #f #f)\n     (let\
    \ ([a (first lst)\n             (b (second lst)])\n       (cond\n         [(<\
    \ a b)\n          (list (cons a b))\n          (list (cons a (- b a)))]\n    \
    \     [(< b a)\n          (list (cons a b))\n          (list (cons (- a b) a))]))]\n\
    \    [else\n     (let ([a (first lst)\n             (b (second lst)])\n      \
    \ (cond\n         [(< a b)\n          (list (cons a b))\n          (list (cons\
    \ a (- b a)))]\n         [(< b a)\n          (list (cons a b))\n          (list\
    \ (cons (- a b) a))])\n       (largest_smallest_integers (rest lst))]))]))\n",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(> (first lst) (first lst)) (list\
    \ #f (first lst))]\n    [(< (first lst) (first lst)) (list (first lst) (first\
    \ lst))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond [(empty?\
    \ lst)\n         (list #f #f)\n         ]\n        [(> (first lst) 0)\n      \
    \   (cons (first lst)\n               (largest_smallest_integers (rest lst)))\n\
    \         ]\n        [else\n         (largest_smallest_integers (rest lst))]))\n",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(number? (first lst)) (list #f (first\
    \ lst))]\n    [else (let ([a (largest_smallest_integers (rest lst))])\n      \
    \       (cond\n              [(empty? a) (list #f #f)]\n              [(number?\
    \ (first a)) (list #f (first a))]\n              [else (let ([b (largest_smallest_integers\
    \ (rest a))])\n                      (cond\n                        [(empty? b)\
    \ (list #f #f)]\n                        [(number? (first b)) (list #f (first\
    \ b))]\n                        [else (cons (first a) (first b))]))]))]))])\n",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(number? (car lst)) (list car lst)]\n\
    \    [else (cons (largest_smallest_integers (cdr lst)) (list car lst))]\n  ))\n",
  "  (cond [(null? lst)\n         (list #f #f)\n         ]\n        [(< (car lst)\
    \ 0)\n         (list #f (car lst))\n         ]\n        [else\n         (largest_smallest_integers\
    \ (cdr lst))\n         ]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n   \
    \ [(> (first lst) (first lst)) (list (first lst) (first lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(> (first\
    \ lst) 0) (cons (first lst) (largest_smallest_integers (rest lst)))]\n    [else\
    \ (largest_smallest_integers (rest lst))]))\n", "  (cond [(empty? lst)\n     \
    \    (list #f #f)\n         ]\n        [(> (first lst) 0)\n         (cons (first\
    \ lst)\n               (largest_smallest_integers (rest lst)))]\n        [else\n\
    \         (largest_smallest_integers (rest lst))]))\n", "  (cond [(empty? lst)\
    \ #f]\n        [(> (first lst) 0)\n         (cons (first lst)\n              \
    \ (largest_smallest_integers (rest lst)))]\n        [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n\
    \        [(< (first lst) 0)\n         (largest_smallest_integers (rest lst))\n\
    \         ]\n        [else\n         (largest_smallest_integers (rest lst))\n\
    \         ]\n        ))\n", "  (cond [(empty? lst) (list #f #f)] \n        [(<\
    \ (first lst) 0) (list #f (first lst))] \n        [else (list (max 0 (first lst))\
    \ (min 1 (first lst)))]))\n", "  (cond [(null? lst)\n         (list #f #f)\n \
    \        \n         [(integer? (car lst))\n          (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n         \n         [else\n          (largest_smallest_integers\
    \ (cdr lst))]\n         \n         ]))\n", "  (cond [(empty? lst) #f]\n      \
    \  [(integer? (first lst)) (largest_smallest_integers (rest lst))]\n        [else\
    \ (cons (max (first lst) (first lst))\n                    (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n        \
    \ ]\n        [(integer? (car lst))\n         (cons (car lst)\n              (largest_smallest_integers\
    \ (cdr lst)))\n         ]\n        [else\n         (let ([a (largest_smallest_integers\
    \ (car lst))])\n           (let ([b (largest_smallest_integers (cdr lst))])\n\
    \             (cond [(< a b)\n                    (cons a (cons b (cons (car lst)\
    \ '#f)))\n                    (< b a)\n                    (cons (car lst) '#f)]\n\
    \                     [else\n                     (cons a (cons b (cons (cdr lst)\
    \ '#f)))\n                     (cons (cdr lst) '#f)])))]))\n", "  (cond [(empty?\
    \ lst)\n         (list #f #f)] \n        [(< (first lst) 0)\n         (list (first\
    \ lst) #f)] \n        [(< (first lst) 0)\n         (list (first lst) #f)] \n \
    \       [else\n         (largest_smallest_integers (rest lst))]))\n", "  (cond\
    \ [(empty? lst) (list #f #f)]\n        [(number? (car lst)) (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n        [else (largest_smallest_integers (cdr lst))]))\n", " \
    \ (cond [(empty? lst)\n         (list #f #f)\n         ]\n        [(integer? (car\
    \ lst))\n         (cons (car lst)\n               (largest_smallest_integers (cdr\
    \ lst)))]\n        [else\n         (largest_smallest_integers (cdr lst))]))\n",
  "  (cond [(empty? lst)\n         (list #f #f)] \n        [(< (first lst) (first\
    \ lst))\n         (list (first lst) (first lst))] \n        [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n\
    \        [(integer? (car lst))\n         (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n        [else\n         (largest_smallest_integers (cdr lst))]))\n",
  "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n        [(integer? (car\
    \ lst))\n         (cons (car lst)\n              (largest_smallest_integers (cdr\
    \ lst)))\n         ]\n        [else\n         (largest_smallest_integers (cdr\
    \ lst))\n         ]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n    \
    \     ]\n        [(integer? (car lst))\n         (cons (car lst)\n           \
    \    (largest_smallest_integers (cdr lst)))\n         ]\n        [else\n     \
    \    (largest_smallest_integers (cdr lst))\n         ]))\n", "  (cond [(empty?\
    \ lst) #f]\n        [(< 0 (first lst)) (first lst)]\n        [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n\
    \        [(integer? (car lst))\n         (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n        [else\n         (largest_smallest_integers (cdr lst))]))\n",
  "  (cond [(null? lst)\n         (list #f #f)] \n        [(< (car lst) 0)\n     \
    \    (list (car lst) #f)]\n        [(< (car lst) (cadr lst))\n         (list (car\
    \ lst) (cadr lst))]\n        [else\n         (largest_smallest_integers (cdr lst))]))\n",
  "  (cond\n    [(empty? lst)\n     (list #f #f)\n     (let ([a (first lst)\n    \
    \         (b (second lst)])\n       (cond\n         [(< a b)\n          (list\
    \ a b)\n          (largest_smallest_integers (rest lst))]\n         [(< b a)\n\
    \          (list b a)\n          (largest_smallest_integers (rest lst))]\n   \
    \      [else\n          (list a b)\n          (largest_smallest_integers (rest\
    \ lst))])))]\n    [else\n     (let ([a (first lst)\n             (b (second lst)])\n\
    \       (cond\n         [(< a b)\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [(< b a)\n          (list b a)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [else\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))])))]))\n", "  (cond [(null? lst)\n         (list #f #f)] \n    \
    \    [(< (car lst) 0)\n         (list #f (car lst))]\n        [(< (car lst) (cadr\
    \ lst))\n         (list (car lst) (cadr lst))]\n        [else\n         (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond [(empty? lst) (list #f #f)] \n        [(< 0 (first\
    \ lst)) (list (first lst) (first lst))]\n        [else (list (first lst) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(number?\
    \ (first lst)) (list #f (first lst))]\n    [else (let ([a (largest_smallest_integers\
    \ (rest lst))])\n              (cond\n               [(empty? a) (list #f #f)]\n\
    \               [(number? (first a)) (list #f (first a))]\n               [else\
    \ (let ([b (largest_smallest_integers (rest a))])\n                        (cond\n\
    \                         [(empty? b) (list #f #f)]\n                        \
    \ [(number? (first b)) (list #f (first b))]\n                         [else (let\
    \ ([c (largest_smallest_integers (rest b)))]\n                               \
    \   (cond\n                                   [(empty? c) (list #f #f)]\n    \
    \                               [(number? (first c)) (list #f (first c))]\n  \
    \                                 [else (let ([d (largest_smallest_integers (rest\
    \ c)))]\n                                          (cond\n                   \
    \                        [(empty? d) (list #f #f)]\n                         \
    \                  [(number? (first d)) (list #f (first d))]\n               \
    \                            [else (list a (first b) b (first c) d (first d))]))]))]))]))]))\n",
  "  (cond\n    [(empty? lst)\n     (list #f #f)\n     (let ([a (first lst)\n    \
    \         (b (rest lst)])\n       (cond\n         [(< a b)\n          (list a\
    \ b)\n          (largest_smallest_integers (rest lst))]\n         [else\n    \
    \      (list a #f)\n          (largest_smallest_integers (rest lst))])))]\n  \
    \  [else\n     (let ([a (first lst)\n             (b (rest lst)])\n       (cond\n\
    \         [(< a b)\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [else\n          (list a #f)\n          (largest_smallest_integers\
    \ (rest lst))])))]))\n", "  (cond [(empty? lst)\n         (list #f #f)] \n   \
    \     [(< (first lst) (first lst))\n         (list (first lst) (first lst))]\n\
    \        [else \n         (largest_smallest_integers (rest lst))]))\n", "  (cond\
    \ [(empty? lst)\n         (list #f #f)] \n        [(< (first lst) 0)\n       \
    \  (list (first lst) #f)]\n        [else\n         (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst) (list #f #f)] \n        [(integer?\
    \ (first lst)) (cons (first lst) (largest_smallest_integers (rest lst)))]\n  \
    \      [else (largest_smallest_integers (rest lst))]))\n", "  (cond [(empty? lst)\n\
    \         (list #f #f)\n         ]\n        [(< (first lst) (first lst))\n   \
    \      (list (first lst) (first lst))\n         ]\n        [else\n         (largest_smallest_integers\
    \ (rest lst))\n         ]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n\
    \         ]\n        [(< (first lst) 0)\n         (list #f (first lst))\n    \
    \     ]\n        [else\n         (largest_smallest_integers (rest lst))\n    \
    \     ]))\n", "  (cond\n    [(empty? lst)\n     (list #f #f)\n     (let ([a (first\
    \ lst)\n             (b (second lst)])\n       (cond\n         [(< a b)\n    \
    \      (list a b)\n          (largest_smallest_integers (rest lst))]\n       \
    \  [(< b a)\n          (list b a)\n          (largest_smallest_integers (rest\
    \ lst))]\n         [else\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))])))]\n    [else\n     (largest_smallest_integers (rest lst))]))\n",
  "  (cond [(empty? lst)\n         (list #f #f)\n         (< (first lst) (first lst))\n\
    \         (largest_smallest_integers (rest lst))\n         (list (first lst) (first\
    \ lst))]\n        [else\n         (largest_smallest_integers (rest lst))\n   \
    \      (list (first lst) (first lst))]))\n", "  (cond [(empty? lst)\n        \
    \ (list #f #f)\n         ]\n        [(integer? (first lst))\n         (cons (first\
    \ lst)\n               (largest_smallest_integers (rest lst)))\n         ]\n \
    \       [else\n         (largest_smallest_integers (rest lst))\n         ]\n \
    \       ))\n", "  (cond [(empty? lst) #f]\n        [(integer? (first lst)) (largest_smallest_integers\
    \ (rest lst))]\n        [else (cons (max (first lst) (first lst)) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n        \
    \ ]\n        [(integer? (first lst))\n         (cons (first lst)\n           \
    \    (largest_smallest_integers (rest lst)))]\n        [else\n         (let ([a\
    \ (largest_smallest_integers (first lst))])\n           (let ([b (largest_smallest_integers\
    \ (rest lst))])\n             (cond [(< a b)\n                    (cons a (cons\
    \ b (first lst)))]\n                   [(< b a)\n                    (cons (first\
    \ lst) b)\n                    ]\n                   [else\n                 \
    \   (cons a b)\n                    ]))]))\n", "  (cond [(empty? lst)\n      \
    \   (list #f #f)\n         ]\n        [(< (first lst) 0)\n         (list (first\
    \ lst) (inc (first lst)))\n         ]\n        [else\n         (largest_smallest_integers\
    \ (rest lst))\n         ]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n\
    \         ]\n        [(< (first lst) 0)\n         (list #f (first lst))\n    \
    \     ]\n        [else\n         (largest_smallest_integers (rest lst))\n    \
    \     ]))\n", "  (cond [(empty? lst)\n         (list #f #f)] \n        [(integer?\
    \ (car lst))\n         (cons (car lst)\n              (largest_smallest_integers\
    \ (cdr lst)))]\n        [else\n         (largest_smallest_integers (cdr lst))]))\n",
  "  (cond [(empty? lst) (list #f #f)] \n        [(integer? (car lst)) (cons (car\
    \ lst) (largest_smallest_integers (cdr lst)))]\n        [else (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(number? (car\
    \ lst)) (cons (car lst) (largest_smallest_integers (cdr lst)))]\n    [else (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond [(empty? lst)\n         (list #f #f)] \n        [(<\
    \ (first lst) 0)\n         (list #f (first lst))]\n        [(< (first lst) 0)\n\
    \         (list (first lst) (first lst))]\n        [else\n         (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(null? lst)\n         (list #f #f)] \n        [(<\
    \ (car lst) 0)\n         (largest_smallest_integers (cdr lst))]\n        [else\n\
    \         (largest_smallest_integers (cdr lst))]))\n", "  (cond [(empty? lst)\n\
    \         (list #f #f)] \n        [(< (first lst) (first rest))\n         (largest_smallest_integers\
    \ (rest lst))]\n        [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond\n    [(empty? lst) (list #f #f)]\n    [(> (first lst) 0)\n     (cons (first\
    \ lst)\n           (largest_smallest_integers (rest lst)))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n\
    \        [(< (first lst) 0)\n         (largest_smallest_integers (rest lst))\n\
    \         ]\n        [else\n         (largest_smallest_integers (rest lst))\n\
    \         ]\n        ))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(<\
    \ 0 (first lst)) (list (first lst) (first lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst) (list #f #f)] \n        [(negative?\
    \ (first lst)) (largest_smallest_integers (rest lst))] \n        [else (cons (first\
    \ lst) (largest_smallest_integers (rest lst)))]))\n", "  (cond [(empty? lst)\n\
    \         (list #f #f)] \n        [(< (first lst) (first lst))\n         (list\
    \ (first lst) (first lst))] \n        [else (largest_smallest_integers (rest lst))]))\n",
  "  (cond\n    [(empty? lst)\n     (list #f #f)\n     (let ([a (first lst)\n    \
    \         (b (second lst)])\n       (cond\n         [(< a b)\n          (list\
    \ a b)\n          (largest_smallest_integers (rest lst))]\n         [(< b a)\n\
    \          (list b a)\n          (largest_smallest_integers (rest lst))]\n   \
    \      [else\n          (list a b)\n          (largest_smallest_integers (rest\
    \ lst))])))]\n    [else\n     (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond [(empty? lst) (list #f #f)] \n        [(integer? (car lst)) (cons (car\
    \ lst) (largest_smallest_integers (cdr lst)))]\n        [else (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst)\n     (list #f #f)\n     (let\
    \ ([a (first lst)\n             (b (second lst)])\n       (cond\n         [(<\
    \ a b)\n          (list a b)\n          (largest_smallest_integers (rest lst))]\n\
    \         [else\n          (list a b)\n          (largest_smallest_integers (rest\
    \ lst))])))]\n    [else\n     (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond [(empty? lst)\n         (list #f #f)\n         ]\n        [(integer? (first\
    \ lst))\n         (cons (first lst)\n               (largest_smallest_integers\
    \ (rest lst)))]\n        [else\n         (let ([a (largest_smallest_integers (first\
    \ lst))])\n           (let ([b (largest_smallest_integers (rest lst))])\n    \
    \         (cond [(< a b)\n                    (cons a (cons b (first lst)))]\n\
    \                     [(< b a)\n                     (cons b (first lst))]\n \
    \                    [else\n                     (cons a (cons b (first lst)))])))])))\n",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(number? (car lst)) (cons (car lst)\
    \ (largest_smallest_integers (cdr lst)))]\n    [else (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond [(empty? lst) (list #f #f)] \n        [(number? (car\
    \ lst)) (cons (car lst) (largest_smallest_integers (cdr lst)))]\n        [else\
    \ (largest_smallest_integers (cdr lst))]))\n", "  (cond [(empty? lst) (list #f\
    \ #f)]\n        [(integer? (first lst)) (largest_smallest_integers (rest lst))]\n\
    \        [else (cons (max (first lst) (first lst)) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond [(empty? lst) (list #f #f)]\n        [(negative?\
    \ (first lst))\n         (cons (first lst) (largest_smallest_integers (rest lst)))]\n\
    \        [(positive? (first lst))\n         (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n        [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond [(empty? lst)\n         (list #f #f)] \n        [(< (first lst) (first\
    \ lst))\n         (list (first lst) (first lst))] \n        [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(number?\
    \ (first lst)) (list #f (first lst))]\n    [else (cons (max (first lst) (first\
    \ lst)) (largest_smallest_integers (rest lst)))]))\n", "  (cond\n    [(empty?\
    \ lst)\n     (list #f #f)\n     (let ([a (first lst)\n             (b (second\
    \ lst)])\n       (cond\n         [(< a b)\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [else\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))])))]\n    [else\n     (largest_smallest_integers (rest lst))]))\n",
  "  (cond\n    [(empty? lst)\n     (list #f #f)\n     (let ([a (first lst)\n    \
    \         (b (second lst)])\n       (cond\n         [(< a b)\n          (list\
    \ a b)\n          (largest_smallest_integers (rest lst))]\n         [else\n  \
    \        (list a b)\n          (largest_smallest_integers (rest lst))])))]\n \
    \   [else\n     (largest_smallest_integers (rest lst))]))\n", "  (cond [(empty?\
    \ lst) (list #f #f)] \n        [(> (first lst) 0) (list (first lst) #f)]\n   \
    \     [else (largest_smallest_integers (rest lst))]))\n", "  (cond [(empty? lst)\
    \ (list #f #f)] \n        [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n        [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond [(empty? lst)\n         (list #f #f)] \n        [(< (first lst) 0)\n \
    \        (list (first lst) #f)] \n        [else (largest_smallest_integers (rest\
    \ lst))]))\n", "  (cond [(empty? lst) (list #f #f)] \n        [(number? (first\
    \ lst)) (largest_smallest_integers (rest lst))]\n        [else (cons (max (first\
    \ lst) (first lst)) (largest_smallest_integers (rest lst)))]))\n", "  (cond [(empty?\
    \ lst)\n         (list #f #f)\n         ]\n        [(> (first lst) 0)\n      \
    \   (cons (first lst) (largest_smallest_integers (rest lst)))\n         ]\n  \
    \      [else\n         (largest_smallest_integers (rest lst))\n         ]))\n",
  "  (cond [(empty? lst) (list #f #f)] \n        [(integer? (first lst)) (largest_smallest_integers\
    \ (rest lst))]\n        [else (cons (max (first lst) (first lst)) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n        \
    \ ]\n        [(< (first lst) 0)\n         (list (first lst) #f)\n         ]\n\
    \        [else\n         (largest_smallest_integers (rest lst))\n         ]))\n",
  "  (cond [(empty? lst) (list #f #f)] \n        [(< 0 (first lst)) (cons (first lst)\
    \ (largest_smallest_integers (rest lst)))]\n        [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n\
    \        [(integer? (car lst))\n         (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n        [else\n         (largest_smallest_integers (cdr lst))]))\n",
  "  (cond [(null? lst)\n         (list #f #f)\n         ]\n        [(< (car lst)\
    \ 0)\n         (list (car lst) (cadr lst))\n         ]\n        [else\n      \
    \   (largest_smallest_integers (cdr lst))\n         ]))\n", "  (cond [(empty?\
    \ lst) (list #f #f)]\n        [(< 0 (first lst)) (largest_smallest_integers (rest\
    \ lst))]\n        [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) (list #f #f)]\n    [(number? (car lst)) (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n    [else (largest_smallest_integers (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst)\n     (list #f #f)\n     (let ([a (first lst)\n           \
    \  (b (second lst)])\n       (cond\n         [(< a b)\n          (list a b)\n\
    \          (largest_smallest_integers (rest lst))]\n         [else\n         \
    \ (list a b)\n          (largest_smallest_integers (rest lst))])))]\n    [else\n\
    \     (let ([a (first lst)\n             (b (second lst)])\n       (cond\n   \
    \      [(< a b)\n          (list a b)\n          (largest_smallest_integers (rest\
    \ lst))]\n         [else\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))])))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
