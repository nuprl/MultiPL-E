name: HumanEval_19_sort_numbers
language: rkt
prompt: "#lang racket\n\n;; Input is a space-delimited string of numberals from 'zero'\
  \ to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
  \ 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers sorted\
  \ from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n;; \"one three\
  \ five\"\n(define (sort_numbers numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
  \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
  ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
  )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
  \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three two\
  \ one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? numbers) \"\"]\n    [(equal? (first numbers)\
    \ \"zero\") (sort_numbers (rest numbers))]\n    [(equal? (first numbers) \"one\"\
    ) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) \"two\") (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) \"three\") (sort_numbers (rest\
    \ numbers))]\n    [(equal? (first numbers) \"four\") (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) \"five\") (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) \"six\") (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) \"seven\") (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ \"eight\") (sort_numbers (rest numbers))]\n    [(equal? (first numbers) \"nine\"\
    ) (sort_numbers (rest numbers))]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n", "  (if (empty? numbers)\n      '()\n      (append (sort_numbers\
    \ (substring numbers 0 -1))\n              (cons (substring numbers -1)\n    \
    \                (sort_numbers (substring numbers (string-length numbers) 0)))\n\
    \              (sort_numbers (substring numbers (string-length numbers) 0)))))\n",
  "  (let ([numbers-as-strings (split-string (string numbers) #\" \")])\n    (cond\n\
    \      [(empty? numbers-as-strings) numbers]\n      [(equal? (first numbers-as-strings)\
    \ \"zero\")\n       (sort_numbers (append (sort_numbers (rest numbers-as-strings))\
    \ #\"zero\"))]\n      [(equal? (first numbers-as-strings) \"one\")\n       (sort_numbers\
    \ (append (sort_numbers (rest numbers-as-strings)) #\"one\"))]\n      [(equal?\
    \ (first numbers-as-strings) \"two\")\n       (sort_numbers (append (sort_numbers\
    \ (rest numbers-as-strings)) #\"two\"))]\n      [(equal? (first numbers-as-strings)\
    \ \"three\")\n       (sort_numbers (append (sort_numbers (rest numbers-as-strings))\
    \ #\"three\"))]\n      [(equal? (first numbers-as-strings) \"four\")\n       (sort_numbers\
    \ (append (sort_numbers (rest numbers-as-strings)) #\"four\"))]\n      [(equal?\
    \ (first numbers-as-strings) \"five\")\n       (sort_numbers (append (sort_numbers\
    \ (rest numbers-as-strings)) #\"five\"))]\n      [(equal? (first numbers-as-strings)\
    \ \"six\")\n       (sort_numbers (append (sort_numbers (rest numbers-as-strings))\
    \ #\"six\"))]\n      [(equal? (first numbers-as-strings) \"seven\")\n       (sort_numbers\
    \ (append (sort_numbers (rest numbers-as-strings)) #\"seven\"))]\n      [(equal?\
    \ (first numbers-as-strings) \"eight\")\n       (sort_numbers (append (sort_numbers\
    \ (rest numbers-as-strings)) #\"eight\"))]\n      [(equal? (first numbers-as-strings)\
    \ \"nine\")\n       (sort_numbers (append (sort_numbers (rest numbers-as-strings))\
    \ #\"nine\"))]\n      [else\n       (sort_numbers (append (sort_numbers (rest\
    \ numbers-as-strings)) #(first numbers-as-strings))]\n     )\n    ]\n  )\n)\n",
  "  (cond\n    [(empty? numbers) \"\"]\n    [(equal? (first numbers) \"zero\") \"\
    zero\"]\n    [(equal? (first numbers) \"one\") \"one\"]\n    [(equal? (first numbers)\
    \ \"two\") \"two\"]\n    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal?\
    \ (first numbers) \"four\") \"four\"]\n    [(equal? (first numbers) \"five\")\
    \ \"five\"]\n    [(equal? (first numbers) \"six\") \"six\"]\n    [(equal? (first\
    \ numbers) \"seven\") \"seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"\
    ]\n    [(equal? (first numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) \"\"]\n\
    \    [(equal? (first numbers) \"zero\") (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) \"one\") (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) \"two\") (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ \"three\") (sort_numbers (rest numbers))]\n    [(equal? (first numbers) \"four\"\
    ) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) \"five\") (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) \"six\") (sort_numbers (rest\
    \ numbers))]\n    [(equal? (first numbers) \"seven\") (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) \"eight\") (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) \"nine\") (sort_numbers (rest numbers))]\n    [else (cons (first\
    \ numbers) (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first\
    \ numbers) \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n\
    \    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers)\
    \ \"four\") \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal?\
    \ (first numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"\
    seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first\
    \ numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n", "  (let ([numbers-list '()])\n    (loop for number in\
    \ numbers\n          for i from 0 to 9\n          collect (cond [(numbers-list?\
    \ (numbers-list number))\n                        (cons (cons number numbers-list)\
    \ (numbers-list number))\n                        (numbers-list? (numbers-list\
    \ number))\n                        (cons (cons number numbers-list) (numbers-list\
    \ number))\n                        (numbers-list? (numbers-list number))\n  \
    \                      (cons (cons number numbers-list) (numbers-list number))\n\
    \                        (numbers-list? (numbers-list number))\n             \
    \           (cons (cons number numbers-list) (numbers-list number))\n        \
    \                (numbers-list? (numbers-list number))\n                     \
    \   (cons (cons number numbers-list) (numbers-list number))\n                \
    \        (numbers-list? (numbers-list number))\n                        (cons\
    \ (cons number numbers-list) (numbers-list number))\n                        (numbers-list?\
    \ (numbers-list number))\n                        (cons (cons number numbers-list)\
    \ (numbers-list number))\n                        (numbers-list? (numbers-list\
    \ number))\n                        (cons (cons number numbers-list) (numbers-list\
    \ number))\n                        (numbers-list? (numbers-list number))\n  \
    \                      (cons (cons number numbers-list) (numbers-list number))\n\
    \                        (numbers-list? (numbers-list number))\n             \
    \           (cons (cons number numbers-list) (numbers-list number))\n        \
    \                (numbers-list? (numbers-list number))\n                     \
    \   (cons (cons number numbers-list) (numbers-list number))\n                \
    \        (numbers-list? (numbers-list number))\n                        (cons\
    \ (cons number numbers-list) (numbers-list number))\n                        (numbers-list?\
    \ (numbers-list number))\n                        (cons (cons number numbers-list)\
    \ (numbers-list number))\n                        (numbers-list? (numbers-list\
    \ number))\n                        (cons (cons number numbers-list) (numbers-list\
    \ number))\n                        (numbers-list? (numbers-list number))\n  \
    \                      (cons (cons number numbers-list) (numbers-list number))\n\
    \                        (numbers-list? (numbers-list number))\n             \
    \           (cons (cons number numbers-list) (numbers-list number))\n        \
    \                (numbers-list? (numbers-list number))\n                     \
    \   (cons (cons number numbers-list) (numbers-list number))\n                \
    \        (numbers-list? (numbers-list number))\n                        (cons\
    \ (cons number numbers-list) (numbers-list number", "  (define (helper numbers\
    \ current-number current-index)\n    (if (null? numbers)\n        (list current-number)\n\
    \        (let ((next-number (car numbers)))\n          (if (< current-number next-number)\n\
    \              (helper (cdr numbers) next-number (+ current-index 1))\n      \
    \        (helper (cdr numbers) current-number current-index)))))\n  (helper numbers\
    \ 0 0))\n", "  (let ((numbers (string->list numbers)))\n    (sort numbers (lambda\
    \ (a b) (< (string->number a) (string->number b)))))\n  (string->list numbers))\n",
  "  (let ([numbers (split-string numbers)])\n    (sort numbers (lambda (a b) (< (length\
    \ a) (length b)))))\n  (string-join numbers))\n", "  (define (helper numbers result)\n\
    \    (cond\n      [(empty? numbers) result]\n      [(equal? (first numbers) 'zero)\
    \ (helper numbers (append result (list 'zero)))]\n      [(equal? (first numbers)\
    \ 'one) (helper numbers (append result (list 'one)))]\n      [(equal? (first numbers)\
    \ 'two) (helper numbers (append result (list 'two)))]\n      [(equal? (first numbers)\
    \ 'three) (helper numbers (append result (list 'three)))]\n      [(equal? (first\
    \ numbers) 'four) (helper numbers (append result (list 'four)))]\n      [(equal?\
    \ (first numbers) 'five) (helper numbers (append result (list 'five)))]\n    \
    \  [(equal? (first numbers) 'six) (helper numbers (append result (list 'six)))]\n\
    \      [(equal? (first numbers) 'seven) (helper numbers (append result (list 'seven)))]\n\
    \      [(equal? (first numbers) 'eight) (helper numbers (append result (list 'eight)))]\n\
    \      [(equal? (first numbers) 'nine) (helper numbers (append result (list 'nine)))]\n\
    \      [else (helper numbers (append result (list numbers)))]))\n  (helper numbers\
    \ ''))\n", "  (define (helper numbers sorted)\n    (cond\n      [(empty? numbers)\
    \ sorted]\n      [(equal? (first numbers) 'zero) (helper numbers (append sorted\
    \ 'zero))]\n      [(equal? (first numbers) 'one) (helper numbers (append sorted\
    \ 'one))]\n      [(equal? (first numbers) 'two) (helper numbers (append sorted\
    \ 'two))]\n      [(equal? (first numbers) 'three) (helper numbers (append sorted\
    \ 'three))]\n      [(equal? (first numbers) 'four) (helper numbers (append sorted\
    \ 'four))]\n      [(equal? (first numbers) 'five) (helper numbers (append sorted\
    \ 'five))]\n      [(equal? (first numbers) 'six) (helper numbers (append sorted\
    \ 'six))]\n      [(equal? (first numbers) 'seven) (helper numbers (append sorted\
    \ 'seven))]\n      [(equal? (first numbers) 'eight) (helper numbers (append sorted\
    \ 'eight))]\n      [(equal? (first numbers) 'nine) (helper numbers (append sorted\
    \ 'nine))]\n      [else (helper numbers (append sorted (first numbers)))]\n  \
    \    ))\n  (helper numbers empty))\n", "  (cond\n    [(empty? numbers) \"\"]\n\
    \    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers)\
    \ \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal?\
    \ (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers) \"four\"\
    ) \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first\
    \ numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"\
    ]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers)\
    \ \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (let ([numbers (string->list numbers)])\n    (sort numbers\n          (lambda\
    \ (a b)\n            (< (string->number a) (string->number b)))\n          :key\
    \ string->number)))\n", "  (let ([numbers (string->list numbers)])\n    (sort\
    \ numbers <)\n    (string->list numbers)))\n", "  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first\
    \ numbers) \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n\
    \    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers)\
    \ \"four\") \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal?\
    \ (first numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"\
    seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first\
    \ numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) \"\"]\n    [(equal?\
    \ (first numbers) \"zero\") (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) \"one\") (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ \"two\") (sort_numbers (rest numbers))]\n    [(equal? (first numbers) \"three\"\
    ) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) \"four\") (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) \"five\") (sort_numbers (rest\
    \ numbers))]\n    [(equal? (first numbers) \"six\") (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) \"seven\") (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) \"eight\") (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) \"nine\") (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (let ([number-chars (string->list numbers)\n\
    \         number-chars-sorted (sort number-chars compare-numbers)])\n    (string-append\
    \ (number->string number-chars-sorted) \" \"))))\n", "  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first\
    \ numbers) \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n\
    \    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers)\
    \ \"four\") \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal?\
    \ (first numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"\
    seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first\
    \ numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n", "  (if (null? numbers)\n      '()\n      (append (sort_numbers\
    \ (substring numbers 0 -1))\n              (cons (substring numbers -1)\n    \
    \                (sort_numbers (substring numbers (length numbers) -1))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
