name: HumanEval_34_unique
language: rkt
prompt: "#lang racket\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
  \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)\n(define (unique l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique))\n\
  \    (check-equal? (candidate (list 5 3 5 2 3 3 9 0 123)) (list 0 2 3 5 9 123))\n\
  ))\n\n(test-humaneval)"
completions: ["  (cond [(empty? l) empty]\n        [(member (first l) (rest (rest\
    \ l))) (unique (rest (rest l)))]\n        [else (cons (first l) (unique (rest\
    \ (rest l))))]))\n", "  (cond [(empty? l) empty]\n        [(member (first l) (rest\
    \ (rest l))) (unique (rest (rest l)))]\n        [else (cons (first l) (unique\
    \ (rest (rest l))))]))\n", "  (cond\n    [(empty? l) empty]\n    [(member (first\
    \ l) (rest l)) (unique (rest l))]\n    [else (cons (first l) (unique (rest l)))]))\n",
  "  (sort (remove-duplicates l) <))\n", "  (sort (remove-duplicates l)))\n", "  (sort\
    \ (remove-duplicates l)))\n", "  (cond [(empty? l) empty]\n        [(equal? (first\
    \ l) (first l)) (unique (rest l))]\n        [else (cons (first l) (unique (rest\
    \ l)))]))\n", "  (sort (remove-duplicates l)))\n", "  (cond [(empty? l) empty]\n\
    \        [(member (first l) (rest l)) (unique (rest l))]\n        [else (cons\
    \ (first l) (unique (rest l)))]))\n", "  (cond [(null? l) l]\n        [(member\
    \ (car l) (cdr l)) (unique (cdr l))]\n        [else (cons (car l) (unique (cdr\
    \ l)))]))\n", "  (sort (remove-duplicates l) <))\n", "  (sort (remove-duplicates\
    \ l)))\n", "  (cond [(empty? l) empty]\n        [(member (first l) (rest (rest\
    \ l))) \n         (unique (rest (rest l)))]\n        [else (cons (first l) (unique\
    \ (rest (rest l))))]))\n", "  (sort (remove-duplicates l)))\n", "  (sort (remove-duplicates\
    \ l) <))\n", "  (sort (remove-duplicates l)))\n", "  (cond [(empty? l) empty]\n\
    \        [(member (first l) (rest l)) (unique (rest l))]\n        [else (cons\
    \ (first l) (unique (rest l)))]))\n", "  (let ([seen (hash-set '())])\n    (cond\
    \ [(empty? l) '()]\n          [(not (hash-member? seen l)) (cons l (unique (first\
    \ l)))]\n          [else (cons (first l) (unique (rest l)))])))\n", "  (sort (remove-duplicates\
    \ l)))\n", "  (sort (remove-duplicates l)))\n", "  (sort (remove-duplicates l)\
    \ <))\n", "  (sort (remove-duplicates l) <))\n", "  (cond\n    [(empty? l) empty]\n\
    \    [(member (first l) (rest (rest l))) \n     (unique (cons (first l) (rest\
    \ (rest l))))]\n    [else (cons (first l) (unique (rest (rest l))))]))\n", " \
    \ (sort (remove-duplicates l)))\n", "  (let loop ((l l) (seen '()))\n    (cond\
    \ ((null? l) seen)\n          ((not (member (car l) seen)) (loop (cdr l) (cons\
    \ (car l) seen)))\n          (else (loop (cdr l) (cons (car l) (loop (cdr l) seen))))))\n",
  "  (sort (remove-duplicates l)))\n", "  (sort (remove-duplicates l) <))\n", "  (sort\
    \ (remove-duplicates l) <))\n", "  (sort (remove-duplicates l) <))\n", "  (sort\
    \ (remove-duplicates l)))\n", "  (sort (remove-duplicates l) <))\n", "  (sort\
    \ (remove-duplicates l)))\n", "  (sort (remove-duplicates l)))\n", "  (cond\n\
    \    ((null? l) '())\n    ((equal? (car l) (cadr l)) (unique (cdr l)))\n    (else\
    \ (cons (car l) (unique (cdr l))))))\n", "  (sort (remove-duplicates l) <))\n",
  "  (cond [(empty? l) empty]\n        [(equal? (first l) (first l)) (unique (rest\
    \ l))]\n        [else (cons (first l) (unique (rest l)))]))\n", "  (sort (remove-duplicates\
    \ l)))\n", "  (sort (remove-duplicates l)))\n", "  (sort (remove-duplicates l)))\n",
  "  (cond [(empty? l) empty]\n        [(equal? (first l) (first l)) (unique (rest\
    \ l))]\n        [else (cons (first l) (unique (rest l)))]))\n", "  (sort (remove-duplicates\
    \ l)))\n", "  (cond [(null? l) l]\n        [(equal? (first l) (first (rest l)))\
    \ (unique (rest l))]\n        [else (cons (first l) (unique (rest l)))]))\n",
  "  (sort (remove-duplicates l) <))\n", "  (sort (remove-duplicates l) <))\n", " \
    \ (sort (remove-duplicates l)))\n", "  (sort (remove-duplicates l)))\n", "  (sort\
    \ (remove-duplicates l) <))\n", "  (cond [(empty? l) empty]\n        [(member\
    \ (first l) (rest (rest l))) \n         (unique (rest (rest l)))]\n        [else\
    \ (cons (first l) (unique (rest (rest l))))]))\n", "  (cond [(empty? l) empty]\n\
    \        [(equal? (first l) (first (rest l))) (unique (rest l))]\n        [else\
    \ (cons (first l) (unique (rest l)))]))\n", "  (sort (remove-duplicates l)))\n",
  "  (sort (remove-duplicates l)))\n", "  (let ([seen (make-hash (hash-table-size\
    \ #'(#))))]\n    (cond [(empty? l) empty]\n          [(not (hash-table-contains?\
    \ seen l)) (cons l empty)]\n          [else (let ([e (first l)]\n            \
    \           (hash-table-remove seen e #f))\n                 (cons e (rest l)))])))\n",
  "  (sort (remove-duplicates l)))\n", "  (sort (remove-duplicates l) <))\n", "  (sort\
    \ (remove-duplicates l) <))\n", "  (sort (remove-duplicates l)))\n", "  (sort\
    \ (remove-duplicates l)))\n", "  (sort (remove-duplicates l) <))\n", "  (sort\
    \ (remove-duplicates l)))\n", "  (sort (remove-duplicates l) <))\n", "  (sort\
    \ (remove-duplicates l) <))\n", "  (cond [(empty? l) empty]\n        [(equal?\
    \ (first l) (first (rest l))) (unique (rest l))]\n        [else (cons (first l)\
    \ (unique (rest l)))]))\n", "  (cond [(null? l) '()]\n        [(member (car l)\
    \ (cdr l)) (unique (cdr l))]\n        [else (cons (car l) (unique (cdr l)))]))\n",
  "  (sort (remove-duplicates l)))\n", "  (sort (remove-duplicates l) <))\n", "  (sort\
    \ (remove-duplicates l) <))\n", "  (cond [(empty? l) empty]\n        [(member\
    \ (first l) (rest (rest l))) \n         (unique (rest (rest l)))]\n        [else\
    \ (cons (first l) (unique (rest (rest l))))]))\n", "  (let loop ((l l) (seen '()))\n\
    \    (cond ((null? l) seen)\n          ((not (member (car l) seen)) (loop (cdr\
    \ l) (cons (car l) seen)))\n          (else (loop (cdr l) seen)))))\n", "  (cond\
    \ [(empty? l) empty]\n        [(member (first l) (rest l)) (unique (rest l))]\n\
    \        [else (cons (first l) (unique (rest l)))]))\n", "  (sort (remove-duplicates\
    \ l) <))\n", "  (sort (remove-duplicates l) <))\n", "  (sort (remove-duplicates\
    \ l) <))\n", "  (cond [(empty? l) empty]\n        [(member (first l) (rest (rest\
    \ l))) (rest (rest l))]\n        [else (cons (first l) (unique (rest (rest l))))]))\n",
  "  (sort (remove-duplicates l) <))\n", "  (sort (remove-duplicates l) <))\n", " \
    \ (let loop ((l l) (seen '()))\n    (cond ((null? l) seen)\n          ((not (member\
    \ (car l) seen)) (loop (cdr l) (cons (car l) seen)))\n          (else (loop (cdr\
    \ l) seen)))))\n", "  (sort (remove-duplicates l) <))\n", "  (let ([seen (make-hash\
    \ (hash-table-size #'()))]\n        [result (list '())]\n        [i 0])\n    (do\
    \ ((i 0 (+ i 1))\n         (l l result))\n        ((< i l))\n      (let ([key\
    \ (first l)]\n            [value (second l)])\n        (hash-table-ref seen key\
    \ (+ i 1))\n        (set! result (cons key (append result (list value))))))))\n",
  "  (cond [(empty? l) empty]\n        [(member (first l) (rest l)) (unique (rest\
    \ l))]\n        [else (cons (first l) (unique (rest l)))]))\n", "  (let loop ((l\
    \ l) (seen '()))\n    (cond ((null? l) seen)\n          ((member (car l) seen)\
    \ (loop (cdr l) (cons (car l) seen)))\n          (else (loop (cdr l) (cons (car\
    \ l) (loop (cdr l) seen))))))\n", "  (cond\n    [(empty? l) empty]\n    [(member\
    \ (first l) (rest l)) (unique (rest l))]\n    [else (cons (first l) (unique (rest\
    \ l)))]))\n", "  (sort (remove-duplicates l)))\n", "  (sort (remove-duplicates\
    \ l) <))\n", "  (sort (remove-duplicates l) <))\n", "  (sort (remove-duplicates\
    \ l)))\n", "  (sort (remove-duplicates l) <))\n", "  (sort (remove-duplicates\
    \ l) <))\n", "  (sort (remove-duplicates l) <))\n", "  (cond [(empty? l) empty]\n\
    \        [(equal? (first l) (first (rest l))) (unique (rest l))]\n        [else\
    \ (cons (first l) (unique (rest l)))]))\n", "  (sort (remove-duplicates l)))\n",
  "  (cond [(empty? l) empty]\n        [(member (first l) (rest (rest l))) \n    \
    \     (unique (rest (rest l)))]\n        [else (cons (first l) (unique (rest (rest\
    \ l))))]))\n", "  (cond [(empty? l) empty]\n        [(member (first l) (rest (rest\
    \ l))) \n         (unique (rest (rest l)))]\n        [else (cons (first l) (unique\
    \ (rest (rest l))))]))\n", "  (sort (remove-duplicates l) <))\n", "  (sort (remove-duplicates\
    \ l)))\n", "  (sort (remove-duplicates l)))\n", "  (sort (remove-duplicates l)))\n",
  "  (cond [(empty? l) empty]\n        [(equal? (first l) (first l)) (unique (rest\
    \ l))]\n        [else (cons (first l) (unique (rest l)))]))\n", "  (sort (remove-duplicates\
    \ l) <))\n", "  (sort (remove-duplicates l) <))\n", "  (sort (remove-duplicates\
    \ l)))\n", "  (sort (remove-duplicates l) <))\n", "  (sort (remove-duplicates\
    \ l)))\n", "  (sort (remove-duplicates l) <))\n", "  (cond ((null? l) '())\n \
    \       ((equal? (car l) (cadr l)) (unique (cdr l)))\n        (else (cons (car\
    \ l) (unique (cdr l))))))\n", "  (sort (remove-duplicates l) <))\n", "  (sort\
    \ (remove-duplicates l)))\n", "  (sort (remove-duplicates l) <))\n", "  (sort\
    \ (remove-duplicates l) <))\n", "  (cond [(empty? l) empty]\n        [(equal?\
    \ (first l) (first (rest l))) (unique (rest l))]\n        [else (cons (first l)\
    \ (unique (rest l)))]))\n", "  (sort (remove-duplicates l)))\n", "  (cond\n  \
    \  ((null? l) '())\n    ((equal? (first l) (car l)) (unique (rest l)))\n    (else\
    \ (cons (car l) (unique (rest l))))))\n", "  (cond\n    [(empty? l) empty]\n \
    \   [(member (first l) (rest l)) (unique (rest l))]\n    [else (cons (first l)\
    \ (unique (rest l)))]))\n", "  (cond\n    ((null? l) '())\n    ((equal? (car l)\
    \ (cadr l)) (unique (cdr l)))\n    (else (cons (car l) (unique (cdr l))))))\n",
  "  (sort (remove-duplicates l)))\n", "  (sort (remove-duplicates l)))\n", "  (cond\n\
    \    [(empty? l) empty]\n    [(member (first l) (rest (rest l))) \n     (unique\
    \ (rest (rest l)))]\n    [else (cons (first l) (unique (rest (rest l))))]))\n",
  "  (sort (remove-duplicates l) <))\n", "  (let loop ((l l) (seen '()))\n    (cond\
    \ ((null? l) seen)\n          ((equal? (car l) (car seen)) (loop (cdr l) (cons\
    \ (car l) seen)))\n          (else (loop (cdr l) (cons (car l) (loop (cdr l) seen))))))\n",
  "  (cond\n    [(empty? l) empty]\n    [(member (first l) (rest (rest l))) \n   \
    \  (unique (rest (rest l)))]\n    [else (cons (first l) (unique (rest (rest l))))]))\n",
  "  (sort (remove-duplicates l)))\n", "  (sort (remove-duplicates l) <))\n", "  (cond\
    \ ((null? l) '())\n        ((equal? (car l) (car (cdr l))) (unique (cdr l)))\n\
    \        (else (cons (car l) (unique (cdr l))))))\n", "  (cond [(empty? l) empty]\n\
    \        [(member (first l) (rest l)) (unique (rest l))]\n        [else (cons\
    \ (first l) (unique (rest l)))]))\n", "  (let ([seen (make-hash (hash-table-size\
    \ #'(#f #f)))]\n        [result (list #f)]\n        [l (reverse l)])\n    (loop\
    \ for e in l\n          for seen [or (gethash e seen)\n                      (set!\
    \ seen (hash-set seen e #f))]\n          for r [or (gethash e seen)\n        \
    \            (set! seen (hash-set seen e #f))]\n          for [r seen]\n     \
    \     collect r\n          finally (return (cons e result)))))\n", "  (cond\n\
    \    [(empty? l) empty]\n    [(member (first l) (rest (rest l))) \n     (unique\
    \ (rest (rest l)))]\n    [else (cons (first l) (unique (rest (rest l))))]))\n",
  "  (cond [(empty? l) empty]\n        [(member (first l) (rest (rest l))) (rest (rest\
    \ l))]\n        [else (cons (first l) (unique (rest (rest l))))]))\n", "  (sort\
    \ (remove-duplicates l) <))\n", "  (cond [(empty? l) empty]\n        [(member\
    \ (first l) (rest (rest l))) \n         (unique (rest (rest l)))]\n        [else\
    \ (cons (first l) (unique (rest (rest l))))]))\n", "  (cond\n    [(empty? l) empty]\n\
    \    [(member (first l) (rest l)) (unique (rest l))]\n    [else (cons (first l)\
    \ (unique (rest l)))]))\n", "  (cond [(empty? l) empty]\n        [(member (first\
    \ l) (rest (rest l))) \n         (unique (rest (rest l)))]\n        [else (cons\
    \ (first l) (unique (rest (rest l))))]))\n", "  (sort (remove-duplicates l) <))\n",
  "  (sort (remove-duplicates l) <))\n", "  (sort (remove-duplicates l) <))\n", " \
    \ (sort (remove-duplicates l) <))\n", "  (sort (remove-duplicates l)))\n", " \
    \ (sort (remove-duplicates l) <))\n", "  (cond [(empty? l) empty]\n        [(member\
    \ (first l) (rest (rest l))) (unique (rest (rest l)))]\n        [else (cons (first\
    \ l) (unique (rest (rest l))))]))\n", "  (sort (remove-duplicates l) <))\n", " \
    \ (sort (remove-duplicates l)))\n", "  (cond [(empty? l) empty]\n        [(member\
    \ (first l) (rest l)) (unique (rest l))]\n        [else (cons (first l) (unique\
    \ (rest l)))]))\n", "  (sort (remove-duplicates l)))\n", "  (let ([seen (make-hash\
    \ (car l))])\n    (cond\n      [(null? l) l]\n      [(not (hash-has-key? seen\
    \ seen)) (cons (car l) seen)]\n      [else (unique (cdr l))]))\n  )\n", "  (sort\
    \ (remove-duplicates l)))\n", "  (let loop ((l l) (seen '()))\n    (cond ((null?\
    \ l) seen)\n          ((not (member l (seen seen seen))) (cons l (loop (cdr l)\
    \ seen)))\n          (else (loop (cdr l) (cons l (seen seen seen))))))\n", " \
    \ (sort (remove-duplicates l) <))\n", "  (cond [(empty? l) empty]\n        [(equal?\
    \ (first l) (first l)) (unique (rest l))]\n        [else (cons (first l) (unique\
    \ (rest l)))]))\n", "  (sort (remove-duplicates l)))\n", "  (sort (remove-duplicates\
    \ l) <))\n", "  (sort (remove-duplicates l) <))\n", "  (sort (remove-duplicates\
    \ l)))\n", "  (sort (remove-duplicates l)))\n", "  (cond\n    [(empty? l) empty]\n\
    \    [(member (first l) (rest (rest l))) \n     (unique (rest (rest l)))]\n  \
    \  [else (cons (first l) (unique (rest (rest l))))]))\n", "  (sort (remove-duplicates\
    \ l) <))\n", "  (sort (remove-duplicates l) <))\n", "  (cond [(empty? l) empty]\n\
    \        [(member (first l) (rest (rest l))) \n         (unique (rest (rest l)))]\n\
    \        [else (cons (first l) (unique (rest (rest l))))]))\n", "  (sort (remove-duplicates\
    \ l)))\n", "  (sort (remove-duplicates l)))\n", "  (cond [(empty? l) empty]\n\
    \        [(member (first l) (rest (rest l))) \n         (unique (rest (rest l)))]\n\
    \        [else (cons (first l) (unique (rest (rest l))))]))\n", "  (sort (remove-duplicates\
    \ l) <))\n", "  (cond [(empty? l) empty]\n        [(equal? (first l) (first l))\
    \ (unique (rest l))]\n        [else (cons (first l) (unique (rest l)))]))\n",
  "  (sort (remove-duplicates l)))\n", "  (cond [(empty? l) empty]\n        [(member\
    \ (first l) (rest (rest l))) \n         (unique (rest (rest l)))]\n        [else\
    \ (cons (first l) (unique (rest (rest l))))]))\n", "  (sort (remove-duplicates\
    \ l) <))\n", "  (sort (remove-duplicates l) <))\n", "  (cond\n    [(empty? l)\
    \ empty]\n    [(member (first l) (rest l)) (unique (rest l))]\n    [else (cons\
    \ (first l) (unique (rest l)))]))\n", "  (cond\n    ((null? l) '())\n    ((equal?\
    \ (first l) (car l)) (unique (rest l)))\n    (else (cons (car l) (unique (rest\
    \ l))))))\n", "  (sort (remove-duplicates l)))\n", "  (cond [(empty? l) empty]\n\
    \        [(member (first l) (rest (rest l))) \n         (unique (rest (rest l)))]\n\
    \        [else (cons (first l) (unique (rest (rest l))))]))\n", "  (sort (remove-duplicates\
    \ l)))\n", "  (sort (remove-duplicates l)))\n", "  (sort (remove-duplicates l)\
    \ <))\n", "  (cond [(empty? l) empty]\n        [(equal? (first l) (first l)) (unique\
    \ (rest l))]\n        [else (cons (first l) (unique (rest l)))]))\n", "  (sort\
    \ (remove-duplicates l) <))\n", "  (sort (remove-duplicates l) <))\n", "  (cond\
    \ [(empty? l) empty]\n        [(equal? (first l) (first l)) (unique (rest l))]\n\
    \        [else (cons (first l) (unique (rest l)))]))\n", "  (sort (remove-duplicates\
    \ l)))\n", "  (sort (remove-duplicates l) <))\n", "  (sort (remove-duplicates\
    \ l)))\n", "  (sort (remove-duplicates l)))\n", "  (sort (remove-duplicates l)\
    \ <))\n", "  (let ([seen (make-hash (hash-table-size #'symbol))])\n    (cond [(empty?\
    \ l) empty]\n          [(not (hash-table-contains? seen l)) (cons l empty)]\n\
    \          [else (let ([e (first l)])\n                   (hash-table-assoc! seen\
    \ e e)\n                   (unique (rest l)))]))))\n", "  (cond [(empty? l) empty]\n\
    \        [(equal? (first l) (first l)) (unique (rest l))]\n        [else (cons\
    \ (first l) (unique (rest l)))]))\n", "  (cond [(empty? l) empty]\n        [(member\
    \ (first l) (rest l)) (unique (rest l))]\n        [else (cons (first l) (unique\
    \ (rest l)))]))\n", "  (cond [(empty? l) empty]\n        [(member (first l) (rest\
    \ (rest l))) \n         (unique (rest (rest l)))]\n        [else (cons (first\
    \ l) (unique (rest (rest l))))]))\n", "  (sort (remove-duplicates l)))\n", " \
    \ (sort (remove-duplicates l) <))\n", "  (sort (remove-duplicates l)))\n", " \
    \ (sort (remove-duplicates l) <))\n", "  (sort (remove-duplicates l)))\n", " \
    \ (sort (remove-duplicates l)))\n", "  (sort (remove-duplicates l)))\n", "  (sort\
    \ (remove-duplicates l)))\n", "  (sort (remove-duplicates l)))\n", "  (sort (remove-duplicates\
    \ l) <))\n", "  (sort (remove-duplicates l)))\n", "  (cond\n    [(empty? l) empty]\n\
    \    [(member (first l) (rest l)) (unique (rest l))]\n    [else (cons (first l)\
    \ (unique (rest l)))]))\n", "  (cond\n    [(empty? l) empty]\n    [(member (first\
    \ l) (rest l)) (unique (rest l))]\n    [else (cons (first l) (unique (rest l)))]))\n",
  "  (sort (remove-duplicates l) <))\n", "  (sort (remove-duplicates l) <))\n", " \
    \ (sort (remove-duplicates l) <))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
