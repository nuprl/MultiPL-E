name: HumanEval_34_unique
language: rkt
prompt: "#lang racket\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
  \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)\n(define (unique l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique))\n\
  \    (check-equal? (candidate (list 5 3 5 2 3 3 9 0 123)) (list 0 2 3 5 9 123))\n\
  ))\n\n(test-humaneval)"
completions: ["  (cond [(empty? l) empty]\n        [(member (first l) (rest (rest\
    \ l))) (unique (rest (rest l)))]\n        [else (cons (first l) (unique (rest\
    \ (rest l))))]))\n", "  (cond [(empty? l) empty]\n        [(member (first l) (rest\
    \ (rest l))) (unique (rest (rest l)))]\n        [else (cons (first l) (unique\
    \ (rest (rest l))))]))\n", "  (cond\n    [(empty? l) empty]\n    [(member (first\
    \ l) (rest l)) (unique (rest l))]\n    [else (cons (first l) (unique (rest l)))]))\n",
  "  (sort (remove-duplicates l) <))\n", "  (sort (remove-duplicates l)))\n", "  (sort\
    \ (remove-duplicates l)))\n", "  (cond [(empty? l) empty]\n        [(equal? (first\
    \ l) (first l)) (unique (rest l))]\n        [else (cons (first l) (unique (rest\
    \ l)))]))\n", "  (sort (remove-duplicates l)))\n", "  (cond [(empty? l) empty]\n\
    \        [(member (first l) (rest l)) (unique (rest l))]\n        [else (cons\
    \ (first l) (unique (rest l)))]))\n", "  (cond [(null? l) l]\n        [(member\
    \ (car l) (cdr l)) (unique (cdr l))]\n        [else (cons (car l) (unique (cdr\
    \ l)))]))\n", "  (sort (remove-duplicates l) <))\n", "  (sort (remove-duplicates\
    \ l)))\n", "  (cond [(empty? l) empty]\n        [(member (first l) (rest (rest\
    \ l))) \n         (unique (rest (rest l)))]\n        [else (cons (first l) (unique\
    \ (rest (rest l))))]))\n", "  (sort (remove-duplicates l)))\n", "  (sort (remove-duplicates\
    \ l) <))\n", "  (sort (remove-duplicates l)))\n", "  (cond [(empty? l) empty]\n\
    \        [(member (first l) (rest l)) (unique (rest l))]\n        [else (cons\
    \ (first l) (unique (rest l)))]))\n", "  (let ([seen (hash-set '())])\n    (cond\
    \ [(empty? l) '()]\n          [(not (hash-member? seen l)) (cons l (unique (first\
    \ l)))]\n          [else (cons (first l) (unique (rest l)))])))\n", "  (sort (remove-duplicates\
    \ l)))\n", "  (sort (remove-duplicates l)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
