name: HumanEval_122_add_elements
language: rkt
prompt: "#lang racket\n\n;; Given a non-empty list of integers arr and an integer\
  \ k, return\n;; the sum of the elements with at most two digits from the first k\
  \ elements of arr.\n;; Example:\n;; >>> (add_elements (list 111 21 3 4000 5 6 7\
  \ 8 9) 4)\n;; 24\n;; Constraints:\n;; 1. 1 <= len(arr) <= 100\n;; 2. 1 <= k <= len(arr)\n\
  (define (add_elements arr k)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_elements))\n\
  \    (check-equal? (candidate (list 1 -2 -3 41 57 76 87 88 99) 3) -4)\n    (check-equal?\
  \ (candidate (list 111 121 3 4000 5 6) 2) 0)\n    (check-equal? (candidate (list\
  \ 11 21 3 90 5 6 7 8 9) 4) 125)\n    (check-equal? (candidate (list 111 21 3 4000\
  \ 5 6 7 8 9) 4) 24)\n    (check-equal? (candidate (list 1) 1) 1)\n))\n\n(test-humaneval)"
completions: ["  (if (or (= k 0) (= (length arr) 0))\n      0\n      (+ (first arr)\n\
    \         (add_elements (rest arr) (- k 1)))))\n", "  (if (empty? arr)\n     \
    \ 0\n      (+ (first arr)\n         (add_elements (rest arr)\n               \
    \        (- k 1)))))\n", "  (let loop ((arr (reverse arr)) (sum 0) (i 0))\n  \
    \  (cond ((null? arr) sum)\n          ((< i k) (loop (rest arr) (+ sum (first\
    \ arr)) (+ i 1)))\n          (else (loop (rest arr) (+ sum (first arr)) (+ i 1))))))\n",
  "  (if (empty? arr)\n      0\n      (+ (first arr)\n         (add_elements (rest\
    \ arr)\n                       (- k 1)))))\n", "  (if (null? arr)\n      0\n \
    \     (+ (first arr)\n         (add_elements (rest arr) (- k 1)))))\n", "  (if\
    \ (empty? arr)\n      0\n      (+ (first arr)\n         (add_elements (rest arr)\n\
    \                       (- k 1)))))\n", "  (let loop ((arr (reverse arr)) (sum\
    \ (+ 0 0)) (i (- k 1)))\n    (cond\n      [(empty? arr) sum]\n      [(< i k) (loop\
    \ (rest arr) (+ sum (first arr)) (- i 1))]\n      [else (loop (rest arr) (+ sum\
    \ (first arr)) (- i 1))])))\n", "  (if (empty? arr)\n      0\n      (+ (first\
    \ arr)\n         (add_elements (rest arr) k))))\n", "  (if (or (= k 0) (= k 1))\n\
    \      (first arr)\n      (add_elements (rest arr) (- k 1))))\n", "  (if (null?\
    \ arr)\n      0\n      (+ (first arr)\n         (add_elements (rest arr) (- k\
    \ 1)))))\n", "  (if (empty? arr)\n      0\n      (+ (first arr)\n         (add_elements\
    \ (rest arr)\n                       (- k 1)))))\n", "  (if (empty? arr)\n   \
    \   0\n      (+ (first arr)\n         (add_elements (rest arr) (- k 1)))))\n",
  "  (if (null? arr)\n      0\n      (+ (car arr)\n         (add_elements (cdr arr)\
    \ k))))\n", "  (if (empty? arr)\n      0\n      (+ (first arr)\n         (add_elements\
    \ (rest arr)\n                       (- k 1)))))\n", "  (if (empty? arr)\n   \
    \   0\n      (+ (first arr) (add_elements (rest arr) (- k 1)))))\n", "  (let loop\
    \ ((arr (reverse arr))\n             (sum (+ 0 (first arr)))\n             (cnt\
    \ 0))\n    (cond ((null? arr) sum)\n          ((< cnt k) (loop (rest arr) (+ sum\
    \ (first arr)) (+ cnt 1)))\n          (else (loop (rest arr) (+ sum (first arr))\
    \ cnt)))))\n", "  (if (null? arr)\n      0\n      (+ (first arr)\n         (add_elements\
    \ (rest arr)\n                       (- k 1)))))\n", "  (let loop ((arr (reverse\
    \ arr)) (sum 0) (i 0))\n    (if (< i k)\n        sum\n        (loop (rest arr)\
    \ (+ sum (first arr)) (+ i 1)))))\n", "  (let loop ((arr (reverse arr)) (sum (first\
    \ arr)))\n    (if (null? arr)\n        sum\n        (loop (rest arr) (+ sum (first\
    \ arr))))))\n", "  (if (null? arr)\n      0\n      (+ (first arr)\n         (add_elements\
    \ (rest arr)\n                       (- k 1)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
