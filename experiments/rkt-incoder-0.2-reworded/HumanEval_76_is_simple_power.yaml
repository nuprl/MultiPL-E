name: HumanEval_76_is_simple_power
language: rkt
prompt: "#lang racket\n\n;; Your task is to write a function that returns true if\
  \ a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple\
  \ power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n\
  ;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;;\
  \ >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n\
  ;; >>> (is_simple_power 5 3)\n;; false\n(define (is_simple_power x n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
  \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
  \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
  \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24 2)\
  \ #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate 12\
  \ 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate 1\
  \ 12) #t)\n))\n\n(test-humaneval)"
completions: ["  (cond ((= n 1) (= x 1))\n        ((= x n) (= (* x n) x))\n      \
    \  (else false)))\n", "  (= (* x n) (* x n)))\n", "  (= (* n (expt x n)) x))\n",
  "  (= (* x n) (* n (expt x n))))\n", "  (= (* x n) x))\n", "  (= (* x n) (* x n)))\n",
  "  (cond ((= n 0) true)\n        ((= x 1) true)\n        ((= (* x x) n) true)\n\
    \        (else false)))\n", "  (= (* x n) (* x n)))\n", "  (cond ((= n 1) (= x\
    \ 1))\n        ((= x 0) false)\n        ((= (* x x) n) true)\n        (else (is_simple_power\
    \ (* x x) n))))\n", "  (cond ((= n 0) true)\n        ((= n 1) true)\n        ((=\
    \ (* x x) n) true)\n        (else false)))\n", "  (cond ((= n 0) true)\n     \
    \   ((= x 1) true)\n        ((= (* x x) n) true)\n        (else false)))\n", " \
    \ (= (* x n) (* n (* x n))))\n", "  (cond ((= n 0) true)\n        ((= x 1) true)\n\
    \        ((= (* x x) n) true)\n        (else false)))\n", "  (= (* x n) (* n (*\
    \ n n))))\n", "  (= (* x n) (* x (* n n))))\n", "  (cond ((= n 0) true)\n    \
    \    ((= x 1) true)\n        ((= (* x x) n) true)\n        (else false)))\n",
  "  (= (* x n) (* x n)))\n", "  (= (* x n) (* x n)))\n", "  (= (* x n) (* x n)))\n",
  "  (= (* n x) x))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
