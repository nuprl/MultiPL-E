name: HumanEval_155_even_odd_count
language: rkt
prompt: "#lang racket\n\n;; Given an integer. return a list that has the number of\
  \ even and odd digits respectively.\n;; Example:\n;; >>> (even_odd_count -12)\n\
  ;; (list 1 1)\n;; >>> (even_odd_count 123)\n;; (list 1 2)\n(define (even_odd_count\
  \ num)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_odd_count))\n\
  \    (check-equal? (candidate 7) (list 0 1))\n    (check-equal? (candidate -78)\
  \ (list 1 1))\n    (check-equal? (candidate 3452) (list 2 2))\n    (check-equal?\
  \ (candidate 346211) (list 3 3))\n    (check-equal? (candidate -345821) (list 3\
  \ 3))\n    (check-equal? (candidate -2) (list 1 0))\n    (check-equal? (candidate\
  \ -45347) (list 2 3))\n    (check-equal? (candidate 0) (list 1 0))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(< num 0) (list 0 0)]\n    [(= num 0) (list 0 0)]\n \
    \   [(= num 1) (list 0 1)]\n    [else (cons (mod num 2) (even_odd_count (/ num\
    \ 2)))]))\n", "  (cond\n    [(= num 0) (list 0 0)]\n    [(= num 1) (list 0 1)]\n\
    \    [(even? (modulo num 2)) (list (+ 0 (modulo num 2))) (list (+ 1 (modulo num\
    \ 2)))]\n    [else (list (+ 0 (modulo num 2))) (list (+ 1 (modulo num 2)))]))\n",
  "  (cond\n    [(< num 0) (list 0 0)]\n    [(even? num) (list 1 0)]\n    [else (list\
    \ 1 1)]))\n", "  (cond\n    [(< num 0) (list 0 0)]\n    [(even? num) (cons (even?\
    \ num) (even_odd_count (/ num 2)))]\n    [else (cons (odd? num) (even_odd_count\
    \ (/ num 2)))]))\n", "  (cond\n    [(< num 0) (list 0 0)]\n    [(= num 0) (list\
    \ 0 0)]\n    [(= num 1) (list 0 1)]\n    [else (even-odd-helper (- num 1) (list\
    \ 1 0))]))\n", "  (cond\n    [(< num 0) (list 0 0)]\n    [(= num 0) (list 0 0)]\n\
    \    [(even? num) (cons (even? num) (even_odd_count (/ num 2)))]\n    [(odd? num)\
    \ (cons (odd? num) (even_odd_count (/ num 2)))]\n    [else (cons (even? num) (even_odd_count\
    \ (/ num 2)))]\n  )\n)\n", "  (cond\n    [(< num 0) (list 0 0)]\n    [(= num 0)\
    \ (list 0 0)]\n    [(= num 1) (list 0 1)]\n    [else (even-odd-helper (- num 1))]))\n",
  "  (cond\n    [(< num 0) (list 0 0)]\n    [(= num 0) (list 0 0)]\n    [(even? num)\
    \ (cons (even? num) (even_odd_count (/ num 2)))]\n    [else (cons (odd? num) (even_odd_count\
    \ (/ num 2)))]))\n", "  (cond\n    [(= num 0) '()]\n    [(even? num) (cons num\
    \ 1)]\n    [else (cons num 2)]))\n", "  (cond\n    [(< num 0) (list 0 0)]\n  \
    \  [(= num 0) (list 0 0)]\n    [(= num 1) (list 0 1)]\n    [else (even-odd-helper\
    \ (- num 1))]))\n", "  (cond\n    [(< num 0) (list 0 0)]\n    [(= num 0) (list\
    \ 0 0)]\n    [(= num 1) (list 1 1)]\n    [else (even-odd-helper (- num 1) (list\
    \ 1 1))]))\n", "  (cond\n    [(< num 0) (list 0 0)]\n    [(= num 0) (list 0 0)]\n\
    \    [(= num 1) (list 1 1)]\n    [else (even-odd-helper (- num 1))]))\n", "  (cond\n\
    \    [(< num 0) (list 0 0)]\n    [(= num 0) (list 0 0)]\n    [else (even-odd-helper\
    \ (- num 1) (list 1 0))]))\n", "  (cond\n    [(< num 0) (list 0 0)]\n    [(= num\
    \ 0) (list 0 0)]\n    [(= num 1) (list 0 1)]\n    [else (even-odd-helper (- num\
    \ 1))]))\n", "  (cond\n    [(< num 0) (list 0 0)]\n    [(= num 0) (list 0 0)]\n\
    \    [(= num 1) (list 0 1)]\n    [else (even-odd-digits (- num 1))]))\n", "  (cond\n\
    \    [(< num 0) (list 0 0)]\n    [(even? num) (list 1 (add1 (modulo num 2)))]\n\
    \    [else (list 1 (add1 (modulo num 2)))]))\n", "  (cond\n    [(< num 0) (list\
    \ 0 0)]\n    [(= num 0) (list 0 0)]\n    [(= num 1) (list 0 1)]\n    [else (even-odd-helper\
    \ (- num 1) (list 1 0))]))\n", "  (cond\n    [(= num 0) (list 0 0)]\n    [(even?\
    \ num) (cons (even? num) (even_odd_count (/ num 2)))]\n    [else (cons (odd? num)\
    \ (even_odd_count (/ num 2)))]))\n", "  (cond\n    [(< num 0) (list 0 0)]\n  \
    \  [(= num 0) (list 0 0)]\n    [(= num 1) (list 1 1)]\n    [else (even-odd-digits\
    \ (- num 1))]))\n", "  (cond\n    [(< num 0) (list 0 0)]\n    [(= num 0) (list\
    \ 0 0)]\n    [(= num 1) (list 0 1)]\n    [else (even-odd-helper (- num 1) (list\
    \ 1 0))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
