name: HumanEval_114_minSubArraySum
language: rkt
prompt: "#lang racket\n\n;; Given a list of integers nums, find the minimum sum of\
  \ any non-empty sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum (list\
  \ 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6\n(define (minSubArraySum\
  \ nums)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minSubArraySum))\n\
  \    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)\n    (check-equal? (candidate\
  \ (list -1 -2 -3)) -6)\n    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)\n\
  \    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)\n   \
  \ (check-equal? (candidate (list 0 10 20 1000000)) 0)\n    (check-equal? (candidate\
  \ (list -1 -2 -3 10 -5)) -6)\n    (check-equal? (candidate (list 100 -1 -2 -3 10\
  \ -5)) -6)\n    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)\n    (check-equal?\
  \ (candidate (list 100 -33 32 -1 0 -2)) -33)\n    (check-equal? (candidate (list\
  \ -10)) -10)\n    (check-equal? (candidate (list 7)) 7)\n    (check-equal? (candidate\
  \ (list 1 -1)) -1)\n))\n\n(test-humaneval)"
completions: ["  (let loop ((i 0) (sum 0) (arr (make-array (length nums) (+ i 1))))\n\
    \    (if (< i length)\n        (loop (+ i 1) (+ sum (first arr)) (rest arr))\n\
    \        sum)))\n", "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n\
    \        (if (null? (cdr nums))\n            (+ (minSubArraySum (cdr nums)) head)\n\
    \            (minSubArraySum (cdr nums))))))\n", "  (let loop ((i 0) (min (first\
    \ nums)) (max 0))\n    (if (= i 0)\n        min\n        (loop (+ i 1) (+ min\
    \ (first nums)) (max max (first nums)))))))\n", "  (if (null? nums)\n      0\n\
    \      (let ([sum (+ 0 (min 0 (car nums))))]\n            (if (null? (cdr nums))\n\
    \                sum\n                (let ([sum (+ sum (min 0 (car nums))))]\n\
    \                      (minSubArraySum (cdr nums))))))))\n", "  (if (null? nums)\n\
    \      0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n   \
    \         (+ head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (", "  (if (null? nums)\n      0\n      (let ([head (car\
    \ nums)])\n        (if (null? (cdr nums))\n            (+ head (min head (cdr\
    \ nums)))\n            (minSubArraySum (cdr nums))))))\n", "  (if (null? nums)\n\
    \      0\n      (let ([head (car nums)])\n        (let ([sum (subArraySum head\
    \ nums)])\n          (if (< sum 0)\n              (subArraySum head nums)\n  \
    \            sum))))))\n", "  (if (null? nums)\n      0\n      (let ([head (car\
    \ nums)])\n        (if (null? (cdr nums))\n            (+ head (min (subArraySum\
    \ nums) head))\n            (min (subArraySum nums) head)))))\n", "  (if (null?\
    \ nums)\n      0\n      (let ([head (car nums)])\n        (let ([tail (cdr nums)])\n\
    \          (if (null? tail)\n              (+ head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head ", "  (if (null? nums)\n      0\n      (let ([head (car\
    \ nums)])\n        (if (null? (cdr nums))\n            (+ (head head) (minSubArraySum\
    \ (cdr nums)))\n            (minSubArraySum (cdr nums))))))\n", "  (define (helper\
    \ nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(< (first nums) acc)\
    \ (helper (rest nums) (+ acc (first nums)))]\n      [else (helper (rest nums)\
    \ acc)]))\n  (helper nums 0))\n", "  (let loop ((i 0)\n             (min (first\
    \ nums))\n             (sum (first nums)))\n    (if (= i length (rest nums))\n\
    \        min\n        (loop (+ i 1) (+ min (first nums)) (+ sum (first nums)))))))\n",
  "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n        (if (null?\
    \ (cdr nums))\n            (+ (minSubArraySum (cdr nums)) head)\n            (minSubArraySum\
    \ (cdr nums))))))\n", "  (if (null? nums)\n      0\n      (let ((sum (car nums))\n\
    \            (tail (cdr nums)))\n        (if (null? tail)\n            sum\n \
    \           (minSubArraySum (cons sum (minSubArraySum tail)))))))\n", "  (if (empty?\
    \ nums)\n      0\n      (let ([sum (car nums)])\n        (if (empty? (cdr nums))\n\
    \            sum\n            (minSubArraySum (cdr nums))))))\n", "  (let loop\
    \ ((i 0)\n             (min (first nums))\n             (sum (first nums)))\n\
    \    (if (null? nums)\n        min\n        (loop (+ i 1)\n              (if (<\
    \ (first nums) min)\n                  (first nums)\n                  min)\n\
    \              (+ sum (first nums))))))\n", "  (if (null? nums)\n      0\n   \
    \   (let ([sum (car nums)])\n        (if (null? (cdr nums))\n            sum\n\
    \            (minSubArraySum (cdr nums))))))\n", "  (if (empty? nums)\n      (error\
    \ \"minSubArraySum: empty list\")\n      (let ([head (car nums)])\n        (if\
    \ (empty? (cdr nums))\n            (+ head (min (subArraySum nums) (subArraySum\
    \ nums 2)))\n            (min (subArraySum nums) (subArraySum nums 2))))))\n",
  "  (if (null? nums)\n      0\n      (let ([head (car nums)\n            tail (cdr\
    \ nums)])\n        (if (null? tail)\n            (+ head head)\n            (minSubArraySum\
    \ (cons head tail))))))\n", "  (define (helper nums acc minSoFar)\n    (cond [(null?\
    \ nums) (+ acc minSoFar)]\n          [(< nums (car nums)) (helper (cdr nums) (+\
    \ acc minSoFar) minSoFar)]\n          [else (helper (cdr nums) acc (+ minSoFar\
    \ nums))]))\n  (helper nums 0 0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
