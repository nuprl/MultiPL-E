name: HumanEval_114_minSubArraySum
language: rkt
prompt: "#lang racket\n\n;; Given a list of integers nums, find the minimum sum of\
  \ any non-empty sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum (list\
  \ 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6\n(define (minSubArraySum\
  \ nums)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minSubArraySum))\n\
  \    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)\n    (check-equal? (candidate\
  \ (list -1 -2 -3)) -6)\n    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)\n\
  \    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)\n   \
  \ (check-equal? (candidate (list 0 10 20 1000000)) 0)\n    (check-equal? (candidate\
  \ (list -1 -2 -3 10 -5)) -6)\n    (check-equal? (candidate (list 100 -1 -2 -3 10\
  \ -5)) -6)\n    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)\n    (check-equal?\
  \ (candidate (list 100 -33 32 -1 0 -2)) -33)\n    (check-equal? (candidate (list\
  \ -10)) -10)\n    (check-equal? (candidate (list 7)) 7)\n    (check-equal? (candidate\
  \ (list 1 -1)) -1)\n))\n\n(test-humaneval)"
completions: ["  (let loop ((i 0) (sum 0) (arr (make-array (length nums) (+ i 1))))\n\
    \    (if (< i length)\n        (loop (+ i 1) (+ sum (first arr)) (rest arr))\n\
    \        sum)))\n", "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n\
    \        (if (null? (cdr nums))\n            (+ (minSubArraySum (cdr nums)) head)\n\
    \            (minSubArraySum (cdr nums))))))\n", "  (let loop ((i 0) (min (first\
    \ nums)) (max 0))\n    (if (= i 0)\n        min\n        (loop (+ i 1) (+ min\
    \ (first nums)) (max max (first nums)))))))\n", "  (if (null? nums)\n      0\n\
    \      (let ([sum (+ 0 (min 0 (car nums))))]\n            (if (null? (cdr nums))\n\
    \                sum\n                (let ([sum (+ sum (min 0 (car nums))))]\n\
    \                      (minSubArraySum (cdr nums))))))))\n", "  (if (null? nums)\n\
    \      0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n   \
    \         (+ head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (", "  (if (null? nums)\n      0\n      (let ([head (car\
    \ nums)])\n        (if (null? (cdr nums))\n            (+ head (min head (cdr\
    \ nums)))\n            (minSubArraySum (cdr nums))))))\n", "  (if (null? nums)\n\
    \      0\n      (let ([head (car nums)])\n        (let ([sum (subArraySum head\
    \ nums)])\n          (if (< sum 0)\n              (subArraySum head nums)\n  \
    \            sum))))))\n", "  (if (null? nums)\n      0\n      (let ([head (car\
    \ nums)])\n        (if (null? (cdr nums))\n            (+ head (min (subArraySum\
    \ nums) head))\n            (min (subArraySum nums) head)))))\n", "  (if (null?\
    \ nums)\n      0\n      (let ([head (car nums)])\n        (let ([tail (cdr nums)])\n\
    \          (if (null? tail)\n              (+ head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head ", "  (if (null? nums)\n      0\n      (let ([head (car\
    \ nums)])\n        (if (null? (cdr nums))\n            (+ (head head) (minSubArraySum\
    \ (cdr nums)))\n            (minSubArraySum (cdr nums))))))\n", "  (define (helper\
    \ nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(< (first nums) acc)\
    \ (helper (rest nums) (+ acc (first nums)))]\n      [else (helper (rest nums)\
    \ acc)]))\n  (helper nums 0))\n", "  (let loop ((i 0)\n             (min (first\
    \ nums))\n             (sum (first nums)))\n    (if (= i length (rest nums))\n\
    \        min\n        (loop (+ i 1) (+ min (first nums)) (+ sum (first nums)))))))\n",
  "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n        (if (null?\
    \ (cdr nums))\n            (+ (minSubArraySum (cdr nums)) head)\n            (minSubArraySum\
    \ (cdr nums))))))\n", "  (if (null? nums)\n      0\n      (let ((sum (car nums))\n\
    \            (tail (cdr nums)))\n        (if (null? tail)\n            sum\n \
    \           (minSubArraySum (cons sum (minSubArraySum tail)))))))\n", "  (if (empty?\
    \ nums)\n      0\n      (let ([sum (car nums)])\n        (if (empty? (cdr nums))\n\
    \            sum\n            (minSubArraySum (cdr nums))))))\n", "  (let loop\
    \ ((i 0)\n             (min (first nums))\n             (sum (first nums)))\n\
    \    (if (null? nums)\n        min\n        (loop (+ i 1)\n              (if (<\
    \ (first nums) min)\n                  (first nums)\n                  min)\n\
    \              (+ sum (first nums))))))\n", "  (if (null? nums)\n      0\n   \
    \   (let ([sum (car nums)])\n        (if (null? (cdr nums))\n            sum\n\
    \            (minSubArraySum (cdr nums))))))\n", "  (if (empty? nums)\n      (error\
    \ \"minSubArraySum: empty list\")\n      (let ([head (car nums)])\n        (if\
    \ (empty? (cdr nums))\n            (+ head (min (subArraySum nums) (subArraySum\
    \ nums 2)))\n            (min (subArraySum nums) (subArraySum nums 2))))))\n",
  "  (if (null? nums)\n      0\n      (let ([head (car nums)\n            tail (cdr\
    \ nums)])\n        (if (null? tail)\n            (+ head head)\n            (minSubArraySum\
    \ (cons head tail))))))\n", "  (define (helper nums acc minSoFar)\n    (cond [(null?\
    \ nums) (+ acc minSoFar)]\n          [(< nums (car nums)) (helper (cdr nums) (+\
    \ acc minSoFar) minSoFar)]\n          [else (helper (cdr nums) acc (+ minSoFar\
    \ nums))]))\n  (helper nums 0 0))\n", "  (if (empty? nums)\n      0\n      (let\
    \ ([head (first nums)\n            tail (rest nums)])\n        (if (empty? tail)\n\
    \            (+ head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min ", "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n     \
    \   (if (null? (cdr nums))\n            (+ (head head) (minSubArraySum (cdr nums)))\n\
    \            (minSubArraySum (cdr nums))))))\n", "  (if (null? nums)\n      0\n\
    \      (let ([head (car nums)])\n        (if (null? (cdr nums))\n            (+\
    \ head (min (subArraySum nums) head))\n            (minSubArraySum (cdr nums))))))\n",
  "  (let loop ((sum (car nums)) (nums (cdr nums)))\n    (if (null? nums)\n      \
    \  sum\n        (loop (+ sum (car nums)) (cdr nums)))))\n", "  (if (null? nums)\n\
    \      0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n   \
    \         (+ head (min (subArraySum nums) head))\n            (+ head (minSubArraySum\
    \ (cdr nums)))))))\n", "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n\
    \        (let ([tail (cdr nums)])\n          (if (null? tail)\n              (+\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head ", "  (if (null? nums)\n\
    \      0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n   \
    \         (+ head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (", "  (if (null? nums)\n      0\n      (let ([head (car\
    \ nums)])\n        (if (null? (cdr nums))\n            (+ head (min (subArraySum\
    \ nums) head))\n            (min (subArraySum nums) head))))))\n", "  (if (null?\
    \ nums)\n      0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n\
    \            (+ head (min head (car nums)))\n            (minSubArraySum (cdr\
    \ nums))))))\n", "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n\
    \        (let ([tail (cdr nums)])\n          (if (null? tail)\n              (+\
    \ head head)\n              (let ([sum (+ head (car tail))])\n               \
    \ (if (< sum head)\n                    (+ sum head)\n                    (minSubArraySum\
    \ (cdr tail))))))))))\n", "  (cond\n    [(empty? nums) 0]\n    [(cons? nums) (min\
    \ (subArraySum nums) (min (subArraySum nums) (subArraySum nums)))]\n    [else\
    \ (minSubArraySum (rest nums))]))\n", "  (if (null? nums)\n      0\n      (let\
    \ ([head (car nums)])\n        (if (null? (cdr nums))\n            (+ head (car\
    \ nums))\n            (minSubArraySum (cdr nums))))))\n", "  (if (null? nums)\n\
    \      0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n   \
    \         (+ head (min (subArraySum nums) head))\n            (min (subArraySum\
    \ nums) head))))))\n", "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n\
    \        (if (null? (cdr nums))\n            (+ (head head) (minSubArraySum (cdr\
    \ nums)))\n            (minSubArraySum (cdr nums))))))\n", "  (if (null? nums)\n\
    \      0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n   \
    \         (+ (head head) (minSubArraySum (cdr nums)))\n            (minSubArraySum\
    \ (cdr nums))))))\n", "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n\
    \        (let ([tail (cdr nums)])\n          (if (null? tail)\n              (+\
    \ head (min head (- head tail)))\n              (let ([sum (+ head (min head (-\
    \ head tail)))])\n                (if (null? tail)\n                    (+ sum\
    \ head)\n                    (let ([sum (+ sum head)])\n                     \
    \ (if (null? tail)\n                          (+ sum sum)\n                  \
    \        (let ([sum (+ sum sum)])\n                            (if (null? tail)\n\
    \                                (+ sum sum)\n                               \
    \ (let ([sum (+ sum sum)])\n                                  (if (null? tail)\n\
    \                                      (+ sum sum)\n                         \
    \             (let ([sum (+ sum sum)])\n                                     \
    \   (if (null? tail)\n                                            (+ sum sum)\n\
    \                                            (let ([sum (+ sum sum)])\n      \
    \                                        (if (null? tail)\n                  \
    \                                (+ sum sum)\n                               \
    \                   (let ([sum (+ sum sum)])\n                               \
    \                     (if (null? tail)\n                                     \
    \                   (+ sum sum)\n                                            \
    \            (let ([sum (+ sum sum)])\n                                      \
    \                    (if (null? tail)\n                                      \
    \                        (+ sum sum)\n                                       \
    \                       (let ([sum (+ sum sum)])\n                           \
    \                                     (if (null? tail)\n                     \
    \                                               (+ sum sum)\n                \
    \                                                    (let ([sum (+ sum sum)])\n\
    \                                                                      (if (null?\
    \ tail)\n                                                                    \
    \      (+ sum sum)\n                                                         \
    \                 (let ([sum (+ sum sum)])\n                                 \
    \                                           (if (null? tail)\n               \
    \                                                                 (+ sum sum)\n\
    \                                                                            \
    \    (let ([sum (+ sum sum)])\n                                              \
    \                                    (if (null? tail)\n                      \
    \                                                                (+ sum sum)\n\
    \                                                                            \
    \          (let ([sum (+ sum sum)])\n                                        \
    \                                                (if (null? tail)\n          \
    \                                                                            \
    \      (+ sum sum)\n                                                         \
    \                                   (let ([sum (+ sum sum)])\n               \
    \                                                                            \
    \   (if (null? tail)\n                                                       \
    \                                           (+ sum sum)\n                    \
    \                                                                            \
    \  (let ([sum (+ sum sum)])\n                                                \
    \                                                    (if (null? tail)\n      \
    \                                                                            \
    \                      (+ sum sum)\n                                         \
    \                                                               (let ([sum (+\
    \ sum sum)])\n                                                               \
    \                                           (if (null? tail)\n               \
    \                                                                            \
    \                   (+ sum sum)\n                                            \
    \                                                                  (let ([sum\
    \ (+ sum sum)])\n                                                            \
    \                                                    (if (null? tail)\n      \
    \                                                                            \
    \                                  (+ sum ", "  (if (null? nums)\n      0\n  \
    \    (let ([head (car nums)])\n        (let ([tail (cdr nums)])\n          (if\
    \ (null? tail)\n              (+ head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head ", "  (define (helper nums min sum)\n    (cond\n      [(empty? nums)\
    \ sum]\n      [(< min (first nums)) (helper rest min (+ sum min))]\n      [else\
    \ (helper (rest nums) (+ min (first nums)) sum)]\n      ))\n  (helper nums 0 (first\
    \ nums)))\n", "  (cond\n    [(empty? nums) 0]\n    [(cons? nums) (min (subArraySum\
    \ nums) (minSubArraySum (rest nums)))]\n    [else (minSubArraySum (rest nums))]))\n",
  "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n        (let ([sum\
    \ (minSubArraySum (cdr nums))])\n          (if (= head 0)\n              sum\n\
    \              (if (> head sum)\n                  sum\n                  (if\
    \ (= head -inf)\n                      head\n                      (if (= head\
    \ +inf)\n                          -inf\n                          (if (= head\
    \ -0)\n                              head\n                              (if (=\
    \ head +0)\n                                  -inf\n                         \
    \         (if (= head +inf)\n                                      +inf\n    \
    \                                  (if (= head +0)\n                         \
    \                 -inf\n                                          (if (= head\
    \ -0)\n                                              +inf\n                  \
    \                            (if (= head -inf)\n                             \
    \                     -inf\n                                                 \
    \ (if (= head +inf)\n                                                      +inf\n\
    \                                                      (if (= head +0)\n     \
    \                                                     -inf\n                 \
    \                                         (if (= head -0)\n                  \
    \                                            +inf\n                          \
    \                                    (if (= head -inf)\n                     \
    \                                             -inf\n                         \
    \                                         (if (= head +inf)\n                \
    \                                                      +inf\n                \
    \                                                      (if (= head +0)\n     \
    \                                                                     -inf\n \
    \                                                                         (if\
    \ (= head -0)\n                                                              \
    \                +inf\n                                                      \
    \                        (if (= head -inf)\n                                 \
    \                                                 -inf\n                     \
    \                                                             (if (= head +inf)\n\
    \                                                                            \
    \          +inf\n                                                            \
    \                          (if (= head +0)\n                                 \
    \                                                         -inf\n             \
    \                                                                            \
    \ (if (= head -0)\n                                                          \
    \                                    +inf\n                                  \
    \                                                            (if (= head -inf)\n\
    \                                                                            \
    \                      -inf\n                                                \
    \                                                  (if (= head +inf)\n       \
    \                                                                            \
    \                   +inf\n                                                   \
    \                                                   (if (= head +0)\n        \
    \                                                                            \
    \                      -inf\n                                                \
    \                                                          (if (= head -inf)\n\
    \                                                                            \
    \                                  +inf\n                                    \
    \                                                                          (if\
    \ (= head +inf)\n                                                            \
    \                                                      +inf\n                \
    \                                                                            \
    \                      (if (= head +0)\n                                     \
    \                                                                            \
    \     -inf\n                                                                 \
    \                                                     (if (= head -0)\n      \
    \                                                                            \
    \                                        +inf\n                              \
    \                                                                            \
    \                (if (= head -inf)\n                                         \
    \                                                                            \
    \         -inf\n                                                             \
    \                                                                 (if (= head\
    \ +inf)\n                                                                    \
    \                                                              +inf\n        \
    \                                                                            \
    \                                              (if (= head +0)\n             \
    \                                                                            \
    \                                             -inf\n                         \
    \                                                                            \
    \                                 (if (= head -0)\n                          \
    \                                                                            \
    \                                    +inf\n                                  \
    \                                                                            \
    \                            (if (= head -inf)\n                             \
    \                                                                            \
    \                                     -inf\n                                 \
    \                                                                            \
    \                                 (if (= head +inf)\n                        \
    \                                                                            \
    \                                              +inf\n                        \
    \                                                                            \
    \                                              (if (= head +0)\n             \
    \                                                                            \
    \                                                             ", "  (let loop\
    \ ((i 0) (sum 0))\n    (if (null? nums)\n        sum\n        (loop (+ i 1) (+\
    \ sum (car nums))\n              (cons (car nums) sum))))))\n", "  (if (null?\
    \ nums)\n      0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n\
    \            (+ head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (", "  (if (null? nums)\n      0\n      (let ([sum (car\
    \ nums)])\n        (if (null? (cdr nums))\n            sum\n            (minSubArraySum\
    \ (cdr nums))))))\n", "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n\
    \        (let ([sum (minSubArraySum (cdr nums))])\n          (if (> head sum)\n\
    \              (if (< head 0)\n                  (if (< sum 0)\n             \
    \         (if (< head sum)\n                          (if (< sum 0)\n        \
    \                      (if (< head sum)\n                                  (if\
    \ (< sum 0)\n                                      (if (< head sum)\n        \
    \                                  (if (< sum 0)\n                           \
    \                   (if (< head sum)\n                                       \
    \           (if (< sum 0)\n                                                  \
    \    (if (< head sum)\n                                                      \
    \    (if (< sum 0)\n                                                         \
    \     (if (< head sum)\n                                                     \
    \             (if (< sum 0)\n                                                \
    \                      (if (< head sum)\n                                    \
    \                                      (if (< sum 0)\n                       \
    \                                                       (if (< sum 0)\n      \
    \                                                                            (if\
    \ (< sum 0)\n                                                                \
    \                      (if (< sum 0)\n                                       \
    \                                                   (if (< sum 0)\n          \
    \                                                                            \
    \        (if (< sum 0)\n                                                     \
    \                                             (if (< sum 0)\n                \
    \                                                                            \
    \          (if (< sum 0)\n                                                   \
    \                                                       (if (< sum 0)\n      \
    \                                                                            \
    \                            (if (< sum 0)\n                                 \
    \                                                                            \
    \     (if (< sum 0)\n                                                        \
    \                                                              (if (< sum 0)\n\
    \                                                                            \
    \                                              (if (< sum 0)\n               \
    \                                                                            \
    \                                   (if (< sum 0)\n                          \
    \                                                                            \
    \                            (if (< sum 0)\n                                 \
    \                                                                            \
    \                         (if (< sum 0)\n                                    \
    \                                                                            \
    \                          (if (< sum 0)\n                                   \
    \                                                                            \
    \                               (if (< sum 0)\n                              \
    \                                                                            \
    \                                        (if (< sum 0)\n                     \
    \                                                                            \
    \                                                     (if (< sum 0)\n        \
    \                                                                            \
    \                                                                      (if (<\
    \ sum 0)\n                                                                   \
    \                                                                            \
    \               (if (< sum 0)\n                                              \
    \                                                                            \
    \                                        (if (< sum 0)\n                     \
    \                                                                            \
    \                                                                     (if (< sum\
    \ 0)\n                                                                       \
    \                                                                            \
    \                       (if (< sum 0)\n                                      \
    \                                                                            \
    \                                                            (if (< sum 0)\n \
    \                                                                            \
    \                                                                            \
    \                         (if (< sum 0)\n                                    \
    \                                                                            \
    \                                                                      (if (<\
    \ sum 0)\n                                                                   \
    \                                                                            \
    \                                           (if (< sum 0)\n                  \
    \                                                                            \
    \                                                                            \
    \                    (if (< sum 0)\n                                         \
    \                                                                            \
    \                                                                            \
    \ (if (< sum 0)\n                                                            \
    \                                                                            \
    \                                                              (if (< sum 0)\n\
    \                                                                            \
    \                                                                            \
    \                                                  (if (< sum 0)\n           \
    \                                                                            \
    \                                                                            \
    \                                           (if (< sum 0)\n                  \
    \                                                                            \
    \                                                                            \
    \                                        (if (< sum 0)\n                     \
    \                                                                            \
    \                                                                            \
    \                                         (if (< sum 0)\n                    \
    \                                                                            \
    \                                                                            \
    \                                              (if (< sum 0)\n               \
    \                                                                            \
    \                                                                            \
    \                                                       (if (< sum 0)\n      \
    \                                                                            \
    \                                                                            \
    \                                                                    (if (< sum\
    \ 0)\n                                                                       \
    \                                                                            \
    \                                                                            \
    \       (if (< sum 0)\n                                                      \
    \                                                                            \
    \                                                                            \
    \                            (", "  (if (null? nums)\n      0\n      (let ([head\
    \ (car nums)])\n        (if (null? (cdr nums))\n            (+ head (min head\
    \ (car nums)))\n            (minSubArraySum (cdr nums))))))\n", "  (if (null?\
    \ nums)\n      0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n\
    \            (+ head (min head (maxSubArraySum nums)))\n            (minSubArraySum\
    \ (cdr nums))))))\n", "  (define (helper nums min sum)\n    (cond\n      [(empty?\
    \ nums) sum]\n      [(<= (first nums) min) (helper (rest nums) min (+ sum first))]\n\
    \      [else (helper (rest nums) (+ min first) (+ sum first))]))\n  (helper nums\
    \ 0 0))\n", "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n   \
    \     (if (null? (cdr nums))\n            (+ head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (", "  (if (null? nums)\n\
    \      0\n      (let ([sum (car nums)])\n        (if (null? (cdr nums))\n    \
    \        sum\n            (minSubArraySum (cdr nums))))))\n", "  (if (null? nums)\n\
    \      0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n   \
    \         (+ (minSubArraySum (cdr nums)) head)\n            (minSubArraySum (cdr\
    \ nums))))))\n", "  (if (null? nums)\n      0\n      (let ((sum (car nums))\n\
    \            (nums (cdr nums)))\n        (if (null? nums)\n            sum\n \
    \           (let ((newSum (+ sum (car nums))))\n              (minSubArraySum\
    \ (cdr nums)))))))\n", "  (if (null? nums)\n      0\n      (let ([sum (car nums)])\n\
    \        (if (null? (cdr nums))\n            sum\n            (minSubArraySum\
    \ (cdr nums))))))\n", "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n\
    \        (if (null? (cdr nums))\n            (+ head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(cons? nums) (min (subArraySum nums) (minSubArraySum (rest nums)))]\n\
    \    [else (minSubArraySum (rest nums))]))\n", "  (let loop ((nums nums)\n   \
    \          (min (first nums))\n             (sum (second nums)))\n    (if (null?\
    \ nums)\n        min\n        (loop (rest nums)\n              (if (< sum min)\n\
    \                  sum\n                  min)\n              (+ sum min))))))\n",
  "  (let loop ((i 0) (sum 0))\n    (if (null? nums)\n        sum\n        (loop (+\
    \ i 1) (+ sum (car nums))\n               (cdr nums)))))\n", "  (if (null? nums)\n\
    \      0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n   \
    \         (+ head (min (- (minSubArraySum (cdr nums)) head) 0))\n            (+\
    \ head (minSubArraySum (cdr nums)))))))\n", "  (if (null? nums)\n      0\n   \
    \   (let ([head (car nums)])\n        (if (null? (cdr nums))\n            (+ (minSubArraySum\
    \ (cdr nums)) head)\n            (let ([tail (cdr nums)])\n              (if (null?\
    \ (cdr tail))\n                  (+ (minSubArraySum (cdr tail)) head)\n      \
    \            (let ([minTail (minSubArraySum (cdr tail))])\n                  \
    \  (if (< head minTail)\n                        (+ head minTail)\n          \
    \              (+ minTail head))))))))\n", "  (cond\n    [(empty? nums) 0]\n \
    \   [(cons? nums) (min (subArraySum nums) (min (subArraySum nums) (subArraySum\
    \ nums)))]\n    [else (min (subArraySum nums) (min (subArraySum nums) (subArraySum\
    \ nums)))]))\n", "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n\
    \        (if (null? (cdr nums))\n            (+ head (min head (min head (cdr\
    \ nums))))\n            (minSubArraySum (cdr nums))))))\n", "  (let loop ((nums\
    \ nums)\n             (min (first nums))\n             (sum (first nums)))\n \
    \   (if (null? nums)\n        min\n        (loop (rest nums)\n              (+\
    \ min (first nums))\n              (+ sum (first nums))))))\n", "  (if (null?\
    \ nums)\n      0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n\
    \            (+ head (min head (maxSubArraySum nums)))\n            (minSubArraySum\
    \ (cdr nums))))))\n", "  (if (null? nums)\n      0\n      (let ([sum (car nums)])\n\
    \        (if (null? (cdr nums))\n            sum\n            (minSubArraySum\
    \ (cdr nums))))))\n", "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n\
    \        (if (null? (cdr nums))\n            (+ head (min (subArraySum nums) head))\n\
    \            (min (subArraySum nums) head)))))\n", "  (if (null? nums)\n     \
    \ 0\n      (let ([sum (+ 0 (min 0 (car nums))))]\n            (if (null? (cdr\
    \ nums))\n                sum\n                (minSubArraySum (cdr nums)))))\n\
    )\n", "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n        (if\
    \ (null? (cdr nums))\n            (+ head (min (subArraySum nums) head))\n   \
    \         (min (subArraySum nums) head))))))\n", "  (let loop ((nums nums)\n \
    \            (min (first nums))\n             (sum (first nums)))\n    (if (null?\
    \ nums)\n        min\n        (loop (rest nums)\n              (+ min (first nums))\n\
    \              (+ sum (first nums))))))\n", "  (let loop ((nums '())\n       \
    \      (min '()))\n    (if (null? nums)\n        min\n        (let ((curr (car\
    \ nums))\n              (sum (+ (car nums) (min (cdr nums)))))\n          (if\
    \ (null? (cdr nums))\n              (if (< sum min)\n                  (set! min\
    \ sum)\n                  (loop (cdr nums) sum))\n              (loop (cdr nums)\
    \ sum)))))\n  min)\n", "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n\
    \        (if (null? (cdr nums))\n            (+ head (min head (subArraySum nums\
    \ head 0)))\n            (min head (minSubArraySum (cdr nums)))))))\n", "  (if\
    \ (null? nums)\n      0\n      (let ([head (car nums)])\n        (if (null? (cdr\
    \ nums))\n            (+ (head head) (minSubArraySum (cdr nums)))\n          \
    \  (minSubArraySum (cdr nums))))))\n", "  (if (null? nums)\n      0\n      (let\
    \ ((sum (car nums))\n            (tail (cdr nums)))\n        (if (null? tail)\n\
    \            sum\n            (min sum (minSubArraySum (cdr tail)))))))\n", " \
    \ (if (null? nums)\n      (error \"minSubArraySum: empty list\")\n      (let ([head\
    \ (car nums)])\n        (if (null? (cdr nums))\n            (min head (car nums))\n\
    \            (minSubArraySum (cdr nums))))))\n", "  (let loop ((nums nums)\n \
    \            (min (first nums))\n             (sum (first nums)))\n    (if (empty?\
    \ nums)\n        min\n        (loop (rest nums)\n              (if (< min sum)\n\
    \                  min\n                  sum)))))\n", "  (if (null? nums)\n \
    \     0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n    \
    \        (+ head (min (subArraySum nums) head))\n            (min (subArraySum\
    \ nums) head))))))\n", "  (if (null? nums)\n      0\n      (let ([sum (car nums)])\n\
    \        (if (null? (cdr nums))\n            sum\n            (minSubArraySum\
    \ (cdr nums))))))\n", "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n\
    \        (let ([tail (cdr nums)])\n          (if (null? tail)\n              (+\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head ", "  (if (null? nums)\n\
    \      0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n   \
    \         (+ head (min head (car nums)))\n            (minSubArraySum (cdr nums))))))\n",
  "  (define (helper nums min sum)\n    (cond\n      [(empty? nums) sum]\n      [(<\
    \ (first nums) min) (helper (rest nums) min (+ min (first nums)))]\n      [else\
    \ (helper (rest nums) min (+ sum (first nums)))]))\n  (helper nums 0 0))\n", " \
    \ (if (null? nums)\n      0\n      (let ([head (car nums)])\n        (let ([tail\
    \ (cdr nums)])\n          (if (null? tail)\n              (+ head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head ", "  (if (null? nums)\n      0\n      (let\
    \ ([head (car nums)])\n        (if (null? (cdr nums))\n            (+ (minSubArraySum\
    \ (cdr nums)) head)\n            (let ([tail (cdr nums)])\n              (if (null?\
    \ tail)\n                  (+ head tail)\n                  (let ([min (minSubArraySum\
    \ (cdr tail))])\n                    (if (< min head)\n                      \
    \  (+ head min)\n                        (+ min tail))))))))\n", "  (if (null?\
    \ nums)\n      0\n      (let ([sum (+ 0 (min 0 (car nums))) \n            rest\
    \ (cdr nums)\n            minRest (minSubArraySum rest)])\n        (if (< sum\
    \ minRest)\n            sum\n            minRest))))\n", "  (if (empty? nums)\n\
    \      0\n      (let ([head (first nums)\n            tail (rest nums)\n     \
    \       sum (+ head (min tail (subArraySum tail)))])\n        (if (< sum 0)\n\
    \            sum\n            (minSubArraySum (rest nums))))))\n", "  (let loop\
    \ ((nums nums)\n             (min (first nums))\n             (sum (+ min (first\
    \ nums))))\n    (if (null? nums)\n        min\n        (loop (rest nums)\n   \
    \           (+ min (first nums))\n              sum))))\n", "  (let loop ((sum\
    \ (car nums)) (nums (cdr nums)))\n    (cond ((null? nums) sum)\n          ((null?\
    \ (cdr nums)) (loop (+ sum nums) (cdr nums)))\n          (else (loop (+ sum nums)\
    \ (cdr nums))))))\n", "  (cond\n    [(empty? nums) 0]\n    [(cons? nums) (min\
    \ (subArraySum nums) (subArraySum nums (+ 1 )))]\n    [else (minSubArraySum (rest\
    \ nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(cons? nums) (min (subArraySum\
    \ nums) (min (subArraySum nums) (subArraySum nums)))]\n    [else (minSubArraySum\
    \ (rest nums))]))\n", "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n\
    \        (let ([sum (minSubArraySum (cdr nums))])\n          (if (> head sum)\n\
    \              (if (= head 0)\n                  sum\n                  (+ head\
    \ sum))\n              sum))))))\n", "  (let loop ((nums nums)\n             (min\
    \ (first nums))\n             (sum (+ min (first nums))))\n    (if (null? nums)\n\
    \        min\n        (loop (rest nums)\n              (+ sum (first nums))\n\
    \              sum))))\n", "  (let loop ((nums '())\n             (min '()))\n\
    \    (if (null? nums)\n        min\n        (loop (rest nums)\n              (+\
    \ min (first nums))))))\n", "  (if (null? nums)\n      0\n      (let ([head (car\
    \ nums)])\n        (if (null? (cdr nums))\n            (+ (head head) (minSubArraySum\
    \ (cdr nums)))\n            (minSubArraySum (cdr nums))))))\n", "  (if (null?\
    \ nums)\n      0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n\
    \            (min head (min (subArraySum nums) head))\n            (min head (min\
    \ (minSubArraySum (cdr nums)) head))))))\n", "  (let loop ((i 0) (sum 0))\n  \
    \  (if (null? nums)\n        sum\n        (loop (+ i 1) (+ sum (car nums))\n \
    \              (cdr nums)))))\n", "  (let loop ((i 0)\n             (min (first\
    \ nums))\n             (sum (first nums)))\n    (if (null? nums)\n        min\n\
    \        (loop (+ i 1)\n              (+ min (first nums))\n              (+ sum\
    \ (first nums)))))))\n", "  (if (null? nums)\n      0\n      (let ([sum (+ 0 (min\
    \ 0 (car nums))))]\n            (if (null? (cdr nums))\n                sum\n\
    \                (minSubArraySum (cdr nums)))))\n)\n", "  (if (null? nums)\n \
    \     0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n    \
    \        (+ head (car nums))\n            (minSubArraySum (cdr nums))))))\n",
  "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n        (if (null?\
    \ (cdr nums))\n            (+ head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (", "  (if (null? nums)\n      0\n      (let\
    \ ([head (car nums)])\n        (if (null? (cdr nums))\n            (+ head (min\
    \ head (car nums)))\n            (minSubArraySum (cdr nums))))))\n", "  (if (null?\
    \ nums)\n      0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n\
    \            (+ head (min (subArraySum nums) head))\n            (min (subArraySum\
    \ nums) head)))))\n", "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n\
    \        (if (null? (cdr nums))\n            (+ head (min (subArraySum nums) head))\n\
    \            (min (subArraySum nums) head))))))\n", "  (if (null? nums)\n    \
    \  0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n       \
    \     (+ (head head) (minSubArraySum (cdr nums)))\n            (minSubArraySum\
    \ (cdr nums))))))\n", "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n\
    \        (if (null? (cdr nums))\n            (+ (head head) (minSubArraySum (cdr\
    \ nums)))\n            (minSubArraySum (cdr nums))))))\n", "  (if (null? nums)\n\
    \      0\n      (let ([head (car nums)\n            tail (cdr nums)])\n      \
    \  (if (null? tail)\n            (+ head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (", "  (if (null? nums)\n      0\n      (let ([head (car\
    \ nums)])\n        (let ([tail (cdr nums)])\n          (if (null? tail)\n    \
    \          (+ head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head ", " \
    \ (define (helper nums sum)\n    (cond\n      [(empty? nums) sum]\n      [(<=\
    \ (first nums) sum) (helper (rest nums) (+ sum (first nums)))]\n      [else (helper\
    \ (rest nums) sum)]\n    ))\n  (helper nums 0))\n", "  (let loop ((nums nums)\n\
    \             (min (first nums))\n             (sum (+ min (first nums))))\n \
    \   (if (null? nums)\n        min\n        (loop (rest nums)\n              (+\
    \ min (first nums))\n              sum))))\n", "  (if (null? nums)\n      0\n\
    \      (let ([head (car nums)])\n        (let ([tail (cdr nums)])\n          (if\
    \ (null? tail)\n              (+ head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head ", "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n\
    \        (if (null? (cdr nums))\n            (+ head (min head (subArraySum nums\
    \ head 0)))\n            (min head (subArraySum nums head 0))))))\n", "  (if (null?\
    \ nums)\n      0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n\
    \            (+ head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (", "  (if (null? nums)\n      0\n      (let ([head (car\
    \ nums)])\n        (if (null? (cdr nums))\n            (+ head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (", "  (let\
    \ loop ((nums nums)\n             (min (first nums))\n             (sum (first\
    \ nums)))\n    (if (null? nums)\n        min\n        (loop (rest nums)\n    \
    \          (if (< min sum)\n                  min\n                  sum)\n  \
    \            (+ sum min))))))\n", "  (if (null? nums)\n      0\n      (let ([head\
    \ (car nums)])\n        (let ([tail (cdr nums)])\n          (if (null? tail)\n\
    \              (+ head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head ",
  "  (cond\n    [(empty? nums) 0]\n    [(cons? nums) (min (subArraySum nums) (min\
    \ (subArraySum nums) (subArraySum nums)))]\n    [else (minSubArraySum (rest nums))]))\n",
  "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n        (if (null?\
    \ (cdr nums))\n            (+ head (min head (maxSubArraySum (cdr nums))))\n \
    \           (min head (maxSubArraySum (cdr nums)))))))\n", "  (if (null? nums)\n\
    \      0\n      (let ([head (car nums)])\n        (let ([tail (cdr nums)])\n \
    \         (if (null? tail)\n              (+ head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head ", "  (let loop ((i 0) (sum 0))\n    (if (null? nums)\n\
    \        sum\n        (loop (+ i 1) (+ sum (car nums))\n               (cdr nums)))))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(cons? nums) (min (subArraySum nums) (minSubArraySum\
    \ (rest nums)))]\n    [else (min (subArraySum nums) (minSubArraySum (rest nums)))]))\n",
  "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n        (let ([tail\
    \ (cdr nums)])\n          (if (null? tail)\n              (+ head (- head (min\
    \ head tail)))\n              (+ head (min (min tail (- head tail)) (- head tail))))))))\n",
  "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n        (let ([tail\
    \ (cdr nums)])\n          (if (null? tail)\n              (+ head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head ", "  (cond\n    [(empty? nums) 0]\n    [(cons?\
    \ nums) (min (subArraySum nums) (minSubArraySum (rest nums)))]\n    [else (min\
    \ (subArraySum nums) (minSubArraySum (rest nums)))]))\n", "  (define (helper nums\
    \ min max)\n    (if (null? nums)\n        min\n        (helper (cdr nums) (+ min\
    \ (car nums)) (+ max max))))\n  (helper nums 0 0))\n", "  (if (null? nums)\n \
    \     0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n    \
    \        (+ (head head) (minSubArraySum (cdr nums)))\n            (minSubArraySum\
    \ (cdr nums))))))\n", "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n\
    \        (let ([sum (minSubArraySum (cdr nums))])\n          (if (> head sum)\n\
    \              (if (> head 0)\n                  (+ head sum)\n              \
    \    sum)\n              sum))))))\n", "  (if (null? nums)\n      0\n      (let\
    \ ([head (car nums)])\n        (let ([sum (minSubArraySum (cdr nums))])\n    \
    \      (if (> head sum)\n              (if (= head 0)\n                  sum\n\
    \                  (+ head sum))\n              sum))))))\n", "  (if (null? nums)\n\
    \      0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n   \
    \         (+ head (min (subArraySum nums) head))\n            (min (subArraySum\
    \ nums) head)))))\n", "  (cond\n    [(empty? nums) 0]\n    [else (min (subArraySum\
    \ nums 0 nums) (minSubArraySum (rest nums)))]))\n", "  (if (null? nums)\n    \
    \  0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n       \
    \     (+ head (min head (maxSubArraySum (cdr nums))))\n            (min head (maxSubArraySum\
    \ (cdr nums)))))))\n", "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n\
    \        (if (null? (cdr nums))\n            (+ (head head) (minSubArraySum (cdr\
    \ nums)))\n            (minSubArraySum (cdr nums))))))\n", "  (define (helper\
    \ nums min sum)\n    (cond\n      [(empty? nums) sum]\n      [(< (first nums)\
    \ min) (helper (rest nums) min (+ sum (first nums)))]\n      [else (helper (rest\
    \ nums) (+ min (first nums)) (+ sum (first nums)))]))\n  (helper nums 0 (+ 0 (first\
    \ nums))))\n", "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n\
    \        (if (null? (cdr nums))\n            (+ head (min head (subArraySum nums\
    \ 0 head)))\n            (min head (minSubArraySum (subArraySum nums 0 head)))))))\n",
  "  (let loop ((nums nums)\n             (min (first nums))\n             (sum (first\
    \ nums)))\n    (if (null? nums)\n        min\n        (loop (rest nums)\n    \
    \          (+ min (first nums))\n              (+ sum (first nums))))))\n", " \
    \ (if (null? nums)\n      0\n      (let ([head (car nums)])\n        (if (null?\
    \ (cdr nums))\n            (min head (min (subArraySum nums) head))\n        \
    \    (min head (min (minSubArraySum (cdr nums)) head))))))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(cons? nums) (min (subArraySum nums))]\n    [else (minSubArraySum\
    \ (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(cons? nums) (min\
    \ (subArraySum nums) (min (subArraySum nums) (subArraySum nums)))]\n    [else\
    \ (min (subArraySum nums) (min (subArraySum nums) (subArraySum nums)))]))\n",
  "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n        (if (null?\
    \ (cdr nums))\n            (+ head (min head (min head (cdr nums))))\n       \
    \     (minSubArraySum (cdr nums))))))\n", "  (let loop ((nums '()))\n    (if (empty?\
    \ nums)\n        (if (< (length nums) 1)\n            (first nums)\n         \
    \   (error \"No non-empty sub-array\"))\n        (loop (rest nums)))))\n", " \
    \ (if (null? nums)\n      0\n      (let ([head (car nums)])\n        (if (null?\
    \ (cdr nums))\n            (+ head (min (subArraySum nums) head))\n          \
    \  (min (subArraySum nums) head))))))\n", "  (if (null? nums)\n      0\n     \
    \ (let ([head (car nums)])\n        (if (null? (cdr nums))\n            (+ head\
    \ (min head (car nums)))\n            (minSubArraySum (cdr nums))))))\n", "  (if\
    \ (null? nums)\n      0\n      (let ([head (car nums)])\n        (let ([tail (cdr\
    \ nums)])\n          (if (null? tail)\n              (+ head (- head (min head\
    \ tail)))\n              (+ head (- head (minSubArraySum (cdr tail))))))))))\n",
  "  (if (null? nums)\n      0\n      (let ([sum (car nums)])\n        (if (null?\
    \ (cdr nums))\n            sum\n            (minSubArraySum (cdr nums))))))\n",
  "  (if (null? nums)\n      0\n      (let ([head (car nums)\n            tail (cdr\
    \ nums)\n            sum (+ head (min tail (subArraySum tail)))])\n        (if\
    \ (null? tail)\n            sum\n            (minSubArraySum (cdr nums))))))\n",
  "  (let loop ((i 0) (sum 0) (list nums))\n    (cond ((null? list) sum)\n       \
    \   ((null? (cdr list)) sum)\n          (else (loop (+ i 1) (+ sum (car list))\
    \ (cdr list))))))\n", "  (let loop ((nums '())\n             (sum '()))\n    (if\
    \ (null? nums)\n        sum\n        (loop (rest nums)\n              (+ sum (first\
    \ nums)))))))\n", "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n\
    \        (if (null? (cdr nums))\n            (+ head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(cons? nums) (min (subArraySum nums) (min (subArraySum nums)\
    \ (subArraySum nums)))]\n    [else (min (subArraySum nums) (min (subArraySum nums)\
    \ (subArraySum nums)))]))\n", "  (if (null? nums)\n      0\n      (let ([head\
    \ (car nums)])\n        (if (null? (cdr nums))\n            (+ (head head) (minSubArraySum\
    \ (cdr nums)))\n            (minSubArraySum (cdr nums))))))\n", "  (let loop ((nums\
    \ '()))\n    (if (empty? nums)\n        (if (< (length nums) 1)\n            (first\
    \ nums)\n            (error \"Empty list\"))\n        (loop (rest nums)))))\n",
  "  (if (null? nums)\n      0\n      (let ([head (car nums)\n            tail (cdr\
    \ nums)\n            sum (+ head (min tail (minSubArraySum tail))))]\n       \
    \ (if (null? tail)\n            sum\n            (min sum (minSubArraySum tail)))))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(cons? nums) (min (subArraySum nums) (subArraySum\
    \ nums (+ 1 1)))]\n    [else (minSubArraySum (rest nums))]))\n", "  (if (null?\
    \ nums)\n      0\n      (let ([sum (car nums)])\n        (if (null? (cdr nums))\n\
    \            sum\n            (minSubArraySum (cdr nums))))))\n", "  (if (null?\
    \ nums)\n      0\n      (let ([head (car nums)])\n        (let ([tail (cdr nums)])\n\
    \          (if (null? tail)\n              (+ head head)\n              (if (<\
    \ (car tail) head)\n                  (+ head (min (car tail) head))\n       \
    \           (+ head (min (car tail) head))))))))\n", "  (if (null? nums)\n   \
    \   (error \"minSubArraySum: empty list\")\n      (let ([head (car nums)])\n \
    \       (if (null? (cdr nums))\n            (+ head (car nums))\n            (minSubArraySum\
    \ (cdr nums))))))\n", "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n\
    \        (let ([tail (cdr nums)])\n          (if (null? tail)\n              (+\
    \ head (- head (min head tail)))\n              (let ([min (min head tail)])\n\
    \                (+ head (- head (minSubArraySum tail))))))))))\n", "  (if (null?\
    \ nums)\n      0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n\
    \            (+ head (min (subArraySum nums) head))\n            (min (subArraySum\
    \ nums) head)))))\n", "  (if (null? nums)\n      0\n      (let ([sum (car nums)])\n\
    \        (if (null? (cdr nums))\n            sum\n            (minSubArraySum\
    \ (cdr nums))))))\n", "  (let loop ((nums nums)\n             (min (first nums))\n\
    \             (sum (+ min (first nums))))\n    (if (null? nums)\n        min\n\
    \        (loop (rest nums)\n              (+ min (first nums))\n             \
    \ sum))))\n", "  (define (helper nums min sum)\n    (cond\n      [(null? nums)\
    \ sum]\n      [(< (car nums) min) (helper (cdr nums) min (+ sum (car nums)))]\n\
    \      [else (helper (cdr nums) min (+ sum (car nums)))]))\n  (helper nums 0 0))\n",
  "  (let loop ((nums nums)\n             (min (first nums))\n             (sum (first\
    \ nums)))\n    (if (null? nums)\n        min\n        (loop (rest nums)\n    \
    \          (+ min (first nums))\n              (+ sum (first nums))))))\n", " \
    \ (if (null? nums)\n      0\n      (let ([head (car nums)])\n        (let ([tail\
    \ (cdr nums)])\n          (if (null? tail)\n              (+ head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head ", "  (define (helper nums min sum)\n   \
    \ (cond [(empty? nums) sum]\n          [(< min (first nums)) (helper nums (first\
    \ nums) (+ sum (first nums)))]\n          [else (helper (rest nums) (+ min (first\
    \ nums)) sum)]\n          ))\n  (helper nums 0 (first nums)))\n", "  (if (null?\
    \ nums)\n      0\n      (let ((sum (car nums))\n            (tail (cdr nums)))\n\
    \        (if (null? tail)\n            (+ sum (minSubArraySum (cdr nums)))\n \
    \           (minSubArraySum (cons (car tail) nums))))))\n", "  (if (null? nums)\n\
    \      0\n      (let ([head (car nums)\n            tail (cdr nums)\n        \
    \    sum (+ head (min tail (subArraySum tail)))])\n        (if (null? tail)\n\
    \            sum\n            (minSubArraySum (cdr nums))))))\n", "  (if (null?\
    \ nums)\n      0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n\
    \            (+ (head head) (minSubArraySum (cdr nums)))\n            (minSubArraySum\
    \ (cdr nums))))))\n", "  (define (helper nums min sum)\n    (cond\n      [(empty?\
    \ nums) sum]\n      [(< min (first nums)) (helper (rest nums) (first nums) sum)]\n\
    \      [else (helper (rest nums) (first nums) (+ sum (first nums)))]))\n  (helper\
    \ nums 0 (first nums)))\n", "  (if (null? nums)\n      0\n      (let ([head (car\
    \ nums)])\n        (if (null? (cdr nums))\n            (+ head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (", "  (if\
    \ (empty? nums)\n      0\n      (let ([head (car nums)])\n        (let ([sum (minSubArraySum\
    \ (cdr nums))])\n          (if (> head sum)\n              (if (> head 0)\n  \
    \                (+ head sum)\n                  sum)\n              sum))))))\n",
  "  (if (null? nums)\n      0\n      (let ([head (car nums)\n            tail (cdr\
    \ nums)\n            sum (+ head (min tail (subArraySum tail)))])\n        (if\
    \ (null? tail)\n            sum\n            (minSubArraySum (cdr nums))))))\n",
  "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n        (if (null?\
    \ (cdr nums))\n            (+ head (min (subArraySum nums) head))\n          \
    \  (min (subArraySum nums) head))))))\n", "  (if (null? nums)\n      0\n     \
    \ (let ([head (car nums)])\n        (if (null? (cdr nums))\n            (+ head\
    \ (min (- (minSubArraySum (cdr nums)) head) 0))\n            (+ head (min (- (minSubArraySum\
    \ (cdr nums)) head) 0))\n            (+ head (minSubArraySum (cdr nums))))))))\n",
  "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n        (if (null?\
    \ (cdr nums))\n            (+ head (min (subArraySum nums) head))\n          \
    \  (min (subArraySum nums) head)))))\n", "  (cond\n    [(empty? nums) 0]\n   \
    \ [(cons? nums) (min (subArraySum nums) (subArraySum nums (+ 1 1)))]\n    [else\
    \ (minSubArraySum (rest nums))]))\n", "  (if (null? nums)\n      0\n      (let\
    \ ([head (car nums)])\n        (if (null? (cdr nums))\n            (+ (head head)\
    \ (minSubArraySum (cdr nums)))\n            (minSubArraySum (cdr nums))))))\n",
  "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n        (if (null?\
    \ (cdr nums))\n            (+ head (min (subArraySum nums) head))\n          \
    \  (min (subArraySum nums) head)))))\n", "  (if (null? nums)\n      0\n      (let\
    \ ((sum (car nums))\n            (tail (cdr nums)))\n        (if (null? tail)\n\
    \            sum\n            (minSubArraySum (cons sum (minSubArraySum tail)))))))\n",
  "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n        (let ([tail\
    \ (cdr nums)])\n          (if (null? tail)\n              (+ head head)\n    \
    \          (let ([sum (minSubArraySum (cdr tail))])\n                (+ head sum))))))))\n",
  "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n        (if (null?\
    \ (cdr nums))\n            (+ head head)\n            (minSubArraySum (cdr nums))))))\n",
  "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n        (let ([sum\
    \ (min head (subArraySum nums head 1)))]\n          (if (null? sum)\n        \
    \      (min head (subArraySum nums head 1))\n              sum))))))\n", "  (if\
    \ (null? nums)\n      0\n      (let ([head (car nums)])\n        (if (null? (cdr\
    \ nums))\n            (+ (head head) (minSubArraySum (cdr nums)))\n          \
    \  (minSubArraySum (cdr nums))))))\n", "  (if (empty? nums)\n      0\n      (let\
    \ ([head (car nums)])\n        (minSubArraySum (cdr nums))\n        (+ (head head)\
    \ minSubArraySum (cdr nums)))))\n", "  (cond\n    [(empty? nums) 0]\n    [else\
    \ (min (subArraySum (rest nums) nums) (minSubArraySum (rest nums)))]))\n", " \
    \ (if (null? nums)\n      0\n      (let ([head (car nums)])\n        (let ([sum\
    \ (+ head (minSubArraySum (cdr nums)))])\n          (if (< sum head)\n       \
    \       sum\n              head))))))\n", "  (let loop ((nums nums)\n        \
    \     (min (first nums))\n             (sum (first nums)))\n    (if (empty? nums)\n\
    \        min\n        (loop (rest nums)\n              (if (< min sum)\n     \
    \             min\n                  sum)\n              (+ sum min))))))\n",
  "  (let loop ((i 0) (min (first nums)) (max 0))\n    (if (< i (length nums))\n \
    \       (loop (+ i 1) (+ min (first nums)) (max max (first nums)))\n        min)))\n",
  "  (define (helper nums min max)\n    (cond\n      [(empty? nums) min]\n      [(<\
    \ min (first nums)) (helper (rest nums) min (first nums))]\n      [(> max (first\
    \ nums)) (helper (rest nums) (first nums) max)]\n      [else (helper (rest nums)\
    \ (first nums) (+ min (first nums)))]))\n  (helper nums 0 (length nums) - 1))\n",
  "  (let loop ((nums nums)\n             (min (first nums))\n             (sum (first\
    \ nums)))\n    (if (null? nums)\n        min\n        (loop (rest nums)\n    \
    \          (+ min (first nums))\n              (+ sum (first nums))))))\n", " \
    \ (if (null? nums)\n      0\n      (let ([head (car nums)])\n        (if (null?\
    \ (cdr nums))\n            (+ head (car nums))\n            (minSubArraySum (cdr\
    \ nums))))))\n", "  (if (null? nums)\n      0\n      (let ([sum (car nums)])\n\
    \        (if (null? (cdr nums))\n            sum\n            (minSubArraySum\
    \ (cdr nums))))))\n", "  (let loop ((i 0) (sum 0))\n    (if (null? nums)\n   \
    \     sum\n        (loop (+ i 1) (+ sum (car nums))\n               (cdr nums)))))\n",
  "  (if (null? nums)\n      0\n      (let ([head (car nums)])\n        (let ([tail\
    \ (cdr nums)])\n          (if (null? tail)\n              (+ head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head ", "  (define (helper nums min sum)\n   \
    \ (cond [(empty? nums) sum]\n          [(< sum (+ min (first nums))) (helper (rest\
    \ nums) min (+ sum (first nums)))]\n          [else (helper (rest nums) min sum)]))\n\
    \  (helper nums 0 (first nums)))\n", "  (cond\n    [(empty? nums) 0]\n    [(null?\
    \ (rest nums)) (rest nums)]\n    [else (min (min (subArraySum nums 0 (length nums))\n\
    \                    (subArraySum nums (+ 0 (length nums)) (rest nums)))\n   \
    \         (min (subArraySum nums 0 (length nums))\n                    (subArraySum\
    \ nums (+ 0 (length nums)) (rest nums)))\n            (min (subArraySum nums 0\
    \ (length nums))\n                    (subArraySum nums (+ 0 (length nums)) (rest\
    \ nums)))\n            (min (subArraySum nums 0 (length nums))\n             \
    \       (subArraySum nums (+ 0 (length nums)) (rest nums)))\n            (min\
    \ (subArraySum nums 0 (length nums))\n                    (subArraySum nums (+\
    \ 0 (length nums)) (rest nums)))\n            (min (subArraySum nums 0 (length\
    \ nums))\n                    (subArraySum nums (+ 0 (length nums)) (rest nums)))\n\
    \            (min (subArraySum nums 0 (length nums))\n                    (subArraySum\
    \ nums (+ 0 (length nums)) (rest nums)))\n            (min (subArraySum nums 0\
    \ (length nums))\n                    (subArraySum nums (+ 0 (length nums)) (rest\
    \ nums)))\n            (min (subArraySum nums 0 (length nums))\n             \
    \       (subArraySum nums (+ 0 (length nums)) (rest nums)))\n            (min\
    \ (subArraySum nums 0 (length nums))\n                    (subArraySum nums (+\
    \ 0 (length nums)) (rest nums)))\n            (min (subArraySum nums 0 (length\
    \ nums))\n                    (subArraySum nums (+ 0 (length nums)) (rest nums)))\n\
    \            (min (subArraySum nums 0 (length nums))\n                    (subArraySum\
    \ nums (+ 0 (length nums)) (rest nums)))\n            (min (subArraySum nums 0\
    \ (length nums))\n                    (subArraySum nums (+ 0 (length nums)) (rest\
    \ nums)))\n            (min (subArraySum nums 0 (length nums))\n             \
    \       (subArraySum nums (+ 0 (length nums)) (rest nums)))\n            (min\
    \ (subArraySum nums 0 (length nums))\n                    (subArraySum nums (+\
    \ 0 (length nums)) (rest nums)))\n            (min (sub", "  (if (null? nums)\n\
    \      0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n   \
    \         (+ (minSubArraySum (cdr nums)) head)\n            (minSubArraySum (cdr\
    \ nums))))))\n", "  (let loop ((nums nums)\n             (min (first nums))\n\
    \             (sum (first nums)))\n    (if (null? nums)\n        min\n       \
    \ (loop (rest nums)\n              (if (< sum min)\n                  sum\n  \
    \                min)\n              (+ sum min))))))\n", "  (if (null? nums)\n\
    \      0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n   \
    \         (+ head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (min head (min head (min head (min head (min head (min head\
    \ (min head (min head (", "  (if (null? nums)\n      0\n      (let ([head (car\
    \ nums)])\n        (if (null? (cdr nums))\n            (+ head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (min head (min\
    \ head (min head (min head (min head (min head (min head (min head (", "  (if\
    \ (null? nums)\n      0\n      (let ([head (car nums)])\n        (let ([sum (minSubArraySum\
    \ (cdr nums))])\n          (if (= head 0)\n              (+ sum head)\n      \
    \        (if (< head sum)\n                  (+ sum head)\n                  sum))))))\n",
  "  (let loop ((i 0)\n             (min (first nums))\n             (sum (first nums)))\n\
    \    (if (null? nums)\n        min\n        (loop (+ i 1)\n              (min\
    \ (first nums))\n              (+ sum (first nums)))))))\n", "  (if (null? nums)\n\
    \      0\n      (let ([head (car nums)])\n        (if (null? (cdr nums))\n   \
    \         (+ head (min (subArraySum nums) head))\n            (min (subArraySum\
    \ nums) head))))))\n", "  (cond\n    [(empty? nums) 0]\n    [(cons? nums) (min\
    \ (subArraySum nums) (minSubArraySum (rest nums)))]\n    [else (min (subArraySum\
    \ nums) (minSubArraySum (rest nums)))]))\n", "  (let loop ((nums nums)\n     \
    \        (min (first nums))\n             (sum (first nums)))\n    (if (empty?\
    \ nums)\n        min\n        (loop (rest nums)\n              (+ min (first nums))\n\
    \              (+ sum (first nums))))))\n", "  (define (helper nums min sum)\n\
    \    (cond\n      [(empty? nums) sum]\n      [(>= (first nums) min) (helper (rest\
    \ nums) min (+ sum (first nums)))]\n      [else (helper (rest nums) (+ min (first\
    \ nums)) (+ sum (first nums)))]))\n  (helper nums 0 0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
