name: HumanEval_40_triples_sum_to_zero
language: rkt
prompt: "#lang racket\n\n;; triples_sum_to_zero takes a list of integers as an input.\n\
  ;; it returns #t if there are three distinct elements in the list that\n;; sum to\
  \ zero, and #f otherwise.\n;; >>> (triples_sum_to_zero (list 1 3 5 0))\n;; #f\n\
  ;; >>> (triples_sum_to_zero (list 1 3 -2 1))\n;; #t\n;; >>> (triples_sum_to_zero\
  \ (list 1 2 3 7))\n;; #f\n;; >>> (triples_sum_to_zero (list 2 4 -5 3 9 7))\n;; #t\n\
  ;; >>> (triples_sum_to_zero (list 1))\n;; #f\n(define (triples_sum_to_zero l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triples_sum_to_zero))\n\
  \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
  \ (list 1 3 5 -1)) #f)\n    (check-equal? (candidate (list 1 3 -2 1)) #t)\n    (check-equal?\
  \ (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate (list 1 2 5 7)) #f)\n\
  \    (check-equal? (candidate (list 2 4 -5 3 9 7)) #t)\n    (check-equal? (candidate\
  \ (list 1)) #f)\n    (check-equal? (candidate (list 1 3 5 -100)) #f)\n    (check-equal?\
  \ (candidate (list 100 3 5 -100)) #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? l) #f]\n    [(equal? (first l) 0) #t]\n    [else\
    \ (triples_sum_to_zero (rest l))]))\n", "  (let loop ((l l) (acc 0))\n    (cond\n\
    \      [(empty? l) #f]\n      [(equal? (first l) 0) (equal? (second l) 0)\n  \
    \     (equal? (third l) 0)\n       (loop (rest l) (+ acc 1))]\n      [else (loop\
    \ (rest l) (+ acc 1))]\n      )))\n", "  (cond ((null? l) #f)\n        ((= (length\
    \ l) 3) #t)\n        (else (= (apply + (map - l (rest l))) 0)\n              \
    \ (triples_sum_to_zero (rest l)))))\n", "  (let loop ((l l) (acc #t) (seen #f\
    \ (cons 0 seen)))\n    (cond ((null? l) acc)\n          ((eqv? (car l) (cadr l))\
    \ (loop (cdr l) (not acc) (cons (car l) seen)))\n          ((eqv? (car l) (caddr\
    \ l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n          ((eqv? (car l)\
    \ (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n          ((eqv?\
    \ (car l) (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n        \
    \  ((eqv? (car l) (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car l) (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car l) (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car l) (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car l) (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car l) (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car l) (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car l) (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car l) (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car l) (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (", "  (cond [(null? l) #f]\n        [(equal? (first l) 0) #t]\n\
    \        [(equal? (first l) (- (first l)))\n         (triples_sum_to_zero (rest\
    \ l))]\n        [else (triples_sum_to_zero (rest l))]))\n", "  (let ((x (car l))\n\
    \        (c (car l))\n        (y (if (= x 0) c 0))\n        (z (if (= y 0) c 0))\n\
    \        (w (if (= z 0) c 0)))\n    (cond ((= x 0) (= y 0) (= z 0) (= w 0))\n\
    \          ((= x 0) (= y 0) (= z 0) (= w 1))\n          ((= x 0) (= y 0) (= z\
    \ 1) (= w 0))\n          ((= x 0) (= y 0) (= z 1) (= w 1))\n          ((= x 0)\
    \ (= y 0) (= z 0) (= w 0))\n          ((= x 0) (= y 0) (= z 0) (= w 1))\n    \
    \      ((= x 0) (= y 0) (= z 1) (= w 0))\n          ((= x 0) (= y 0) (= z 1) (=\
    \ w 1))\n          ((= x 0) (= y 1) (= z 0) (= w 0))\n          ((= x 0) (= y\
    \ 1) (= z 0) (= w 1))\n          ((= x 0) (= y 1) (= z 1) (= w 0))\n         \
    \ ((= x 0) (= y 1) (= z 1) (= w 1))\n          ((= x 0) (= y 1) (= z 0) (= w 0))\n\
    \          ((= x 0) (= y 1) (= z 0) (= w 1))\n          ((= x 0) (= y 1) (= z\
    \ 1) (= w 0))\n          ((= x 0) (= y 1) (= z 1) (= w 1))\n          ((= x 1)\
    \ (= y 0) (= z 0) (= w 0))\n          ((= x 1) (= y 0) (= z 0) (= w 1))\n    \
    \      ((= x 1) (= y 0) (= z 1) (= w 0))\n          ((= x 1) (= y 0) (= z 1) (=\
    \ w 1))\n          ((= x 1) (= y 0) (= z 0) (= w 0))\n          ((= x 1) (= y\
    \ 0) (= z 0) (= w 1))\n          ((= x 1) (= y 0) (= z 1) (= w 0))\n         \
    \ ((= x 1) (= y 0) (= z 1) (= w 1))\n          ((= x 1) (= y 0) (= z 0) (= w 0))\n\
    \          ((= x 1) (= y 0) (= z ", "  (let ((x (car l))\n        (y (second l))\n\
    \        (z (third l)))\n    (cond\n      [(= x y) #t]\n      [(= x z) #f]\n \
    \     [(= y z) #f]\n      [(= x z) #f]\n      [(= y z) #f]\n      [(= x y) #t]\n\
    \      [(= x z) #f]\n      [(= y z) #f]\n      [(= x z) #f]\n      [(= y z) #f]\n\
    \      [(= x y) #t]\n      [(= x z) #f]\n      [(= y z) #f]\n      [(= x z) #f]\n\
    \      [(= y z) #f]\n      [(= x y) #t]\n      [(= x z) #f]\n      [(= y z) #f]\n\
    \      [(= x z) #f]\n      [(= y z) #f]\n      [(= x y) #t]\n      [(= x z) #f]\n\
    \      [(= y z) #f]\n      [(= x z) #f]\n      [(= y z) #f]\n      [(= x y) #t]\n\
    \      [(= x z) #f]\n      [(= y z) #f]\n      [(= x z) #f]\n      [(= y z) #f]\n\
    \      [(= x y) #t]\n      [(= x z) #f]\n      [(= y z) #f]\n      [(= x z) #f]\n\
    \      [(= y z) #f]\n      [(= x y) #t]\n      [(= x z) #f]\n      [(= y z) #f]\n\
    \      [(= x z) #f]\n      [(= y z) #f]\n      [(= x y) #t]\n      [(= x z) #f]\n\
    \      [(= y z) #f]\n      [(= x z) #f]\n      [(= y z) #f]\n      [(= x y) #t]\n\
    \      [(= x z) #f]\n      [(= y z) #f]\n      [(= x z) #f]\n      [(= y z) #f]\n\
    \      [(= x y) #t]\n      [(= x z) #f]\n      [(= y z) #f]\n      [(= x z) #f]\n",
  "  (let loop ((l l) (acc #t))\n    (cond ((null? l) acc)\n          ((= (+ (car\
    \ l) (car l)) 0)\n           (loop (cdr l) (not acc)))\n          (else\n    \
    \       (loop (cdr l) (and acc (= (+ (car l) (car l)) 0))))))\n", "  (cond\n \
    \   [(empty? l) #f]\n    [(equal? (first l) 0) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond [(null? l) #f]\n        [(= (length l) 3) #t]\n  \
    \      [(= (length l) 2) (= (first l) 0)]\n        [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(equal? (first l) 0) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (let loop ((l l) (acc #t)\
    \ (seen #f (list 0 0)))\n    (cond ((null? l) acc)\n          ((eqv? (car l) (cadr\
    \ l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n          ((eqv? (car l)\
    \ (caddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n          ((eqv? (car\
    \ l) (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n          ((eqv?\
    \ (car l) (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n        \
    \  ((eqv? (car l) (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car l) (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car l) (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car l) (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car l) (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car l) (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car l) (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car l) (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car l) (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car l) (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (c", "  (let loop ((l l) (acc #t))\n    (cond ((null? l) acc)\n\
    \          ((= (first l) (first l)) (loop (rest l) (not acc)))\n          ((=\
    \ (first l) (first l)) acc)\n          ((= (first l) (first l)) (loop (rest l)\
    \ (not acc)))\n          (else (loop (rest l) (or (not acc) (loop (rest l) (not\
    \ acc))))))))\n", "  (cond [(null? l) #f]\n        [(= (length l) 3) #t]\n   \
    \     [else (= (apply + l) 0)]))\n", "  (cond ((null? l) #f)\n        ((equal?\
    \ (first l) 0) #t)\n        (else (triples_sum_to_zero (rest l)))))\n", "  (let\
    \ loop ((l l) (acc #t) (seen #f (list l)))\n    (cond ((null? l) acc)\n      \
    \    ((eq? (car l) (cadr l)) (loop (cdr l) (not acc (car l)) seen))\n        \
    \  ((eq? (car l) (caddr l)) (loop (cdr l) (not acc (car l)) seen))\n         \
    \ ((eq? (car l) (cadddr l)) (loop (cdr l) (not acc (car l)) seen))\n         \
    \ (else (loop (cdr l) (and acc (eq? (car l) (cadddr l))) (cons (car l) seen))))))\n",
  "  (cond ((null? l) #f)\n        ((equal? (car l) (cadr l)) #t)\n        (else (triples_sum_to_zero\
    \ (cdr l)))))\n", "  (let loop ((l l) (acc 0))\n    (cond ((null? l) acc)\n  \
    \        ((= (first l) 0) (loop (rest l) (+ acc 1)))\n          (else (loop (rest\
    \ l) (+ acc (+ (first l) (second l) (third l))))))))\n", "  (let loop ((l l) (acc\
    \ #t) (i 0))\n    (cond ((null? l) acc)\n          ((= i 3) (set! acc (not acc)))\n\
    \          ((= i (car l)) (loop (cdr l) (not acc) (inc i)))\n          (else (loop\
    \ (cdr l) (and acc (= i (car l))) (inc i))))))\n", "  (cond [(null? l) #f]\n \
    \       [(= (length l) 3) #t]\n        [else (= (apply + l) 0)]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(equal? (first l) 0) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(equal? (first l) 0) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(equal? (first l) 0) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(equal? (first l) 0) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (let loop ((l l) (acc 0))\n    (cond\n      [(null? l) #f]\n\
    \      [(equal? (first l) 0) (equal? (second l) 0)\n       (equal? (third l) 0)\n\
    \       (loop (rest l) (+ acc 1))]\n      [else (loop (rest l) acc)])))\n", " \
    \ (let loop ((lst l) (acc 0))\n    (cond\n      [(empty? lst) acc]\n      [(equal?\
    \ (first lst) 0) (loop (rest lst) (+ acc 1))]\n      [(equal? (first lst) 1) (loop\
    \ (rest lst) (+ acc 1))]\n      [(equal? (first lst) 2) (loop (rest lst) (+ acc\
    \ 1))]\n      [else (loop (rest lst) (+ acc (+ (first lst) (second lst) (third\
    \ lst))))])))\n", "  (let ((x (car l))\n        (y (second l))\n        (z (third\
    \ l)))\n    (cond ((= x y)\n           (= x z)\n           (= y z))\n        \
    \  ((= x y)\n           (= y z)\n           (= x z))\n          ((= x y)\n   \
    \        (= x z)\n           (= y z))\n          (else\n           (= x z)\n \
    \          (= y z)\n           (= x y)))))\n", "  (let loop ((l l) (acc 0))\n\
    \    (cond ((null? l) #f)\n          ((= (first l) 0) (= (first l) acc))\n   \
    \       ((= (first l) (+ acc 0)) #t)\n          (else (loop (rest l) (+ acc (first\
    \ l)))\n                (loop (rest l) (+ acc (first l)))))))\n", "  (let loop\
    \ ((l l) (acc #t) (i 0))\n    (cond\n      [(null? l) acc]\n      [(= i 3) (set!\
    \ acc (not acc))]\n      [(= i (- 3 (length l)))\n       (set! acc (not acc))]\n\
    \      [else (loop (rest l) (not acc) (+ i 1))]\n    )))\n", "  (let loop ((l\
    \ l) (acc #t) (seen #f (list 0 0)))\n    (cond\n      [(null? l) (or acc seen)]\n\
    \      [(not (pair? l)) (or (not acc) (not seen))]\n      [(not (pair? (car l)))\
    \ (or (not acc) (not seen))]\n      [(not (pair? (car l))) (or (not acc) (not\
    \ seen))]\n      [(not (pair? (car l))) (or (not acc) (not seen))]\n      [(not\
    \ (pair? (car l))) (or (not acc) (not seen))]\n      [(not (pair? (car l))) (or\
    \ (not acc) (not seen))]\n      [(not (pair? (car l))) (or (not acc) (not seen))]\n\
    \      [(not (pair? (car l))) (or (not acc) (not seen))]\n      [(not (pair? (car\
    \ l))) (or (not acc) (not seen))]\n      [(not (pair? (car l))) (or (not acc)\
    \ (not seen))]\n      [(not (pair? (car l))) (or (not acc) (not seen))]\n    \
    \  [(not (pair? (car l))) (or (not acc) (not seen))]\n      [(not (pair? (car\
    \ l))) (or (not acc) (not seen))]\n      [(not (pair? (car l))) (or (not acc)\
    \ (not seen))]\n      [(not (pair? (car l))) (or (not acc) (not seen))]\n    \
    \  [(not (pair? (car l))) (or (not acc) (not seen))]\n      [(not (pair? (car\
    \ l))) (or (not acc) (not seen))]\n      [(not (pair? (car l))) (or (not acc)\
    \ (not seen))]\n      [(not (pair? (car l))) (or (not acc) (not seen))]\n    \
    \  [(not (pair? (car l))) (or (not acc) (not seen))]\n      [(not (pair? (car\
    \ l))) (or (not acc) (not seen))]\n      [(not (pair? (car l))) (or (not acc)\
    \ (not seen))]\n      [(not (pair? (car l))) (or (not acc) (not seen))]\n    \
    \  [(not (pair? (car l))) (or (not acc) (not seen))]\n      [(not (pair? (car\
    \ l))) (or (not acc) (not seen))]\n      [(not (", "  (cond\n    [(empty? l) #f]\n\
    \    [(equal? (first l) 0) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (let loop ((l l) (acc #t) (i 0))\n    (cond ((null? l) acc)\n          ((= i\
    \ 3) (set! acc (not acc)))\n          ((= i (+ 3 (car l)))\n           (loop (cdr\
    \ l) (not acc) (+ i 1))\n          (else (loop (cdr l) (not acc) (+ i 1))))))\n",
  "  (cond ((null? l) #f)\n        ((equal? (first l) (second l)) #t)\n        (else\
    \ (triples_sum_to_zero (rest l)))))\n", "  (cond ((null? l) #f)\n        ((equal?\
    \ (first l) 0)\n         (equal? (second l) 0)\n         (equal? (third l) 0))\n\
    \        (else (triples_sum_to_zero (rest l)))))\n", "  (let loop ((lst l) (acc\
    \ #t))\n    (cond ((null? lst) acc)\n          ((= 3 (car lst)) (loop (cdr lst)\
    \ (not acc)))\n          ((= 0 (+ (car lst) (cadr lst))) (loop (cdr lst) (not\
    \ acc)))\n          (else (loop (cdr lst) (not (or (= 3 (car lst)) (= 0 (+ (car\
    \ lst) (cadr lst)))))))))\n", "  (cond [(null? l) #f]\n        [(= (length l)\
    \ 3) #t]\n        [else (= (distinct (map + (rest l) (rest l))) #f)]))\n", " \
    \ (let loop ((l l) (acc #t) (seen #f (list 0 0)))\n    (cond ((null? l) acc)\n\
    \          ((= (first l) 0) (loop (rest l) (not acc) (cons (first l) seen)))\n\
    \          ((= (first l) (first seen)) (loop (rest l) (not acc) (cons (first l)\
    \ seen)))\n          ((= (first l) (first seen) (first seen)) (loop (rest l) (not\
    \ acc) (cons (first l) seen)))\n          (else (loop (rest l) (and acc (= (first\
    \ seen) (first l))) (cons (first l) seen))))))\n", "  (cond [(null? l) #f]\n \
    \       [(= (length l) 3) #t]\n        [else (let ([a (first l)\n            \
    \          b (second l)\n                      c (third l)])\n              (=\
    \ (+ (* a a) (* b b) (* c c))\n                 (* a b c))]))\n</code>\n<|/ a\
    \ tags=racket,scheme |>\n<| c |>\nThanks for your answer! I really appreciate\
    \ it! I did some more research and found a way to solve this problem without using\
    \ map/filter/foldl/foldr/etc. Thanks again!\n<|/ c |>\n<| c |>\nI added a solution\
    \ without `map`, `filter`, `foldl`, `foldr`, or `foldl`/`foldr`.\n<|/ c |>\n<|\
    \ c |>\nThanks again! I really appreciate it! I did some more research and found\
    \ a way to solve this problem without using map/filter/foldl/foldr/etc. Thanks\
    \ again!\n<|/ c |>\n<| a dscore=1 |>\nI did some more research and found a way\
    \ to solve this problem without using map/filter/foldl/foldr/etc. Thanks again!\n\
    <code>", "  (cond ((null? l) #f)\n        ((equal? (first l) 0)\n         (equal?\
    \ (second l) 0)\n         (equal? (third l) 0))\n        (else (triples_sum_to_zero\
    \ (rest l)))))\n", "  (cond\n    [(empty? l) #f]\n    [(equal? (first l) 0) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (let loop ((l l) (acc #f))\n\
    \    (cond ((null? l) acc)\n          ((= (first l) (first l)) (loop (rest l)\
    \ (not acc)))\n          ((= (first l) (- (first l) (first l))) (loop (rest l)\
    \ (not acc)))\n          ((= (first l) (first l)) (loop (rest l) (not acc)))\n\
    \          ((= (first l) (- (first l) (first l))) (loop (rest l) (not acc)))\n\
    \          (else (loop (rest l) (and acc (= (first l) 0))))))\n", "  (cond ((null?\
    \ l) #f)\n        ((equal? (first l) 0)\n         (equal? (second l) 0)\n    \
    \     (equal? (third l) 0))\n        (else (triples_sum_to_zero (rest l)))))\n",
  "  (cond ((null? l) #f)\n        ((= (first l) 0) #t)\n        (else (triples_sum_to_zero\
    \ (rest l)))))\n", "  (let loop ((lst l) (acc 0))\n    (cond ((null? lst) acc)\n\
    \          ((= 3 (car lst)) #t)\n          ((= acc (+ (car lst) (cadr lst)))\n\
    \           (loop (cdr lst) (+ acc (cadr lst))))\n          (else (loop (cdr lst)\
    \ (+ acc (car lst)))))))\n", "  (let loop ((l l) (acc #t))\n    (cond ((null?\
    \ l) acc)\n          ((= (first l) (first l)) (loop (rest l) (not acc)))\n   \
    \       ((= (first l) (first l)) acc)\n          ((= (first l) (first l)) (loop\
    \ (rest l) (not acc)))\n          (else (loop (rest l) (or (not acc) (loop (rest\
    \ l) (not acc))))))))\n", "  (let loop ((l l) (acc #t) (seen #f (cons 0 seen)))\n\
    \    (cond ((null? l) acc)\n          ((= (first l) (first seen)) (loop (rest\
    \ l) acc (rest seen)))\n          ((= (first l) 0) (loop (rest l) acc (cons (first\
    \ seen) (cons (first l) seen))))\n          (else (loop (rest l) (cons (first\
    \ l) acc) seen))))\n", "  (let loop ((l l) (acc #t) (i 0))\n    (cond ((null?\
    \ l) acc)\n          ((= i 3) (set! acc (not acc)))\n          ((= i (+ i (length\
    \ l)))\n           (loop (cdr l) (not acc) (+ i 1))\n          (else (loop (cdr\
    \ l) (not acc) (+ i 1))))))\n", "  (let loop ((l l) (sum 0))\n    (cond ((null?\
    \ l) #f)\n          ((= (first l) sum) #t)\n          (else (loop (rest l) (+\
    \ sum (first l)))))))\n", "  (cond\n    [(empty? l) #f]\n    [(equal? (first l)\
    \ 0) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (let ((x (car l))\n\
    \        (y (cadr l))\n        (z (caddr l)))\n    (cond\n      [(= x y)\n   \
    \    (= x z)\n       (= y z)\n       (= x 0)]\n      [(= x y)\n       (= x z)\n\
    \       (= y z)\n       (= x 0)]\n      [(= x y)\n       (= x z)\n       (= y\
    \ z)\n       (= x 0)]\n      [(= x y)\n       (= x z)\n       (= y z)\n      \
    \ (= x 0)]\n      [(= x y)\n       (= x z)\n       (= y z)\n       (= x 0)]\n\
    \      [(= x y)\n       (= x z)\n       (= y z)\n       (= x 0)]\n      [(= x\
    \ y)\n       (= x z)\n       (= y z)\n       (= x 0)]\n      [(= x y)\n      \
    \ (= x z)\n       (= y z)\n       (= x 0)]\n      [(= x y)\n       (= x z)\n \
    \      (= y z)\n       (= x 0)]\n      [(= x y)\n       (= x z)\n       (= y z)\n\
    \       (= x 0)]\n      [(= x y)\n       (= x z)\n       (= y z)\n       (= x\
    \ 0)]\n      [(= x y)\n       (= x z)\n       (= y z)\n       (= x 0)]\n     \
    \ [(= x y)\n       (= x z)\n       (= y z)\n       (= x 0)]\n      [(= x y)\n\
    \       (= x z)\n       (= y z)\n       (= x 0)]\n      [(= x y)\n       (= x\
    \ z)\n       (= y z)\n       (= x 0)]\n      [(= x y)\n       (= x z)\n      \
    \ (= y z)\n       (= x 0)]\n      [(= x y)\n       (= x z)\n       (= y z)\n \
    \      (= x 0)]\n      [(= x y)\n       (= x z)\n       (= y z)\n       (= x 0)]\n\
    \      [(= x y)\n       (= x z)\n       (= y z)\n       (= x 0)]\n      [(= x\
    \ y)\n       (= x z)\n       (= y z)\n       (= x 0)]\n      [(= x y)\n      \
    \ (= x z)\n       (= y z)\n       (= x 0)]\n      [(= x y)\n       (= x z)\n \
    \      (= y z)\n       (= x 0)", "  (let loop ((l l) (acc #t))\n    (cond ((null?\
    \ l) acc)\n          ((eq? (car l) (cadr l)) (loop (cdr l) (not acc)))\n     \
    \     (else (loop (cdr l) (and acc (eq? (car l) (cadr l))))))))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(equal? (first l) 0) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(= (first l) 0) #t]\n \
    \   [else (triples_sum_to_zero (rest l))]))\n", "  (let loop ((l l) (acc #f))\n\
    \    (cond\n      [(empty? l) acc]\n      [(equal? (first l) (first l)) (loop\
    \ (rest l) (not acc))]\n      [else (loop (rest l) (or (not acc) (equal? (first\
    \ l) (first l))))]\n    )))\n", "  (cond ((null? l) #f)\n        ((equal? (first\
    \ l) 0) #t)\n        (else (triples_sum_to_zero (rest l)))))\n", "  (cond [(null?\
    \ l) #f]\n        [(= (length (distinct l)) 3) #t]\n        [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (let loop ((l l) (acc #t) (i 0))\n    (cond ((null? l) acc)\n\
    \          ((= i 3) (set! acc (not acc)))\n          ((= i (+ i 1)) (recur (cdr\
    \ l) (not acc) (+ i 1)))\n          ((= i (+ i 2)) (set! acc (not acc)))\n   \
    \       ((= i (+ i 3)) (recur (cdr l) (not acc) (+ i 3)))\n          (else (loop\
    \ (cdr l) (not acc) (+ i 1))))))\n", "  (let loop ((l l) (acc #t) (i 0))\n   \
    \ (cond ((null? l) acc)\n          ((= i 3) (set! acc (not acc)))\n          ((=\
    \ i (car l)) (loop (cdr l) (not acc) (inc i)))\n          (else (loop (cdr l)\
    \ (and acc (= i (car l))) (inc i))))))\n", "  (let loop ((l l) (acc #f))\n   \
    \ (cond ((null? l) acc)\n          ((= (first l) 0)\n           (loop (rest l)\
    \ (not acc)))\n          (else\n           (loop (rest l)\n                 (or\
    \ (= (first l) 0)\n                     (= (first l) (+ (first l) (second l) (third\
    \ l))))))))\n", "  (cond ((null? l) #f)\n        ((equal? (first l) 0)\n     \
    \    (equal? (second l) 0)\n         (equal? (third l) 0))\n        (else (triples_sum_to_zero\
    \ (rest l)))))\n", "  (cond [(empty? l) #f]\n        [(equal? (first l) (first\
    \ l)) #t]\n        [else (triples_sum_to_zero (rest l))]))\n", "  (let loop ((l\
    \ l) (acc #t))\n    (cond ((null? l) acc)\n          ((= (first l) (first l))\
    \ (loop (rest l) (not acc)))\n          ((= (first l) (first l)) acc)\n      \
    \    (else (loop (rest l) (or (not acc) (= (first l) (first l))))))))\n", "  (let\
    \ loop ((l l) (acc #t) (i 0))\n    (cond ((null? l) acc)\n          ((eqv? (car\
    \ l) (cadr l)) (loop (cdr l) (not acc) (+ i 1)))\n          ((eqv? (car l) (caddr\
    \ l)) (loop (cdr l) (not acc) (+ i 2)))\n          ((eqv? (car l) (cadddr l))\
    \ (loop (cdr l) (not acc) (+ i 3)))\n          (else (loop (cdr l) (and acc (eqv?\
    \ (car l) (caddr l))) (+ i 1))))))\n", "  (let loop ((l l) (acc #t))\n    (cond\
    \ ((null? l) acc)\n          ((= (first l) (first l)) (loop (rest l) (not acc)))\n\
    \          ((= (first l) (first l)) acc)\n          ((= (first l) (first l)) (loop\
    \ (rest l) (not acc)))\n          (else (loop (rest l) (or (not acc) (loop (rest\
    \ l) (not acc)))))))\n", "  (let loop ((l l) (acc #t) (seen #f (list 0 0)))\n\
    \    (cond ((null? l) acc)\n          ((eqv? (car l) (car seen)) (loop (cdr l)\
    \ (not acc) (cons (car l) seen)))\n          ((eqv? (car l) (car seen)) (loop\
    \ (cdr l) (not acc) (cons (car l) seen)))\n          (else (loop (cdr l) (not\
    \ acc) (cons (car l) seen))))))\n", "  (let ((x (car l))\n        (y (if (null?\
    \ l) (car l) (cadr l)))\n        (z (if (null? l) (cadr l) (caddr l))))\n    (cond\
    \ ((= x y) z)\n          ((= x z) y)\n          ((= y z) x)\n          (else #f))))\n",
  "  (cond\n    [(empty? l) #f]\n    [(equal? (first l) 0) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (let loop ((l l) (acc #t))\n    (cond ((null? l) acc)\n\
    \          ((equal? (first l) (first l)) (loop (rest l) (not acc)))\n        \
    \  ((equal? (first l) (first l)) acc)\n          ((equal? (first l) (first l))\
    \ (loop (rest l) (not acc)))\n          (else (loop (rest l) (equal? (first l)\
    \ (first l)))))))\n", "  (let loop ((l l) (acc #t) (i 0))\n    (cond ((null? l)\
    \ acc)\n          ((= i 3) (set! acc (not acc)))\n          ((= i (car l)) (loop\
    \ (cdr l) (not acc) (inc i)))\n          (else (loop (cdr l) (and acc (= i (car\
    \ l))) (inc i))))))\n", "  (let loop ((l l) (acc #t))\n    (cond ((null? l) acc)\n\
    \          ((equal? (first l) (first l)) (loop (rest l) (not acc)))\n        \
    \  ((equal? (first l) (- (first l) (first l))) (loop (rest l) (not acc)))\n  \
    \        ((equal? (first l) (second l)) (loop (rest l) (not (or (not acc) (equal?\
    \ (first l) (second l)))))\n          ((equal? (first l) (third l)) (loop (rest\
    \ l) (not (or (not acc) (equal? (first l) (third l)))))\n          ((equal? (first\
    \ l) (fourth l)) (loop (rest l) (not (or (not acc) (equal? (first l) (fourth l)))))\n\
    \          ((equal? (first l) (- (first l) (second l))) (loop (rest l) (not (or\
    \ (not acc) (equal? (first l) (- (first l) (second l)))))\n          ((equal?\
    \ (first l) (- (first l) (third l))) (loop (rest l) (not (or (not acc) (equal?\
    \ (first l) (- (first l) (third l)))))\n          ((equal? (first l) (- (first\
    \ l) (fourth l))) (loop (rest l) (not (or (not acc) (equal? (first l) (- (first\
    \ l) (fourth l)))))\n          ((equal? (first l) (second l) (third l)) (loop\
    \ (rest l) (not (or (not acc) (equal? (first l) (second l) (third l)))))\n   \
    \       ((equal? (first l) (second l) (fourth l)) (loop (rest l) (not (or (not\
    \ acc) (equal? (first l) (second l) (fourth l)))))\n          ((equal? (first\
    \ l) (third l) (fourth l)) (loop (rest l) (not (or (not acc) (equal? (first l)\
    \ (third l) (fourth l)))))\n          ((equal? (first l) (- (first l) (second\
    \ l) (third l))) (loop (rest l) (not (or (not acc) (equal? (first l) (- (first\
    \ l) (second l) (third l)))))\n          ((equal? (first l) (- (first l) (second\
    \ l) (fourth l))) (loop (rest l) (not (or (not acc) (equal? (first l) (- (first\
    \ l) (second l) (fourth l)))))\n          ((", "  (cond ((null? l) #f)\n     \
    \   ((equal? (first l) (first l)) #t)\n        (else (triples_sum_to_zero (rest\
    \ l)))))\n", "  (let loop ((l l) (acc 0))\n    (cond ((null? l) acc)\n       \
    \   ((= (first l) 0) (loop (rest l) (+ acc 1)))\n          (else (loop (rest l)\
    \ (+ acc (+ (first l) (second l) (third l))))))))\n", "  (cond [(null? l) #f]\n\
    \        [(equal? (first l) 0) #t]\n        [else (triples_sum_to_zero (rest l))]))\n",
  "  (let ((sum (apply + l)))\n    (cond\n      [(= 3 sum) #t]\n      [(= 2 sum) #f]\n\
    \      [else #f])))\n", "  (let loop ((lst l) (acc 0))\n    (cond ((null? lst)\n\
    \           (if (= acc 0)\n               #t\n               (if (= acc 3)\n \
    \                  #f\n                   (loop (cdr lst) (+ acc 1)))))\n    \
    \      ((= (first lst) (first lst))\n           (loop (rest lst) (+ acc 1)))\n\
    \          (else\n           (loop (rest lst) (+ acc (+ (first lst) (first lst))))))))\n",
  "  (cond\n    [(empty? l) #f]\n    [(equal? (first l) 0) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (let loop ((l l) (acc 0))\n    (cond ((null? l) #f)\n  \
    \        ((= (first l) 0)\n           (if (= (second l) 0)\n               (if\
    \ (= (third l) 0)\n                   (= acc 3)\n                   (= acc 0))\n\
    \               (if (= (second l) 0)\n                   (if (= (third l) 0)\n\
    \                       (= acc 2)\n                       (= acc 0))\n       \
    \            (if (= (third l) 0)\n                       (= acc 1)\n         \
    \              (= acc 0))))\n          ((= (first l) 0)\n           (if (= (second\
    \ l) 0)\n               (if (= (third l) 0)\n                   (= acc 2)\n  \
    \                 (= acc 0))\n               (if (= (third l) 0)\n           \
    \        (= acc 1)\n                   (= acc 0))\n               (if (= (second\
    \ l) 0)\n                   (= acc 3)\n                   (= acc 0))))\n     \
    \     ((= (first l) 0)\n           (if (= (second l) 0)\n               (if (=\
    \ (third l) 0)\n                   (= acc 2)\n                   (= acc 0))\n\
    \               (if (= (third l) 0)\n                   (= acc 1)\n          \
    \         (= acc 0))\n               (if (= (second l) 0)\n                  \
    \ (= acc 3)\n                   (= acc 0))\n               (if (= (third l) 0)\n\
    \                   (= acc 2)\n                   (= acc 0))))\n          ((=\
    \ (first l) 0)\n           (if (= (second l) 0)\n               (if (= (third\
    \ l) 0)\n                   (= acc 2)\n                   (= acc 0))\n       \
    \        (if (= (third l) 0)\n                   (= acc 1)\n                 \
    \  (= acc 0))\n               (if (= (second l) 0)\n                   (= acc\
    \ 3)\n                   (= acc 0))\n               (if (= (third l) 0)\n    \
    \               (= acc 2)\n                   (= acc 0))\n               (if (=\
    \ (second l) 0)\n                   (= acc 3)\n                   (= acc 0))\n\
    \               (if (= (third l) 0)\n                   (= acc 2)\n          \
    \         (= acc 0))))\n          ((= (first l) 0)\n           (if (= (second\
    \ l) 0)\n               (if (= (third l) 0)\n                   (= acc 2)\n  \
    \                 (= acc 0))\n               (if (= (third l) 0)\n           \
    \        (= ", "  (let loop ((l l) (acc 0))\n    (cond ((null? l) acc)\n     \
    \     ((= (first l) (first acc)) (loop (rest l) (+ acc (second l))))\n       \
    \   (else (loop (rest l) (+ acc (first l)))))))\n", "  (cond [(null? l) #f]\n\
    \        [(equal? (first l) 0) #t]\n        [else (triples_sum_to_zero (rest l))]))\n",
  "  (let loop ((lst l) (acc 0))\n    (cond\n      [(null? lst) acc]\n      [(equal?\
    \ (car lst) (cadr lst)) (loop (cdr lst) (+ acc 1))]\n      [else (loop (cdr lst)\
    \ (+ acc 1))])))\n", "  (cond [(null? l) #f]\n        [(= (length l) 3) #t]\n\
    \        [else (= (apply + l) 0)]))\n", "  (let loop ((l l) (acc #t) (i 0))\n\
    \    (cond ((null? l) acc)\n          ((= i 3) (set! acc (not acc)))\n       \
    \   ((= i (- 3 (length l))) (set! acc (not acc)))\n          ((= i (- 3 (length\
    \ l))) (set! acc (not acc)))\n          ((= i (- 3 (length l))) (set! acc (not\
    \ acc)))\n          ((= i (- 3 (length l))) (set! acc (not acc)))\n          ((=\
    \ i (- 3 (length l))) (set! acc (not acc)))\n          ((= i (- 3 (length l)))\
    \ (set! acc (not acc)))\n          ((= i (- 3 (length l))) (set! acc (not acc)))\n\
    \          ((= i (- 3 (length l))) (set! acc (not acc)))\n          ((= i (- 3\
    \ (length l))) (set! acc (not acc)))\n          ((= i (- 3 (length l))) (set!\
    \ acc (not acc)))\n          ((= i (- 3 (length l))) (set! acc (not acc)))\n \
    \         ((= i (- 3 (length l))) (set! acc (not acc)))\n          ((= i (- 3\
    \ (length l))) (set! acc (not acc)))\n          ((= i (- 3 (length l))) (set!\
    \ acc (not acc)))\n          ((= i (- 3 (length l))) (set! acc (not acc)))\n \
    \         ((= i (- 3 (length l))) (set! acc (not acc)))\n          ((= i (- 3\
    \ (length l))) (set! acc (not acc)))\n          ((= i (- 3 (length l))) (set!\
    \ acc (not acc)))\n          ((= i (- 3 (length l))) (set! acc (not acc)))\n \
    \         ((= i (- 3 (length l))) (set! acc (not acc)))\n          ((= i (- 3\
    \ (length l))) (set! acc (not acc)))\n          ((= i (- 3 (length l))) (set!\
    \ acc (not acc)))\n          ((= i (- 3 (length l))) (set! acc (not acc)))\n \
    \         ((= i (- 3 (length l))) (set! acc (not acc)))\n          ((= i (- 3\
    \ (length l))) (set! acc (not acc)))\n          ((= i (- 3 (length l))) (set!\
    \ acc (not acc)))\n          ((= i (", "  (let loop ((l l) (acc #t) (seen #f (list\
    \ 0 0)))\n    (cond ((null? l) acc)\n          ((eqv? (car l) (cadr l)) (loop\
    \ (cdr l) (not acc) (cons (car l) seen)))\n          ((eqv? (car l) (caddr l))\
    \ (loop (cdr l) (not acc) (cons (car l) seen)))\n          ((eqv? (car l) (caaddr\
    \ l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n          ((eqv? (car l)\
    \ (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n          ((eqv?\
    \ (car l) (caadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n       \
    \   ((eqv? (car l) (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car l) (caadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car l) (cadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car l) (caadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car l) (caadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car l) (caadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car l) (caadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car l) (caadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car l) (caadddr l)) (loop (cdr l) (not acc) (cons (car l) seen)))\n\
    \          ((eqv? (car ", "  (cond ((null? l) #f)\n        ((equal? (first l)\
    \ 0)\n         (equal? (second l) 0)\n         (equal? (third l) 0))\n       \
    \ (else (triples_sum_to_zero (rest l)))))\n", "  (let loop ((l l) (acc #t) (i\
    \ 0))\n    (cond ((null? l) acc)\n          ((eqv? (car l) (cadr l)) (loop (cdr\
    \ l) (not acc) (i + 1))\n          (else (loop (cdr l) (and acc (eqv? (car l)\
    \ (cadr l))) (i + 1)))))\n  (not acc)))\n", "  (let loop ((l l) (acc #t) (i 0))\n\
    \    (if (null? l)\n        acc\n        (loop (cdr l) (if (= (+ (car l) acc)\
    \ 0)\n                         (set! acc (+ (car l) acc)) acc)\n             \
    \ (+ i 1)))))\n", "  (cond\n    [(empty? l) #f]\n    [(equal? (first l) 0) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (let loop ((lst l) (acc 0))\n\
    \    (cond\n      [(null? lst) acc]\n      [(equal? (car lst) (cadr lst)) (loop\
    \ (cdr lst) (+ acc 1))]\n      [else (loop (cdr lst) (+ acc 1))])))\n", "  (let\
    \ loop ((l l) (acc #t) (i 0))\n    (cond\n      [(null? l) #f]\n      [(= i (length\
    \ l)) acc]\n      [else (loop (cdr l) (not (= (+ (car l) acc)) (car l)) (+ i 1))]\n\
    \    )))\n", "  (cond ((null? l) #f)\n        ((equal? (first l) 0)\n        \
    \ (equal? (second l) 0)\n         (equal? (third l) 0))\n        (else (triples_sum_to_zero\
    \ (rest l)))))\n", "  (let ((sum (apply + l)))\n    (cond\n      [(= sum 0) #t]\n\
    \      [(= sum (apply min l)) #f]\n      [else (triples_sum_to_zero (rest l))])))\
    \ ;; tail recursion\n", "  (let loop ((l l) (acc #t) (i 0))\n    (cond ((null?\
    \ l) acc)\n          ((= i 3) (set! acc (not acc)))\n          ((= i (car l))\
    \ (loop (cdr l) (not acc) (inc i)))\n          (else (loop (cdr l) (and acc (=\
    \ i (car l))) (inc i))))))\n", "  (let ((sum (apply + l)))\n    (cond\n      [(=\
    \ sum 0) #t]\n      [(= (mod sum 3) 0) #f]\n      [else (triples_sum_to_zero (rest\
    \ l))]))) ;; tail recursion stops here.\n</code>\n<|/ a tags=racket,scheme |>\n\
    <| c |>\nI like your solution. I'm just wondering if there's a way to do this\
    \ without recursion.\n<|/ c |>\n<| c |>\nI added a solution without recursion.\n\
    <|/ c |>\n<| c |>\nThanks for the solution. I'm wondering if there's a way to\
    \ do this without recursion.\n<|/ c |>\n<| c |>\nI added a solution without recursion.\n\
    <|/ c |>\n<| a |>\n<code>", "  (let loop ((l l) (acc 0))\n    (cond ((null? l)\
    \ #f)\n          ((= (first l) 0) (= (second l) 0) (= (third l) 0))\n        \
    \  ((= (first l) 0) (= (second l) 0) (= (third l) 0))\n          ((= (first l)\
    \ 0) (= (second l) 0) (= (third l) 0))\n          ((= (first l) 0) (= (second\
    \ l) 0) (= (third l) 0))\n          ((= (first l) 0) (= (second l) 0) (= (third\
    \ l) 0))\n          ((= (first l) 0) (= (second l) 0) (= (third l) 0))\n     \
    \     ((= (first l) 0) (= (second l) 0) (= (third l) 0))\n          ((= (first\
    \ l) 0) (= (second l) 0) (= (third l) 0))\n          ((= (first l) 0) (= (second\
    \ l) 0) (= (third l) 0))\n          ((= (first l) 0) (= (second l) 0) (= (third\
    \ l) 0))\n          ((= (first l) 0) (= (second l) 0) (= (third l) 0))\n     \
    \     ((= (first l) 0) (= (second l) 0) (= (third l) 0))\n          ((= (first\
    \ l) 0) (= (second l) 0) (= (third l) 0))\n          ((= (first l) 0) (= (second\
    \ l) 0) (= (third l) 0))\n          ((= (first l) 0) (= (second l) 0) (= (third\
    \ l) 0))\n          ((= (first l) 0) (= (second l) 0) (= (third l) 0))\n     \
    \     ((= (first l) 0) (= (second l) 0) (= (third l) 0))\n          ((= (first\
    \ l) 0) (= (second l) 0) (= (third l) 0))\n          ((= (first l) 0) (= (second\
    \ l) 0) (= (third l) 0))\n          ((= (first l) 0) (= (second l) 0) (= (third\
    \ l) 0))\n          ((= (first l) 0) (= (second l) 0) (= (third l) 0))\n     \
    \     ((= (first l) 0) ", "  (let loop ((l l) (acc #t) (i 0))\n    (cond ((null?\
    \ l) acc)\n          ((= i 3) (set! acc (not acc)))\n          ((= i (car l))\
    \ (loop (cdr l) (not acc) (inc i)))\n          (else (loop (cdr l) (and acc (=\
    \ i (car l))) (inc i))))))\n", "  (cond\n    [(empty? l) #f]\n    [(equal? (first\
    \ l) 0) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond ((null?\
    \ l) #f)\n        ((equal? (first l) 0)\n         (equal? (second l) 0)\n    \
    \     (equal? (third l) 0))\n        (else (triples_sum_to_zero (rest l)))))\n",
  "  (let ((x (car l))\n        (c (car l))\n        (y (if (= c 0) (car l) (cdr l))))\n\
    \    (cond\n      [(= x y) #f]\n      [(= x 0) #f]\n      [(= y 0) #f]\n     \
    \ [(= c 0) #f]\n      [(= c 1) #f]\n      [(= x y) #f]\n      [(= x 0) #f]\n \
    \     [(= y 0) #f]\n      [(= c 0) #f]\n      [(= c 1) #f]\n      [(= x y) #f]\n\
    \      [(= x 0) #f]\n      [(= y 0) #f]\n      [(= c 0) #f]\n      [(= c 1) #f]\n\
    \      [(= x y) #f]\n      [(= x 0) #f]\n      [(= y 0) #f]\n      [(= c 0) #f]\n\
    \      [(= c 1) #f]\n      [(= x y) #f]\n      [(= x 0) #f]\n      [(= y 0) #f]\n\
    \      [(= c 0) #f]\n      [(= c 1) #f]\n      [(= x y) #f]\n      [(= x 0) #f]\n\
    \      [(= y 0) #f]\n      [(= c 0) #f]\n      [(= c 1) #f]\n      [(= x y) #f]\n\
    \      [(= x 0) #f]\n      [(= y 0) #f]\n      [(= c 0) #f]\n      [(= c 1) #f]\n\
    \      [(= x y) #f]\n      [(= x 0) #f]\n      [(= y 0) #f]\n      [(= c 0) #f]\n\
    \      [(= c 1) #f]\n      [(= x y) #f]\n      [(= x 0) #f]\n      [(= y 0) #f]\n\
    \      [(= c 0) #f]\n      [(= c 1) #f]\n      [(= x y) #f]\n      [(= x 0) #f]\n\
    \      [(= y 0) #f]\n      [(= c 0) #f]\n      [(= c 1) #f]\n      [(= x y) #f]\n\
    \      [(= x 0) #f]\n      [(= y 0) #f]\n      [(= c 0) #f]\n      [(= c 1) #f]\n\
    \      [(= x y) #f]\n      [(= x 0) #f]\n      [(= y 0) #f]\n      [(= c 0) #f]\n\
    \      [(= ", "  (let loop ((l l) (acc 0))\n    (cond ((null? l) acc)\n      \
    \    ((= (first l) (first acc)) #f)\n          ((= (first l) (second acc)) #f)\n\
    \          ((= (first l) (third acc)) #f)\n          (else (loop (rest l) (+ acc\
    \ (first l)))))))\n", "  (let loop ((l l) (acc #t) (i 0))\n    (cond ((null? l)\
    \ acc)\n          ((eqv? (car l) (cadr l)) (loop (cdr l) (not acc) (i + 1))\n\
    \           (loop (cdr l) (and acc (eqv? (car l) (cadr l))) (i + 1))\n       \
    \   (else (loop (cdr l) acc (+ i 1))))))\n", "  (let loop ((l l) (acc #t) (i 0))\n\
    \    (cond ((null? l) acc)\n          ((= i 3) (set! acc (not acc)))\n       \
    \   ((= i (car l)) (loop (cdr l) (not acc) (inc i)))\n          (else (loop (cdr\
    \ l) (not acc) (+ i 1))))))\n", "  (let loop ((l l) (sum 0))\n    (cond ((null?\
    \ l) #f)\n          ((= (first l) sum) #t)\n          (else (loop (rest l) (+\
    \ sum (first l)))))))\n", "  (cond [(null? l) #f]\n        [(= (length l) 3) #t]\n\
    \        [else (= (distinct (map + (rest l) (rest l))) #f)]))\n", "  (let loop\
    \ ((l l) (acc #t))\n    (cond ((null? l) acc)\n          ((eq? (car l) (cadr l))\
    \ (loop (cdr l) (not acc)))\n          (else (loop (cdr l) (or (not acc) (cdr\
    \ l)))))))\n", "  (let ((sum (apply + l)))\n    (cond\n      [(= sum 0) #t]\n\
    \      [(= (mod sum 3) 0) #f]\n      [else (triples_sum_to_zero (rest l))])))\
    \ ;; tail recursion elimination\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a list of integers as an input and returns a list containing only\
    \ those elements of the list that sum to zero.\n\n\n</text>\n<code language=dyalog-kernel>\n\
    #lang racket\n", "  (cond\n    [(empty? l) #f]\n    [(equal? (first l) 0) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (let loop ((l l) (sum 0))\n\
    \    (cond ((null? l) sum)\n          ((= (first l) (first sum)) #t)\n       \
    \   ((= (first l) (second sum)) #t)\n          ((= (first l) (third sum)) #t)\n\
    \          ((= (first l) (fourth sum)) #t)\n          ((= (first l) (fifth sum))\
    \ #t)\n          ((= (first l) (sixth sum)) #t)\n          ((= (first l) (seventh\
    \ sum)) #t)\n          ((= (first l) (eighth sum)) #t)\n          ((= (first l)\
    \ (ninth sum)) #t)\n          ((= (first l) (tenth sum)) #t)\n          ((= (first\
    \ l) (eleventh sum)) #t)\n          ((= (first l) (twelfth sum)) #t)\n       \
    \   ((= (first l) (thirteenth sum)) #t)\n          ((= (first l) (fourteenth sum))\
    \ #t)\n          ((= (first l) (fifteenth sum)) #t)\n          ((= (first l) (sixteenth\
    \ sum)) #t)\n          ((= (first l) (seventeenth sum)) #t)\n          ((= (first\
    \ l) (eighteenth sum)) #t)\n          ((= (first l) (nineteenth sum)) #t)\n  \
    \        ((= (first l) (twentieth sum)) #t)\n          ((= (first l) (twenty-first\
    \ sum)) #t)\n          ((= (first l) (twenty-second sum)) #t)\n          ((= (first\
    \ l) (twenty-third sum)) #t)\n          ((= (first l) (twenty-fourth sum)) #t)\n\
    \          ((= (first l) (twenty-fifth sum)) #t)\n          ((= (first l) (twenty-sixth\
    \ sum)) #t)\n          ((= (first l) (twenty-seventh sum)) #t)\n          ((=\
    \ (first l) (twenty-eighth sum)) #t)\n          ((= (first l) (twenty-ninth sum))\
    \ #t)\n          ((= (first l) (thirtieth sum)) #t)\n          ((= (first l) (thirty-first\
    \ sum)) #t)\n          ((= (first l) (thirty-second ", "  (cond ((null? l) #f)\n\
    \        ((equal? (first l) (first l)) #t)\n        (else (triples_sum_to_zero\
    \ (rest l)))))\n", "  (let loop ((lst l) (acc 0))\n    (cond ((null? lst)\n  \
    \         (if (= acc 0)\n               #f\n               (if (= acc 3)\n   \
    \                #t\n                   (loop (cdr lst) (+ acc 1)))))\n      \
    \    ((= 0 (car lst))\n           (loop (cdr lst) (+ acc 1)))\n          (else\n\
    \           (loop (cdr lst) (+ acc (car lst)))))))\n", "  (let loop ((l l) (acc\
    \ #t) (i 0))\n    (if (null? l)\n        acc\n        (loop (cdr l) (if (= (+\
    \ i 3) (+ (car l) acc)) #t #f)\n              (+ i 1)))))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(equal? (first l) 0) #t]\n    [else (triples_sum_to_zero (rest\
    \ l))]))\n", "  (cond [(null? l) #f]\n        [(= (length l) 3) #t]\n        [else\
    \ (= (apply + (map - l)) 0)]))\n", "  (let loop ((l l) (acc 0))\n    (cond ((null?\
    \ l) acc)\n          ((= (first l) 0)\n           (loop (rest l) (+ acc 1)))\n\
    \          (else\n           (loop (rest l) (+ acc (+ (first l) (second l) (third\
    \ l))))))))\n", "  (let loop ((lst l) (acc 0))\n    (cond ((null? lst)\n     \
    \      (if (= acc 3)\n               #t\n               (if (= acc 0)\n      \
    \             (= acc 1)\n                   (= acc 2)\n                   (= acc\
    \ 3))\n               (loop (cdr lst) (+ acc 1))))\n          ((= (first lst)\
    \ 0)\n           (loop (rest lst) (+ acc 1)))\n          (else\n           (loop\
    \ (rest lst) (+ acc (first lst)))))))\n", "  (let loop ((l l) (acc #t))\n    (cond\
    \ ((null? l) acc)\n          ((equal? (car l) (cadr l)) (loop (cdr l) (not acc)))\n\
    \          (else (loop (cdr l) (equal? (car l) (cadr l)))))))\n", "  (cond ((null?\
    \ l) #f)\n        ((equal? (first l) 0)\n         (equal? (second l) 0)\n    \
    \     (equal? (third l) 0))\n        (else (triples_sum_to_zero (rest l)))))\n",
  "  (let loop ((l l) (acc 0))\n    (if (null? l)\n        acc\n        (loop (cdr\
    \ l) (+ acc (car l)))))\n  (= acc 0))\n", "  (let ((sum (apply + l)))\n    (cond\
    \ ((= sum 0) #t)\n          ((= sum 1) #t)\n          ((= sum 2) #t)\n       \
    \   ((= sum 3) #f)\n          (else #f))))\n", "  (cond [(null? l) #f]\n     \
    \   [(equal? (first l) (first l)) #t]\n        [else (triples_sum_to_zero (rest\
    \ l))]))\n", "  (let loop ((l l) (acc 0))\n    (cond ((null? l) #f)\n        \
    \  ((equal? (first l) 0)\n           (equal? (second l) 0)\n           (equal?\
    \ (third l) 0))\n          ((equal? (first l) 0)\n           (equal? (second l)\
    \ 0)\n           (equal? (third l) (+ acc 1)))\n          ((equal? (first l) 0)\n\
    \           (equal? (second l) (+ acc 1))\n           (equal? (third l) (+ acc\
    \ 2)))\n          ((equal? (first l) (+ acc 1))\n           (equal? (second l)\
    \ 0)\n           (equal? (third l) (+ acc 2)))\n          ((equal? (first l) (+\
    \ acc 1))\n           (equal? (second l) (+ acc 2))\n           (equal? (third\
    \ l) 0))\n          (else\n           (loop (rest l)\n                 (+ acc\
    \ (+ (first l) (+ (second l) (+ (third l) 0)))))))\n  acc)\n", "  (let loop ((l\
    \ l) (acc #t) (i 0))\n    (cond ((null? l) acc)\n          ((= i (length l)) acc)\n\
    \          ((= i (modulo i 3) (length l)) (loop (cdr l) (not acc) (i + 1))\n \
    \         ((= 0 (modulo i 3) (length l)) (loop (cdr l) (not acc) (i + 1))\n  \
    \        ((= i (modulo i 3) (length l)) (loop (cdr l) (not acc) (i + 1))\n   \
    \       ((= 0 (modulo i 3) (length l)) (loop (cdr l) (not acc) (i + 1))\n    \
    \      ((= i (modulo i 3) (length l)) (loop (cdr l) (not acc) (i + 1))\n     \
    \     ((= 0 (modulo i 3) (length l)) (loop (cdr l) (not acc) (i + 1))\n      \
    \    ((= i (modulo i 3) (length l)) (loop (cdr l) (not acc) (i + 1))\n       \
    \   ((= 0 (modulo i 3) (length l)) (loop (cdr l) (not acc) (i + 1))\n        \
    \  ((= i (modulo i 3) (length l)) (loop (cdr l) (not acc) (i + 1))\n         \
    \ ((= 0 (modulo i 3) (length l)) (loop (cdr l) (not acc) (i + 1))\n          ((=\
    \ i (modulo i 3) (length l)) (loop (cdr l) (not acc) (i + 1))\n          ((= 0\
    \ (modulo i 3) (length l)) (loop (cdr l) (not acc) (i + 1))\n          ((= i (modulo\
    \ i 3) (length l)) (loop (cdr l) (not acc) (i + 1))\n          ((= 0 (modulo i\
    \ 3) (length l)) (loop (cdr l) (not acc) (i + 1))\n          ((= i (modulo i 3)\
    \ (length l)) (loop (cdr l) (not acc) (i + 1))\n          ((= 0 (modulo i 3) (length\
    \ l)) (loop (cdr l) (not acc) (i + 1))\n          ((= i (modulo i 3) (length l))\
    \ (loop (cdr l) (not acc) (i + 1))\n          ((= 0 (modulo i 3) (length l)) (loop\
    \ (cdr l) (not acc) (i + 1))\n          ((= i (modulo i 3) ", "  (let loop ((l\
    \ l) (sum 0))\n    (cond ((null? l) sum)\n          ((= (first l) (first sum))\
    \ #t)\n          ((= (first l) (second sum)) #t)\n          ((= (first l) (third\
    \ sum)) #t)\n          (else (loop (rest l) (+ sum (first l)))))))\n", "  (let\
    \ loop ((l l) (acc #t))\n    (cond ((null? l) acc)\n          ((equal? (first\
    \ l) (first l)) (loop (rest l) (not acc)))\n          ((equal? (first l) (first\
    \ l)) acc)\n          ((equal? (first l) (first l)) (loop (rest l) (not acc)))\n\
    \          (else (loop (rest l) (or (not acc) (equal? (first l) (first l))))))))\n",
  "  (let loop ((l l) (acc #t))\n    (cond ((null? l) acc)\n          ((= (first l)\
    \ 0)\n           (loop (rest l)\n                 (if (= (first l) 0)\n      \
    \               (set! acc (not acc))\n                     (loop (rest l)\n  \
    \                        (set! acc (not acc))))))\n          (else\n         \
    \  (loop (rest l)\n                 (set! acc (not acc)))))))\n", "  (cond\n \
    \   [(empty? l) #f]\n    [(equal? (first l) 0) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond [(null? l) #f]\n        [(= (first l) 0)\n       \
    \  (= (second l) 0)\n         (= (third l) 0)\n         #t]\n        [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (let loop ((l l) (acc #f))\n    (cond ((null? l) acc)\n\
    \          ((= 3 (car l)) (loop (cdr l) (not acc)))\n          (else (loop (cdr\
    \ l) (or (acc (car l)) (loop (cdr l) acc)))))))\n", "  (cond\n    [(empty? l)\
    \ #f]\n    [(equal? (first l) 0) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond ((null? l) #f)\n        ((equal? (first l) 0)\n         (equal? (second\
    \ l) 0)\n         (equal? (third l) 0))\n        (else (triples_sum_to_zero (rest\
    \ l)))))\n", "  (let loop ((l l) (acc #t) (i 0))\n    (cond\n      [(null? l)\
    \ #f]\n      [(= i (length l)) acc]\n      [(equal? (first l) 0) (loop (rest l)\
    \ #f (+ i 1))]\n      [(equal? (first l) 1) (loop (rest l) #t (+ i 1))]\n    \
    \  [else (loop (rest l) (equal? (first l) (+ i (first l))) (+ i 1))]\n    )))\n",
  "  (cond\n    [(empty? l) #f]\n    [(equal? (first l) 0) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (let loop ((l l) (acc #t) (i 0))\n    (cond ((null? l) acc)\n\
    \          ((eqv? (car l) (cadr l)) (loop (cdr l) (not acc) (i + 1))\n       \
    \   (else (loop (cdr l) (and acc (eqv? (car l) (cadr l))) (i + 1)))))\n  (not\
    \ acc)))\n", "  (let loop ((l l) (acc #t))\n    (cond ((null? l) acc)\n      \
    \    ((= (first l) (first l)) (loop (rest l) (not acc)))\n          ((= (first\
    \ l) (first l)) acc)\n          ((= (first l) (- (first l) (first l))) (loop (rest\
    \ l) (not acc)))\n          ((= (first l) (- (first l) (first l))) acc)\n    \
    \      (else (loop (rest l) (or (not acc) (loop (rest l) (not acc)))))))\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI see that this is an old post, but I thought I'd\
    \ point out that your solution doesn't work if there are two zeros in the list.\
    \ For example, `(triples_sum_to_zero '(1 2 3 0 0))` returns `#f` instead of `#t`.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the code by adding an\
    \ extra clause to the `cond` statement. Now it works as expected.\n<|/ c |>\n\
    <| a tags=racket,scheme |>\n<code>", "  (cond [(null? l) #f]\n        [(= (length\
    \ l) 3) #t]\n        [else (= (distinct (map + (rest l) (rest l))) #f)]))\n",
  "  (let ((sum (+ (first l) (second l) (third l))))\n    (if (= 3 sum)\n        #t\n\
    \        #f)))\n", "  (let loop ((l l) (acc #t))\n    (cond ((null? l) acc)\n\
    \          ((= (first l) (first l)) (loop (rest l) (not acc)))\n          ((=\
    \ (first l) (- (first l) (first l))) (loop (rest l) (not acc)))\n          ((=\
    \ (first l) (+ (first l) (first l))) (loop (rest l) (not acc)))\n          (else\
    \ (loop (rest l) (not (or (not acc) (loop (rest l) (not acc))))))))\n", "  (let\
    \ loop ((lst l) (acc 0))\n    (cond\n      [(null? lst) acc]\n      [(equal? (first\
    \ lst) (first lst)) (loop (rest lst) (+ acc 1))]\n      [else (loop (rest lst)\
    \ (+ acc 1))]\n      )))\n", "  (cond ((null? l) #f)\n        ((equal? (first\
    \ l) 0)\n         (equal? (second l) 0)\n         (equal? (third l) 0))\n    \
    \    (else (triples_sum_to_zero (rest l)))))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(equal? (first l) 0) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (let loop ((l l) (acc 0))\n    (cond ((null? l) acc)\n          ((= (first l)\
    \ 0) (loop (rest l) (+ acc 1)))\n          (else (loop (rest l) (+ acc (+ (first\
    \ l) (second l) (third l))))))))\n", "  (cond\n    [(empty? l) #f]\n    [(= (first\
    \ l) 0) #f]\n    [else (or (triples_sum_to_zero (rest l))\n               (triples_sum_to_zero\
    \ (rest l)))]))\n", "  (cond [(null? l) #f]\n        [(= (length l) 3) #t]\n \
    \       [(= (distinct (map - l)) 3) #t]\n        [else (triples_sum_to_zero (rest\
    \ l))]))\n", "  (let loop ((l l) (acc #t))\n    (cond ((null? l) #f)\n       \
    \   ((equal? (car l) (cadr l)) (loop (cdr l) (not acc)))\n          ((equal? (car\
    \ l) (caddr l)) (loop (cdr l) (not acc)))\n          (else (loop (cdr l) (or (not\
    \ acc) (cdr l)))))))\n", "  (let loop ((l l) (acc #t) (i 0))\n    (cond ((null?\
    \ l) acc)\n          ((= i 3) (set! acc (not acc)))\n          ((= i (+ i 1))\
    \ (loop (cdr l) (not acc) 0))\n          ((= i (+ i 2)) (loop (cdr l) (not acc)\
    \ 1))\n          ((= i (+ i 3)) (loop (cdr l) (not acc) 2))\n          (else (loop\
    \ (cdr l) (and acc (= (+ i 3) (+ i 1))) (+ i 3))))))\n", "  (let loop ((l l) (acc\
    \ #t))\n    (cond ((null? l) acc)\n          ((equal? (car l) (cadr l)) (loop\
    \ (cdr l) (not acc)))\n          (else (loop (cdr l) (equal? (car l) (cadr l)))))))\n",
  "  (cond\n    [(empty? l) #f]\n    [(equal? (first l) 0) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(equal? (first l) 0) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (let loop ((l l) (acc #t)\
    \ (i 0))\n    (cond ((null? l) acc)\n          ((= i 3) (set! acc (not acc)))\n\
    \          ((= i (+ 3 (car l)))\n           (loop (cdr l) (not acc) (+ i 1))\n\
    \          (else (loop (cdr l) (not acc) (+ i 1))))))\n", "  (let loop ((l l)\
    \ (acc 0))\n    (cond ((null? l) #f)\n          ((= (first l) 0)\n           (if\
    \ (= (first l) acc)\n               (loop (rest l) acc)\n               (loop\
    \ (rest l) acc)))\n          (else\n           (loop (rest l) (+ acc (first l)))))))\n",
  "  (let loop ((l l) (acc #t))\n    (cond ((null? l) acc)\n          ((= (first l)\
    \ (first l)) (loop (rest l) (not acc)))\n          ((= (first l) (first l)) acc)\n\
    \          ((= (first l) (- (first l) (first l))) (loop (rest l) (not acc)))\n\
    \          (else (loop (rest l) (or (not acc) (loop (rest l) (not acc))))))))\n",
  "  (cond\n    [(empty? l) #f]\n    [(equal? (first l) 0) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (let loop ((l l) (acc #t))\n    (cond ((null? l) acc)\n\
    \          ((= (first l) (first l)) (loop (rest l) (not acc)))\n          ((=\
    \ (first l) (first l)) acc)\n          ((= (first l) (first l)) (loop (rest l)\
    \ (not acc)))\n          (else (loop (rest l) (or (not acc) (loop (rest l) (not\
    \ acc)))))))\n", "  (let loop ((l l) (acc #t))\n    (cond ((null? l) acc)\n  \
    \        ((= (+ (car l) (car l)) 0)\n           (loop (cdr l) (not acc)))\n  \
    \        (else (loop (cdr l) (and acc (= (+ (car l) (car l)) 0))))))\n", "  (let\
    \ ((x (car l))\n        (y (cadr l))\n        (z (caddr l)))\n    (cond\n    \
    \  [(= x y) #t]\n      [(= x z) #f]\n      [(= y z) #f]\n      [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (let loop ((l l) (acc 0))\n    (cond ((null? l) #f)\n   \
    \       ((equal? (first l) 0)\n           (if (equal? (second l) 0)\n        \
    \       (if (equal? (third l) 0)\n                   (set! acc (+ acc 1))\n  \
    \                 (loop (rest l) acc))\n               (loop (rest l) acc))\n\
    \           (loop (rest l) acc))\n          (else (loop (rest l) acc))))))\n",
  "  (let loop ((l l) (sum 0))\n    (cond\n      [(empty? l) #f]\n      [(equal? (first\
    \ l) sum) #t]\n      [else (loop (rest l) (+ sum (first l)))]\n      )))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(equal? (first l) 0) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (let loop ((l l) (acc #t))\n    (cond ((null? l) acc)\n\
    \          ((eq? (car l) (cadr l)) (loop (cdr l) (not acc)))\n          ((eq?\
    \ (car l) (caddr l)) (loop (cdr l) (not acc)))\n          (else (loop (cdr l)\
    \ (or (not acc) (eq? (car l) (caddr l))))))))\n", "  (let loop ((l l) (acc 0))\n\
    \    (cond ((null? l) acc)\n          ((equal? (first l) (first acc)) (loop (rest\
    \ l) (+ acc (second l))))\n          (else (loop (rest l) (+ acc (first l)))))))\n",
  "  (cond ((null? l) #f)\n        ((equal? (first l) 0) #t)\n        (else (triples_sum_to_zero\
    \ (rest l)))))\n", "  (cond [(null? l) #f]\n        [(equal? (first l) (first\
    \ l)) #t]\n        [else (triples_sum_to_zero (rest l))]))\n", "  (let loop ((l\
    \ l) (acc #t) (i 0))\n    (cond ((null? l) acc)\n          ((= i (length l)) acc)\n\
    \          ((= i (- 3 (length l))) acc)\n          ((= i (- 3 (length l))) acc)\n\
    \          ((= i (- 3 (length l))) acc)\n          ((= i (- 3 (length l))) acc)\n\
    \          ((= i (- 3 (length l))) acc)\n          ((= i (- 3 (length l))) acc)\n\
    \          ((= i (- 3 (length l))) acc)\n          ((= i (- 3 (length l))) acc)\n\
    \          ((= i (- 3 (length l))) acc)\n          ((= i (- 3 (length l))) acc)\n\
    \          ((= i (- 3 (length l))) acc)\n          ((= i (- 3 (length l))) acc)\n\
    \          ((= i (- 3 (length l))) acc)\n          ((= i (- 3 (length l))) acc)\n\
    \          ((= i (- 3 (length l))) acc)\n          ((= i (- 3 (length l))) acc)\n\
    \          ((= i (- 3 (length l))) acc)\n          ((= i (- 3 (length l))) acc)\n\
    \          ((= i (- 3 (length l))) acc)\n          ((= i (- 3 (length l))) acc)\n\
    \          ((= i (- 3 (length l))) acc)\n          ((= i (- 3 (length l))) acc)\n\
    \          ((= i (- 3 (length l))) acc)\n          ((= i (- 3 (length l))) acc)\n\
    \          ((= i (- 3 (length l))) acc)\n          ((= i (- 3 (length l))) acc)\n\
    \          ((= i (- 3 (length l))) acc)\n          ((= i (- 3 (length l))) acc)\n\
    \          ((= i (- 3 (length l))) acc)\n          ((= i (- 3 (length l))) acc)\n\
    \          ((= i (- 3 (length l))) acc)\n          ((= i (- 3 (length l))) acc)\n\
    \          ((= i (- 3 (length l))) acc)\n          ((= i (- 3 (length l))) acc)\n\
    \          ((= i (- 3 (length l))) acc)\n          ((= i (- 3 (length l))) acc)\n\
    \          ((= i (- 3 (length l", "  (let loop ((l l) (acc #t) (i 0))\n    (cond\n\
    \      [(null? l) #f]\n      [(= i 3) (set! acc (not acc)) (set! i 0)]\n     \
    \ [(= i (car l)) (loop (cdr l) (not acc) (cdr l))]\n      [else (loop (cdr l)\
    \ (and acc (= i (car l))) (+ i 1))])))\n", "  (let ((sum (apply + l)))\n    (cond\n\
    \      [(= 3 sum) #t]\n      [else #f]\n      )))\n", "  (let loop ((l l) (acc\
    \ #t) (i 0))\n    (if (null? l)\n        acc\n        (loop (cdr l) (if (= (+\
    \ (car l) acc) 0)\n                         (set! acc (+ (car l) acc))\n     \
    \                    acc)\n              (+ i 1)))))\n", "  (let ((sum (apply\
    \ + l)))\n    (cond\n      [(= 3 sum) #t]\n      [else #f])))\n", "  (cond ((null?\
    \ l) #f)\n        ((equal? (first l) 0) #t)\n        (else (triples_sum_to_zero\
    \ (rest l)))))\n", "  (cond [(null? l) #f]\n        [(= (length l) 3) #t]\n  \
    \      [else (= (apply + l) 0)]))\n", "  (let loop ((l l) (acc #t))\n    (cond\
    \ ((null? l) acc)\n          ((= (first l) 0) (loop (rest l) (not acc)))\n   \
    \       ((= (first l) (+ (first l) (second l))) (loop (rest l) (not acc)))\n \
    \         (else (loop (rest l) (not (or (= (first l) (+ (first l) (second l)))\
    \ (= (first l) 0)))))))\n", "  (let ((sum (apply + l)))\n    (cond\n      [(=\
    \ sum 0) #t]\n      [else #f]\n      )))\n", "  (cond ((null? l) #f)\n       \
    \ ((equal? (first l) 0)\n         (equal? (second l) 0)\n         (equal? (third\
    \ l) 0))\n        (else (triples_sum_to_zero (rest l)))))\n", "  (cond [(null?\
    \ l) #f]\n        [(= (length l) 3) #t]\n        [else (= (apply + l) (apply +\
    \ l))]))\n", "  (let loop ((l l) (acc #f))\n    (cond ((null? l) acc)\n      \
    \    ((= (first l) (first l)) (loop (rest l) (not acc)))\n          ((= (first\
    \ l) (first l)) acc)\n          (else (loop (rest l) (or (acc (+ (first l) (second\
    \ l))) (+ (first l) (third l))))))))\n", "  (let loop ((l l) (acc #f))\n    (cond\
    \ ((null? l) acc)\n          ((= 3 (car l)) (loop (cdr l) (not acc)))\n      \
    \    ((= (car l) (cadr l)) (loop (cdr l) (not acc)))\n          (else (loop (cdr\
    \ l) (and acc (= (car l) (cadr l)))))))\n", "  (let loop ((l l) (acc #t) (i 0))\n\
    \    (cond\n      [(null? l) acc]\n      [(= i (length l)) acc]\n      [else (loop\
    \ (rest l) (not (= (+ (first l) (first acc)) 0)) (inc i))]\n    )))\n", "  (let\
    \ loop ((lst l) (acc 0))\n    (cond ((null? lst) acc)\n          ((= (first lst)\
    \ (first lst)) #t)\n          ((= (first lst) acc) #f)\n          (else (loop\
    \ (rest lst) (+ acc (first lst)))))\n    (loop (rest lst) acc)))\n", "  (let loop\
    \ ((l l) (acc 0))\n    (if (null? l)\n        acc\n        (loop (cdr l) (+ (car\
    \ l) acc)))))\n", "  (let loop ((lst lst)\n             (acc 0))\n    (cond\n\
    \      [(null? lst)\n       acc]\n      [(equal? (car lst) (cadr lst))\n     \
    \  (loop (cdr lst) (+ acc 1))]\n      [else\n       (loop (cdr lst) (+ acc 1))]\n\
    \      )))\n", "  (let loop ((l l) (acc #f))\n    (cond ((null? l) acc)\n    \
    \      ((= (first l) (first l)) (loop (rest l) (not acc)))\n          ((= (first\
    \ l) (first l)) acc)\n          (else (loop (rest l) (and acc (= (first l) (first\
    \ l))))))))\n", "  (cond\n    [(empty? l) #f]\n    [(equal? (first l) 0) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (let loop ((l l) (acc #t))\n\
    \    (cond ((null? l) acc)\n          ((= (first l) (first l)) (loop (rest l)\
    \ (not acc)))\n          ((= (first l) (first l)) acc)\n          ((= (first l)\
    \ (- (first l) (first l))) (loop (rest l) (not acc)))\n          (else (loop (rest\
    \ l) (or (not acc) (loop (rest l) (not acc)))))))\n", "  (let ((sum (apply + (map\
    \ + (map - l '(0 1 2))))))\n    (cond ((= 3 sum) 't)\n          ((= 0 sum) 'f)\n\
    \          (else (error \"triples_sum_to_zero: bad input\")))))\n", "  (let loop\
    \ ((l l) (acc #t) (i 0))\n    (cond ((null? l) acc)\n          ((= i 3) (set!\
    \ acc (not acc)))\n          ((= i (- 3 (length l))) (set! acc (not acc)))\n \
    \         (else (loop (cdr l) (not acc) (+ i 1))))))\n", "  (let loop ((l l) (sum\
    \ 0))\n    (cond ((null? l) sum)\n          ((= (first l) (first sum)) #t)\n \
    \         ((= (first l) (second sum)) #t)\n          ((= (first l) (third sum))\
    \ #t)\n          (else (loop (rest l) (+ sum (first l)))))))\n", "  (let ((x (car\
    \ l))\n        (y (cadr l))\n        (z (caddr l)))\n    (cond\n      [(= x y)\
    \ z]\n      [(= x z) (= y z)]\n      [(= y z) x]\n      [(= x y) x]\n      [(=\
    \ x z) (= y z) (= z 0)]\n      [(= y z) (= z 0)]\n      [(= z 0) (= x y) (= y\
    \ z) (= x z)]\n      [(= z 0) (= x y) (= y z) (= x z) (= y 0)]\n      [(= z 0)\
    \ (= x y) (= y z) (= x z) (= y 0) (= z 0)]\n      [(= z 0) (= x y) (= y z) (=\
    \ x z) (= y 0) (= z 0)]\n      [(= z 0) (= x y) (= y z) (= x z) (= y 0) (= z 0)]\n\
    \      [(= z 0) (= x y) (= y z) (= x z) (= y 0) (= z 0)]\n      [(= z 0) (= x\
    \ y) (= y z) (= x z) (= y 0) (= z 0)]\n      [(= z 0) (= x y) (= y z) (= x z)\
    \ (= y 0) (= z 0)]\n      [(= z 0) (= x y) (= y z) (= x z) (= y 0) (= z 0)]\n\
    \      [(= z 0) (= x y) (= y z) (= x z) (= y 0) (= z 0)]\n      [(= z 0) (= x\
    \ y) (= y z) (= x z) (= y 0) (= z 0)]\n      [(= z 0) (= x y) (= y z) (= x z)\
    \ (= y 0) (= z 0)]\n      [(= z 0) (= x y) (= y z) (= x z) (= y 0) (= z 0)]\n\
    \      [(= z 0) (= x y) (= y z) (= x z) (= y 0) (= z 0)]\n      [(= z 0) (= x\
    \ y) (= y z) (= x z) (= y 0) (= z 0)]\n      [(= z 0) (= x y) (= y z) (= x z)\
    \ (= y 0) (= z 0)]\n      [(", "  (cond ((null? l) #f)\n        ((= (length l)\
    \ 3) #t)\n        (else (let ((x (car l))\n                      (y (+ (car l)\
    \ (cadr l)))\n                      (z (+ (caddr l) (caddr l))))\n           \
    \   (triples_sum_to_zero (cdr l))\n              (if (= x y)\n               \
    \   (triples_sum_to_zero (cdr l))\n                  #f))))))\n", "  (let loop\
    \ ((l l) (acc #t) (i 0))\n    (if (null? l)\n        acc\n        (loop (cdr l)\
    \ (if (= (+ (car l) acc) 0)\n                         (set! acc (+ (car l) acc))\
    \ acc)\n               (+ i 1)))))\n", "  (let loop ((l l) (sum 0))\n    (cond\
    \ ((null? l) #f)\n          ((= (first l) sum) #t)\n          (else (loop (rest\
    \ l) (+ sum (first l)))\n                (loop (rest l) sum))))))\n", "  (cond\
    \ [(null? l) #f]\n        [(equal? (first l) 0) #t]\n        [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (let loop ((l l) (acc #t))\n    (cond ((null? l) acc)\n\
    \          ((= (first l) (first l)) (loop (rest l) (not acc)))\n          ((=\
    \ (first l) (first l)) acc)\n          ((= (first l) (first l)) acc)\n       \
    \   (else (loop (rest l) (or (not acc) (= (first l) (first l))))))))\n", "  (let\
    \ ((sum (apply + l)))\n    (and (= 3 sum)\n         (= (length l) 3)\n       \
    \  (= (distinct l) 3))))\n", "  (cond ((null? l) #f)\n        ((equal? (first\
    \ l) 0)\n         (equal? (second l) 0)\n         (equal? (third l) 0))\n    \
    \    (else (triples_sum_to_zero (rest l)))))\n", "  (let loop ((l l) (acc #t)\
    \ (i 0))\n    (cond ((null? l) acc)\n          ((eqv? (car l) (cadr l)) (loop\
    \ (cdr l) (not acc) (i + 1))\n           (loop (cdr l) (and acc (eqv? (car l)\
    \ (cadr l))) (i + 1))\n          (else (loop (cdr l) (and acc (eqv? (car l) (cadr\
    \ l))) (i + 1)))))\n  (not acc))\n", "  (let loop ((l l) (acc #t))\n    (cond\
    \ ((null? l) acc)\n          ((= (first l) (first l)) (loop (rest l) (not acc)))\n\
    \          ((= (first l) (first l)) acc)\n          (else (loop (rest l) (or (acc)\
    \ (= (first l) (first l))))))))\n", "  (let loop ((l l) (acc #t) (i 0))\n    (if\
    \ (null? l)\n        acc\n        (loop (cdr l) (if (= (+ (car l) acc) 0)\n  \
    \                       (set! acc (+ (car l) acc))\n                         acc)\n\
    \              (+ i 1)))))\n", "  (cond [(null? l) #f]\n        [(= (length l)\
    \ 3) #t]\n        [else (= (distinct (map + (rest l) (rest l))) #f)]))\n", " \
    \ (let loop ((lst l) (acc 0))\n    (cond ((null? lst) acc)\n          ((= (first\
    \ lst) (first lst)) #t)\n          ((= (first lst) acc) acc)\n          ((= (first\
    \ lst) (loop (rest lst) (+ acc 1))) #t)\n          (else (loop (rest lst) (+ acc\
    \ 1))))))\n", "  (let ((sum (apply + l)))\n    (and (= 3 sum)\n         (= (length\
    \ l) 3)\n         (= (distinct l) 3))))\n", "  (cond [(null? l) #f]\n        [(equal?\
    \ (first l) 0)\n         (equal? (second l) 0)\n         (equal? (third l) 0)]\n\
    \        [else (triples_sum_to_zero (rest l))]))\n", "  (cond ((null? l) #f)\n\
    \        ((equal? (first l) 0) #t)\n        (else (triples_sum_to_zero (rest l)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
