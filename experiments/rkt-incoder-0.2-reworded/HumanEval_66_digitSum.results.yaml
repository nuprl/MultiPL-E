language: rkt
name: HumanEval_66_digitSum
results:
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->int (car s)) (digitSum (cdr s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_uytg6sk.rkt:22:10: char->int: unbound identifier\n  in: char->int\n\
    \  location...:\n   /tmp/tmp_uytg6sk.rkt:22:10\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digitSum s)\n    (define (digitSum s)\n      (define (digitSum s)\n\
    \        (define (digitSum s)\n          (define (digitSum s)\n            (define\
    \ (digitSum s)\n              (define (digitSum s)\n                (define (digitSum\
    \ s)\n                  (define (digitSum s)\n                    (define (digitSum\
    \ s)\n                      (define (digitSum s)\n                        (define\
    \ (digitSum s)\n                          (define (digitSum s)\n             \
    \               (define (digitSum s)\n                              (define (digitSum\
    \ s)\n                                (define (digitSum s)\n                 \
    \                 (define (digitSum s)\n                                    (define\
    \ (digitSum s)\n                                      (define (digitSum s)\n \
    \                                       (define (digitSum s)\n               \
    \                           (define (digitSum s)\n                           \
    \                 (define (digitSum s)\n                                     \
    \         (define (digitSum s)\n                                             \
    \   (define (digitSum s)\n                                                  (define\
    \ (digitSum s)\n                                                    (define (digitSum\
    \ s)\n                                                      (define (digitSum\
    \ s)\n                                                        (define (digitSum\
    \ s)\n                                                          (define (digitSum\
    \ s)\n                                                            (define (digitSum\
    \ s)\n                                                              (define (digitSum\
    \ s)\n                                                                (define\
    \ (digitSum s)\n                                                             \
    \     (define (digitSum s)\n                                                 \
    \                   (define (digitSum s)\n                                   \
    \                                   (define (digitSum s)\n                   \
    \                                                     (define (digitSum s)\n \
    \                                                                         (define\
    \ (digitSum s)\n                                                             \
    \               (define (digitSum s)\n                                       \
    \                                       (define (digitSum s)\n               \
    \                                                                 (define (digitSum\
    \ s)\n                                                                       \
    \           (define (digitSum s)\n                                           \
    \                                         (define (digitSum s)\n             \
    \                                                                         (define\
    \ (digitSum s)\n                                                             \
    \                           (define (digitSum s)\n                           \
    \                                                               (define (digitSum\
    \ s)\n                                                                       \
    \                     (define (digitSum s)\n                                 \
    \                                                             (define (digitSum\
    \ s)\n                                                                       \
    \                         (define (digitSum s)\n                             \
    \                                                                     (define\
    \ (digitSum s)\n                                                             \
    \                                       (define (digitSum s)\n               \
    \                                                                            \
    \           (define (digitSum s)\n                                           \
    \                                                             (define (digitSum\
    \ s)\n                                                                       \
    \                                   (define (digitSum s)\n                   \
    \                                                                            \
    \             (define (digitSum s)\n                                         \
    \                                                                     (define\
    \ (digitSum s)\n                                                             \
    \                                                   (define (digitSum \n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp8kegoetu.rkt:75:120: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 76\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660039625
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (first s)) (digitSum (rest\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digit-sum s)\n    (define (digit-sum-helper s)\n      (if (empty?\
    \ s)\n          0\n          (+ (char->integer (char->string (car s)) 16) \n \
    \            (digit-sum-helper (cdr s)))))\n    (digit-sum-helper s))\n  (digit-sum\
    \ s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpejkoz0e4.rkt:24:29: char->string: unbound identifier\n  in: char->string\n\
    \  location...:\n   /tmp/tmpejkoz0e4.rkt:24:29\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digitSum s)\n    (define (digitSum s)\n      (define (digitSum s)\n\
    \        (define (digitSum s)\n          (define (digitSum s)\n            (define\
    \ (digitSum s)\n              (define (digitSum s)\n                (define (digitSum\
    \ s)\n                  (define (digitSum s)\n                    (define (digitSum\
    \ s)\n                      (define (digitSum s)\n                        (define\
    \ (digitSum s)\n                          (define (digitSum s)\n             \
    \               (define (digitSum s)\n                              (define (digitSum\
    \ s)\n                                (define (digitSum s)\n                 \
    \                 (define (digitSum s)\n                                    (define\
    \ (digitSum s)\n                                      (define (digitSum s)\n \
    \                                       (define (digitSum s)\n               \
    \                           (define (digitSum s)\n                           \
    \                 (define (digitSum s)\n                                     \
    \         (define (digitSum s)\n                                             \
    \   (define (digitSum s)\n                                                  (define\
    \ (digitSum s)\n                                                    (define (digitSum\
    \ s)\n                                                      (define (digitSum\
    \ s)\n                                                        (define (digitSum\
    \ s)\n                                                          (define (digitSum\
    \ s)\n                                                            (define (digitSum\
    \ s)\n                                                              (define (digitSum\
    \ s)\n                                                                (define\
    \ (digitSum s)\n                                                             \
    \     (define (digitSum s)\n                                                 \
    \                   (define (digitSum s)\n                                   \
    \                                   (define (digitSum s)\n                   \
    \                                                     (define (digitSum s)\n \
    \                                                                         (define\
    \ (digitSum s)\n                                                             \
    \               (define (digitSum s)\n                                       \
    \                                       (define (digitSum s)\n               \
    \                                                                 (define (digitSum\
    \ s)\n                                                                       \
    \           (define (digitSum s)\n                                           \
    \                                         (define (digitSum s)\n             \
    \                                                                         (define\
    \ (digitSum s)\n                                                             \
    \                           (define (digitSum s)\n                           \
    \                                                               (define (digitSum\
    \ s)\n                                                                       \
    \                     (define (digitSum s)\n                                 \
    \                                                             (define (digitSum\
    \ s)\n                                                                       \
    \                         (define (digitSum s)\n                             \
    \                                                                     (define\
    \ (digitSum s)\n                                                             \
    \                                       (define (digitSum s)\n               \
    \                                                                            \
    \           (define (digitSum s)\n                                           \
    \                                                             (define (digitSum\
    \ s)\n                                                                       \
    \                                   (define (digitSum s)\n                   \
    \                                                                            \
    \             (define (digitSum s)\n                                         \
    \                                                                     (define\
    \ (digitSum s)\n                                                             \
    \                                                   (define (digitSum \n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp8kegoetu.rkt:75:120: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 76\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660039625
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (helper s)\n    (if (empty? s)\n        0\n        (+ (char->integer\
    \ (car s))\n           (helper (cdr s)))))\n  (helper s))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx542kwku.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx542kwku.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx542kwku.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx542kwku.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx542kwku.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx542kwku.rkt:37:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx542kwku.rkt:38:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx542kwku.rkt:39:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digit-sum s)\n    (define (digit-sum-helper s acc)\n      (if (empty?\
    \ s)\n          acc\n          (digit-sum-helper (rest s) (+ (char->integer c)\
    \ acc))))\n    (digit-sum-helper s 0))\n  (digit-sum s))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppf9rde0y.rkt:24:55: c: unbound identifier\n  in: c\n  location...:\n\
    \   /tmp/tmppf9rde0y.rkt:24:55\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (helper s)\n    (if (empty? s)\n        0\n        (+ (char->integer\
    \ (first s)) (helper (rest s)))))\n  (helper s))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (helper s acc)\n    (if (empty? s)\n        acc\n        (helper (rest\
    \ s) (+ (char->int (car s)) acc))))\n  (helper s 0))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp888826n3.rkt:23:29: char->int: unbound identifier\n  in: char->int\n\
    \  location...:\n   /tmp/tmp888826n3.rkt:23:29\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (first s)) (digitSum (rest\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (first s)) (digitSum (rest\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (car s)) (digitSum (cdr s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (helper s)\n    (if (empty? s)\n        0\n        (+ (char->integer\
    \ (car s)) helper (cdr s))))\n  (helper s))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvyd97bk6.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvyd97bk6.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvyd97bk6.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvyd97bk6.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvyd97bk6.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvyd97bk6.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvyd97bk6.rkt:37:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvyd97bk6.rkt:38:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (first s)) (digitSum (rest\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (sum s)\n    (if (empty? s)\n        0\n        (+ (char->int (first\
    \ s)) (sum (rest s)))))\n  (sum s))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6zeg9eym.rkt:23:12: char->int: unbound identifier\n  in: char->int\n\
    \  location...:\n   /tmp/tmp6zeg9eym.rkt:23:12\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digitSum s)\n    (define (digitSum s)\n      (define (digitSum s)\n\
    \        (define (digitSum s)\n          (define (digitSum s)\n            (define\
    \ (digitSum s)\n              (define (digitSum s)\n                (define (digitSum\
    \ s)\n                  (define (digitSum s)\n                    (define (digitSum\
    \ s)\n                      (define (digitSum s)\n                        (define\
    \ (digitSum s)\n                          (define (digitSum s)\n             \
    \               (define (digitSum s)\n                              (define (digitSum\
    \ s)\n                                (define (digitSum s)\n                 \
    \                 (define (digitSum s)\n                                    (define\
    \ (digitSum s)\n                                      (define (digitSum s)\n \
    \                                       (define (digitSum s)\n               \
    \                           (define (digitSum s)\n                           \
    \                 (define (digitSum s)\n                                     \
    \         (define (digitSum s)\n                                             \
    \   (define (digitSum s)\n                                                  (define\
    \ (digitSum s)\n                                                    (define (digitSum\
    \ s)\n                                                      (define (digitSum\
    \ s)\n                                                        (define (digitSum\
    \ s)\n                                                          (define (digitSum\
    \ s)\n                                                            (define (digitSum\
    \ s)\n                                                              (define (digitSum\
    \ s)\n                                                                (define\
    \ (digitSum s)\n                                                             \
    \     (define (digitSum s)\n                                                 \
    \                   (define (digitSum s)\n                                   \
    \                                   (define (digitSum s)\n                   \
    \                                                     (define (digitSum s)\n \
    \                                                                         (define\
    \ (digitSum s)\n                                                             \
    \               (define (digitSum s)\n                                       \
    \                                       (define (digitSum s)\n               \
    \                                                                 (define (digitSum\
    \ s)\n                                                                       \
    \           (define (digitSum s)\n                                           \
    \                                         (define (digitSum s)\n             \
    \                                                                         (define\
    \ (digitSum s)\n                                                             \
    \                           (define (digitSum s)\n                           \
    \                                                               (define (digitSum\
    \ s)\n                                                                       \
    \                     (define (digitSum s)\n                                 \
    \                                                             (define (digitSum\
    \ s)\n                                                                       \
    \                         (define (digitSum s)\n                             \
    \                                                                     (define\
    \ (digitSum s)\n                                                             \
    \                                       (define (digitSum s)\n               \
    \                                                                            \
    \           (define (digitSum s)\n                                           \
    \                                                             (define (digitSum\
    \ s)\n                                                                       \
    \                                   (define (digitSum s)\n                   \
    \                                                                            \
    \             (define (digitSum s)\n                                         \
    \                                                                     (define\
    \ (digitSum s)\n                                                             \
    \                                                   (define (digitSum \n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp8kegoetu.rkt:75:120: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 76\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660039625
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (first s)) (digitSum (rest\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digit-sum s)\n    (define (digit-sum s)\n      (define (digit-sum\
    \ s)\n        (define (digit-sum s)\n          (define (digit-sum s)\n       \
    \     (define (digit-sum s)\n              (define (digit-sum s)\n           \
    \     (define (digit-sum s)\n                  (define (digit-sum s)\n       \
    \             (define (digit-sum s)\n                      (define (digit-sum\
    \ s)\n                        (define (digit-sum s)\n                        \
    \  (define (digit-sum s)\n                            (define (digit-sum s)\n\
    \                              (define (digit-sum s)\n                       \
    \         (define (digit-sum s)\n                                  (define (digit-sum\
    \ s)\n                                    (define (digit-sum s)\n            \
    \                          (define (digit-sum s)\n                           \
    \             (define (digit-sum s)\n                                        \
    \  (define (digit-sum s)\n                                            (define\
    \ (digit-sum s)\n                                              (define (digit-sum\
    \ s)\n                                                (define (digit-sum s)\n\
    \                                                  (define (digit-sum s)\n   \
    \                                                 (define (digit-sum s)\n    \
    \                                                  (define (digit-sum s)\n   \
    \                                                     (define (digit-sum s)\n\
    \                                                          (define (digit-sum\
    \ s)\n                                                            (define (digit-sum\
    \ s)\n                                                              (define (digit-sum\
    \ s)\n                                                                (define\
    \ (digit-sum s)\n                                                            \
    \      (define (digit-sum s)\n                                               \
    \                     (define (digit-sum s)\n                                \
    \                                      (define (digit-sum s)\n               \
    \                                                         (define (digit-sum s)\n\
    \                                                                          (define\
    \ (digit-sum s)\n                                                            \
    \                (define (digit-sum s)\n                                     \
    \                                         (define (digit-sum s)\n            \
    \                                                                    (define (digit-sum\
    \ s)\n                                                                       \
    \           (define (digit-sum s)\n                                          \
    \                                          (define (digit-sum s)\n           \
    \                                                                           (define\
    \ (digit-sum s)\n                                                            \
    \                            (define (digit-sum s)\n                         \
    \                                                                 (define (digit-sum\
    \ s)\n                                                                       \
    \                     (define (digit-sum s)\n                                \
    \                                                              (define (digit-sum\
    \ s)\n                                                                       \
    \                         (define (digit-sum s)\n                            \
    \                                                                      (define\
    \ (digit-sum s)\n                                                            \
    \                                        (define (digit-sum s)\n             \
    \                                                                            \
    \             (define (digit-sum s)\n                                        \
    \                                                                (define (digit-sum\
    \ s)\n                                                                       \
    \                                   (define (digit-sum s)\n                  \
    \                                                                            \
    \              (define (digit-sum s)\n                                       \
    \                                                                       (define\
    \ (digit-sum s)\n                                                            \
    \                                                    (define (digit-sum \n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpmss5rstb.rkt:75:120: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 76\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660039625
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digit-sum s)\n    (if (empty? s)\n        0\n        (+ (char->integer\
    \ (car s)) (digit-sum (cdr s)))))\n  (digit-sum s))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7zn9tfc3.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7zn9tfc3.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7zn9tfc3.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7zn9tfc3.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7zn9tfc3.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7zn9tfc3.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7zn9tfc3.rkt:37:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7zn9tfc3.rkt:38:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (first s)) (digitSum (rest\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->int (first s)) (digitSum (rest s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp309l6pto.rkt:22:10: char->int: unbound identifier\n  in: char->int\n\
    \  location...:\n   /tmp/tmp309l6pto.rkt:22:10\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (helper s)\n    (if (empty? s)\n        0\n        (+ (char->integer\
    \ (first s)) (helper (rest s)))))\n  (helper s))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->int (first s)) (digitSum (rest s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp309l6pto.rkt:22:10: char->int: unbound identifier\n  in: char->int\n\
    \  location...:\n   /tmp/tmp309l6pto.rkt:22:10\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (first s)) (digitSum (rest\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (sum s)\n    (if (null? s)\n        0\n        (+ (char->integer (car\
    \ s)) (sum (cdr s)))))\n  (sum s))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuozyf0c.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuozyf0c.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuozyf0c.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuozyf0c.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuozyf0c.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuozyf0c.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuozyf0c.rkt:37:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuozyf0c.rkt:38:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (sum s)\n    (if (empty? s)\n        0\n        (+ (char->integer (first\
    \ s)) (sum (rest s)))))\n  (sum s))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (sum s)\n    (if (empty? s)\n        0\n        (+ (char->integer (first\
    \ s)) (sum (rest s)))))\n  (sum s))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (sum s)\n    (if (null? s)\n        0\n        (+ (char->integer (char->string\
    \ (car s)) 16)\n           (sum (cdr s)))))\n  (sum s))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfzvy5o1p.rkt:23:27: char->string: unbound identifier\n  in: char->string\n\
    \  location...:\n   /tmp/tmpfzvy5o1p.rkt:23:27\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->int (first s)) (digitSum (rest s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp309l6pto.rkt:22:10: char->int: unbound identifier\n  in: char->int\n\
    \  location...:\n   /tmp/tmp309l6pto.rkt:22:10\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (car s)) (digitSum (cdr s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digit-sum s)\n    (if (empty? s)\n        0\n        (+ (char->integer\
    \ (first s)) (digit-sum (rest s)))))\n  (digit-sum s))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digitSum s)\n    (define (digitSum s)\n      (define (digitSum s)\n\
    \        (define (digitSum s)\n          (define (digitSum s)\n            (define\
    \ (digitSum s)\n              (define (digitSum s)\n                (define (digitSum\
    \ s)\n                  (define (digitSum s)\n                    (define (digitSum\
    \ s)\n                      (define (digitSum s)\n                        (define\
    \ (digitSum s)\n                          (define (digitSum s)\n             \
    \               (define (digitSum s)\n                              (define (digitSum\
    \ s)\n                                (define (digitSum s)\n                 \
    \                 (define (digitSum s)\n                                    (define\
    \ (digitSum s)\n                                      (define (digitSum s)\n \
    \                                       (define (digitSum s)\n               \
    \                           (define (digitSum s)\n                           \
    \                 (define (digitSum s)\n                                     \
    \         (define (digitSum s)\n                                             \
    \   (define (digitSum s)\n                                                  (define\
    \ (digitSum s)\n                                                    (define (digitSum\
    \ s)\n                                                      (define (digitSum\
    \ s)\n                                                        (define (digitSum\
    \ s)\n                                                          (define (digitSum\
    \ s)\n                                                            (define (digitSum\
    \ s)\n                                                              (define (digitSum\
    \ s)\n                                                                (define\
    \ (digitSum s)\n                                                             \
    \     (define (digitSum s)\n                                                 \
    \                   (define (digitSum s)\n                                   \
    \                                   (define (digitSum s)\n                   \
    \                                                     (define (digitSum s)\n \
    \                                                                         (define\
    \ (digitSum s)\n                                                             \
    \               (define (digitSum s)\n                                       \
    \                                       (define (digitSum s)\n               \
    \                                                                 (define (digitSum\
    \ s)\n                                                                       \
    \           (define (digitSum s)\n                                           \
    \                                         (define (digitSum s)\n             \
    \                                                                         (define\
    \ (digitSum s)\n                                                             \
    \                           (define (digitSum s)\n                           \
    \                                                               (define (digitSum\
    \ s)\n                                                                       \
    \                     (define (digitSum s)\n                                 \
    \                                                             (define (digitSum\
    \ s)\n                                                                       \
    \                         (define (digitSum s)\n                             \
    \                                                                     (define\
    \ (digitSum s)\n                                                             \
    \                                       (define (digitSum s)\n               \
    \                                                                            \
    \           (define (digitSum s)\n                                           \
    \                                                             (define (digitSum\
    \ s)\n                                                                       \
    \                                   (define (digitSum s)\n                   \
    \                                                                            \
    \             (define (digitSum s)\n                                         \
    \                                                                     (define\
    \ (digitSum s)\n                                                             \
    \                                                   (define (digitSum \n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp8kegoetu.rkt:75:120: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 76\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660039625
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (first s)) (digitSum (rest\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (first s)) (digitSum (rest\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (first s)) (digitSum (rest\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digit-sum s)\n    (if (empty? s)\n        0\n        (+ (char->integer\
    \ (first s)) (digit-sum (rest s)))))\n  (digit-sum s))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (sum s)\n    (if (empty? s)\n        0\n        (+ (char->int (car\
    \ s)) (sum (cdr s)))))\n  (sum s))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdotg90u8.rkt:23:12: char->int: unbound identifier\n  in: char->int\n\
    \  location...:\n   /tmp/tmpdotg90u8.rkt:23:12\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digitSum s)\n    (define (digitSum s)\n      (define (digitSum s)\n\
    \        (define (digitSum s)\n          (define (digitSum s)\n            (define\
    \ (digitSum s)\n              (define (digitSum s)\n                (define (digitSum\
    \ s)\n                  (define (digitSum s)\n                    (define (digitSum\
    \ s)\n                      (define (digitSum s)\n                        (define\
    \ (digitSum s)\n                          (define (digitSum s)\n             \
    \               (define (digitSum s)\n                              (define (digitSum\
    \ s)\n                                (define (digitSum s)\n                 \
    \                 (define (digitSum s)\n                                    (define\
    \ (digitSum s)\n                                      (define (digitSum s)\n \
    \                                       (define (digitSum s)\n               \
    \                           (define (digitSum s)\n                           \
    \                 (define (digitSum s)\n                                     \
    \         (define (digitSum s)\n                                             \
    \   (define (digitSum s)\n                                                  (define\
    \ (digitSum s)\n                                                    (define (digitSum\
    \ s)\n                                                      (define (digitSum\
    \ s)\n                                                        (define (digitSum\
    \ s)\n                                                          (define (digitSum\
    \ s)\n                                                            (define (digitSum\
    \ s)\n                                                              (define (digitSum\
    \ s)\n                                                                (define\
    \ (digitSum s)\n                                                             \
    \     (define (digitSum s)\n                                                 \
    \                   (define (digitSum s)\n                                   \
    \                                   (define (digitSum s)\n                   \
    \                                                     (define (digitSum s)\n \
    \                                                                         (define\
    \ (digitSum s)\n                                                             \
    \               (define (digitSum s)\n                                       \
    \                                       (define (digitSum s)\n               \
    \                                                                 (define (digitSum\
    \ s)\n                                                                       \
    \           (define (digitSum s)\n                                           \
    \                                         (define (digitSum s)\n             \
    \                                                                         (define\
    \ (digitSum s)\n                                                             \
    \                           (define (digitSum s)\n                           \
    \                                                               (define (digitSum\
    \ s)\n                                                                       \
    \                     (define (digitSum s)\n                                 \
    \                                                             (define (digitSum\
    \ s)\n                                                                       \
    \                         (define (digitSum s)\n                             \
    \                                                                     (define\
    \ (digitSum s)\n                                                             \
    \                                       (define (digitSum s)\n               \
    \                                                                            \
    \           (define (digitSum s)\n                                           \
    \                                                             (define (digitSum\
    \ s)\n                                                                       \
    \                                   (define (digitSum s)\n                   \
    \                                                                            \
    \             (define (digitSum s)\n                                         \
    \                                                                     (define\
    \ (digitSum s)\n                                                             \
    \                                                   (define (digitSum \n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp8kegoetu.rkt:75:120: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 76\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660039625
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (sum s)\n    (if (null? s)\n        0\n        (+ (char->integer (car\
    \ s)) (sum (cdr s)))))\n  (sum s))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuozyf0c.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuozyf0c.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuozyf0c.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuozyf0c.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuozyf0c.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuozyf0c.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuozyf0c.rkt:37:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuozyf0c.rkt:38:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digit-sum s)\n    (if (empty? s)\n        0\n        (+ (char->integer\
    \ (first s)) (digit-sum (rest s)))))\n  (digit-sum s))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digit-sum s)\n    (if (empty? s)\n        0\n        (+ (char->integer\
    \ (first s)) (digit-sum (rest s)))))\n  (digit-sum s))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (helper s)\n    (if (empty? s)\n        0\n        (+ (char->integer\
    \ (first s)) (helper (rest s)))))\n  (helper s))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (first s)) (digitSum (rest\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digit-sum s)\n    (if (empty? s)\n        0\n        (+ (char->integer\
    \ (first s)) (digit-sum (rest s)))))\n  (digit-sum s))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (car s)) (digitSum (cdr s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digit-sum s)\n    (define (digit-sum-helper s sum)\n      (if (char?\
    \ s)\n          (digit-sum-helper (cdr s) (+ sum (char->int (char s))))\n    \
    \      sum))\n    (digit-sum-helper s 0))\n  (digit-sum s))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppoamenlh.rkt:23:44: char->int: unbound identifier\n  in: char->int\n\
    \  location...:\n   /tmp/tmppoamenlh.rkt:23:44\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (first s)) (digitSum (rest\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digitSum s)\n    (define (digitSum s)\n      (define (digitSum s)\n\
    \        (define (digitSum s)\n          (define (digitSum s)\n            (define\
    \ (digitSum s)\n              (define (digitSum s)\n                (define (digitSum\
    \ s)\n                  (define (digitSum s)\n                    (define (digitSum\
    \ s)\n                      (define (digitSum s)\n                        (define\
    \ (digitSum s)\n                          (define (digitSum s)\n             \
    \               (define (digitSum s)\n                              (define (digitSum\
    \ s)\n                                (define (digitSum s)\n                 \
    \                 (define (digitSum s)\n                                    (define\
    \ (digitSum s)\n                                      (define (digitSum s)\n \
    \                                       (define (digitSum s)\n               \
    \                           (define (digitSum s)\n                           \
    \                 (define (digitSum s)\n                                     \
    \         (define (digitSum s)\n                                             \
    \   (define (digitSum s)\n                                                  (define\
    \ (digitSum s)\n                                                    (define (digitSum\
    \ s)\n                                                      (define (digitSum\
    \ s)\n                                                        (define (digitSum\
    \ s)\n                                                          (define (digitSum\
    \ s)\n                                                            (define (digitSum\
    \ s)\n                                                              (define (digitSum\
    \ s)\n                                                                (define\
    \ (digitSum s)\n                                                             \
    \     (define (digitSum s)\n                                                 \
    \                   (define (digitSum s)\n                                   \
    \                                   (define (digitSum s)\n                   \
    \                                                     (define (digitSum s)\n \
    \                                                                         (define\
    \ (digitSum s)\n                                                             \
    \               (define (digitSum s)\n                                       \
    \                                       (define (digitSum s)\n               \
    \                                                                 (define (digitSum\
    \ s)\n                                                                       \
    \           (define (digitSum s)\n                                           \
    \                                         (define (digitSum s)\n             \
    \                                                                         (define\
    \ (digitSum s)\n                                                             \
    \                           (define (digitSum s)\n                           \
    \                                                               (define (digitSum\
    \ s)\n                                                                       \
    \                     (define (digitSum s)\n                                 \
    \                                                             (define (digitSum\
    \ s)\n                                                                       \
    \                         (define (digitSum s)\n                             \
    \                                                                     (define\
    \ (digitSum s)\n                                                             \
    \                                       (define (digitSum s)\n               \
    \                                                                            \
    \           (define (digitSum s)\n                                           \
    \                                                             (define (digitSum\
    \ s)\n                                                                       \
    \                                   (define (digitSum s)\n                   \
    \                                                                            \
    \             (define (digitSum s)\n                                         \
    \                                                                     (define\
    \ (digitSum s)\n                                                             \
    \                                                   (define (digitSum \n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp8kegoetu.rkt:75:120: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 76\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660039625
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (helper s)\n    (if (empty? s)\n        0\n        (+ (char->integer\
    \ (first s)) (helper (rest s)))))\n  (helper s))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (first s)) (digitSum (rest\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (helper s)\n    (if (empty? s)\n        0\n        (+ (char->integer\
    \ (first s)) (helper (rest s)))))\n  (helper s))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (car s)) (digitSum (cdr s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (first s)) (digitSum (rest\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (sum s)\n    (if (empty? s)\n        0\n        (+ (char->int (car\
    \ s)) (sum (cdr s)))))\n  (sum s))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdotg90u8.rkt:23:12: char->int: unbound identifier\n  in: char->int\n\
    \  location...:\n   /tmp/tmpdotg90u8.rkt:23:12\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (sum s)\n    (if (empty? s)\n        0\n        (+ (char->integer (first\
    \ s)) (sum (rest s)))))\n  (sum s))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (helper s)\n    (if (empty? s)\n        0\n        (+ (char->integer\
    \ (first s)) (helper (rest s)))))\n  (helper s))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (first s)) (digitSum (rest\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (helper s)\n    (cond\n      [(empty? s) 0]\n      [(char-upper? (first\
    \ s)) (+ (first s) (helper (rest s)))]\n      [else (helper (rest s))]))\n  (helper\
    \ s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp16l7xl95.rkt:23:8: char-upper?: unbound identifier\n  in: char-upper?\n\
    \  location...:\n   /tmp/tmp16l7xl95.rkt:23:8\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digit-sum s)\n    (if (empty? s)\n        0\n        (+ (char->integer\
    \ (first s)) (digit-sum (rest s)))))\n  (digit-sum s))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (sum s)\n    (if (empty? s)\n        0\n        (+ (char->integer (first\
    \ s)) (sum (rest s)))))\n  (sum s))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digit-sum s)\n    (if (empty? s)\n        0\n        (+ (char->integer\
    \ (first s)) (digit-sum (rest s)))))\n  (digit-sum s))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digit-sum s)\n    (if (empty? s)\n        0\n        (+ (char->integer\
    \ (first s)) (digit-sum (rest s)))))\n  (digit-sum s))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (sum s)\n    (if (empty? s)\n        0\n        (+ (char->int (car\
    \ s)) (sum (cdr s)))))\n  (sum s))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdotg90u8.rkt:23:12: char->int: unbound identifier\n  in: char->int\n\
    \  location...:\n   /tmp/tmpdotg90u8.rkt:23:12\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (sum s)\n    (if (empty? s)\n        0\n        (+ (char->integer (first\
    \ s)) (sum (rest s)))))\n  (sum s))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digit-sum s)\n    (define (digit-sum-helper s acc)\n      (if (empty?\
    \ s)\n          acc\n          (digit-sum-helper (rest s) (+ (char->integer c)\
    \ acc))))\n    (digit-sum-helper s 0))\n  (digit-sum s))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppf9rde0y.rkt:24:55: c: unbound identifier\n  in: c\n  location...:\n\
    \   /tmp/tmppf9rde0y.rkt:24:55\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (helper s)\n    (if (empty? s)\n        0\n        (+ (char->integer\
    \ (first s)) (helper (rest s)))))\n  (helper s))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->int (first s)) (digitSum (rest s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp309l6pto.rkt:22:10: char->int: unbound identifier\n  in: char->int\n\
    \  location...:\n   /tmp/tmp309l6pto.rkt:22:10\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (sum s)\n    (if (empty? s)\n        0\n        (+ (char->integer (first\
    \ s)) (sum (rest s)))))\n  (sum s))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digitSum s)\n    (define (digitSum s)\n      (define (digitSum s)\n\
    \        (define (digitSum s)\n          (define (digitSum s)\n            (define\
    \ (digitSum s)\n              (define (digitSum s)\n                (define (digitSum\
    \ s)\n                  (define (digitSum s)\n                    (define (digitSum\
    \ s)\n                      (define (digitSum s)\n                        (define\
    \ (digitSum s)\n                          (define (digitSum s)\n             \
    \               (define (digitSum s)\n                              (define (digitSum\
    \ s)\n                                (define (digitSum s)\n                 \
    \                 (define (digitSum s)\n                                    (define\
    \ (digitSum s)\n                                      (define (digitSum s)\n \
    \                                       (define (digitSum s)\n               \
    \                           (define (digitSum s)\n                           \
    \                 (define (digitSum s)\n                                     \
    \         (define (digitSum s)\n                                             \
    \   (define (digitSum s)\n                                                  (define\
    \ (digitSum s)\n                                                    (define (digitSum\
    \ s)\n                                                      (define (digitSum\
    \ s)\n                                                        (define (digitSum\
    \ s)\n                                                          (define (digitSum\
    \ s)\n                                                            (define (digitSum\
    \ s)\n                                                              (define (digitSum\
    \ s)\n                                                                (define\
    \ (digitSum s)\n                                                             \
    \     (define (digitSum s)\n                                                 \
    \                   (define (digitSum s)\n                                   \
    \                                   (define (digitSum s)\n                   \
    \                                                     (define (digitSum s)\n \
    \                                                                         (define\
    \ (digitSum s)\n                                                             \
    \               (define (digitSum s)\n                                       \
    \                                       (define (digitSum s)\n               \
    \                                                                 (define (digitSum\
    \ s)\n                                                                       \
    \           (define (digitSum s)\n                                           \
    \                                         (define (digitSum s)\n             \
    \                                                                         (define\
    \ (digitSum s)\n                                                             \
    \                           (define (digitSum s)\n                           \
    \                                                               (define (digitSum\
    \ s)\n                                                                       \
    \                     (define (digitSum s)\n                                 \
    \                                                             (define (digitSum\
    \ s)\n                                                                       \
    \                         (define (digitSum s)\n                             \
    \                                                                     (define\
    \ (digitSum s)\n                                                             \
    \                                       (define (digitSum s)\n               \
    \                                                                            \
    \           (define (digitSum s)\n                                           \
    \                                                             (define (digitSum\
    \ s)\n                                                                       \
    \                                   (define (digitSum s)\n                   \
    \                                                                            \
    \             (define (digitSum s)\n                                         \
    \                                                                     (define\
    \ (digitSum s)\n                                                             \
    \                                                   (define (digitSum \n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp8kegoetu.rkt:75:120: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 76\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660039625
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (first s)) (digitSum (rest\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (helper s acc)\n    (if (empty? s)\n        acc\n        (helper (rest\
    \ s) (+ (char->int (car s)) (char->int (cadr s)))))))\n  (helper s 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpbkbia0fp.rkt:24:14: read-syntax: unexpected `)`\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660039625
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (first s)) (digitSum (rest\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->int (car s)) (digitSum (cdr s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_uytg6sk.rkt:22:10: char->int: unbound identifier\n  in: char->int\n\
    \  location...:\n   /tmp/tmp_uytg6sk.rkt:22:10\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digit-sum s)\n    (define (digit-sum-helper s)\n      (if (empty?\
    \ s)\n          0\n          (+ (char->integer (char->string (car s))) \n    \
    \         (digit-sum-helper (cdr s)))))\n    (digit-sum-helper s))\n  (digit-sum\
    \ s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpogchuc40.rkt:24:29: char->string: unbound identifier\n  in: char->string\n\
    \  location...:\n   /tmp/tmpogchuc40.rkt:24:29\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digit-sum s)\n    (if (empty? s)\n        0\n        (+ (char->integer\
    \ (first s)) (digit-sum (rest s)))))\n  (digit-sum s))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digit-sum s)\n    (if (empty? s)\n        0\n        (+ (char->integer\
    \ (first s)) (digit-sum (rest s)))))\n  (digit-sum s))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (first s)) (digitSum (rest\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (sum s)\n    (if (empty? s)\n        0\n        (+ (char->integer (first\
    \ s)) (sum (rest s)))))\n  (sum s))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpitt41wf6.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpitt41wf6.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (sum s)\n    (cond\n      [(empty? s) 0]\n      [(char-upper? (first\
    \ s)) (+ (first s) (sum (rest s)))]\n      [else (sum (rest s))]))\n  (sum s))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpulawy_ep.rkt:23:8: char-upper?: unbound identifier\n  in: char-upper?\n\
    \  location...:\n   /tmp/tmpulawy_ep.rkt:23:8\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (sum s)\n    (cond\n      [(empty? s) 0]\n      [(char-upper? (first\
    \ s)) (+ (first s) (sum (rest s)))]\n      [else (sum (rest s))]))\n  (sum s))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpulawy_ep.rkt:23:8: char-upper?: unbound identifier\n  in: char-upper?\n\
    \  location...:\n   /tmp/tmpulawy_ep.rkt:23:8\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (first s)) (digitSum (rest\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (sum s)\n    (if (null? s)\n        0\n        (+ (char->integer (car\
    \ s)) (sum (cdr s)))))\n  (sum s))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuozyf0c.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuozyf0c.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuozyf0c.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuozyf0c.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuozyf0c.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuozyf0c.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuozyf0c.rkt:37:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuozyf0c.rkt:38:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (first s)) (digitSum (rest\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (first s)) (digitSum (rest\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char-code (first s)) (digitSum (rest s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmput5n8bqd.rkt:22:10: char-code: unbound identifier\n  in: char-code\n\
    \  location...:\n   /tmp/tmput5n8bqd.rkt:22:10\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digit-sum s)\n    (if (empty? s)\n        0\n        (+ (char->integer\
    \ (first s)) (digit-sum (rest s)))))\n  (digit-sum s))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digit-sum s)\n    (if (empty? s)\n        0\n        (+ (char->int\
    \ (car s)) (digit-sum (cdr s)))))\n  (digit-sum s))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3zwp9kre.rkt:23:12: char->int: unbound identifier\n  in: char->int\n\
    \  location...:\n   /tmp/tmp3zwp9kre.rkt:23:12\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (helper s)\n    (if (empty? s)\n        0\n        (+ (char->integer\
    \ (first s)) (helper (rest s)))))\n  (helper s))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuaba7vba.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuaba7vba.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (first s)) (digitSum (rest\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char-code (first s)) (digitSum (rest s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmput5n8bqd.rkt:22:10: char-code: unbound identifier\n  in: char-code\n\
    \  location...:\n   /tmp/tmput5n8bqd.rkt:22:10\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (first s)) (digitSum (rest\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digitSum s)\n    (define (digitSum s)\n      (define (digitSum s)\n\
    \        (define (digitSum s)\n          (define (digitSum s)\n            (define\
    \ (digitSum s)\n              (define (digitSum s)\n                (define (digitSum\
    \ s)\n                  (define (digitSum s)\n                    (define (digitSum\
    \ s)\n                      (define (digitSum s)\n                        (define\
    \ (digitSum s)\n                          (define (digitSum s)\n             \
    \               (define (digitSum s)\n                              (define (digitSum\
    \ s)\n                                (define (digitSum s)\n                 \
    \                 (define (digitSum s)\n                                    (define\
    \ (digitSum s)\n                                      (define (digitSum s)\n \
    \                                       (define (digitSum s)\n               \
    \                           (define (digitSum s)\n                           \
    \                 (define (digitSum s)\n                                     \
    \         (define (digitSum s)\n                                             \
    \   (define (digitSum s)\n                                                  (define\
    \ (digitSum s)\n                                                    (define (digitSum\
    \ s)\n                                                      (define (digitSum\
    \ s)\n                                                        (define (digitSum\
    \ s)\n                                                          (define (digitSum\
    \ s)\n                                                            (define (digitSum\
    \ s)\n                                                              (define (digitSum\
    \ s)\n                                                                (define\
    \ (digitSum s)\n                                                             \
    \     (define (digitSum s)\n                                                 \
    \                   (define (digitSum s)\n                                   \
    \                                   (define (digitSum s)\n                   \
    \                                                     (define (digitSum s)\n \
    \                                                                         (define\
    \ (digitSum s)\n                                                             \
    \               (define (digitSum s)\n                                       \
    \                                       (define (digitSum s)\n               \
    \                                                                 (define (digitSum\
    \ s)\n                                                                       \
    \           (define (digitSum s)\n                                           \
    \                                         (define (digitSum s)\n             \
    \                                                                         (define\
    \ (digitSum s)\n                                                             \
    \                           (define (digitSum s)\n                           \
    \                                                               (define (digitSum\
    \ s)\n                                                                       \
    \                     (define (digitSum s)\n                                 \
    \                                                             (define (digitSum\
    \ s)\n                                                                       \
    \                         (define (digitSum s)\n                             \
    \                                                                     (define\
    \ (digitSum s)\n                                                             \
    \                                       (define (digitSum s)\n               \
    \                                                                            \
    \           (define (digitSum s)\n                                           \
    \                                                             (define (digitSum\
    \ s)\n                                                                       \
    \                                   (define (digitSum s)\n                   \
    \                                                                            \
    \             (define (digitSum s)\n                                         \
    \                                                                     (define\
    \ (digitSum s)\n                                                             \
    \                                                   (define (digitSum \n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp8kegoetu.rkt:75:120: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 76\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660039625
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (digit-sum s)\n    (if (empty? s)\n        0\n        (+ (char->integer\
    \ (first s)) (digit-sum (rest s)))))\n  (digit-sum s))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_obl8h9t.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_obl8h9t.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (first s)) (digitSum (rest\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi9c72v2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi9c72v2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (char->integer (car s)) (digitSum (cdr s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra5194qh.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqm_40sf2.rkt:22:6: digit?: unbound identifier\n  in: digit?\n \
    \ location...:\n   /tmp/tmpqm_40sf2.rkt:22:6\n"
  stdout: ''
  timestamp: 1660039626
