name: HumanEval_24_largest_divisor
language: rkt
prompt: "#lang racket\n\n;; For a given number n, find the largest number that divides\
  \ n evenly, smaller than n\n;; >>> (largest_divisor 15)\n;; 5\n(define (largest_divisor\
  \ n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
  \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
  \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
  \ 49) 7)\n))\n\n(test-humaneval)"
completions: ["  (cond [(= n 1) n]\n        [(even? n) (* n (largest_divisor (- n\
    \ 1)))]\n        [else (largest_divisor (- n 1))]))\n", "  (cond [(= n 1) n]\n\
    \        [(even? n) (* n (largest_divisor (- n 1)))]\n        [else (largest_divisor\
    \ (- n 1))]))\n", "  (let loop ((n n) (max 0))\n    (cond ((= n 0) max)\n    \
    \      ((even? n) (loop (/ n 2) (max n)))\n          (else (loop (/ n 2) max))))",
  "  (cond [(= n 1) n]\n        [(even? n) (* n largest_divisor (largest_divisor n))]\n\
    \        [else (largest_divisor n-1)]))\n", "  (cond [(= n 1) n]\n        [(even?\
    \ n) (largest_divisor (- n 1))]\n        [else (+ 1 (largest_divisor (- n 1))))))\n",
  "  (let loop ((n n) (max 0))\n    (if (= n 0)\n        max\n        (loop (quotient\
    \ n 2)\n              (if (even? n)\n                  (if (> max n)\n       \
    \               max\n                      (loop (quotient n 2)\n            \
    \                max))\n                  (loop (quotient n 2)\n             \
    \           max))))))\n", "  (define (helper n divisor)\n    (cond ((= n 0) divisor)\n\
    \          ((even? n) (helper (- n 1) divisor))\n          (else (helper (- n\
    \ 1) (+ divisor 1)))))\n  (helper n 1))\n", "  (define (helper n divisor)\n  \
    \  (if (= n 0)\n        divisor\n        (helper (- n 1) (+ divisor n))))\n  (helper\
    \ n 1))\n", "  (cond [(= n 1) n]\n        [(even? n) (largest_divisor (- n 1))]\n\
    \        [else (+ 1 (largest_divisor (- n 1))))))\n", "  (cond [(= n 0) 0]\n \
    \       [(even? n) (/ n 2)]\n        [else (+ 1 (largest_divisor (- n 1)))]))\n",
  "  (let loop ((n n) (max 0))\n    (if (= n 0)\n        max\n        (loop (quotient\
    \ n 2)\n              (if (even? n)\n                  (if (< max n)\n       \
    \               max\n                      (loop (quotient n 2)\n            \
    \                (+ max 1))))))))\n", "  (let loop ((n n) (max 0))\n    (cond\
    \ ((= n 0) max)\n          ((even? n) (loop (/ n 2) max))\n          (else (loop\
    \ (/ n 2) (max n)))))\n</code>\n<|/ a dscore=2 |>\n<| a tags=racket,scheme |>\n\
    <code>", "  (cond [(= n 0) 0]\n        [(even? n) (max (largest_divisor (- n 1))\
    \ n)]\n        [else (max (largest_divisor (- n 1)) n)]))\n", "  (let loop ((n\
    \ n) (max 0))\n    (if (= n 0)\n        max\n        (loop (quotient n 2)\n  \
    \            (if (even? n)\n                  (loop (quotient n 2)\n         \
    \               (+ max n))\n                  max))))))\n", "  (define (helper\
    \ n count)\n    (if (= count 0)\n        n\n        (helper (quotient n count)\
    \ (sub1 count))))\n  (helper n n))\n", "  (cond [(= n 0) 0]\n        [(even? n)\
    \ (* n largest_divisor(sub1 n))])\n))\n", "  (let ((max-divisor (- n 1)))\n  \
    \  (cond ((= n 0) 0)\n          ((even? n) (/ n 2))\n          ((even? (+ max-divisor\
    \ 1)) max-divisor)\n          (else (largest_divisor (- n 1))))))\n", "  (cond\
    \ [(= n 1) n]\n        [(even? n) (* n (largest_divisor (- n 1)))]\n        [else\
    \ (largest_divisor (- n 1))]))\n", "  (cond [(= n 1) n]\n        [(even? n) (largest_divisor\
    \ (- n 1))]\n        [else (+ 1 (largest_divisor (- n 1)))]))\n", "  (let loop\
    \ ((n n) (max 0))\n    (cond ((= n 0) max)\n          ((even? n) (loop (/ n 2)\
    \ max))\n          (else (loop (/ n 2) (max n))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
