language: rkt
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n        [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvx6yushc.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond\n    [(empty? values) '()]\n    [(number? values) values]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcauz_3yl.rkt:19:4

    actual:     #<void>

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcauz_3yl.rkt:20:4

    actual:     #<void>

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x y)\n            (and (number? x) (number? y))\n\
    \            (not (and (symbol? x) (symbol? y))))\n          values))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqwtj7mpo.rkt:19:4\n\
    \nfilter: contract violation\n  expected: (any/c . -> . any/c)\n  given: #<procedure:...tmp/tmpqwtj7mpo.rkt:9:10>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqwtj7mpo.rkt:20:4\n\nfilter: contract violation\n  expected:\
    \ (any/c . -> . any/c)\n  given: #<procedure:...tmp/tmpqwtj7mpo.rkt:9:10>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqwtj7mpo.rkt:21:4\n\
    \nfilter: contract violation\n  expected: (any/c . -> . any/c)\n  given: #<procedure:...tmp/tmpqwtj7mpo.rkt:9:10>\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x)))\n         values))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6pi6t8b4.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6pi6t8b4.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpky8zsb_y.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x y)\n            (and (number? x)\n           \
    \      (number? y)))\n          values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps3w8ch7t.rkt:19:4\n\
    \nfilter: contract violation\n  expected: (any/c . -> . any/c)\n  given: #<procedure:...tmp/tmps3w8ch7t.rkt:9:10>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmps3w8ch7t.rkt:20:4\n\nfilter: contract violation\n  expected:\
    \ (any/c . -> . any/c)\n  given: #<procedure:...tmp/tmps3w8ch7t.rkt:9:10>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps3w8ch7t.rkt:21:4\n\
    \nfilter: contract violation\n  expected: (any/c . -> . any/c)\n  given: #<procedure:...tmp/tmps3w8ch7t.rkt:9:10>\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [(symbol? values) (list values)]\n        [else (filter_integers (cdr\
    \ values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate filter_integers))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list\
    \ 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3\
    \ 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqtxsr2rk.rkt:20:4

    actual:     ''()

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqtxsr2rk.rkt:21:4

    actual:     ''()

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpky8zsb_y.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (let ([integers (filter (lambda (x) (number? x))\n              \
    \             (values '()))])\n    (if (null? integers)\n        (values '())\n\
    \        (append integers (filter (lambda (x) (not (number? x))) integers)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzvuvf3c0.rkt:20:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: '()\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpzvuvf3c0.rkt:21:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: '(4 #hash() () 23.2 9 \"adasd\")\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzvuvf3c0.rkt:22:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: '(3 \"c\" 3 3 \"a\" \"b\")\n--------------------\n"
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 1
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (let ([integers (filter (lambda (x) (number? x))\n              \
    \             (values rkt/values))])\n    (if (null? integers)\n        values\n\
    \        (cons (first integers) (filter_integers (rest integers))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpb7swt4vb.rkt:10:35: rkt/values: unbound identifier\n  in: rkt/values\n\
    \  location...:\n   /tmp/tmpb7swt4vb.rkt:10:35\n"
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6pi6t8b4.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6pi6t8b4.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6pi6t8b4.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6pi6t8b4.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond\n    [(empty? values) '()]\n    [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n    [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplyromqim.rkt:20:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpky8zsb_y.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (v) (and (number? v) (integer? v)))\n         values))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpky8zsb_y.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (let ([integers (filter (lambda (x) (number? x))\n              \
    \             (map number? values))])\n    (if (null? integers)\n        values\n\
    \        (cons (first integers)\n               (filter_integers (rest integers))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnh5xgw6c.rkt:22:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnh5xgw6c.rkt:23:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (let ([integers (filter (lambda (x) (number? x))\n              \
    \             (values '()))])\n    (if (null? integers)\n        (values '())\n\
    \        (cons (first integers) (filter_integers (rest integers))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3c36yiez.rkt:20:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: '()\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp3c36yiez.rkt:21:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: '(4 #hash() () 23.2 9 \"adasd\")\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3c36yiez.rkt:22:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: '(3 \"c\" 3 3 \"a\" \"b\")\n--------------------\n"
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond\n    [(empty? values) '()]\n    [(number? values) values]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcauz_3yl.rkt:19:4

    actual:     #<void>

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcauz_3yl.rkt:20:4

    actual:     #<void>

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n        [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvx6yushc.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (append (filter_integers (first values))\n                    \
    \  (filter_integers (rest values)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5a_u8ld8.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5a_u8ld8.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpky8zsb_y.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpky8zsb_y.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (append (filter_integers (first values))\n                    \
    \  (filter_integers (rest values)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5a_u8ld8.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5a_u8ld8.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond\n    [(empty? values) '()]\n    [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n    [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplyromqim.rkt:20:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (v) (and (number? v) (integer? v)))\n         values))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x)))\n         values))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (append (filter_integers (first values))\n                    \
    \  (filter_integers (rest values)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5a_u8ld8.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5a_u8ld8.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039528
- exit_code: 1
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond\n    ((null? values) values)\n    ((number? values) values)\n\
    \    ((not (pair? values)) (filter_integers values))\n    ((not (list? values))\
    \ (filter_integers values))\n    ((not (symbol? values)) (filter_integers values))\n\
    \    ((not (boolean? values)) (filter_integers values))\n    ((not (vector? values))\
    \ (filter_integers values))\n    ((not (hash? values)) (filter_integers values))\n\
    \    ((not (set? values)) (filter_integers values))\n    ((not (procedure? values))\
    \ (filter_integers values))\n    ((not (function? values)) (filter_integers values))\n\
    \    ((not (symbol? values)) (filter_integers values))\n    ((not (number? values))\
    \ (filter_integers values))\n    ((not (boolean? values)) (filter_integers values))\n\
    \    ((not (vector? values)) (filter_integers values))\n    ((not (hash? values))\
    \ (filter_integers values))\n    ((not (set? values)) (filter_integers values))\n\
    \    ((not (procedure? values)) (filter_integers values))\n    ((not (function?\
    \ values)) (filter_integers values))\n    ((not (symbol? values)) (filter_integers\
    \ values))\n    ((not (number? values)) (filter_integers values))\n    ((not (boolean?\
    \ values)) (filter_integers values))\n    ((not (vector? values)) (filter_integers\
    \ values))\n    ((not (hash? values)) (filter_integers values))\n    ((not (set?\
    \ values)) (filter_integers values))\n    ((not (procedure? values)) (filter_integers\
    \ values))\n    ((not (function? values)) (filter_integers values))\n    ((not\
    \ (symbol? values)) (filter_integers values))\n    ((not (number? values)) (filter_integers\
    \ values))\n    ((not (boolean? values)) (filter_integers values))\n    ((not\
    \ (vector? values)) (filter_integers values))\n    ((not (hash? values)) (filter_integers\
    \ values))\n    ((not (set? values)) (filter_integers values))\n    ((not (procedure?\
    \ values)) (filter_integers values))\n    ((not (function? values)) (filter_integers\
    \ values))\n    ((not (symbol? values)) (filter_integers values))\n    ((not (number?\
    \ values)) (filter_integers values))\n    ((not (boolean? values)) (filter_integers\
    \ values))\n    ((not (vector? values)) (filter_integers values))\n    ((not (hash?\
    \ values)) (filter_integers \n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"\
    )) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp1owob92f.rkt:49:26: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 50\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660039527
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (item)\n            (and (number? item)\n       \
    \          (not (list? item))))\n          values))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list\
    \ ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\"\
    \ 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp09nhkfo4.rkt:20:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (let ([integers (filter (lambda (x) (number? x))\n              \
    \             (values '()))])\n    (if (null? integers)\n        (values '())\n\
    \        (cons (car integers) (filter_integers (cdr integers))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp39p7nkc7.rkt:20:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: '()\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp39p7nkc7.rkt:21:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: '(4 #hash() () 23.2 9 \"adasd\")\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp39p7nkc7.rkt:22:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: '(3 \"c\" 3 3 \"a\" \"b\")\n--------------------\n"
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond\n    [(empty? values) '()]\n    [(number? values) values]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcauz_3yl.rkt:19:4

    actual:     #<void>

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcauz_3yl.rkt:20:4

    actual:     #<void>

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpky8zsb_y.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [(list? values) (filter_integers (cdr values))]\n        [else (cons (car\
    \ values) (filter_integers (cdr values)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list\
    \ ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\"\
    \ 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj72_dz3n.rkt:20:4

    actual:     ''()

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj72_dz3n.rkt:21:4

    actual:     ''()

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 1
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (let ([integers (map integer? values)]\n        [integers (filter\
    \ integers? values)])\n    (cond [(empty? integers) '()]\n          [else (cons\
    \ (first integers) (filter_integers integers))])))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list\
    \ ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\"\
    \ 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpq8p2quwn.rkt:10:9: let: duplicate identifier\n  at: integers\n\
    \  in: (let ((integers (map integer? values)) (integers (filter integers? values)))\
    \ (cond ((empty? integers) (quote ())) (else (cons (first integers) (filter_integers\
    \ integers)))))\n  location...:\n   /tmp/tmpq8p2quwn.rkt:10:9\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/racket/private/qq-and-or.rkt:50:20:\
    \ go\n"
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [(symbol? values) (list values)]\n        [else (filter_integers (cdr\
    \ values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate filter_integers))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list\
    \ 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3\
    \ 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqtxsr2rk.rkt:20:4

    actual:     ''()

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqtxsr2rk.rkt:21:4

    actual:     ''()

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (append (filter_integers (first values))\n                    \
    \  (filter_integers (rest values)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5a_u8ld8.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5a_u8ld8.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (val) (and (number? val) (integer? val))) values))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (cons (car values)\
    \ (filter_integers (cdr values)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpru8fuw6w.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpru8fuw6w.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039529
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 1
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x y)\n            (and (number? x) (number? y))\n\
    \            (not (and (list? x) (list? y)))\n            (not (and (symbol? x)\
    \ (symbol? y)))\n            (not (and (boolean? x) (boolean? y)))\n         \
    \   (not (and (symbol? (car x)) (symbol? (car y))))\n            (not (and (boolean?\
    \ (car x)) (boolean? (car y))))\n            (not (and (list? (car x)) (list?\
    \ (car y))))\n            (not (and (symbol? (cadr x)) (symbol? (cadr y))))\n\
    \            (not (and (boolean? (cadr x)) (boolean? (cadr y))))\n           \
    \ (not (and (list? (cadr x)) (list? (cadr y))))\n            (not (and (symbol?\
    \ (caddr x)) (symbol? (caddr y))))\n            (not (and (boolean? (caddr x))\
    \ (boolean? (caddr y))))\n            (not (and (list? (caddr x)) (list? (caddr\
    \ y))))\n            (not (and (symbol? (cadddr x)) (symbol? (cadddr y))))\n \
    \           (not (and (boolean? (cadddr x)) (boolean? (cadddr y))))\n        \
    \    (not (and (list? (cadddr x)) (list? (cadddr y))))\n            (not (and\
    \ (symbol? (caddrr x)) (symbol? (caddrr y))))\n            (not (and (boolean?\
    \ (caddrr x)) (boolean? (caddrr y))))\n            (not (and (list? (caddrr x))\
    \ (list? (caddrr y))))\n            (not (and (symbol? (caddrdr x)) (symbol? (caddrdr\
    \ y))))\n            (not (and (boolean? (caddrdr x)) (boolean? (caddrdr y))))\n\
    \            (not (and (list? (caddrdr x)) (list? (caddrdr y))))\n           \
    \ (not (and (symbol? (caddr x)) (symbol? (caddr y))))\n            (not (and (boolean?\
    \ (caddr x)) (boolean? (caddr y))))\n            (not (and (list? (caddr x)) (list?\
    \ (caddr y))))\n            (not (and (symbol? (cadddr x)) (symbol? (cadddr y))))\n\
    \            (not (and (boolean? (cadddr x)) (\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list\
    \ ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\"\
    \ 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpyn38fkcb.rkt:36:44: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 37\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n        [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvx6yushc.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpky8zsb_y.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (let ([integers (filter (lambda (x) (number? x))\n              \
    \             (map number? values))])\n    (if (null? integers)\n        values\n\
    \        (cons (first integers) (filter_integers (rest integers))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3muh0d_x.rkt:21:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3muh0d_x.rkt:22:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039529
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n        [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvx6yushc.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) x)) values))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list\
    \ ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\"\
    \ 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdx6pa9tb.rkt:17:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039529
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond\n    [(empty? values) '()]\n    [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n    [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplyromqim.rkt:20:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (v) (and (number? v) (integer? v)))\n         values))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) x)) values))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list\
    \ ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\"\
    \ 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdx6pa9tb.rkt:17:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039529
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6pi6t8b4.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6pi6t8b4.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6pi6t8b4.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6pi6t8b4.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpky8zsb_y.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpky8zsb_y.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (v) (and (number? v) (integer? v)))\n         values))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [(symbol? values) '()]\n        [(list? values) (filter_integers (cdr\
    \ values))]\n        [else (cons (car values) (filter_integers (cdr values)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplcbb9gg1.rkt:21:4

    actual:     ''()

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplcbb9gg1.rkt:22:4

    actual:     ''()

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039529
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n        [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvx6yushc.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (v) (and (number? v) (integer? v))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039529
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (v) (and (number? v) (integer? v))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039529
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond\n    [(empty? values) '()]\n    [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n    [else (filter_integers (cdr\
    \ values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate filter_integers))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list\
    \ 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3\
    \ 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_r22j1t4.rkt:20:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039529
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond\n    [(empty? values) '()]\n    [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n    [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplyromqim.rkt:20:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpky8zsb_y.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (let ([integers (filter (lambda (x) (number? x))\n              \
    \             (values '()))])\n    (if (null? integers)\n        values\n    \
    \    (cons (first integers) (filter_integers (rest integers))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnlk0xnqo.rkt:20:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: '()\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpnlk0xnqo.rkt:21:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: '(4 #hash() () 23.2 9 \"adasd\")\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnlk0xnqo.rkt:22:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: '(3 \"c\" 3 3 \"a\" \"b\")\n--------------------\n"
  stdout: ''
  timestamp: 1660039529
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) (list values)]\n\
    \        [else (append (filter_integers (first values))\n                    \
    \  (filter_integers (rest values)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6cb8vim2.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6cb8vim2.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039529
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond\n    [(empty? values) '()]\n    [(number? values) values]\n\
    \    [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp46e9q5rg.rkt:20:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp46e9q5rg.rkt:21:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039529
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpky8zsb_y.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond\n    [(empty? values) '()]\n    [(number? values) values]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcauz_3yl.rkt:19:4

    actual:     #<void>

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcauz_3yl.rkt:20:4

    actual:     #<void>

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (val) (and (number? val) (integer? val)))\n     \
    \    values))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate filter_integers))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list\
    \ 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3\
    \ 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039529
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n        [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvx6yushc.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpky8zsb_y.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n        [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvx6yushc.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond\n    [(empty? values) '()]\n    [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n    [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplyromqim.rkt:20:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (append (filter_integers (first values))\n                    \
    \  (filter_integers (rest values)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5a_u8ld8.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5a_u8ld8.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpky8zsb_y.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (let ([integers (map integer? values)])\n    (if (null? integers)\n\
    \        values\n        (cons (first integers) (filter_integers (rest integers))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9sl7yyrj.rkt:20:4

    actual:     ''(#t #f #f #f #f #f)

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9sl7yyrj.rkt:21:4

    actual:     ''(#t #f #f #f #f #f)

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039529
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (let ([integers (map integer? values)])\n    (cond [(empty? integers)\
    \ values]\n          [else (cons (first integers) (filter_integers (rest integers)))])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiyd65wwk.rkt:19:4

    actual:     ''(#t #f #f #f #f #f)

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiyd65wwk.rkt:20:4

    actual:     ''(#t #f #f #f #f #f)

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039529
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (let ([integers (filter (lambda (x) (number? x))\n              \
    \             (values '()))])\n    (if (null? integers)\n        (values '())\n\
    \        (cons (first integers) (filter_integers (rest integers))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3c36yiez.rkt:20:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: '()\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp3c36yiez.rkt:21:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: '(4 #hash() () 23.2 9 \"adasd\")\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3c36yiez.rkt:22:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: '(3 \"c\" 3 3 \"a\" \"b\")\n--------------------\n"
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6pi6t8b4.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6pi6t8b4.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond\n    [(empty? values) '()]\n    [(number? values) values]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcauz_3yl.rkt:19:4

    actual:     #<void>

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcauz_3yl.rkt:20:4

    actual:     #<void>

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n        [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvx6yushc.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 1
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (let ([integers (filter (lambda (x) (and (number? x) (integer? x)))\n\
    \                            values))])\n    (if (null? integers)\n        '()\n\
    \        (cons (first integers) (filter_integers (rest integers))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpmp_iw6kr.rkt:10:35: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6pi6t8b4.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6pi6t8b4.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond\n    [(empty? values) '()]\n    [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n    [else (filter_integers (cdr\
    \ values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate filter_integers))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list\
    \ 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3\
    \ 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_r22j1t4.rkt:20:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039529
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) (list values)]\n\
    \        [else (append (filter_integers (first values))\n                    (filter_integers\
    \ (rest values)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxkaghvlq.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxkaghvlq.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039529
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpky8zsb_y.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6pi6t8b4.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6pi6t8b4.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [(list? values) (filter_integers (map filter_integers values))]\n    \
    \    [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list\
    \ ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\"\
    \ 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb1lh4fr6.rkt:20:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '#hash()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb1lh4fr6.rkt:21:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039529
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpky8zsb_y.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond\n    [(empty? values) '()]\n    [(number? values) values]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcauz_3yl.rkt:19:4

    actual:     #<void>

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcauz_3yl.rkt:20:4

    actual:     #<void>

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond\n    [(empty? values) '()]\n    [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n    [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplyromqim.rkt:20:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n        [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvx6yushc.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: -1
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [(list? values) (filter_integers values)]\n        [else (cons (car values)\
    \ (filter_integers (cdr values)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660039533
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpky8zsb_y.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpky8zsb_y.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (append (filter_integers (first values))\n                    \
    \  (filter_integers (rest values)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5a_u8ld8.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5a_u8ld8.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpky8zsb_y.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcizxrmu.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039528
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40cc7lak.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039528
