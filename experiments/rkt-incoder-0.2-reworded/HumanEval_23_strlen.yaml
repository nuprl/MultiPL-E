name: HumanEval_23_strlen
language: rkt
prompt: "#lang racket\n\n;; Return length of given string\n;; >>> (strlen \"\")\n\
  ;; 0\n;; >>> (strlen \"abc\")\n;; 3\n(define (strlen string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strlen))\n\
  \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"x\") 1)\n\
  \    (check-equal? (candidate \"asdasnakj\") 9)\n))\n\n(test-humaneval)"
completions: ["  (if (string? string)\n      (length string)\n      0))\n", "  (if\
    \ (string? string)\n      (string-length string)\n      0))\n", "  (if (string?\
    \ string)\n      (length string)\n      0))\n", "  (if (string? string)\n    \
    \  (length string)\n      0))\n", "  (if (string? string)\n      (length string)\n\
    \      0))\n", "  (if (string? string)\n      (length string)\n      0))\n", " \
    \ (if (string? string)\n      (length string)\n      0))\n", "  (if (string? string)\n\
    \      (length string)\n      0))\n", "  (if (empty? string)\n      0\n      (+\
    \ 1 (strlen (rest string)))))\n", "  (if (string? string)\n      (length string)\n\
    \      0))\n", "  (if (string? string)\n      (length (string->list string))\n\
    \      0))\n", "  (if (string? string)\n      (length string)\n      0))\n", " \
    \ (if (string? string)\n      (length string)\n      0))\n", "  (if (string? string)\n\
    \      (length string)\n      0))\n", "  (if (string? string)\n      (length string)\n\
    \      0))\n", "  (if (null? string)\n      0\n      (+ 1 (strlen (substring string\
    \ 0 (string-length string))))))\n", "  (if (string? string)\n      (length string)\n\
    \      0))\n", "  (if (string? string)\n      (length string)\n      0))\n", " \
    \ (if (string? string)\n      (length string)\n      0))\n", "  (if (null? string)\n\
    \      0\n      (+ 1 (strlen (substring string 0 (string-length string))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
