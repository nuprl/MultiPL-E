name: HumanEval_111_histogram
language: rkt
prompt: "#lang racket\n\n;; Given a string representing a space separated lowercase\
  \ letters, return a hash\n;; of the letter with the most repetition and containing\
  \ the corresponding count.\n;; If several letters have the same occurrence, return\
  \ all of them.\n;; Example:\n;; >>> (histogram \"a b c\")\n;; #hash((\"a\" .  1)\
  \ (\"b\" .  1) (\"c\" .  1))\n;; >>> (histogram \"a b b a\")\n;; #hash((\"a\" .\
  \  2) (\"b\" .  2))\n;; >>> (histogram \"a b c a b\")\n;; #hash((\"a\" .  2) (\"\
  b\" .  2))\n;; >>> (histogram \"b b b b a\")\n;; #hash((\"b\" .  4))\n;; >>> (histogram\
  \ \"\")\n;; #hash()\n(define (histogram test)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate histogram))\n\
  \    (check-equal? (candidate \"a b b a\") #hash((\"a\" .  2) (\"b\" .  2)))\n \
  \   (check-equal? (candidate \"a b c a b\") #hash((\"a\" .  2) (\"b\" .  2)))\n\
  \    (check-equal? (candidate \"a b c d g\") #hash((\"a\" .  1) (\"b\" .  1) (\"\
  c\" .  1) (\"d\" .  1) (\"g\" .  1)))\n    (check-equal? (candidate \"r t g\") #hash((\"\
  r\" .  1) (\"t\" .  1) (\"g\" .  1)))\n    (check-equal? (candidate \"b b b b a\"\
  ) #hash((\"b\" .  4)))\n    (check-equal? (candidate \"r t g\") #hash((\"r\" . \
  \ 1) (\"t\" .  1) (\"g\" .  1)))\n    (check-equal? (candidate \"\") #hash())\n\
  \    (check-equal? (candidate \"a\") #hash((\"a\" .  1)))\n))\n\n(test-humaneval)"
completions: ["  (let ([letters (string->list test)])\n    (let ([counts (make-hash)])\n\
    \      (for ([letter letters])\n        (hash-set! counts letter (+ (hash-ref\
    \ counts letter) 1))\n        counts))))\n", "  (let ([letters (string->list test)])\n\
    \    (let ([counts (make-hash)])\n      (for ([letter letters])\n        (hash-set!\
    \ counts letter \n                  (hash-ref counts letter (add1 counts))))\n\
    \      (hash-ref counts \"\" (add1 counts)))))\n", "  (let ([letters (string->list\
    \ test)])\n    (let ([counts (make-hash (hash-empty))])\n      (for ([letter letters])\n\
    \        (hash-set! counts letter \n                   (hash-ref counts letter\
    \ \n                             (+ (hash-ref counts letter 0) 1)))\n        counts))))\n",
  "  (let ([letters (string->list (string->string test))])\n    (let ([counts (make-hash\
    \ (hash-empty))])\n      (for ([letter letters])\n        (hash-set! counts letter\
    \ 0)\n        (hash-set! counts (hash-ref counts letter) (+ 1 (hash-ref counts\
    \ letter))))\n      counts)))\n", "  (let ([letters (string-split test #\\Space)])\n\
    \    (let ([count (count-letters letters)])\n      (cond [(empty? letters) #hash()]\n\
    \            [(> (car count) (car letters)) (cons (car letters) (cons (car count)\
    \ letters))]\n            [else (cons (car letters) (cons (car count) letters))])))\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  (let ([letters (string->list\
    \ test)])\n    (let ([letters-hash (make-hash (length letters))])\n      (for\
    \ ([i (in-range (length letters))])\n        (hash-set! letters-hash (substring\
    \ letters i (+ i 1))\n                    (hash-ref letters-hash letters (substring\
    \ letters i (+ i 1)))))\n      letters-hash)))\n", "  (let ([letters (string->list\
    \ test)])\n    (let ([counts (make-hash)])\n      (for ([letter letters])\n  \
    \      (hash-set! counts letter 0)\n        (hash-update! counts letter 1 (+ 1\
    \ counts))))\n    (hash-map letter (hash-values counts))))\n", "  (let ([letters\
    \ (string->list test)])\n    (let ([counts (make-hash (string->list \"a b c a\
    \ b\"))])\n      (for ([i letters])\n        (hash-set! counts (car i) (in-hash\
    \ counts (cdr i)))\n        counts)\n    ))\n", "  (let ([letters (string->list\
    \ test)])\n    (let ([counts (make-hash (string->list '()))])\n      (for ([i\
    \ letters])\n        (hash-set! counts (string->string i) (incf (hash-ref counts\
    \ (string->string i))))\n      (hash->list counts))))\n", "  (let ([letters (string->list\
    \ test)])\n    (let ([letters-count (count-letters letters)])\n      (let ([most-repeated\
    \ (max-count letters-count)]\n            [most-repeated (hash-ref most-repeated\
    \ letters)])\n        (hash-set most-repeated letters-count most-repeated))))))\n",
  "  (let ([letters (split-string test #\\Space)])\n    (let ([counts (group-by (lambda\
    \ (x) (char-code x)) letters)])\n      (let ([most-repeated (max-key (lambda (x)\
    \ (count x)) counts)])\n        (let ([letters (map #(cons (car x) (cdr x)) most-repeated)])\n\
    \          (let ([counts (group-by (lambda (x) (char-code x)) letters)])\n   \
    \         (hash-map most-repeated (map count counts)))))))))\n", "  (let ([letters\
    \ (string->list test)])\n    (let ([counts (make-hash)])\n      (for ([letter\
    \ letters])\n        (hash-set! counts letter \n                  (hash-ref counts\
    \ letter (add1 \n                                          (hash-ref counts letter))))))\n\
    \    counts))\n", "  (let ([letters (string->list test)])\n    (let ([counts (make-hash)])\n\
    \      (for ([letter (in-list letters)])\n        (hash-set! counts letter (hash-ref\
    \ counts letter (+ 1 1)))\n        (hash-set! counts letter (hash-ref counts letter\
    \ 1)))\n      counts)))\n", "  (let ([letters (string-split test #\\Space)])\n\
    \    (let ([letter (car letters)])\n      (let ([count (count-if letters letter)])\n\
    \        (cond [(empty? letters) #hash()]\n              [(< count (caar letters))\
    \ #hash((car letters) . count)]\n              [else (cons (car letters) (cons\
    \ count (cdr letters)))])))))\n", "  (let ([letters (string->list test)])\n  \
    \  (let ([counts (make-hash (string->list \"a b c a b\"))])\n      (for ([letter\
    \ (in-list letters)])\n        (hash-set! counts letter 0)\n        (hash-set!\
    \ counts (string->list letter) (+ 1 (hash-ref counts letter))))\n      (hash-map\
    \ string->list (hash-keys counts)))))\n", "  (let ([letters (string->list test)])\n\
    \    (let ([counts (make-hash (hash-empty))])\n      (for ([letter letters])\n\
    \        (hash-set! counts letter \n                  (hash-ref counts letter\
    \ (+ 1 (hash-ref counts letter 0)))))\n      counts)))\n", "  (let ([letters (string->list\
    \ test)])\n    (let ([counts (make-hash)])\n      (for ([letter letters])\n  \
    \      (hash-set! counts letter 0)\n        (hash-update! counts letter (+ 1 1)))\n\
    \      (hash-map key val (hash-sort counts (fn [a b] [b a])))))\n", "  (let loop\
    \ ((letters test) (count 0))\n    (cond ((null? letters) #hash())\n          ((equal?\
    \ (first letters) (first count))\n           (loop (rest letters) (+ count 1)))\n\
    \          (else\n           (loop (rest letters)\n                 (+ (hash (first\
    \ letters) count) 1)))\n          )))\n", "  (let ([letters (string->list test)])\n\
    \    (let ([counts (make-hash)])\n      (for ([letter letters])\n        (hash-set!\
    \ counts letter 0)\n        (hash-set! counts (lambda (letter count) (hash-set!\
    \ counts letter (+ count 1))) letter)\n      )\n      (hash-map letter (lambda\
    \ (letter count) (list letter count))\n              counts\n      )\n    )\n\
    \  )\n", "  (let ([letters (string->list test)])\n    (let ([letters-count (count-letters\
    \ letters)])\n      (let ([most-repeated (max-letters letters-count)])\n     \
    \   (let ([most-repeated-count (count most-repeated)])\n          (cons (cons\
    \ most-repeated most-repeated-count) most-repeated-count)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
