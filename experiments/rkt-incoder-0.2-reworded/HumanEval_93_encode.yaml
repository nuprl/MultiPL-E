name: HumanEval_93_encode
language: rkt
prompt: "#lang racket\n\n;; Write a function that takes a message, and encodes in\
  \ such a \n;; way that it swaps case of all letters, replaces all vowels in \n;;\
  \ the message with the letter that appears 2 places ahead of that \n;; vowel in\
  \ the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> (encode\
  \ \"test\")\n;; \"TGST\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C\
  \ MGSSCGG\"\n(define (encode message)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
  \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
  \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n  \
  \  (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
  \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
  \n(test-humaneval)"
completions: ["  (define (helper index message)\n    (if (null? message)\n       \
    \ '()\n        (cond ((char=? (char-code (car message)) #\\a) (cons (char-code\
    \ (car message)) (helper (+ index 1) (cdr message)))) \n              ((char=?\
    \ (char-code (car message)) #\\e) (cons (char-code (car message)) (helper (+ index\
    \ 1) (cdr message)))) \n              ((char=? (char-code (car message)) #\\i)\
    \ (cons (char-code (car message)) (helper (+ index 1) (cdr message)))) \n    \
    \          ((char=? (char-code (car message)) #\\o) (cons (char-code (car message))\
    \ (helper (+ index 1) (cdr message)))) \n              ((char=? (char-code (car\
    \ message)) #\\u) (cons (char-code (car message)) (helper (+ index 1) (cdr message))))\
    \ \n              ((char=? (char-code (car message)) #\\y) (cons (char-code (car\
    \ message)) (helper (+ index 1) (cdr message)))) \n              ((char=? (char-code\
    \ (car message)) #\\h) (cons (char-code (car message)) (helper (+ index 1) (cdr\
    \ message)))) \n              ((char=? (char-code (car message)) #\\o) (cons (char-code\
    \ (car message)) (helper (+ index 1) (cdr message)))) \n              ((char=?\
    \ (char-code (car message)) #\\o) (cons (char-code (car message)) (helper (+ index\
    \ 1) (cdr message)))) \n              ((char=? (char-code (car message)) #\\o)\
    \ (cons (char-code (car message)) (helper (+ index 1) (cdr message)))) \n    \
    \          ((char=? (char-code (car message)) #\\o) (cons (char-code (car message))\
    \ (helper (+ index 1) (cdr message)))) \n              ((char=? (char-code (car\
    \ message)) #\\o) (cons (char-code (car message)) (helper (+ index 1) (cdr message))))\
    \ \n              ((char=? (char-code (car message)) #\\o) (cons (char-code (car\
    \ message)) (helper (+ index 1) (cdr message)))) \n", "  (cond\n    [(empty? message)\
    \ \"\"]\n    [(equal? (first message) ?a) (encode (substring message 1 2))]\n\
    \    [(equal? (first message) ?e) (encode (substring message 1 3))]\n    [(equal?\
    \ (first message) ?i) (encode (substring message 1 4))]\n    [(equal? (first message)\
    \ ?o) (encode (substring message 1 5))]\n    [(equal? (first message) ?u) (encode\
    \ (substring message 1 6))]\n    [(equal? (first message) ?A) (encode (substring\
    \ message 1 7))] \n    [(equal? (first message) ?E) (encode (substring message\
    \ 1 8))] \n    [(equal? (first message) ?I) (encode (substring message 1 9))]\
    \ \n    [(equal? (first message) ?O) (encode (substring message 1 10))] \n   \
    \ [(equal? (first message) ?U) (encode (substring message 1 11))] \n    [(equal?\
    \ (first message) ?a) (encode (substring message 1 12))] \n    [(equal? (first\
    \ message) ?e) (encode (substring message 1 13))] \n    [(equal? (first message)\
    \ ?i) (encode (substring message 1 14))] \n    [(equal? (first message) ?o) (encode\
    \ (substring message 1 15))] \n    [(equal? (first message) ?u) (encode (substring\
    \ message 1 16))] \n    [(equal? (first message) ?A) (encode (substring message\
    \ 1 17))] \n    [(equal? (first message) ?E) (encode (substring message 1 18))]\
    \ \n    [(equal? (first message) ?I) (encode (substring message 1 19))] \n   \
    \ [(equal? (first message) ?O) (encode (substring message 1 20))] \n    [(equal?\
    \ (first message) ?U) (encode (substring message 1 21))] \n    [(equal? (first\
    \ message) ?a) (encode (substring message 1 22))] \n    [(equal? (first message)\
    \ ?e) (encode (substring message 1 23))] \n    [(equal? (first message) ?i) (encode\
    \ (substring message 1 24))] \n    [(equal? (first message) ?o) (encode (substring\
    \ message 1 25))] \n    [(equal? (first message) ?u) (encode (substring message\
    \ 1 26))] \n    [(equal? (first message) ?A) (", "  (let ((vowels '(a e i o u)))\n\
    \    (cond ((null? message) '())\n          ((member (char-ref message 0) vowels)\
    \ \n           (char-append (char-ref message 0) \n                       (char-ref\
    \ message (+ 1 \n                                           (char-ref message\
    \ 0)))))\n          (else \n           (append (encode (char-ref message 0)) \n\
    \                   (encode (char-ref message (+ 1 \n                        \
    \                       (char-ref message 0)))))))\n  )\n", "  (define (helper\
    \ i j)\n    (cond\n      [(= i j) (cons message '())]\n      [(char-alphabet (char\
    \ message i))\n       (helper (+ i 1) (+ j 1))]\n      [(char-alphabet (char message\
    \ j))\n       (helper (+ i 1) (+ j 1))]\n      [(char-alphabet (char message i))\n\
    \       (helper (+ i 1) (+ j 2))]\n      [(char-alphabet (char message j))\n \
    \      (helper (+ i 2) (+ j 1))]\n      [(char-alphabet (char message i))\n  \
    \     (helper (+ i 2) (+ j 2))]\n      [(char-alphabet (char message j))\n   \
    \    (helper (+ i 2) (+ j 2))]\n      [(char-alphabet (char message i))\n    \
    \   (helper (+ i 2) (+ j 3))]\n      [(char-alphabet (char message j))\n     \
    \  (helper (+ i 3) (+ j 2))]\n      [(char-alphabet (char message i))\n      \
    \ (helper (+ i 3) (+ j 3))]\n      [(char-alphabet (char message j))\n       (helper\
    \ (+ i 3) (+ j 3))]\n      [(char-alphabet (char message i))\n       (helper (+\
    \ i 3) (+ j 4))]\n      [(char-alphabet (char message j))\n       (helper (+ i\
    \ 4) (+ j 3))]\n      [(char-alphabet (char message i))\n       (helper (+ i 4)\
    \ (+ j 4))]\n      [(char-alphabet (char message j))\n       (helper (+ i 4) (+\
    \ j 4))]\n      [(char-alphabet (char message i))\n       (helper (+ i 4) (+ j\
    \ 5))]\n      [(char-alphabet (char message j))\n       (helper (+ i 5) (+ j 4))]\n\
    \      [(char-alphabet (char message i))\n       (helper (+ i 5) (+ j 5))]\n \
    \     [(char-alphabet (char message j))\n       (helper (+ i 5) (+ j 5))]\n  \
    \    [(char-alphabet (char message i))\n       (helper (+ i 5) (+ j 6))]\n   \
    \   [(char-alphabet (char message j))\n       (helper (+ i 6) (+ j 5))]\n    \
    \  [(char-alphabet (char message i))\n       (helper (+ i 6) (+ ", "  (cond\n\
    \    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode (substring\
    \ message 1 2))]\n    [(equal? (first message) ?e) (encode (substring message\
    \ 1 3))]\n    [(equal? (first message) ?i) (encode (substring message 1 4))]\n\
    \    [(equal? (first message) ?o) (encode (substring message 1 5))]\n    [(equal?\
    \ (first message) ?u) (encode (substring message 1 6))]\n    [else (cons (first\
    \ message)\n               (encode (substring message 2)))]))\n", "  (define (helper\
    \ message index)\n    (cond [(null? message) \"\"]\n          [(char=? (car message)\
    \ (car index)) \n           (helper (cdr message) (cons (car index) (cdr index)))]\n\
    \          [else (helper (cdr message) (cons (car index) (cdr index)))]))\n  (helper\
    \ message '()))\n", "  (let ((vowels '(a e i o u)))\n    (cond ((null? message)\
    \ '())\n          ((char-alphabet (car message))\n           (cons (char-alphabet\
    \ (car message))\n                 (encode (substring message 1 (char-alphabet\
    \ (car message)))))\n           (encode (substring message 1 (char-alphabet (car\
    \ message)))))\n          ((char-alphabet (car message))\n           (cons (char-alphabet\
    \ (car message))\n                 (encode (substring message 1 (char-alphabet\
    \ (car message)))))\n          ((char-alphabet (car message))\n           (cons\
    \ (char-alphabet (car message))\n                 (encode (substring message 1\
    \ (char-alphabet (car message)))))\n          ((char-alphabet (car message))\n\
    \           (cons (char-alphabet (car message))\n                 (encode (substring\
    \ message 1 (char-alphabet (car message)))))\n          ((char-alphabet (car message))\n\
    \           (cons (char-alphabet (car message))\n                 (encode (substring\
    \ message 1 (char-alphabet (car message)))))\n          ((char-alphabet (car message))\n\
    \           (cons (char-alphabet (car message))\n                 (encode (substring\
    \ message 1 (char-alphabet (car message)))))\n          ((char-alphabet (car message))\n\
    \           (cons (char-alphabet (car message))\n                 (encode (substring\
    \ message 1 (char-alphabet (car message)))))\n          ((char-alphabet (car message))\n\
    \           (cons (char-alphabet (car message))\n                 (encode (substring\
    \ message 1 (char-alphabet (car message)))))\n          ((char-alphabet (car message))\n\
    \           (cons (char-alphabet (car message))\n                 (encode (substring\
    \ message 1 (char-alphabet (car message)))))\n          ((char-alphabet (car message))\n\
    \           (cons (char-alphabet (car message))\n                 (encode (substring\
    \ message 1 (char-alphabet (car message)))))\n          ((char-alphabet (car message))\n\
    \           (cons (char-alphabet (car message))\n                 (encode (substring\
    \ message 1 (char-alphabet (car message)))))\n          ((char-alphabet (car message))\n\
    \           (cons (char-alphabet (car message))\n                 (encode (substring\
    \ message 1 (char", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty?\
    \ message) \"\"]\n      [(member (first message) vowels) (second message)]\n \
    \     [else (cons (first message)\n                   (encode (substring (second\
    \ message) 0 (- (length message) 1)))\n                   (encode (substring (second\
    \ message) 1 (- (length message) 1)))]))))\n", "  (let ((vowels '(a e i o u)))\n\
    \    (cond\n      [(empty? message) message]\n      [(member (first message) vowels)\
    \ (second message)]\n      [else (cons (first message)\n                  (encode\
    \ (substring (second message) 0 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 1 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 2 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 3 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 4 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 5 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 6 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 7 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 8 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 9 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 10 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 11 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 12 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 13 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 14 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 15 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 16 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 17 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 18 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 19 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 20 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 21 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 22 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 23 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 24 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 25 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 26 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 27", "  (cond\n    [(empty? message) \"\"]\n   \
    \ [(equal? (first message) ?a) (encode-a message)]\n    [(equal? (first message)\
    \ ?e) (encode-e message)]\n    [(equal? (first message) ?i) (encode-i message)]\n\
    \    [(equal? (first message) ?o) (encode-o message)]\n    [(equal? (first message)\
    \ ?u) (encode-u message)]\n    [else (encode-other (first message))]))\n", " \
    \ (let ((vowels '(a e i o u)))\n    (cond ((null? message) '())\n          ((member\
    \ (char-ref message 0) vowels) (cons (char-ref message 0) (encode (char-ref message\
    \ 1))))\n          (else (cons (char-ref message 0) (encode (char-ref message\
    \ 1)))))))\n", "  (define (helper message index)\n    (cond [(null? message) message]\n\
    \          [(char=? (car message) 'a) (helper (cdr message) (+ index 1))]\n  \
    \        [(char=? (car message) 'e) (helper (cdr message) (+ index 2))]\n    \
    \      [(char=? (car message) 'i) (helper (cdr message) (+ index 3))]\n      \
    \    [(char=? (car message) 'o) (helper (cdr message) (+ index 4))]\n        \
    \  [(char=? (car message) 'u) (helper (cdr message) (+ index 5))]\n          [(char=?\
    \ (car message) 'A) (helper (cdr message) (+ index 6))]\n          [(char=? (car\
    \ message) 'E) (helper (cdr message) (+ index 7))]\n          [(char=? (car message)\
    \ 'I) (helper (cdr message) (+ index 8))]\n          [(char=? (car message) 'O)\
    \ (helper (cdr message) (+ index 9))]\n          [(char=? (car message) 'U) (helper\
    \ (cdr message) (+ index 10))]\n          [(char=? (car message) 'a) (helper (cdr\
    \ message) (+ index 11))]\n          [(char=? (car message) 'e) (helper (cdr message)\
    \ (+ index 12))]\n          [(char=? (car message) 'i) (helper (cdr message) (+\
    \ index 13))]\n          [(char=? (car message) 'o) (helper (cdr message) (+ index\
    \ 14))]\n          [(char=? (car message) 'u) (helper (cdr message) (+ index 15))]\n\
    \          [(char=? (car message) 'A) (helper (cdr message) (+ index 16))]\n \
    \         [(char=? (car message) 'E) (helper (cdr message) (+ index 17))]\n  \
    \        [(char=? (car message) 'I) (helper (cdr message) (+ index 18))]\n   \
    \       [(char=? (car message) 'O) (helper (cdr message) (+ index 19))]\n    \
    \      [(char=? (car message) 'U) (helper (cdr message) (+ index 20))]\n     \
    \     [(char=? (car message) 'a) (helper (cdr message) (+ index 21))]\n      \
    \    [(char=? (car message) '", "  (define (enc-helper msg index vowels)\n   \
    \ (cond\n      [(empty? msg) \"\"]\n      [(equal? (char-ref msg index) vowels)\
    \ (substring msg 0 index)]\n      [else (cons (char-ref msg index) (enc-helper\
    \ (substring msg index) \n                                               (+ index\
    \ 1) vowels))]))\n  (enc-helper message 0 '(a e i o u)))\n", "  (let ([vowels\
    \ '(a e i o u)])\n    (cond\n      [(empty? message) \"\"]\n      [(member (first\
    \ message) vowels) (cons (first message) (encode (substring message 1 (- (length\
    \ message) 1))))]\n      [else (cons (first message) (encode (substring message\
    \ 1 (- (length message) 1)))])]))\n", "  (cond\n    [(empty? message) \"\"]\n\
    \    [(equal? (first message) ?a) (encode-a message)]\n    [(equal? (first message)\
    \ ?e) (encode-e message)]\n    [(equal? (first message) ?i) (encode-i message)]\n\
    \    [(equal? (first message) ?o) (encode-o message)]\n    [(equal? (first message)\
    \ ?u) (encode-u message)]\n    [else (encode-others message)]))\n", "  (let ((vowels\
    \ '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n      [(member (first\
    \ message) vowels) (second message)]\n      [else (cons (first message)\n    \
    \              (encode (substring message 1 (- (length message) 1))))]))) \n",
  "  (define (helper i j)\n    (if (< i j)\n        (cons (char->integer (char->string\
    \ (substring message i (add1 j)))) \n               (helper (add1 i) j))\n   \
    \     (cons (char->integer (char->string (substring message i (add1 j)))) \n \
    \              (helper (add1 i) j))))\n  (helper 0 0))\n", "  (cond\n    [(empty?\
    \ message) \"\"]\n    [(equal? (first message) ?a) (encode-a message)]\n    [(equal?\
    \ (first message) ?e) (encode-e message)]\n    [(equal? (first message) ?i) (encode-i\
    \ message)]\n    [(equal? (first message) ?o) (encode-o message)]\n    [(equal?\
    \ (first message) ?u) (encode-u message)]\n    [else (encode-other (first message))]))\n",
  "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n    \
    \  [(member (first message) vowels) (cons (first message) (encode (substring message\
    \ 1 (length (first message))))]\n      [else (cons (first message) (encode (substring\
    \ message 1 (length (first message))))])]))) \n", "  (define (helper message)\n\
    \    (cond\n      [(empty? message) \"\"]\n      [(char-alphabet (first message))\
    \ (helper (rest message))]\n      [else (cons (char-alphabet (first message))\
    \ \n                 (helper (rest message)))]))\n  (helper message))\n", "  (let\
    \ ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n      [(member\
    \ (first message) vowels) (second message)]\n      [else (cons (first message)\n\
    \                   (encode (substring message 1 (- (length message) 1))))]))))\n",
  "  (define (helper message i j)\n    (cond\n      [(empty? message) \"\"]\n    \
    \  [(equal? (char-code (car message)) #\\a) (helper (cdr message) (+ i 1) j)]\n\
    \      [(equal? (char-code (car message)) #\\e) (helper (cdr message) (+ i 2)\
    \ j)]\n      [(equal? (char-code (car message)) #\\i) (helper (cdr message) (+\
    \ i 3) j)]\n      [(equal? (char-code (car message)) #\\o) (helper (cdr message)\
    \ (+ i 4) j)]\n      [(equal? (char-code (car message)) #\\u) (helper (cdr message)\
    \ (+ i 5) j)]\n      [else (cons (char-code (car message)) (helper (cdr message)\
    \ (+ i 1) j))]))\n  (helper (reverse message) 0 0))\n", "  (cond\n    [(empty?\
    \ message) \"\"]\n    [(equal? (first message) ?a) (encode (substring message\
    \ 1 2))]\n    [(equal? (first message) ?e) (encode (substring message 1 3))]\n\
    \    [(equal? (first message) ?i) (encode (substring message 1 4))]\n    [(equal?\
    \ (first message) ?o) (encode (substring message 1 5))]\n    [(equal? (first message)\
    \ ?u) (encode (substring message 1 6))]\n    [else (cons (first message)\n   \
    \             (encode (substring message 2))])]))\n", "  (define (helper message\
    \ vowels)\n    (cond\n      [(empty? message) message]\n      [(equal? (first\
    \ message) vowels) (second message)]\n      [else (helper (rest message) (cons\
    \ (first message) vowels))]))\n  (helper message '(a e i o u)))\n", "  (let loop\
    \ ((message message) (result '()))\n    (cond ((null? message) result)\n     \
    \     ((char-alphabet (car message)) (loop (cdr message) (cons (char-alphabet\
    \ (car message)) result)))\n          ((char-alphabet (car message)) (loop (cdr\
    \ message) (cons (char-alphabet (car message)) result)))\n          ((char-alphabet\
    \ (car message)) (loop (cdr message) (cons (char-alphabet (car message)) result)))\n\
    \          ((char-alphabet (car message)) (loop (cdr message) (cons (char-alphabet\
    \ (car message)) result)))\n          ((char-alphabet (car message)) (loop (cdr\
    \ message) (cons (char-alphabet (car message)) result)))\n          ((char-alphabet\
    \ (car message)) (loop (cdr message) (cons (char-alphabet (car message)) result)))\n\
    \          ((char-alphabet (car message)) (loop (cdr message) (cons (char-alphabet\
    \ (car message)) result)))\n          ((char-alphabet (car message)) (loop (cdr\
    \ message) (cons (char-alphabet (car message)) result)))\n          ((char-alphabet\
    \ (car message)) (loop (cdr message) (cons (char-alphabet (car message)) result)))\n\
    \          ((char-alphabet (car message)) (loop (cdr message) (cons (char-alphabet\
    \ (car message)) result)))\n          ((char-alphabet (car message)) (loop (cdr\
    \ message) (cons (char-alphabet (car message)) result)))\n          ((char-alphabet\
    \ (car message)) (loop (cdr message) (cons (char-alphabet (car message)) result)))\n\
    \          ((char-alphabet (car message)) (loop (cdr message) (cons (char-alphabet\
    \ (car message)) result)))\n          ((char-alphabet (car message)) (loop (cdr\
    \ message) (cons (char-alphabet (car message)) result)))\n          ((char-alphabet\
    \ (car message)) (loop (cdr message) (cons (char-alphabet (car message)) result)))\n\
    \          ((char-alphabet (car message)) (loop (cdr message) (cons (char-alphabet\
    \ (car message)) result)))\n          ((char-alphabet (car message)) ", "  (define\
    \ (helper message)\n    (cond\n      [(empty? message) \"\"]\n      [(char-lower?\
    \ (car message)) (helper (cdr message))]\n      [(char-upper? (car message)) (helper\
    \ (cdr message))]\n      [else (cons (char-upper? (car message)) (helper (cdr\
    \ message)))]))\n  (helper (reverse message)))\n", "  (let ((vowels '(a e i o\
    \ u)))\n    (cond\n      [(empty? message) message]\n      [(member (first message)\
    \ vowels) (first message)]\n      [else (cons (first message)\n              \
    \     (encode (substring (encode (substring message 1)\n                     \
    \                      (+ 1 \n                                             (length\
    \ message)))))]))))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty?\
    \ message) \"\"]\n      [(member (first message) vowels) (cons (first message)\
    \ (encode (substring message 1 (length message))))]\n      [else (cons (first\
    \ message) (encode (substring message 1 (length message))))])))\n", "  (let ((vowels\
    \ '(a e i o u)))\n    (define (helper message vowels)\n      (cond [(empty? message)\
    \ \"\"]\n            [(member (first message) vowels) (second message)]\n    \
    \        [else (helper (rest message) (cons (first message) vowels))]))\n    (helper\
    \ message vowels)))\n", "  (let ((vowels '(a e i o u)))\n    (map (lambda (x)\n\
    \           (let ((y (assoc x vowels)))\n             (if (null? y)\n        \
    \         (cons x x)\n                 (cons (car y) (cadr y))))\n         message))\n\
    \    (map (lambda (x)\n           (let ((y (assoc x vowels)))\n             (if\
    \ (null? y)\n                 (cons x x)\n                 (cons (car y) (cadr\
    \ y))))\n         vowels))))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n\
    \      [(empty? message) \"\"]\n      [(char-alphabetic? message) message]\n \
    \     [(char-alphabetic? (first message)) (encode (first message))]\n      [(char-alphabetic?\
    \ (second message)) (encode (second message))]\n      [(char-alphabetic? (third\
    \ message)) (encode (third message))]\n      [(char-alphabetic? (fourth message))\
    \ (encode (fourth message))]\n      [(char-alphabetic? (fifth message)) (encode\
    \ (fifth message))]\n      [(char-alphabetic? (sixth message)) (encode (sixth\
    \ message))]\n      [(char-alphabetic? (seventh message)) (encode (seventh message))]\n\
    \      [(char-alphabetic? (eighth message)) (encode (eighth message))]\n     \
    \ [(char-alphabetic? (ninth message)) (encode (ninth message))]\n      [(char-alphabetic?\
    \ (tenth message)) (encode (tenth message))]\n      [(char-alphabetic? (eleventh\
    \ message)) (encode (eleventh message))]\n      [(char-alphabetic? (twelfth message))\
    \ (encode (twelfth message))]\n      [(char-alphabetic? (thirteenth message))\
    \ (encode (thirteenth message))]\n      [(char-alphabetic? (fourteenth message))\
    \ (encode (fourteenth message))]\n      [(char-alphabetic? (fifteenth message))\
    \ (encode (fifteenth message))]\n      [(char-alphabetic? (sixteenth message))\
    \ (encode (sixteenth message))]\n      [(char-alphabetic? (seventeenth message))\
    \ (encode (seventeenth message))]\n      [(char-alphabetic? (eighteenth message))\
    \ (encode (eighteenth message))]\n      [(char-alphabetic? (nineteenth message))\
    \ (encode (nineteenth message))]\n      [(char-alphabetic? (twentieth message))\
    \ (encode (twentieth message))]\n      [(char-alphabetic? (twenty-first message))\
    \ (encode (twenty-first message))]\n      [(char-alphabetic? (twenty-second message))\
    \ (encode (twenty-second message))]\n", "  (let ((vowels '(a e i o u)))\n    (cond\
    \ ((null? message) \"\")\n          ((char-alphabet (car message)) (cons (char-alphabet\
    \ (car message)) (encode (cdr message))))\n          ((char-alphabet (car message))\
    \ (cons (char-alphabet (car message)) (encode (cdr message))))\n          ((char-alphabet\
    \ (car message)) (cons (char-alphabet (car message)) (encode (cdr message))))\n\
    \          ((char-alphabet (car message)) (cons (char-alphabet (car message))\
    \ (encode (cdr message))))\n          ((char-alphabet (car message)) (cons (char-alphabet\
    \ (car message)) (encode (cdr message))))\n          ((char-alphabet (car message))\
    \ (cons (char-alphabet (car message)) (encode (cdr message))))\n          ((char-alphabet\
    \ (car message)) (cons (char-alphabet (car message)) (encode (cdr message))))\n\
    \          ((char-alphabet (car message)) (cons (char-alphabet (car message))\
    \ (encode (cdr message))))\n          ((char-alphabet (car message)) (cons (char-alphabet\
    \ (car message)) (encode (cdr message))))\n          ((char-alphabet (car message))\
    \ (cons (char-alphabet (car message)) (encode (cdr message))))\n          ((char-alphabet\
    \ (car message)) (cons (char-alphabet (car message)) (encode (cdr message))))\n\
    \          ((char-alphabet (car message)) (cons (char-alphabet (car message))\
    \ (encode (cdr message))))\n          ((char-alphabet (car message)) (cons (char-alphabet\
    \ (car message)) (encode (cdr message))))\n          ((char-alphabet (car message))\
    \ (cons (char-alphabet (car message)) (encode (cdr message))))\n          ((char-alphabet\
    \ (car message)) (cons (char-alphabet (car message)) (encode (cdr message))))\n\
    \          ((char-alphabet (car message)) (cons (char-alphabet (car message))\
    \ (encode (cdr message))))\n          ((char-alphabet (car message)) (cons (char-alphabet\
    \ (car message)) (encode (cdr", "  (let ((vowels '(a e i o u)))\n    (cond\n \
    \     [(empty? message) \"\"]\n      [(char-alphabet (first message)) (cons (first\
    \ message) (encode (substring message 1 )))]\n      [(char-alphabet (first message))\
    \ (cons (first message) (encode (substring message 1 )))]\n      [(char-alphabet\
    \ (first message)) (cons (first message) (encode (substring message 1 )))]\n \
    \     [(char-alphabet (first message)) (cons (first message) (encode (substring\
    \ message 1 )))]\n      [(char-alphabet (first message)) (cons (first message)\
    \ (encode (substring message 1 )))]\n      [(char-alphabet (first message)) (cons\
    \ (first message) (encode (substring message 1 )))]\n      [(char-alphabet (first\
    \ message)) (cons (first message) (encode (substring message 1 )))]\n      [(char-alphabet\
    \ (first message)) (cons (first message) (encode (substring message 1 )))]\n \
    \     [(char-alphabet (first message)) (cons (first message) (encode (substring\
    \ message 1 )))]\n      [(char-alphabet (first message)) (cons (first message)\
    \ (encode (substring message 1 )))]\n      [(char-alphabet (first message)) (cons\
    \ (first message) (encode (substring message 1 )))]\n      [(char-alphabet (first\
    \ message)) (cons (first message) (encode (substring message 1 )))]\n      [(char-alphabet\
    \ (first message)) (cons (first message) (encode (substring message 1 )))]\n \
    \     [(char-alphabet (first message)) (cons (first message) (encode (substring\
    \ message 1 )))]\n      [(char-alphabet (first message)) (cons (first message)\
    \ (encode (substring message 1 )))]\n      [(char-alphabet (first message)) (cons\
    \ (first message) (encode (substring message 1 )))]\n      [(char-alphabet (first\
    \ message)) (cons (first message) (encode (substring message 1 )))]\n      [(char-alphabet\
    \ (first message)) (cons (first message) (encode (substring message 1 )))]\n \
    \     [(char-alphabet (first message)) (cons (first message) (encode (substring\
    \ message 1 )))]\n      [(char-alphabet (first message)) (con", "  (define (vowel-pair\
    \ letter)\n    (cond [(char=? (char-upcase letter) 'A) (char=? (char-upcase letter)\
    \ 'E) (char=? (char-upcase letter) 'I) (char=? (char-upcase letter) 'O) (char=?\
    \ (char-upcase letter) 'U)]\n          [(char=? (char-upcase letter) 'a') (char=?\
    \ (char-upcase letter) 'e') (char=? (char-upcase letter) 'i') (char=? (char-upcase\
    \ letter) 'o') (char=? (char-upcase letter) 'u)]\n          [(char=? (char-upcase\
    \ letter) 'A') (char=? (char-upcase letter) 'E') (char=? (char-upcase letter)\
    \ 'I') (char=? (char-upcase letter) 'O') (char=? (char-upcase letter) 'U)]\n \
    \         [(char=? (char-upcase letter) 'a') (char=? (char-upcase letter) 'e')\
    \ (char=? (char-upcase letter) 'i') (char=? (char-upcase letter) 'o') (char=?\
    \ (char-upcase letter) 'u)]\n          [(char=? (char-upcase letter) 'A') (char=?\
    \ (char-upcase letter) 'E') (char=? (char-upcase letter) 'I') (char=? (char-upcase\
    \ letter) 'O') (char=? (char-upcase letter) 'U)]\n          [(char=? (char-upcase\
    \ letter) 'a') (char=? (char-upcase letter) 'e') (char=? (char-upcase letter)\
    \ 'i') (char=? (char-upcase letter) 'o') (char=? (char-upcase letter) 'u)]\n \
    \         [(char=? (char-upcase letter) 'A') (char=? (char-upcase letter) 'E')\
    \ (char=? (char-upcase letter) 'I') (char=? (char-upcase letter) 'O') (char=?\
    \ (char-upcase letter) 'U)]\n          [(char=? (char-upcase letter) 'a') (char=?\
    \ (char-upcase letter) 'e') (char=? (char-upcase letter) 'i') (char=? (char-upcase\
    \ letter) 'o') (char=? (char-upcase letter) 'u)]\n          [(char=? (char-upcase\
    \ letter) 'A') (char=? (char-upcase letter) 'E') (char=? (char-upcase letter)\
    \ 'I') (char=", "  (let ((letters (string->list message)))\n    (let ((vowels\
    \ '(a e i o u)))\n      (map (lambda (letter)\n             (let ((vowel (assoc\
    \ letter vowels)))\n               (if (null? vowel)\n                   (list\
    \ letter)\n                   (cons (car vowel) (cons (cdr vowel) letters))))\n\
    \           letters))))\n", "  (let ([vowels '(a e i o u)])\n    (cond\n     \
    \ [(empty? message) \"\"]\n      [(member (first message) vowels) (cons (first\
    \ message) (encode (substring (second message) 0 (- (length message) 1)))\n  \
    \                              (encode (substring (second message) 1 (- (length\
    \ message) 1)))\n                                (encode (substring (second message)\
    \ 2 (- (length message) 1))))\n       (cons (first message) (encode (substring\
    \ (second message) 0 (- (length message) 1)))\n           (encode (substring (second\
    \ message) 1 (- (length message) 1)))\n           (encode (substring (second message)\
    \ 2 (- (length message) 1))))\n       (else (cons (first message) (encode (substring\
    \ (second message) 0 (- (length message) 1)))\n                   (encode (substring\
    \ (second message) 1 (- (length message) 1)))\n                   (encode (substring\
    \ (second message) 2 (- (length message) 1)))))))\n", "  (let ((vowels '(a e i\
    \ o u)))\n    (cond\n      [(empty? message) \"\"]\n      [(member (first message)\
    \ vowels) (cons (first message) (encode (substring message 1 (- (length message)\
    \ 1)))) ]\n      [else (cons (first message) (encode (substring message 1 (- (length\
    \ message) 1)))) ]\n    )\n  )\n)\n", "  (define (helper index message)\n    (cond\n\
    \      [(empty? message) message]\n      [(equal? (char-ref message index) ?a)\
    \ (char-ref message (+ index 1))]\n      [(equal? (char-ref message index) ?e)\
    \ (char-ref message (+ index 2))]\n      [(equal? (char-ref message index) ?i)\
    \ (char-ref message (+ index 3))]\n      [(equal? (char-ref message index) ?o)\
    \ (char-ref message (+ index 4))]\n      [(equal? (char-ref message index) ?u)\
    \ (char-ref message (+ index 5))]\n      [else (helper (+ index 1) (char-ref message\
    \ index))]))\n  (helper 0 message))\n", "  (cond\n    [(empty? message) \"\"]\n\
    \    [(equal? (first message) ?a) (encode (substring message 1 2))]\n    [(equal?\
    \ (first message) ?e) (encode (substring message 1 3))]\n    [(equal? (first message)\
    \ ?i) (encode (substring message 1 4))]\n    [(equal? (first message) ?o) (encode\
    \ (substring message 1 5))]\n    [(equal? (first message) ?u) (encode (substring\
    \ message 1 6))]\n    [else (cons (first message)\n               (encode (substring\
    \ message 2)))]))\n", "  (let ((vowels '(a e i o u)))\n    (define (helper message\
    \ vowels)\n      (cond ((null? message) '())\n            ((member (first message)\
    \ vowels) (second message))\n            (else (helper (rest message) (cons (first\
    \ message) vowels)))))\n    (helper message vowels)))\n", "  (cond\n    [(empty?\
    \ message) \"\"]\n    [(equal? (first message) ?a) (encode (substring message\
    \ 1 2))]\n    [(equal? (first message) ?e) (encode (substring message 1 3))]\n\
    \    [(equal? (first message) ?i) (encode (substring message 1 4))]\n    [(equal?\
    \ (first message) ?o) (encode (substring message 1 5))]\n    [(equal? (first message)\
    \ ?u) (encode (substring message 1 6))]\n    [else (cons (first message)\n   \
    \            (encode (substring message 2)))]))\n", "  (cond\n    [(empty? message)\
    \ \"\"]\n    [(equal? (first message) ?a) (encode (substring message 1 2))]\n\
    \    [(equal? (first message) ?e) (encode (substring message 1 2))]\n    [(equal?\
    \ (first message) ?i) (encode (substring message 1 2))]\n    [(equal? (first message)\
    \ ?o) (encode (substring message 1 2))]\n    [(equal? (first message) ?u) (encode\
    \ (substring message 1 2))]\n    [else (cons (first message)\n               (encode\
    \ (substring message 2)))]))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal?\
    \ (first message) ?a) (encode-a message)]\n    [(equal? (first message) ?e) (encode-e\
    \ message)]\n    [(equal? (first message) ?i) (encode-i message)]\n    [(equal?\
    \ (first message) ?o) (encode-o message)]\n    [(equal? (first message) ?u) (encode-u\
    \ message)]\n    [else (encode-others message)]))\n", "  (let ((vowels '(a e i\
    \ o u)))\n    (cond\n      [(empty? message) \"\"]\n      [(member (first message)\
    \ vowels) (cons (first message) (encode (substring message 1 2)))]\n      [else\
    \ (cons (first message) (encode (substring message 1 1)))])))\n", "  (let ([vowels\
    \ '(a e i o u)])\n    (cond\n      [(empty? message) \"\"]\n      [(member (first\
    \ message) vowels) (cons (first message) (encode (substring message 1 (length\
    \ message))))]\n      [else (cons (first message) (encode (substring message 1\
    \ (length message))))])))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n   \
    \   [(empty? message) \"\"]\n      [(member (first message) vowels) (cons (first\
    \ message) (encode (substring message 1 (length message))))]\n      [else (cons\
    \ (first message) (encode (substring message 1 (length message))))])))\n", " \
    \ (define (helper message i j)\n    (cond\n      [(empty? message) message]\n\
    \      [(char=? (car message) (car alphabet)) \n       (helper (cdr message) i\
    \ (+ i 1))]\n      [else (helper (cdr message) i (+ i 1))]))\n  (helper message\
    \ 0 0))\n", "  (let ((vowels '(a e i o u)))\n    (cond ((null? message) '())\n\
    \          ((member (char-ref message 0) vowels) \n           (char-append (char-ref\
    \ message 0) \n                      (char-ref message (+ 1 \n               \
    \                          (char-index \n                                    \
    \       (char-ref message 0) \n                                           (char-ref\
    \ message 0)))))\n          (else \n           (append (encode (char-ref message\
    \ 0)) \n                  (encode (char-ref message (+ 1 \n                  \
    \                             (char-index \n                                 \
    \                (char-ref message 0) \n                                     \
    \            (char-ref message 0)))))))\n  )\n)\n", "  (let ([vowels '(a e i o\
    \ u)])\n    (cond [(empty? message) \"\"]\n          [(char-alphabet (car message))\
    \ (cons (char-alphabet (car message)) \n                                     \
    \         (encode (substring message 1 (char-alphabet (car message)))))]\n   \
    \       [else (cons (char-alphabet (car message)) \n                    (encode\
    \ (substring message 1 (char-alphabet (car message))))))]))\n", "  (let ((vowels\
    \ '(a e i o u)))\n    (cond ((empty? message) \"\")\n          ((member (first\
    \ message) vowels) (second message))\n          (else (append (encode (first message))\
    \ (encode (second message)))))))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n\
    \      [(empty? message) \"\"]\n      [(char-alphabet (first message)) (cons (first\
    \ message) (encode (substring message 1 (char-alphabet (first message))))]\n \
    \     [(char-alphabet (first message)) (cons (first message) (encode (substring\
    \ message 1 (char-alphabet (first message))))]\n      [else (cons (first message)\
    \ (encode (substring message 1 (char-alphabet (first message))))]\n    )\n  )\n\
    )\n", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"\
    ]\n      [(member (first message) vowels) (second message)]\n      [else (cons\
    \ (first message)\n                   (encode (substring message 1 (- (length\
    \ message) 1)))]))))\n", "  (define (swap-case message)\n    (define (swap-case-helper\
    \ message)\n      (define (helper letter index)\n        (cond\n          [(char=?\
    \ (char-code letter) 65) (char-code (char-code (substring message (+ index 1))))]\n\
    \          [(char=? (char-code letter) 97) (char-code (char-code (substring message\
    \ (+ index 1))))]\n          [else (helper (substring message (+ index 1)) index)]\n\
    \          ))\n      (helper message 0))\n    (swap-case-helper message))\n  (define\
    \ (vowel-helper message)\n    (define (vowel-helper-helper letter index)\n   \
    \   (cond\n        [(char=? (char-code letter) 65) (char-code (char-code (substring\
    \ message (+ index 1))))]\n        [(char=? (char-code letter) 97) (char-code\
    \ (char-code (substring message (+ index 1))))]\n        [else (vowel-helper-helper\
    \ (substring message (+ index 1)) index)]\n        ))\n    (vowel-helper-helper\
    \ message 0))\n  (define (vowel-helper-helper letter index)\n    (cond\n     \
    \ [(char=? (char-code letter) 65) (char-code (char-code (substring message (+\
    \ index 1))))]\n      [(char=? (char-code letter) 97) (char-code (char-code (substring\
    \ message (+ index 1))))]\n      [else (vowel-helper-helper (substring message\
    \ (+ index 1)) index)]\n      ))\n  (define (vowel-helper-helper letter index)\n\
    \    (cond\n      [(char=? (char-code letter) 65) (char-code (char-code (substring\
    \ message (+ index 1))))]\n      [(char=? (char-code letter) 97) (char-code (char-code\
    \ (substring message (+ index 1))))]\n      [else (vowel-helper-helper (substring\
    \ message (+ index 1)) index)]\n      ))\n  (define (vowel-helper-helper letter\
    \ index)\n    (cond\n      [(char=? (char-code letter) 65) (char-code (char-code\
    \ (substring message (+ index 1))))]\n      [(char=? (char-code letter) 97) (char-code\
    \ (char-code (substring message (+ index 1))))]\n      [else (vowel-helper-helper\
    \ (substring message (+ index 1)) index)]\n      ))\n  (define (vowel-helper-helper\
    \ letter index)\n    (cond", "  (let ((vowels '(a e i o u)))\n    (cond\n    \
    \  [(empty? message) \"\"]\n      [(member (first message) vowels) (cons (first\
    \ message) (encode (substring message 1 (- (length message) 1))))]\n      [else\
    \ (cons (first message) (encode (substring message 1 (- (length message) 1)))\n\
    \                (encode (substring message 0 (- (length message) 1)))\n     \
    \           (encode (substring message 1 (- (length message) 1)))\n          \
    \      (encode (substring message 0 (- (length message) 1)))\n               \
    \ (encode (substring message 1 (- (length message) 1)))\n                (encode\
    \ (substring message 0 (- (length message) 1)))\n                (encode (substring\
    \ message 1 (- (length message) 1)))\n                (encode (substring message\
    \ 0 (- (length message) 1)))\n                (encode (substring message 1 (-\
    \ (length message) 1)))\n                (encode (substring message 0 (- (length\
    \ message) 1)))\n                (encode (substring message 1 (- (length message)\
    \ 1)))\n                (encode (substring message 0 (- (length message) 1)))\n\
    \                (encode (substring message 1 (- (length message) 1)))\n     \
    \           (encode (substring message 0 (- (length message) 1)))\n          \
    \      (encode (substring message 1 (- (length message) 1)))\n               \
    \ (encode (substring message 0 (- (length message) 1)))\n                (encode\
    \ (substring message 1 (- (length message) 1)))\n                (encode (substring\
    \ message 0 (- (length message) 1)))\n                (encode (substring message\
    \ 1 (- (length message) 1)))\n                (encode (substring message 0 (-\
    \ (length message) 1)))\n                (encode (substring message 1 (- (length\
    \ message) 1)))\n                (encode (substring message 0 (- (length message)\
    \ 1)))\n                (encode (substring message 1 (- (length message) 1)))\n\
    \                (encode (substring message 0 (- (length message) 1)))\n     \
    \           (encode (substring message 1 (- (length message) 1)))\n          \
    \      (encode (substring message 0 (- (length message) 1)))\n               \
    \ (encode (substring message 1 (- (length message) 1)))\n                (encode\
    \ (substring message 0 (- (length message) 1)))\n                (encode (substring\
    \ message 1 (- (length message) 1)))\n                (encode (substring message\
    \ 0 (- (length message) 1)))\n                (encode (substring message 1 (-\
    \ (length message) 1)))\n                (encode (substring message 0 (- (length\
    \ message) 1)))\n                (encode (substring message 1 (- (length message)\
    \ 1)))\n                (encode (substring message 0 (- (length message) 1)))\n\
    \                (encode (substring message 1 (- (length message", "  (let ((vowels\
    \ '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n      [(member (first\
    \ message) vowels) (second message)]\n      [else (cons (first message) (encode\
    \ (second message)))])))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal?\
    \ (first message) ?a) (encode-a message)]\n    [(equal? (first message) ?e) (encode-e\
    \ message)]\n    [(equal? (first message) ?i) (encode-i message)]\n    [(equal?\
    \ (first message) ?o) (encode-o message)]\n    [(equal? (first message) ?u) (encode-u\
    \ message)]\n    [else (encode-others message)]))\n", "  (cond\n    [(empty? message)\
    \ \"\"]\n    [(equal? (first message) ?a) (encode-a message)]\n    [(equal? (first\
    \ message) ?e) (encode-e message)]\n    [(equal? (first message) ?i) (encode-i\
    \ message)]\n    [(equal? (first message) ?o) (encode-o message)]\n    [(equal?\
    \ (first message) ?u) (encode-u message)]\n    [else (encode-others message)]))\n",
  "  (let ((vowels '(a e i o u)))\n    (cond [(empty? message) \"\"]\n          [(member\
    \ (first message) vowels) (second message)]\n          [else (cons (first message)\n\
    \                       (map (lambda (vowel)\n                              (let\
    \ ((index (assoc vowel vowels)))\n                                (if (null? index)\n\
    \                                    (cons vowel \"\")\n                     \
    \               (cons (car index) (cdr index)))))\n                          \
    \  vowels))]))))\n", "  (let ((vowels '(a e i o u)))\n    (define (swap-case letter)\n\
    \      (cond ((member letter vowels) (member letter vowels))\n            ((member\
    \ letter vowels) (member letter vowels))\n            (else 'a)))\n    (define\
    \ (replace-vowels letter)\n      (cond ((member letter vowels) (member letter\
    \ vowels))\n            ((member letter vowels) (member letter vowels))\n    \
    \        (else 'a)))\n    (define (replace-vowels-2 letter)\n      (cond ((member\
    \ letter vowels) (member letter vowels))\n            ((member letter vowels)\
    \ (member letter vowels))\n            (else 'a)))\n    (define (replace-vowels-3\
    \ letter)\n      (cond ((member letter vowels) (member letter vowels))\n     \
    \       ((member letter vowels) (member letter vowels))\n            (else 'a)))\n\
    \    (define (replace-vowels-4 letter)\n      (cond ((member letter vowels) (member\
    \ letter vowels))\n            ((member letter vowels) (member letter vowels))\n\
    \            (else 'a)))\n    (define (replace-vowels-5 letter)\n      (cond ((member\
    \ letter vowels) (member letter vowels))\n            ((member letter vowels)\
    \ (member letter vowels))\n            (else 'a)))\n    (define (replace-vowels-6\
    \ letter)\n      (cond ((member letter vowels) (member letter vowels))\n     \
    \       ((member letter vowels) (member letter vowels))\n            (else 'a)))\n\
    \    (define (replace-vowels-7 letter)\n      (cond ((member letter vowels) (member\
    \ letter vowels))\n            ((member letter vowels) (member letter vowels))\n\
    \            (else 'a)))\n    (define (replace-vowels-8 letter)\n      (cond ((member\
    \ letter vowels) (member letter vowels))\n            ((member letter vowels)\
    \ (member letter vowels))\n            (else 'a)))\n    (define (replace-vowels-9\
    \ letter)\n      (cond ((member letter vowels) (member letter vowels))\n     \
    \       ((member letter vowels) (member letter vowels))\n            (else 'a)))\n\
    \    (define (replace-vowels-10 letter)\n      (cond ((member letter vowels) (member\
    \ letter vowels))\n            ((member letter vowels) (member letter vowels))\n\
    \            (else 'a)))\n    (define (replace-vowels-11 letter)\n      (cond\
    \ ((member letter vowels) (member letter vowels))\n            ((member letter\
    \ vowels) (member letter vowels))\n            (else '", "  (let ((vowels '(a\
    \ e i o u)))\n    (define (swap-case letter)\n      (let ((letter (char->string\
    \ letter)))\n        (cond ((member letter vowels) (cons letter (substring letter\
    \ 0 (string-length letter))))\n               (else letter)))\n    (define (replace-vowels\
    \ letter)\n      (let ((letter (char->string letter)))\n        (cond ((member\
    \ letter vowels) (cons letter (substring letter 0 (string-length letter))))\n\
    \               (else letter)))\n    (string-append (map swap-case (map replace-vowels\
    \ (map char->string (map char->string message))))))\n", "  (cond\n    [(empty?\
    \ message) \"\"]\n    [(equal? (first message) ?a) (encode (substring message\
    \ 1 2))]\n    [(equal? (first message) ?e) (encode (substring message 1 3))]\n\
    \    [(equal? (first message) ?i) (encode (substring message 1 4))]\n    [(equal?\
    \ (first message) ?o) (encode (substring message 1 5))]\n    [(equal? (first message)\
    \ ?u) (encode (substring message 1 6))]\n    [(equal? (first message) ?A) (encode\
    \ (substring message 1 7))] \n    [(equal? (first message) ?E) (encode (substring\
    \ message 1 8))] \n    [(equal? (first message) ?I) (encode (substring message\
    \ 1 9))] \n    [(equal? (first message) ?O) (encode (substring message 1 10))]\
    \ \n    [(equal? (first message) ?U) (encode (substring message 1 11))] \n   \
    \ [(equal? (first message) ?a) (encode (substring message 1 12))] \n    [(equal?\
    \ (first message) ?e) (encode (substring message 1 13))] \n    [(equal? (first\
    \ message) ?i) (encode (substring message 1 14))] \n    [(equal? (first message)\
    \ ?o) (encode (substring message 1 15))] \n    [(equal? (first message) ?u) (encode\
    \ (substring message 1 16))] \n    [(equal? (first message) ?A) (encode (substring\
    \ message 1 17))] \n    [(equal? (first message) ?E) (encode (substring message\
    \ 1 18))] \n    [(equal? (first message) ?I) (encode (substring message 1 19))]\
    \ \n    [(equal? (first message) ?O) (encode (substring message 1 20))] \n   \
    \ [(equal? (first message) ?U) (encode (substring message 1 21))] \n    [(equal?\
    \ (first message) ?a) (encode (substring message 1 22))] \n    [(equal? (first\
    \ message) ?e) (encode (substring message 1 23))] \n    [(equal? (first message)\
    \ ?i) (encode (substring message 1 24))] \n    [(equal? (first message) ?o) (encode\
    \ (substring message 1 25))] \n    [(equal? (first message) ?u) (encode (substring\
    \ message 1 26))] \n    [(equal? (first message) ?A) (", "  (define (swap-case\
    \ message)\n    (define (swap-case-helper message index)\n      (cond [(char=?\
    \ (char-code message) 65) (char-code (substring message 0 index) 97)]\n      \
    \      [(char=? (char-code message) 97) (char-code (substring message 0 index)\
    \ 65)]\n            [else (substring message 0 index)]))\n    (define (vowel-helper\
    \ message index)\n      (cond [(char=? (char-code message) 65) (char-code (substring\
    \ message 0 index) 97)]\n            [(char=? (char-code message) 97) (char-code\
    \ (substring message 0 index) 65)]\n            [else (substring message 0 index)]))\n\
    \    (define (vowel-helper-2 message index)\n      (cond [(char=? (char-code message)\
    \ 65) (char-code (substring message 0 index) 97)]\n            [(char=? (char-code\
    \ message) 97) (char-code (substring message 0 index) 65)]\n            [else\
    \ (substring message 0 index)]))\n    (define (vowel-helper-3 message index)\n\
    \      (cond [(char=? (char-code message) 65) (char-code (substring message 0\
    \ index) 97)]\n            [(char=? (char-code message) 97) (char-code (substring\
    \ message 0 index) 65)]\n            [else (substring message 0 index)]))\n  \
    \  (define (vowel-helper-4 message index)\n      (cond [(char=? (char-code message)\
    \ 65) (char-code (substring message 0 index) 97)]\n            [(char=? (char-code\
    \ message) 97) (char-code (substring message 0 index) 65)]\n            [else\
    \ (substring message 0 index)]))\n    (define (vowel-helper-5 message index)\n\
    \      (cond [(char=? (char-code message) 65) (char-code (substring message 0\
    \ index) 97)]\n            [(char=? (char-code message) 97) (char-code (substring\
    \ message 0 index) 65)]\n            [else (substring message 0 index)]))\n  \
    \  (define (vowel-helper-6 message index)\n      (cond [(char=? (char-code message)\
    \ 65) (char-code (substring message 0 index) 97)]\n            [(char=? (char-code\
    \ message) 97) (char-code (substring message 0 index) 65)]\n            [else\
    \ (substring message 0 index)]))\n    (define ", "  (define (enc-helper message\
    \ index)\n    (cond\n      [(char-alphabet (char message index)) (char message\
    \ index)]\n      [else (enc-helper (char message (+ index 1)) index)]))\n  (enc-helper\
    \ message 0))\n", "  (define (swap-case letter)\n    (if (char-alphabet letter)\n\
    \        (char-upper-case letter)\n        (char-lower-case letter)))\n  (define\
    \ (vowel-substitution vowel)\n    (if (char-alphabet vowel)\n        (char-upper-case\
    \ vowel)\n        (char-lower-case vowel)))\n  (define (vowel-substitutions letter)\n\
    \    (if (char-alphabet letter)\n        (cons (vowel-substitution (vowel-at letter\
    \ 0))\n              (vowel-substitutions (vowel-at letter 1))))\n    (vowel-substitutions\
    \ '())))\n  (define (vowel-at letter position)\n    (if (char-alphabet letter)\n\
    \        (char-at letter position)\n        (char-at '() position)))\n  (define\
    \ (vowel-substitutions-for-letter letter)\n    (if (char-alphabet letter)\n  \
    \      (cons (vowel-substitution (vowel-at letter 0))\n              (vowel-substitutions-for-letter\
    \ (vowel-at letter 1))))\n    (vowel-substitutions-for-letter '())))\n  (define\
    \ (vowel-substitutions-for-message-letter letter)\n    (if (char-alphabet letter)\n\
    \        (cons (vowel-substitution (vowel-at letter 0))\n              (vowel-substitutions-for-message-letter\
    \ (vowel-at letter 1))))\n    (vowel-substitutions-for-message-letter '())))\n\
    \  (define (vowel-substitutions-for-message-letter letter)\n    (if (char-alphabet\
    \ letter)\n        (cons (vowel-substitution (vowel-at letter 0))\n          \
    \    (vowel-substitutions-for-message-letter (vowel-at letter 1))))\n    (vowel-substitutions-for-message-letter\
    \ '())))\n  (define (vowel-substitutions-for-message-letter letter)\n    (if (char-alphabet\
    \ letter)\n        (cons (vowel-substitution (vowel-at letter 0))\n          \
    \    (vowel-substitutions-for-message-letter (vowel-at letter 1))))\n    (vowel-substitutions-for-message-letter\
    \ '())))\n  (define (vowel-substitutions-for-message-letter letter)\n    (if (char-alphabet\
    \ letter)\n        (cons (vowel-substitution (vowel-at letter 0))\n          \
    \    (vowel-substitutions-for-message-letter (vowel-at letter 1))))\n    (vowel-substitutions-for-message-letter\
    \ '())))\n  (define (vowel-substitutions-for-message-letter letter)\n    (if (char-alphabet\
    \ letter)\n", "  (define (helper message i j)\n    (cond [(= i j) (list message)]\n\
    \          [(char-alphabet (char message)) (list message)]\n          [(char-alphabet\
    \ (char message)) (list message)]\n          [(char-alphabet (char message)) (list\
    \ message)]\n          [(char-alphabet (char message)) (list message)]\n     \
    \     [(char-alphabet (char message)) (list message)]\n          [(char-alphabet\
    \ (char message)) (list message)]\n          [(char-alphabet (char message)) (list\
    \ message)]\n          [(char-alphabet (char message)) (list message)]\n     \
    \     [(char-alphabet (char message)) (list message)]\n          [(char-alphabet\
    \ (char message)) (list message)]\n          [(char-alphabet (char message)) (list\
    \ message)]\n          [(char-alphabet (char message)) (list message)]\n     \
    \     [(char-alphabet (char message)) (list message)]\n          [(char-alphabet\
    \ (char message)) (list message)]\n          [(char-alphabet (char message)) (list\
    \ message)]\n          [(char-alphabet (char message)) (list message)]\n     \
    \     [(char-alphabet (char message)) (list message)]\n          [(char-alphabet\
    \ (char message)) (list message)]\n          [(char-alphabet (char message)) (list\
    \ message)]\n          [(char-alphabet (char message)) (list message)]\n     \
    \     [(char-alphabet (char message)) (list message)]\n          [(char-alphabet\
    \ (char message)) (list message)]\n          [(char-alphabet (char message)) (list\
    \ message)]\n          [(char-alphabet (char message)) (list message)]\n     \
    \     [(char-alphabet (char message)) (list message)]\n          [(char-alphabet\
    \ (char message)) (list message)]\n          [(char-alphabet (char message)) (list\
    \ message)]\n          [(char-alphabet (char message)) (list message)]\n     \
    \     [(char-alphabet (char message)) (list message)]\n          [(char-alphabet\
    \ (char message)) (list message)]\n          [(char-alphabet (char message)) (list\
    \ message)]\n          [(char-alphabet (char message)) (list message)]\n     \
    \     [(char-alphabet (char message)) (list ", "  (cond\n    [(empty? message)\
    \ \"\"]\n    [(equal? (first message) ?a) (encode (substring message 1 2))]\n\
    \    [(equal? (first message) ?e) (encode (substring message 1 3))]\n    [(equal?\
    \ (first message) ?i) (encode (substring message 1 4))]\n    [(equal? (first message)\
    \ ?o) (encode (substring message 1 5))]\n    [(equal? (first message) ?u) (encode\
    \ (substring message 1 6))]\n    [(equal? (first message) ?A) (encode (substring\
    \ message 1 7))] \n    [(equal? (first message) ?E) (encode (substring message\
    \ 1 8))] \n    [(equal? (first message) ?I) (encode (substring message 1 9))]\
    \ \n    [(equal? (first message) ?O) (encode (substring message 1 10))] \n   \
    \ [(equal? (first message) ?U) (encode (substring message 1 11))] \n    [(equal?\
    \ (first message) ?a) (encode (substring message 1 12))] \n    [(equal? (first\
    \ message) ?e) (encode (substring message 1 13))] \n    [(equal? (first message)\
    \ ?i) (encode (substring message 1 14))] \n    [(equal? (first message) ?o) (encode\
    \ (substring message 1 15))] \n    [(equal? (first message) ?u) (encode (substring\
    \ message 1 16))] \n    [(equal? (first message) ?A) (encode (substring message\
    \ 1 17))] \n    [(equal? (first message) ?E) (encode (substring message 1 18))]\
    \ \n    [(equal? (first message) ?I) (encode (substring message 1 19))] \n   \
    \ [(equal? (first message) ?O) (encode (substring message 1 20))] \n    [(equal?\
    \ (first message) ?U) (encode (substring message 1 21))] \n    [(equal? (first\
    \ message) ?a) (encode (substring message 1 22))] \n    [(equal? (first message)\
    \ ?e) (encode (substring message 1 23))] \n    [(equal? (first message) ?i) (encode\
    \ (substring message 1 24))] \n    [(equal? (first message) ?o) (encode (substring\
    \ message 1 25))] \n    [(equal? (first message) ?u) (encode (substring message\
    \ 1 26))] \n    [(equal? (first message) ?A) (", "  (let ((vowels '(a e i o u)))\n\
    \    (cond\n      [(empty? message) \"\"]\n      [(member (first message) vowels)\
    \ (second message)]\n      [else (cons (first message)\n                  (encode\
    \ (substring message 1 (- (length message) 1))))])))\n", "  (let ((vowels '(a\
    \ e i o u)))\n    (cond\n      [(empty? message) \"\"]\n      [(member (first\
    \ message) vowels) (cons (first message) (encode (substring message 1 )))]\n \
    \     [else (cons (first message) (encode (substring message 1 )))])))\n", " \
    \ (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode\
    \ (substring message 1 2))]\n    [(equal? (first message) ?e) (encode (substring\
    \ message 1 3))]\n    [(equal? (first message) ?i) (encode (substring message\
    \ 1 4))]\n    [(equal? (first message) ?o) (encode (substring message 1 5))]\n\
    \    [(equal? (first message) ?u) (encode (substring message 1 6))]\n    [else\
    \ (cons (first message)\n               (encode (substring message 2)))))\n",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode-a\
    \ message)]\n    [(equal? (first message) ?e) (encode-e message)]\n    [(equal?\
    \ (first message) ?i) (encode-i message)]\n    [(equal? (first message) ?o) (encode-o\
    \ message)]\n    [(equal? (first message) ?u) (encode-u message)]\n    [else (encode-other\
    \ (first message))]))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal?\
    \ (first message) ?a) (encode (substring message 1 2))]\n    [(equal? (first message)\
    \ ?e) (encode (substring message 1 3))]\n    [(equal? (first message) ?i) (encode\
    \ (substring message 1 4))]\n    [(equal? (first message) ?o) (encode (substring\
    \ message 1 5))]\n    [(equal? (first message) ?u) (encode (substring message\
    \ 1 6))]\n    [else (cons (first message)\n               (encode (substring message\
    \ 2)))]))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message)\
    \ ?a) (encode-a message)]\n    [(equal? (first message) ?e) (encode-e message)]\n\
    \    [(equal? (first message) ?i) (encode-i message)]\n    [(equal? (first message)\
    \ ?o) (encode-o message)]\n    [(equal? (first message) ?u) (encode-u message)]\n\
    \    [else (encode-others message)]))\n", "  (let ((vowels '(a e i o u)))\n  \
    \  (cond\n      [(empty? message) \"\"]\n      [(member (first message) vowels)\
    \ (cons (first message) (encode (substring message 1 (length message))))]\n  \
    \    [else (cons (first message) (encode (substring message 1 (length message))))])))\n",
  "  (define (helper i j)\n    (if (= i j)\n        (list message)\n        (if (char-alphabet\
    \ (char message i))\n            (cons (char-alphabet (char message i)) \n   \
    \               (helper (+ i 1) j))\n            (helper (+ i 1) j))))\n  (helper\
    \ 0 0))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message)\
    \ \"\"]\n      [(member (first message) vowels) (second message)]\n      [else\
    \ (cons (first message)\n                   (encode (substring message 1 (length\
    \ message))))])))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty?\
    \ message) \"\"]\n      [(char-alphabet (car message)) (cons (char-alphabet (car\
    \ message)) (encode (cdr message)))]\n      [(char-alphabet (car message)) (cons\
    \ (char-alphabet (car message)) (encode (cdr message)))]\n      [else (cons (char-alphabet\
    \ (car message)) (encode (cdr message)))])))\n", "  (cond\n    [(empty? message)\
    \ \"\"]\n    [(equal? (first message) ?a) (encode (substring message 1 2))]\n\
    \    [(equal? (first message) ?e) (encode (substring message 1 3))]\n    [(equal?\
    \ (first message) ?i) (encode (substring message 1 4))]\n    [(equal? (first message)\
    \ ?o) (encode (substring message 1 5))]\n    [(equal? (first message) ?u) (encode\
    \ (substring message 1 6))]\n    [(equal? (first message) ?A) (encode (substring\
    \ message 1 7))] \n    [(equal? (first message) ?E) (encode (substring message\
    \ 1 8))] \n    [(equal? (first message) ?I) (encode (substring message 1 9))]\
    \ \n    [(equal? (first message) ?O) (encode (substring message 1 10))] \n   \
    \ [(equal? (first message) ?U) (encode (substring message 1 11))] \n    [(equal?\
    \ (first message) ?a) (encode (substring message 1 12))] \n    [(equal? (first\
    \ message) ?e) (encode (substring message 1 13))] \n    [(equal? (first message)\
    \ ?i) (encode (substring message 1 14))] \n    [(equal? (first message) ?o) (encode\
    \ (substring message 1 15))] \n    [(equal? (first message) ?u) (encode (substring\
    \ message 1 16))] \n    [(equal? (first message) ?A) (encode (substring message\
    \ 1 17))] \n    [(equal? (first message) ?E) (encode (substring message 1 18))]\
    \ \n    [(equal? (first message) ?I) (encode (substring message 1 19))] \n   \
    \ [(equal? (first message) ?O) (encode (substring message 1 20))] \n    [(equal?\
    \ (first message) ?U) (encode (substring message 1 21))] \n    [(equal? (first\
    \ message) ?a) (encode (substring message 1 22))] \n    [(equal? (first message)\
    \ ?e) (encode (substring message 1 23))] \n    [(equal? (first message) ?i) (encode\
    \ (substring message 1 24))] \n    [(equal? (first message) ?o) (encode (substring\
    \ message 1 25))] \n    [(equal? (first message) ?u) (encode (substring message\
    \ 1 26))] \n    [(equal? (first message) ?A) (", "  (cond\n    [(empty? message)\
    \ \"\"]\n    [(equal? (first message) ?a) (encode (substring message 1 2))]\n\
    \    [(equal? (first message) ?e) (encode (substring message 1 3))]\n    [(equal?\
    \ (first message) ?i) (encode (substring message 1 4))]\n    [(equal? (first message)\
    \ ?o) (encode (substring message 1 5))]\n    [(equal? (first message) ?u) (encode\
    \ (substring message 1 6))]\n    [(equal? (first message) ?A) (encode (substring\
    \ message 1 7))] \n    [(equal? (first message) ?E) (encode (substring message\
    \ 1 8))] \n    [(equal? (first message) ?I) (encode (substring message 1 9))]\
    \ \n    [(equal? (first message) ?O) (encode (substring message 1 10))] \n   \
    \ [(equal? (first message) ?U) (encode (substring message 1 11))] \n    [(equal?\
    \ (first message) ?a) (encode (substring message 1 12))]\n    [(equal? (first\
    \ message) ?e) (encode (substring message 1 13))]\n    [(equal? (first message)\
    \ ?i) (encode (substring message 1 14))]\n    [(equal? (first message) ?o) (encode\
    \ (substring message 1 15))]\n    [(equal? (first message) ?u) (encode (substring\
    \ message 1 16))]\n    [(equal? (first message) ?A) (encode (substring message\
    \ 1 17))]\n    [(equal? (first message) ?E) (encode (substring message 1 18))]\n\
    \    [(equal? (first message) ?I) (encode (substring message 1 19))]\n    [(equal?\
    \ (first message) ?O) (encode (substring message 1 20))] \n    [(equal? (first\
    \ message) ?U) (encode (substring message 1 21))]\n    [(equal? (first message)\
    \ ?a) (encode (substring message 1 22))]\n    [(equal? (first message) ?e) (encode\
    \ (substring message 1 23))]\n    [(equal? (first message) ?i) (encode (substring\
    \ message 1 24))]\n    [(equal? (first message) ?o) (encode (substring message\
    \ 1 25))]\n    [(equal? (first message) ?u) (encode (substring message 1 26))]\n\
    \    [(equal? (first message) ?A) (encode (substring message 1 27))]\n    [(equal",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode\
    \ (substring message 1 2))]\n    [(equal? (first message) ?e) (encode (substring\
    \ message 1 3))]\n    [(equal? (first message) ?i) (encode (substring message\
    \ 1 4))]\n    [(equal? (first message) ?o) (encode (substring message 1 5))]\n\
    \    [(equal? (first message) ?u) (encode (substring message 1 6))]\n    [else\
    \ (cons (first message)\n               (encode (substring message 2)))]))\n",
  "  (let ((vowels '(a e i o u)))\n    (cond ((null? message) '())\n          ((char-alphabet\
    \ (car message)) (cons (char-alphabet (car message)) (encode (substring message\
    \ 1 (char-alphabet (car message)))))\n          ((char-alphabet (car message))\
    \ (cons (char-alphabet (car message)) (encode (substring message 1 (char-alphabet\
    \ (car message)))))\n          ((char-alphabet (car message)) (cons (char-alphabet\
    \ (car message)) (encode (substring message 1 (char-alphabet (car message)))))\n\
    \          ((char-alphabet (car message)) (cons (char-alphabet (car message))\
    \ (encode (substring message 1 (char-alphabet (car message)))))\n          ((char-alphabet\
    \ (car message)) (cons (char-alphabet (car message)) (encode (substring message\
    \ 1 (char-alphabet (car message)))))\n          ((char-alphabet (car message))\
    \ (cons (char-alphabet (car message)) (encode (substring message 1 (char-alphabet\
    \ (car message)))))\n          ((char-alphabet (car message)) (cons (char-alphabet\
    \ (car message)) (encode (substring message 1 (char-alphabet (car message)))))\n\
    \          ((char-alphabet (car message)) (cons (char-alphabet (car message))\
    \ (encode (substring message 1 (char-alphabet (car message)))))\n          ((char-alphabet\
    \ (car message)) (cons (char-alphabet (car message)) (encode (substring message\
    \ 1 (char-alphabet (car message)))))\n          ((char-alphabet (car message))\
    \ (cons (char-alphabet (car message)) (encode (substring message 1 (char-alphabet\
    \ (car message)))))\n          ((char-alphabet (car message)) (cons (char-alphabet\
    \ (car message)) (encode (substring message 1 (char-alphabet (car message)))))\n\
    \          ((char-alphabet (car message)) (cons (char-alphabet (car message))\
    \ (encode (substring message 1 (char-alphabet (car message)))))\n          ((char-alphabet\
    \ (car message)) (cons (char-alphabet (car message)) (encode (substring message\
    \ 1 (char-alphabet ", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first\
    \ message) ?a) (encode-a message)]\n    [(equal? (first message) ?e) (encode-e\
    \ message)]\n    [(equal? (first message) ?i) (encode-i message)]\n    [(equal?\
    \ (first message) ?o) (encode-o message)]\n    [(equal? (first message) ?u) (encode-u\
    \ message)]\n    [else (encode-other (first message))]))\n", "  (let ([vowels\
    \ '(a e i o u)])\n    (cond\n      [(empty? message) \"\"]\n      [(member (first\
    \ message) vowels) (cons (first message) (encode (substring (second message) 0\
    \ (- (length message) 1)))) ]\n      [else (cons (first message) (encode (substring\
    \ (second message) 0 (- (length message) 1)))) ]\n      )))\n", "  (let ([vowels\
    \ '(a e i o u)])\n    (cond\n      [(empty? message) message]\n      [(member\
    \ (first message) vowels) (second message)]\n      [else (cons (first message)\n\
    \                   (encode (substring message 1 (- (length message) 1)))]))))\n",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode-a\
    \ message)]\n    [(equal? (first message) ?e) (encode-e message)]\n    [(equal?\
    \ (first message) ?i) (encode-i message)]\n    [(equal? (first message) ?o) (encode-o\
    \ message)]\n    [(equal? (first message) ?u) (encode-u message)]\n    [else (encode-others\
    \ message)]))\n", "  (let ((letters '(a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z)))\n    (map (lambda (letter)\n           (let ((index (assoc letter\
    \ letters)))\n             (if (null? index)\n                 (list letter)\n\
    \                 (cons (car index) (cdr index)))))\n         message)))\n", " \
    \ (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode\
    \ (substring message 1 2))]\n    [(equal? (first message) ?e) (encode (substring\
    \ message 1 3))]\n    [(equal? (first message) ?i) (encode (substring message\
    \ 1 4))]\n    [(equal? (first message) ?o) (encode (substring message 1 5))]\n\
    \    [(equal? (first message) ?u) (encode (substring message 1 6))]\n    [else\
    \ (cons (first message)\n              (encode (substring message 2)))))\n", " \
    \ (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n   \
    \   [(member (first message) vowels) (first message)]\n      [else (cons (first\
    \ message)\n                   (encode (substring message 1 (length message))))])))\n",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode\
    \ (substring message 1 2))]\n    [(equal? (first message) ?e) (encode (substring\
    \ message 1 3))]\n    [(equal? (first message) ?i) (encode (substring message\
    \ 1 4))]\n    [(equal? (first message) ?o) (encode (substring message 1 5))]\n\
    \    [(equal? (first message) ?u) (encode (substring message 1 6))]\n    [else\
    \ (cons (first message)\n               (encode (substring message 2)))))\n",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode\
    \ (substring message 1 2))]\n    [(equal? (first message) ?e) (encode (substring\
    \ message 1 3))]\n    [(equal? (first message) ?i) (encode (substring message\
    \ 1 4))]\n    [(equal? (first message) ?o) (encode (substring message 1 5))]\n\
    \    [(equal? (first message) ?u) (encode (substring message 1 6))]\n    [(equal?\
    \ (first message) ?A) (encode (substring message 1 7))] \n    [(equal? (first\
    \ message) ?E) (encode (substring message 1 8))] \n    [(equal? (first message)\
    \ ?I) (encode (substring message 1 9))] \n    [(equal? (first message) ?O) (encode\
    \ (substring message 1 10))] \n    [(equal? (first message) ?U) (encode (substring\
    \ message 1 11))] \n    [(equal? (first message) ?a) (encode (substring message\
    \ 1 12))]\n    [(equal? (first message) ?e) (encode (substring message 1 13))]\n\
    \    [(equal? (first message) ?i) (encode (substring message 1 14))]\n    [(equal?\
    \ (first message) ?o) (encode (substring message 1 15))]\n    [(equal? (first\
    \ message) ?u) (encode (substring message 1 16))]\n    [(equal? (first message)\
    \ ?A) (encode (substring message 1 17))]\n    [(equal? (first message) ?E) (encode\
    \ (substring message 1 18))]\n    [(equal? (first message) ?I) (encode (substring\
    \ message 1 19))]\n    [(equal? (first message) ?O) (encode (substring message\
    \ 1 20))] \n    [(equal? (first message) ?U) (encode (substring message 1 21))]\n\
    \    [(equal? (first message) ?a) (encode (substring message 1 22))]\n    [(equal?\
    \ (first message) ?e) (encode (substring message 1 23))]\n    [(equal? (first\
    \ message) ?i) (encode (substring message 1 24))]\n    [(equal? (first message)\
    \ ?o) (encode (substring message 1 25))]\n    [(equal? (first message) ?u) (encode\
    \ (substring message 1 26))]\n    [(equal? (first message) ?A) (encode (substring\
    \ message 1 27))]\n    [(equal", "  (let ((letters '(#\\a #\\b #\\c #\\d #\\e\
    \ #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\\
    v #\\w #\\x #\\y #\\z))\n        (vowels '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G\
    \ #\\H #\\I #\\J #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\\
    X #\\Y #\\Z)))\n    (cond\n      [(empty? message) \"\"]\n      [(char-alphabetic?\
    \ message) message]\n      [(char-alphabetic? (first message)) (encode (first\
    \ message))]\n      [(char-alphabetic? (second message)) (encode (second message))]\n\
    \      [(char-alphabetic? (third message)) (encode (third message))]\n      [(char-alphabetic?\
    \ (fourth message)) (encode (fourth message))]\n      [(char-alphabetic? (fifth\
    \ message)) (encode (fifth message))]\n      [(char-alphabetic? (sixth message))\
    \ (encode (sixth message))]\n      [(char-alphabetic? (seventh message)) (encode\
    \ (seventh message))]\n      [(char-alphabetic? (eighth message)) (encode (eighth\
    \ message))]\n      [(char-alphabetic? (ninth message)) (encode (ninth message))]\n\
    \      [(char-alphabetic? (tenth message)) (encode (tenth message))]\n      [(char-alphabetic?\
    \ (eleventh message)) (encode (eleventh message))]\n      [(char-alphabetic? (twelfth\
    \ message)) (encode (twelfth message))]\n      [(char-alphabetic? (thirteenth\
    \ message)) (encode (thirteenth message))]\n      [(char-alphabetic? (fourteenth\
    \ message)) (encode (fourteenth message))]\n      [(char-alphabetic? (fifteenth\
    \ message)) (encode (fifteenth message))]\n      [(char-alphabetic? (sixteenth\
    \ message)) (encode (sixteen", "  (define (helper i j)\n    (cond [(= i j) (string\
    \ message)]\n          [(char-alphabet (char message)) (string message)]\n   \
    \       [(char-alphabet (char message)) (string message)]\n          [(char-alphabet\
    \ (char message)) (string message)]\n          [(char-alphabet (char message))\
    \ (string message)]\n          [(char-alphabet (char message)) (string message)]\n\
    \          [(char-alphabet (char message)) (string message)]\n          [(char-alphabet\
    \ (char message)) (string message)]\n          [(char-alphabet (char message))\
    \ (string message)]\n          [(char-alphabet (char message)) (string message)]\n\
    \          [(char-alphabet (char message)) (string message)]\n          [(char-alphabet\
    \ (char message)) (string message)]\n          [(char-alphabet (char message))\
    \ (string message)]\n          [(char-alphabet (char message)) (string message)]\n\
    \          [(char-alphabet (char message)) (string message)]\n          [(char-alphabet\
    \ (char message)) (string message)]\n          [(char-alphabet (char message))\
    \ (string message)]\n          [(char-alphabet (char message)) (string message)]\n\
    \          [(char-alphabet (char message)) (string message)]\n          [(char-alphabet\
    \ (char message)) (string message)]\n          [(char-alphabet (char message))\
    \ (string message)]\n          [(char-alphabet (char message)) (string message)]\n\
    \          [(char-alphabet (char message)) (string message)]\n          [(char-alphabet\
    \ (char message)) (string message)]\n          [(char-alphabet (char message))\
    \ (string message)]\n          [(char-alphabet (char message)) (string message)]\n\
    \          [(char-alphabet (char message)) (string message)]\n          [(char-alphabet\
    \ (char message)) (string message)]\n          [(char-alphabet (char message))\
    \ (string message)]\n          [(char-alphabet (char message)) (string message)]\n\
    \          [(char-alphabet (char message)) (string message)]\n          [(char-alphabet\
    \ (char message)) (string message)]\n          [(char-alphabet (char message))\
    \ (string message)]\n          [(char-alphabet (char message)) (string message",
  "  (define (helper message vowels)\n    (cond\n      [(empty? message) \"\"]\n \
    \     [(equal? (first message) vowels) (second message)]\n      [else (helper\
    \ (rest message) (cons (first message) vowels))]))\n  (helper (reverse message)\
    \ '()))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message)\
    \ \"\"]\n      [(member (first message) vowels) (cons (first message) (encode\
    \ (substring (second message) 0 (- (length message) 1)))) ]\n      [else (cons\
    \ (first message) (encode (substring (second message) 0 (- (length message) 1))))\
    \ (encode (substring (second message) 1 (- (length message) 1)))])))", "  (let\
    \ ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n      [(member\
    \ (first message) vowels) (cons (first message) (encode (substring message 1 (-\
    \ (length message) 1))))]\n      [else (cons (first message) (encode (substring\
    \ message 1 (- (length message) 1))))])))\n", "  (cond\n    [(empty? message)\
    \ \"\"]\n    [(equal? (first message) ?a) (encode-a message)]\n    [(equal? (first\
    \ message) ?e) (encode-e message)]\n    [(equal? (first message) ?i) (encode-i\
    \ message)]\n    [(equal? (first message) ?o) (encode-o message)]\n    [(equal?\
    \ (first message) ?u) (encode-u message)]\n    [else (encode-other (first message))]))\n",
  "  (define (vowel-pair? vowel)\n    (string=? (vowel (char-code message)) 'a) (string=?\
    \ (vowel (char-code message)) 'e) (string=? (vowel (char-code message)) 'i) (string=?\
    \ (vowel (char-code message)) 'o) (string=? (vowel (char-code message)) 'u))\n\
    \  (define (vowel-pair-count vowel)\n    (string-length (substring message 0 (char-code\
    \ (vowel (char-code message)))))\n  (define (vowel-pair-index vowel)\n    (string-length\
    \ (substring message 0 (char-code (vowel (char-code message)))))\n  (define (vowel-pair-char\
    \ vowel)\n    (char (char-code (vowel (char-code message))))\n  (define (vowel-pair-char\
    \ vowel)\n    (char (char-code (vowel (char-code message))))\n  (define (vowel-pair-char\
    \ vowel)\n    (char (char-code (vowel (char-code message))))\n  (define (vowel-pair-char\
    \ vowel)\n    (char (char-code (vowel (char-code message))))\n  (define (vowel-pair-char\
    \ vowel)\n    (char (char-code (vowel (char-code message))))\n  (define (vowel-pair-char\
    \ vowel)\n    (char (char-code (vowel (char-code message))))\n  (define (vowel-pair-char\
    \ vowel)\n    (char (char-code (vowel (char-code message))))\n  (define (vowel-pair-char\
    \ vowel)\n    (char (char-code (vowel (char-code message))))\n  (define (vowel-pair-char\
    \ vowel)\n    (char (char-code (vowel (char-code message))))\n  (define (vowel-pair-char\
    \ vowel)\n    (char (char-code (vowel (char-code message))))\n  (define (vowel-pair-char\
    \ vowel)\n    (char (char-code (vowel (char-code message))))\n  (define (vowel-pair-char\
    \ vowel)\n    (char (char-code (vowel (char-code message))))\n  (define (vowel-pair-char\
    \ vowel)\n    (char (char-code (vowel (char-code message))))\n  (define (vowel-pair-char\
    \ vowel)\n    (char (char-code (vowel (char-code message))))\n  (define (vowel-pair-",
  "  (let ([vowels '(a e i o u)])\n    (cond\n      [(empty? message) \"\"]\n    \
    \  [(member (first message) vowels) (cons (first message) (encode (rest message)))]\n\
    \      [else (cons (first message) (encode (rest message)))])))\n", "  (define\
    \ (helper message i j)\n    (cond\n      [(empty? message) message]\n      [(equal?\
    \ (char-ref message i) (char-ref message j)) (char-ref message j)\n       (helper\
    \ (substring message i (+ i 1)) j (+ j 1))]\n      [else (helper (substring message\
    \ i (+ i 1)) j (+ j 1))]))\n  (helper message 0 0))\n", "  (let ((vowels '(a e\
    \ i o u)))\n    (cond\n      [(empty? message) empty]\n      [(member (first message)\
    \ vowels) (cons (first message) (encode (substring message 1 (- (length message)\
    \ 1)))) ]\n      [else (cons (first message) (encode (substring message 1 (- (length\
    \ message) 1)))) ]\n    ))\n  )\n", "  (let ((vowels '(a e i o u)))\n    (cond\n\
    \      [(empty? message) \"\"]\n      [(char-lower? (first message)) (cons (char-upper-case\
    \ (first message)) (encode (rest message)))]\n      [(char-upper? (first message))\
    \ (cons (char-lower-case (first message)) (encode (rest message)))]\n      [else\
    \ (cons (char-upper-case (first message)) (encode (rest message)))])))\n", " \
    \ (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n   \
    \   [(member (first message) vowels) (cons (first message) (encode (substring\
    \ message 1 (- (length message) 1)))) ]\n      [else (cons (first message) (encode\
    \ (substring message 1 (- (length message) 1)))) ]\n    )\n  )\n)\n", "  (let\
    \ ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n      [(member\
    \ (first message) vowels) (cons (first message) (encode (substring message 1 (length\
    \ message))))]\n      [else (cons (first message) (encode (substring message 1\
    \ (length message))))])))\n", "  (define (helper message i j)\n    (cond [(= i\
    \ j) (list message)]\n          [(char-alphabet (char message)) (list message)]\n\
    \          [(char-alphabet (char message)) (list message)]\n          [(char-alphabet\
    \ (char message)) (list message)]\n          [(char-alphabet (char message)) (list\
    \ message)]\n          [(char-alphabet (char message)) (list message)]\n     \
    \     [(char-alphabet (char message)) (list message)]\n          [(char-alphabet\
    \ (char message)) (list message)]\n          [(char-alphabet (char message)) (list\
    \ message)]\n          [(char-alphabet (char message)) (list message)]\n     \
    \     [(char-alphabet (char message)) (list message)]\n          [(char-alphabet\
    \ (char message)) (list message)]\n          [(char-alphabet (char message)) (list\
    \ message)]\n          [(char-alphabet (char message)) (list message)]\n     \
    \     [(char-alphabet (char message)) (list message)]\n          [(char-alphabet\
    \ (char message)) (list message)]\n          [(char-alphabet (char message)) (list\
    \ message)]\n          [(char-alphabet (char message)) (list message)]\n     \
    \     [(char-alphabet (char message)) (list message)]\n          [(char-alphabet\
    \ (char message)) (list message)]\n          [(char-alphabet (char message)) (list\
    \ message)]\n          [(char-alphabet (char message)) (list message)]\n     \
    \     [(char-alphabet (char message)) (list message)]\n          [(char-alphabet\
    \ (char message)) (list message)]\n          [(char-alphabet (char message)) (list\
    \ message)]\n          [(char-alphabet (char message)) (list message)]\n     \
    \     [(char-alphabet (char message)) (list message)]\n          [(char-alphabet\
    \ (char message)) (list message)]\n          [(char-alphabet (char message)) (list\
    \ message)]\n          [(char-alphabet (char message)) (list message)]\n     \
    \     [(char-alphabet (char message)) (list message)]\n          [(char-alphabet\
    \ (char message)) (list message)]\n          [(char-alphabet (char message)) (list\
    \ message)]\n          [(char-alphabet (char message)) (list ", "  (let ((letters\
    \ '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\\
    o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n        (vowels '(#\\A\
    \ #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J #\\K #\\L #\\M #\\N #\\O #\\P #\\\
    Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z)))\n    (cond\n      [(empty? message)\
    \ \"\"]\n      [(char-alphabetic? (first message)) (cons (first message) (encode\
    \ (rest message)))]\n      [else (cons (first message) (encode (rest message)))])))\n",
  "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n    \
    \  [(member (first message) vowels) (cons (first message) (encode (substring message\
    \ 1 (length message))))]\n      [else (cons (first message) (encode (substring\
    \ message 1 (length message))))])))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n\
    \      [(empty? message) \"\"]\n      [(member (first message) vowels) (second\
    \ message)]\n      [else (cons (first message) (encode (substring (second message)\
    \ 0 (- (length message) 1)))])]))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n\
    \      [(empty? message) \"\"]\n      [(member (first message) vowels) (first\
    \ message)]\n      [else (cons (first message)\n                   (encode (substring\
    \ message 1 \n                                  (length (first message))))]))))\n",
  "  (define (helper char index acc)\n    (if (char=? char #\\a)\n        (cons char\
    \ acc)\n        (helper (char-code char) (+ index 1) (cons char acc))))\n  (helper\
    \ message 0 '()))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty?\
    \ message) \"\"]\n      [(member (first message) vowels) (second message)]\n \
    \     [else (cons (first message)\n                  (encode (substring message\
    \ 1 (- (length message) 1))))]))) \n", "  (define (helper message vowel)\n   \
    \ (cond [(empty? message) message]\n          [(equal? (first message) vowel)\
    \ (second message)]\n          [(equal? (first message) (second vowel)) (second\
    \ message)]\n          [else (helper (rest message) (cons (first message) (first\
    \ vowel)))]))\n  (helper message '()))\n", "  (define (helper message vowels)\n\
    \    (cond\n      [(empty? message) \"\"]\n      [(member (first message) vowels)\
    \ (helper (rest message) (cons (first message) vowels))]\n      [else (helper\
    \ (rest message) (cons (first message) vowels))]))\n  (helper message '(a e i\
    \ o u)))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message)\
    \ ?a) (encode-a message)]\n    [(equal? (first message) ?e) (encode-e message)]\n\
    \    [(equal? (first message) ?i) (encode-i message)]\n    [(equal? (first message)\
    \ ?o) (encode-o message)]\n    [(equal? (first message) ?u) (encode-u message)]\n\
    \    [else (encode-other (first message))]))\n", "  (define (vowel-count letter)\n\
    \    (cond\n      [(char=? (char-code letter) 'a) (+ 1 (vowel-count (char-code\
    \ (+ letter 1))))]\n      [(char=? (char-code letter) 'e) (+ 1 (vowel-count (char-code\
    \ (+ letter 1))))]\n      [(char=? (char-code letter) 'i) (+ 1 (vowel-count (char-code\
    \ (+ letter 1))))]\n      [(char=? (char-code letter) 'o) (+ 1 (vowel-count (char-code\
    \ (+ letter 1))))]\n      [(char=? (char-code letter) 'u) (+ 1 (vowel-count (char-code\
    \ (+ letter 1))))]\n      [else 0]))\n  (define (vowel-count letter)\n    (cond\n\
    \      [(char=? (char-code letter) 'a) (+ 1 (vowel-count (char-code (+ letter\
    \ 1))))]\n      [(char=? (char-code letter) 'e) (+ 1 (vowel-count (char-code (+\
    \ letter 1))))]\n      [(char=? (char-code letter) 'i) (+ 1 (vowel-count (char-code\
    \ (+ letter 1))))]\n      [(char=? (char-code letter) 'o) (+ 1 (vowel-count (char-code\
    \ (+ letter 1))))]\n      [(char=? (char-code letter) 'u) (+ 1 (vowel-count (char-code\
    \ (+ letter 1))))]\n      [else 0]))\n  (define (vowel-count letter)\n    (cond\n\
    \      [(char=? (char-code letter) 'a) (+ 1 (vowel-count (char-code (+ letter\
    \ 1))))]\n      [(char=? (char-code letter) 'e) (+ 1 (vowel-count (char-code (+\
    \ letter 1))))]\n      [(char=? (char-code letter) 'i) (+ 1 (vowel-count (char-code\
    \ (+ letter 1))))]\n      [(char=? (char-code letter) 'o) (+ 1 (vowel-count (char-code\
    \ (+ letter 1))))]\n      [(char=? (char-code letter) 'u) (+ 1 (vowel-count (char-code\
    \ (+ letter 1))))]\n      [else 0]))\n  (define (vowel-count letter)\n    (cond\n\
    \      [(char=? (char-code letter) 'a) (+ 1 (vowel-count (char-code (+ letter\
    \ 1))))]\n      [(char=? (char-code letter) 'e) (+ 1 (vowel-", "  (cond\n    [(empty?\
    \ message) \"\"]\n    [(equal? (first message) ?a) (encode (substring message\
    \ 1 2))]\n    [(equal? (first message) ?e) (encode (substring message 1 3))]\n\
    \    [(equal? (first message) ?i) (encode (substring message 1 4))]\n    [(equal?\
    \ (first message) ?o) (encode (substring message 1 5))]\n    [(equal? (first message)\
    \ ?u) (encode (substring message 1 6))]\n    [else (cons (first message)\n   \
    \            (encode (substring message 2 length)))]))\n", "  (let ((vowels '(a\
    \ e i o u)))\n    (cond\n      [(empty? message) \"\"]\n      [(member (first\
    \ message) vowels) (cons (first message) (encode (substring message 1 (length\
    \ (first message)))))]\n      [else (cons (first message) (encode (substring message\
    \ 1 (length (first message))))))]))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n\
    \      [(empty? message) \"\"]\n      [(member (first message) vowels) (cons (first\
    \ message) (encode (substring message 1 (length message))))]\n      [else (cons\
    \ (first message) (encode (substring message 1 (length message))))])))\n", " \
    \ (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n   \
    \   [(member (first message) vowels) (second message)]\n      [else (cons (first\
    \ message)\n                  (encode (substring message 1 (- (length message)\
    \ 1)))])]))\n", "  (define (helper message vowels)\n    (cond\n      [(empty?\
    \ message) \"\"]\n      [(member (first message) vowels) (helper (rest message)\
    \ (cons (first message) vowels))]\n      [else (helper (rest message) vowels)]))\n\
    \  (helper (reverse message) '(a e i o u)))\n", "  (cond\n    [(empty? message)\
    \ \"\"]\n    [(equal? (first message) ?a) (encode (substring message 1 2))]\n\
    \    [(equal? (first message) ?e) (encode (substring message 1 3))]\n    [(equal?\
    \ (first message) ?i) (encode (substring message 1 4))]\n    [(equal? (first message)\
    \ ?o) (encode (substring message 1 5))]\n    [(equal? (first message) ?u) (encode\
    \ (substring message 1 6))]\n    [else (cons (first message)\n               (encode\
    \ (substring message 2)))]))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal?\
    \ (first message) ?a) (encode (substring message 1 2))]\n    [(equal? (first message)\
    \ ?e) (encode (substring message 1 3))]\n    [(equal? (first message) ?i) (encode\
    \ (substring message 1 4))]\n    [(equal? (first message) ?o) (encode (substring\
    \ message 1 5))]\n    [(equal? (first message) ?u) (encode (substring message\
    \ 1 6))]\n    [else (cons (first message)\n               (encode (substring message\
    \ 2))\n               (encode (substring message 3))\n               (encode (substring\
    \ message 4))\n               (encode (substring message 5))\n               (encode\
    \ (substring message 6)))]))\n", "  (let ((letters (string->list message)))\n\
    \    (define (helper letter index acc)\n      (cond\n        ((null? letters)\
    \ (cons letter acc))\n        ((eq? (char-code (first letters)) 97) (helper (first\
    \ letters) (+ index 1) (cons (char->string (second letters)) acc)))\n        ((eq?\
    \ (char-code (first letters)) 65) (helper (first letters) (+ index 1) (cons (char->string\
    \ (second letters)) acc)))\n        ((eq? (char-code (first letters)) 97) (helper\
    \ (first letters) (+ index 1) (cons (char->string (second letters)) acc)))\n \
    \       ((eq? (char-code (first letters)) 65) (helper (first letters) (+ index\
    \ 1) (cons (char->string (second letters)) acc)))\n        (else (helper (first\
    \ letters) (+ index 1) acc)))\n      (helper (first letters) index acc))\n   \
    \ (helper letters 0 '())))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal?\
    \ (first message) ?a) (encode (substring message 1 2))]\n    [(equal? (first message)\
    \ ?e) (encode (substring message 1 3))]\n    [(equal? (first message) ?i) (encode\
    \ (substring message 1 4))]\n    [(equal? (first message) ?o) (encode (substring\
    \ message 1 5))]\n    [(equal? (first message) ?u) (encode (substring message\
    \ 1 6))]\n    [(equal? (first message) ?A) (encode (substring message 1 7))] \n\
    \    [(equal? (first message) ?E) (encode (substring message 1 8))] \n    [(equal?\
    \ (first message) ?I) (encode (substring message 1 9))] \n    [(equal? (first\
    \ message) ?O) (encode (substring message 1 10))] \n    [(equal? (first message)\
    \ ?U) (encode (substring message 1 11))] \n    [(equal? (first message) ?a) (encode\
    \ (substring message 1 12))] \n    [(equal? (first message) ?e) (encode (substring\
    \ message 1 13))] \n    [(equal? (first message) ?i) (encode (substring message\
    \ 1 14))] \n    [(equal? (first message) ?o) (encode (substring message 1 15))]\
    \ \n    [(equal? (first message) ?u) (encode (substring message 1 16))] \n   \
    \ [(equal? (first message) ?A) (encode (substring message 1 17))] \n    [(equal?\
    \ (first message) ?E) (encode (substring message 1 18))] \n    [(equal? (first\
    \ message) ?I) (encode (substring message 1 19))] \n    [(equal? (first message)\
    \ ?O) (encode (substring message 1 20))] \n    [(equal? (first message) ?U) (encode\
    \ (substring message 1 21))] \n    [(equal? (first message) ?a) (encode (substring\
    \ message 1 22))] \n    [(equal? (first message) ?e) (encode (substring message\
    \ 1 23))] \n    [(equal? (first message) ?i) (encode (substring message 1 24))]\
    \ \n    [(equal? (first message) ?o) (encode (substring message 1 25))] \n   \
    \ [(equal? (first message) ?u) (encode (substring message 1 26))] \n    [(equal?\
    \ (first message) ?A) (", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty?\
    \ message) \"\"]\n      [(member (first message) vowels) (cons (first message)\
    \ (encode (substring message 1 2)))]\n      [else (cons (first message) (encode\
    \ (substring message 1 1)))])))\n", "  (let ([vowels '(a e i o u)])\n    (cond\n\
    \      [(empty? message) \"\"]\n      [(member (first message) vowels) (cons (first\
    \ message) (encode (substring message 1 (length message))))]\n      [else (cons\
    \ (first message) (encode (substring message 1 (length message))))])))\n", " \
    \ (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode\
    \ (substring message 1 2))]\n    [(equal? (first message) ?e) (encode (substring\
    \ message 1 3))]\n    [(equal? (first message) ?i) (encode (substring message\
    \ 1 4))]\n    [(equal? (first message) ?o) (encode (substring message 1 5))]\n\
    \    [(equal? (first message) ?u) (encode (substring message 1 6))]\n    [else\
    \ (cons (first message)\n               (encode (substring message 2 length)))]))\n",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (cond\n\
    \                            [(equal? (second message) ?e) (cond\n           \
    \                                         [(equal? (third message) ?i) (cond\n\
    \                                                                            \
    \  [(equal? (fourth message) ?o) (cond\n                                     \
    \                                                               [(equal? (fifth\
    \ message) ?u) (cond\n                                                       \
    \                                                                   [(equal? (sixth\
    \ message) ?A) (cond\n                                                       \
    \                                                                         [(equal?\
    \ (seventh message) ?E) (cond\n                                              \
    \                                                                            \
    \                                    [(equal? (eighth message) ?I) (cond\n   \
    \                                                                            \
    \                                                                            \
    \         [(equal? (ninth message) ?O) (cond\n                               \
    \                                                                            \
    \                                                               [(equal? (tenth\
    \ message) ?U) (cond\n                                                       \
    \                                                                            \
    \                                             [(equal? (eleventh message) ?A)\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                        [(equal? (twelfth message) ?E) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                    [(equal? (thirteenth message) ?I) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (fourteenth message) ?O) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                      [(equal?\
    \ (fifteenth message) ?U) (cond\n                                            \
    \                                                                            \
    \                                                                            \
    \                                [(equal? (sixteenth message) ?A) (cond\n    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \  [(equal? (seventeenth message) ?E) (cond\n                                \
    \                                                                            \
    \                                                                            \
    \                                                        [(equal? (eighteenth\
    \ message) ?I) (cond\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                     [(equal? (nineteenth message) ?O) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                    [(equal? (twentieth message) ?U) (cond\n                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        [(equal? (twenty-first message) ?A) (cond\n                         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \   [(equal? (thirtieth message) ?E) (cond\n                                 \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                         [(equal? (thirty-first message) ?I) (cond\n        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                        [(equal? (fortieth message)\
    \ ?O) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \  [(equal? (forty-first message) ?U) (cond\n                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                    [(equal? (fiftieth message) ?A) (cond\n \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                     [(equal?\
    \ (fifty-first message) ?E) (cond\n                                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                  [(equal? (sixtieth message) ?I) (cond\n   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                           [(equal?\
    \ (sixty-first message) ?O) (cond\n                                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                      [(equal? (seventieth message) ?U) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                            ", "  (define (helper index letter)\n    (if (= index\
    \ 0)\n        letter\n        (helper (- index 1) (cond \n                   \
    \       [(char=? (char-code letter) 97) (char-code (+ letter 2))]\n          \
    \                [(char=? (char-code letter) 65) (char-code (+ letter 1))]\n \
    \                         [else (helper (- index 1) (+ letter 1))])))\n    (helper\
    \ (length message) 'a)))\n", "  (let ((vowels '(a e i o u)))\n    (cond ((empty?\
    \ message) '())\n          ((member (first message) vowels) (cons (first message)\
    \ (encode (sub1 message))))\n          (else (cons (first message)\n         \
    \             (encode (sub1 message))\n                      (encode (sub2 message)))))))\n",
  "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n    \
    \  [(member (first message) vowels) (cons (first message) (encode (substring message\
    \ 1 (length message))))]\n      [else (cons (first message) (encode (substring\
    \ message 1 (length message))))])))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n\
    \      [(empty? message) \"\"]\n      [(member (first message) vowels) (first\
    \ message)]\n      [else (cons (first message)\n                   (encode (substring\
    \ (encode (substring message 1)\n                                          (+\
    \ 1 \n                                              (length message)))))]))))\n",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode-a\
    \ message)]\n    [(equal? (first message) ?e) (encode-e message)]\n    [(equal?\
    \ (first message) ?i) (encode-i message)]\n    [(equal? (first message) ?o) (encode-o\
    \ message)]\n    [(equal? (first message) ?u) (encode-u message)]\n    [else (encode-other\
    \ (first message))]))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal?\
    \ (first message) ?a) (encode (substring message 1 2))]\n    [(equal? (first message)\
    \ ?e) (encode (substring message 1 3))]\n    [(equal? (first message) ?i) (encode\
    \ (substring message 1 4))]\n    [(equal? (first message) ?o) (encode (substring\
    \ message 1 5))]\n    [(equal? (first message) ?u) (encode (substring message\
    \ 1 6))]\n    [else (cons (first message)\n               (encode (substring message\
    \ 2)))]))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message)\
    \ ?a) (encode (substring message 1 2))]\n    [(equal? (first message) ?e) (encode\
    \ (substring message 1 3))]\n    [(equal? (first message) ?i) (encode (substring\
    \ message 1 4))]\n    [(equal? (first message) ?o) (encode (substring message\
    \ 1 5))]\n    [(equal? (first message) ?u) (encode (substring message 1 6))]\n\
    \    [else (cons (first message)\n              (encode (substring message 2))])]))\n",
  "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n    \
    \  [(member (first message) vowels) (cons (first message) (encode (substring message\
    \ 1 (length message))))]\n      [else (cons (first message) (encode (substring\
    \ message 1 (length message))))])))\n", "  (let ((vowels '(a e i o u)))\n    (cond\
    \ ((null? message) \"\")\n          ((member (first message) vowels) (first message))\n\
    \          (else (cons (first message)\n                      (encode (substring\
    \ message 1 (length (first message)))))\n                (encode (substring message\
    \ 0 (length (first message)))))\n          )\n          )\n  )", "  (define (helper\
    \ message vowels)\n    (cond\n      [(empty? message) \"\"]\n      [(equal? (first\
    \ message) vowels) (second message)]\n      [else (helper (rest message) (cons\
    \ (first message) vowels))]))\n  (helper message '(a e i o u)))\n", "  (let ([vowels\
    \ '(a e i o u)])\n    (cond\n      [(empty? message) \"\"]\n      [(char-alphabet\
    \ (first message)) (cons (first message) (encode (substring message 1 (char-alphabet\
    \ (first message))))]\n      [(char-alphabet (first message)) (cons (first message)\
    \ (encode (substring message 1 (char-alphabet (first message))))]\n      [(char-alphabet\
    \ (first message)) (cons (first message) (encode (substring message 1 (char-alphabet\
    \ (first message))))]\n      [(char-alphabet (first message)) (cons (first message)\
    \ (encode (substring message 1 (char-alphabet (first message))))]\n      [(char-alphabet\
    \ (first message)) (cons (first message) (encode (substring message 1 (char-alphabet\
    \ (first message))))]\n      [(char-alphabet (first message)) (cons (first message)\
    \ (encode (substring message 1 (char-alphabet (first message))))]\n      [(char-alphabet\
    \ (first message)) (cons (first message) (encode (substring message 1 (char-alphabet\
    \ (first message))))]\n      [(char-alphabet (first message)) (cons (first message)\
    \ (encode (substring message 1 (char-alphabet (first message))))]\n      [(char-alphabet\
    \ (first message)) (cons (first message) (encode (substring message 1 (char-alphabet\
    \ (first message))))]\n      [(char-alphabet (first message)) (cons (first message)\
    \ (encode (substring message 1 (char-alphabet (first message))))]\n      [(char-alphabet\
    \ (first message)) (cons (first message) (encode (substring message 1 (char-alphabet\
    \ (first message))))]\n      [(char-alphabet (first message)) (cons (first message)\
    \ (encode (substring message 1 (char-alphabet (first message))))]\n      [(char-alphabet\
    \ (first message)) (cons (first message) (encode (substring message 1 (char-alphabet\
    \ (first message))))]\n      [(char-alphabet (first message)) (cons (first message)\
    \ (encode (substring message 1 (char-alphabet (first message))))]\n      [(char-alphabet\
    \ (first message)) (cons (first message) (encode (substring message 1 (char-alphabet\
    \ (first message))))]\n      [(char-alphabet (", "  (let ((vowels '(a e i o u)))\n\
    \    (cond\n      [(empty? message) \"\"]\n      [(member (first message) vowels)\
    \ (second message)]\n      [else (cons (first message)\n                  (encode\
    \ (substring message 1 (length message))))])))\n", "  (define (swap-case letter)\n\
    \    (if (char=? letter #\\a)\n        (char->string #\\A)\n        (char->string\
    \ #\\a)))\n  (define (vowel-position letter)\n    (if (char=? letter #\\a)\n \
    \       0\n        (char->integer (char->string letter))))\n  (define (vowel-position\
    \ letter)\n    (if (char=? letter #\\a)\n        0\n        (char->integer (char->string\
    \ letter))))\n  (define (vowel-position letter)\n    (if (char=? letter #\\a)\n\
    \        0\n        (char->integer (char->string letter))))\n  (define (vowel-position\
    \ letter)\n    (if (char=? letter #\\a)\n        0\n        (char->integer (char->string\
    \ letter))))\n  (define (vowel-position letter)\n    (if (char=? letter #\\a)\n\
    \        0\n        (char->integer (char->string letter))))\n  (define (vowel-position\
    \ letter)\n    (if (char=? letter #\\a)\n        0\n        (char->integer (char->string\
    \ letter))))\n  (define (vowel-position letter)\n    (if (char=? letter #\\a)\n\
    \        0\n        (char->integer (char->string letter))))\n  (define (vowel-position\
    \ letter)\n    (if (char=? letter #\\a)\n        0\n        (char->integer (char->string\
    \ letter))))\n  (define (vowel-position letter)\n    (if (char=? letter #\\a)\n\
    \        0\n        (char->integer (char->string letter))))\n  (define (vowel-position\
    \ letter)\n    (if (char=? letter #\\a)\n        0\n        (char->integer (char->string\
    \ letter))))\n  (define (vowel-position letter)\n    (if (char=? letter #\\a)\n\
    \        0\n        (char->integer (char->string letter))))\n  (define (vowel-position\
    \ letter)\n    (if (char=? letter #\\a)\n        0\n        (char->integer (char->string\
    \ letter))))\n  (define (vowel-position letter)\n    (if (char=? letter #\\a)\n\
    \        0\n        (char->integer (char->string letter))))\n  (define (vowel-position\
    \ letter)\n    (if (char=? letter #\\a)\n        0\n        (char->integer (char->string\
    \ letter))))\n  (define (vowel-position letter)\n    (if (char=? ", "  (cond\n\
    \    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode (substring\
    \ message 1 2))]\n    [(equal? (first message) ?e) (encode (substring message\
    \ 1 3))]\n    [(equal? (first message) ?i) (encode (substring message 1 4))]\n\
    \    [(equal? (first message) ?o) (encode (substring message 1 5))]\n    [(equal?\
    \ (first message) ?u) (encode (substring message 1 6))]\n    [else (cons (first\
    \ message)\n               (encode (substring message 2))])]))\n", "  (define\
    \ (swap-case message)\n    (define (replace-vowel vowel letter)\n      (cond [(char=?\
    \ letter vowel) (concat letter letter)]\n            [else (concat letter vowel)]))\n\
    \    (define (replace-letter letter vowel)\n      (cond [(char=? letter vowel)\
    \ (concat letter letter)]\n            [else (concat letter vowel)]))\n    (define\
    \ (replace-vowels message)\n      (cond [(char=? message 'a) (replace-vowel 'a\
    \ 'A)]\n            [(char=? message 'e) (replace-vowel 'e 'E)]\n            [(char=?\
    \ message 'i) (replace-vowel 'i 'I)]\n            [(char=? message 'o) (replace-vowel\
    \ 'o 'O)]\n            [(char=? message 'u) (replace-vowel 'u 'U)]\n         \
    \   [else message]))\n    (replace-vowels message))\n  (define (replace-vowels-2\
    \ message)\n    (define (replace-vowels-3 message)\n      (define (replace-vowels-4\
    \ message)\n        (define (replace-vowels-5 message)\n          (define (replace-vowels-6\
    \ message)\n            (define (replace-vowels-7 message)\n              (define\
    \ (replace-vowels-8 message)\n                (define (replace-vowels-9 message)\n\
    \                  (define (replace-vowels-10 message)\n                    (define\
    \ (replace-vowels-11 message)\n                      (define (replace-vowels-12\
    \ message)\n                        (define (replace-vowels-13 message)\n    \
    \                      (define (replace-vowels-14 message)\n                 \
    \           (define (replace-vowels-15 message)\n                            \
    \  (define (replace-vowels-16 message)\n                                (define\
    \ (replace-vowels-17 message)\n                                  (define (replace-vowels-18\
    \ message)\n                                    (define (replace-vowels-19 message)\n\
    \                                      (define (replace-vowels-20 message)\n \
    \                                       (define (replace-vowels-21 message)\n\
    \                                          (define (replace-vowels-22 message)\n\
    \                                            (define (replace-vowels-23 message)\n\
    \                                              (define (replace-vowels-24 message)\n\
    \                                                (define (replace-vowels-25 message)\n\
    \                                                  (define (replace-vowels-26\
    \ message)\n                                                    (define (replace-vowels-27\
    \ message)\n                                                      (define (replace-vowels-28\
    \ message)\n                                                        (define (replace-vowels-29\
    \ message)\n                                                          (define\
    \ (replace-vowels-30 message)\n                                              \
    \              (define (replace-vowels-31 ", "  (let ((vowels '(a e i o u)))\n\
    \    (cond\n      [(empty? message) message]\n      [(member (first message) vowels)\
    \ (cons (first message) (encode (substring message 1 2)))]\n      [else (cons\
    \ (first message) (encode (substring message 1 1)))])))\n", "  (cond\n    [(empty?\
    \ message) \"\"]\n    [(equal? (first message) ?a) (encode (substring message\
    \ 1 2))]\n    [(equal? (first message) ?e) (encode (substring message 1 3))]\n\
    \    [(equal? (first message) ?i) (encode (substring message 1 4))]\n    [(equal?\
    \ (first message) ?o) (encode (substring message 1 5))]\n    [(equal? (first message)\
    \ ?u) (encode (substring message 1 6))]\n    [else (cons (first message)\n   \
    \            (encode (substring message 2)))]))\n", "  (define (helper message\
    \ vowels)\n    (cond\n      [(empty? message) \"\"]\n      [(equal? (first message)\
    \ vowels) (second message)]\n      [(equal? (first message) (second vowels)) (third\
    \ message)]\n      [(equal? (first message) (third vowels)) (fourth message)]\n\
    \      [(equal? (first message) (fourth vowels)) (fifth message)]\n      [(equal?\
    \ (first message) (fifth vowels)) (sixth message)]\n      [(equal? (first message)\
    \ (sixth vowels)) (seventh message)]\n      [(equal? (first message) (seventh\
    \ vowels)) (first message)]\n      [(equal? (first message) (first vowels)) (second\
    \ message)]\n      [(equal? (first message) (second vowels)) (third message)]\n\
    \      [(equal? (first message) (third vowels)) (fourth message)]\n      [(equal?\
    \ (first message) (fourth vowels)) (fifth message)]\n      [(equal? (first message)\
    \ (fifth vowels)) (sixth message)]\n      [(equal? (first message) (sixth vowels))\
    \ (seventh message)]\n      [(equal? (first message) (seventh vowels)) (first\
    \ message)]\n      [(equal? (first message) (first vowels)) (second message)]\n\
    \      [(equal? (first message) (second vowels)) (third message)]\n      [(equal?\
    \ (first message) (third vowels)) (fourth message)]\n      [(equal? (first message)\
    \ (fourth vowels)) (fifth message)]\n      [(equal? (first message) (fifth vowels))\
    \ (sixth message)]\n      [(equal? (first message) (sixth vowels)) (seventh message)]\n\
    \      [(equal? (first message) (seventh vowels)) (first message)]))\n  (helper\
    \ message '(a e i o u)))\n", "  (let ((vowels '(a e i o u)))\n    (cond ((null?\
    \ message) '())\n          ((char-alphabet (first message))\n           (cons\
    \ (char-alphabet (first message))\n                 (encode (rest message))))\n\
    \          ((char-alphabet (first message))\n           (cons (char-alphabet (first\
    \ message))\n                 (encode (rest message))))\n          (else (cons\
    \ (first message)\n                      (encode (rest message)))))\n    (map\
    \ (lambda (letter)\n           (cond ((char-alphabet letter)\n               \
    \   (cons (char-alphabet (first message))\n                         (encode (rest\
    \ message))))\n                  ((char-alphabet letter)\n                  (cons\
    \ (char-alphabet (first message))\n                         (encode (rest message))))\n\
    \                  (else (cons (first message)\n                             \
    \ (encode (rest message))))))\n          vowels)))\n", "  (let ((vowels '(a e\
    \ i o u)))\n    (cond\n      [(empty? message) \"\"]\n      [(member (first message)\
    \ vowels) (second message)]\n      [else (cons (first message)\n             \
    \     (encode (substring (second message) 0 2))\n                  (encode (substring\
    \ (second message) 2 4)))])))\n", "  (let ((vowels '(a e i o u)))\n    (cond ((null?\
    \ message) '())\n          ((member (char-ref message 0) vowels) (cons (char-ref\
    \ message 0) (encode (char-ref message 1))))\n          (else (cons (char-ref\
    \ message 0)\n                      (encode (char-ref message 1))))))))\n", " \
    \ (let ((vowels '(a e i o u)))\n    (cond ((null? message) '())\n          ((char-alphabet\
    \ (first message)) (cons (first message) (encode (substring message 1 ))))\n \
    \         ((char-alphabet (first message)) (cons (first message) (encode (substring\
    \ message 2 ))))\n          ((char-alphabet (first message)) (cons (first message)\
    \ (encode (substring message 3 ))))\n          ((char-alphabet (first message))\
    \ (cons (first message) (encode (substring message 4 ))))\n          ((char-alphabet\
    \ (first message)) (cons (first message) (encode (substring message 5 ))))\n \
    \         ((char-alphabet (first message)) (cons (first message) (encode (substring\
    \ message 6 ))))\n          ((char-alphabet (first message)) (cons (first message)\
    \ (encode (substring message 7 ))))\n          ((char-alphabet (first message))\
    \ (cons (first message) (encode (substring message 8 ))))\n          ((char-alphabet\
    \ (first message)) (cons (first message) (encode (substring message 9 ))))\n \
    \         ((char-alphabet (first message)) (cons (first message) (encode (substring\
    \ message 10 ))))\n          ((char-alphabet (first message)) (cons (first message)\
    \ (encode (substring message 11 ))))\n          ((char-alphabet (first message))\
    \ (cons (first message) (encode (substring message 12 ))))\n          ((char-alphabet\
    \ (first message)) (cons (first message) (encode (substring message 13 ))))\n\
    \          ((char-alphabet (first message)) (cons (first message) (encode (substring\
    \ message 14 ))))\n          ((char-alphabet (first message)) (cons (first message)\
    \ (encode (substring message 15 ))))\n          ((char-alphabet (first message))\
    \ (cons (first message) (encode (substring message 16 ))))\n          ((char-alphabet\
    \ (first message)) (cons (first message) (encode (substring message 17 ))))\n\
    \          ((char-alphabet (first message)) (cons (first message) (encode (substring\
    \ message 18 ))))\n          ((char-alphabet (first message)) (cons (first message)\
    \ (encode (substring message 19 ))))\n          ((char-alphabet (first message))\
    \ (cons (first message) (encode (substring message 20 ))))\n          ((char-alphabet\
    \ (first ", "  (define (vowel-position letter)\n    (cond [(char=? letter #\\\
    a) (- 1)]\n          [(char=? letter #\\e) (- 2)]\n          [(char=? letter #\\\
    i) (- 3)]\n          [(char=? letter #\\o) (- 4)]\n          [(char=? letter #\\\
    u) (- 5)]\n          [(char=? letter #\\y) (- 6)]\n          [else (- 7)]))\n\
    \  (define (swap-case letter)\n    (cond [(char=? letter #\\A) (char=? (char-after\
    \ (char-before (char-after letter)) #\\a) #\\A)\n          [(char=? letter #\\\
    E) (char=? (char-after (char-before (char-after letter)) #\\e) #\\E)\n       \
    \   [(char=? letter #\\I) (char=? (char-after (char-before (char-after letter))\
    \ #\\i) #\\I)\n          [(char=? letter #\\O) (char=? (char-after (char-before\
    \ (char-after letter)) #\\o) #\\O)\n          [(char=? letter #\\U) (char=? (char-after\
    \ (char-before (char-after letter)) #\\u) #\\U)\n          [(char=? letter #\\\
    Y) (char=? (char-after (char-before (char-after letter)) #\\y) #\\Y)\n       \
    \   [else letter]))\n  (define (vowel-position letter)\n    (cond [(char=? letter\
    \ #\\a) (- 1)]\n          [(char=? letter #\\e) (- 2)]\n          [(char=? letter\
    \ #\\i) (- 3)]\n          [(char=? letter #\\o) (- 4)]\n          [(char=? letter\
    \ #\\u) (- 5)]\n          [(char=? letter #\\y) (- 6)]\n          [else (- 7)]))\n\
    \  (define (swap-case letter)\n    (cond [(char=? letter #\\A) (char=? (char-after\
    \ (char-before (char-after letter)) #\\a) #\\A)\n          [(char=? letter #\\\
    E) (char=? (char-after (char-before (char-after letter)) #\\e) #\\E)\n       \
    \   [(char=? letter #\\I) (char=? (char-after (char-", "  (cond\n    [(empty?\
    \ message) \"\"]\n    [(equal? (first message) ?a) (encode-a message)]\n    [(equal?\
    \ (first message) ?e) (encode-e message)]\n    [(equal? (first message) ?i) (encode-i\
    \ message)]\n    [(equal? (first message) ?o) (encode-o message)]\n    [(equal?\
    \ (first message) ?u) (encode-u message)]\n    [else (encode-others message)]))\n",
  "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n    \
    \  [(char-alphabet (first message)) (cons (first message) (encode (rest message)))]\n\
    \      [(char-alphabet (first message)) (cons (first message) (encode (rest message)))]\n\
    \      [else (cons (first message)\n                  (encode (substring (rest\
    \ message) 0 (- (length message) 1)))\n                  (encode (substring (rest\
    \ message) 1 (- (length message) 1)))\n                  (encode (substring (rest\
    \ message) 2 (- (length message) 1)))\n                  (encode (substring (rest\
    \ message) 3 (- (length message) 1)))\n                  (encode (substring (rest\
    \ message) 4 (- (length message) 1)))\n                  (encode (substring (rest\
    \ message) 5 (- (length message) 1)))\n                  (encode (substring (rest\
    \ message) 6 (- (length message) 1)))\n                  (encode (substring (rest\
    \ message) 7 (- (length message) 1)))\n                  (encode (substring (rest\
    \ message) 8 (- (length message) 1)))\n                  (encode (substring (rest\
    \ message) 9 (- (length message) 1)))\n                  (encode (substring (rest\
    \ message) 10 (- (length message) 1)))\n                  (encode (substring (rest\
    \ message) 11 (- (length message) 1)))\n                  (encode (substring (rest\
    \ message) 12 (- (length message) 1)))\n                  (encode (substring (rest\
    \ message) 13 (- (length message) 1)))\n                  (encode (substring (rest\
    \ message) 14 (- (length message) 1)))\n                  (encode (substring (rest\
    \ message) 15 (- (length message) 1)))\n                  (encode (substring (rest\
    \ message) 16 (- (length message) 1)))\n                  (encode (substring (rest\
    \ message) 17 (- (length message) 1)))\n                  (encode (substring (rest\
    \ message) 18 (- (length message) 1)))\n                  (encode (substring (rest\
    \ message) 19 (- (length message) 1)))\n                  (encode (substring (rest\
    \ message) 20 (- (length message) 1)))\n                  (encode (substring (rest\
    \ message) 21 (- (length message) 1)))\n                  (encode (substring (rest\
    \ message) 22 (- (length message) 1)))\n                  (encode (substring (rest\
    \ message) 23 (- (length message) 1)))\n                  (encode (sub", "  (let\
    \ ((vowels '(a e i o u)))\n    (cond ((null? message) '())\n          ((char-alphabet\
    \ (first message)) \n           (cons (char-alphabet (first message)) \n     \
    \            (encode (rest message))))\n          ((char-alphabet (first message))\
    \ \n           (cons (char-alphabet (first message)) \n                 (encode\
    \ (rest message))))\n          ((char-alphabet (first message)) \n           (cons\
    \ (char-alphabet (first message)) \n                 (encode (rest message))))\n\
    \          ((char-alphabet (first message)) \n           (cons (char-alphabet\
    \ (first message)) \n                 (encode (rest message))))\n          ((char-alphabet\
    \ (first message)) \n           (cons (char-alphabet (first message)) \n     \
    \            (encode (rest message))))\n          ((char-alphabet (first message))\
    \ \n           (cons (char-alphabet (first message)) \n                 (encode\
    \ (rest message))))\n          ((char-alphabet (first message)) \n           (cons\
    \ (char-alphabet (first message)) \n                 (encode (rest message))))\n\
    \          ((char-alphabet (first message)) \n           (cons (char-alphabet\
    \ (first message)) \n                 (encode (rest message))))\n          ((char-alphabet\
    \ (first message)) \n           (cons (char-alphabet (first message)) \n     \
    \            (encode (rest message))))\n          ((char-alphabet (first message))\
    \ \n           (cons (char-alphabet (first message)) \n                 (encode\
    \ (rest message))))\n          ((char-alphabet (first message)) \n           (cons\
    \ (char-alphabet (first message)) \n                 (encode (rest message))))\n\
    \          ((char-alphabet (first message)) \n           (cons (char-alphabet\
    \ (first message)) \n                 (encode (rest message))))\n          ((char-alphabet\
    \ (first message)) \n           (cons (char-alphabet (first message)) \n     \
    \            (encode (rest message))))\n          ((char-alphabet (first message))\
    \ \n           (cons (char-alphabet (first message)) \n                 (encode\
    \ (rest message))))\n          ((char-alphabet (first message)) \n           (cons\
    \ (char-alphabet (first message)) \n                 (encode (rest message))))\n\
    \          ((char-alphabet (first message)) \n           (cons (char-alphabet\
    \ (first message)) \n                 (encode (rest message))))\n          ((char-alphabet\
    \ (first ", "  (define (helper message i j)\n    (cond\n      [(char=? (char-ref\
    \ message i) 'a) (char-ref message j)] \n      [(char=? (char-ref message i) 'e)\
    \ (char-ref message (+ i 1))]\n      [(char=? (char-ref message i) 'i) (char-ref\
    \ message (+ i 1))]\n      [(char=? (char-ref message i) 'o) (char-ref message\
    \ (+ i 1))]\n      [(char=? (char-ref message i) 'u) (char-ref message (+ i 1))]\n\
    \      [(char=? (char-ref message i) 'y) (char-ref message (+ i 1))]\n      [else\
    \ (helper (substring message i (+ i 1)) j j)]\n      ))\n  (helper message 0 0))\n",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode\
    \ (substring message 1 2))]\n    [(equal? (first message) ?e) (encode (substring\
    \ message 1 2))]\n    [(equal? (first message) ?i) (encode (substring message\
    \ 1 2))]\n    [(equal? (first message) ?o) (encode (substring message 1 2))]\n\
    \    [(equal? (first message) ?u) (encode (substring message 1 2))]\n    [else\
    \ (cons (first message)\n               (encode (substring message 2)))]))\n",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode\
    \ (substring message 1 2))]\n    [(equal? (first message) ?e) (encode (substring\
    \ message 1 3))]\n    [(equal? (first message) ?i) (encode (substring message\
    \ 1 4))]\n    [(equal? (first message) ?o) (encode (substring message 1 5))]\n\
    \    [(equal? (first message) ?u) (encode (substring message 1 6))]\n    [else\
    \ (cons (first message)\n               (encode (substring message 2)))]))\n",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode-a\
    \ message)]\n    [(equal? (first message) ?e) (encode-e message)]\n    [(equal?\
    \ (first message) ?i) (encode-i message)]\n    [(equal? (first message) ?o) (encode-o\
    \ message)]\n    [(equal? (first message) ?u) (encode-u message)]\n    [else (encode-others\
    \ message)]))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message)\
    \ ?a) (cond\n                             [(equal? (second message) ?e) (cond\n\
    \                                                            [(equal? (third message)\
    \ ?i) (cond\n                                                                \
    \              [(equal? (fourth message) ?o) (cond\n                         \
    \                                                                            \
    \   [(equal? (fifth message) ?u) (cond\n                                     \
    \                                                                            \
    \             [(equal? (sixth message) ?A) (cond\n                           \
    \                                                                            \
    \                         [(equal? (seventh message) ?E) (cond\n             \
    \                                                                            \
    \                                                                          [(equal?\
    \ (eighth message) ?I) (cond\n                                               \
    \                                                                            \
    \                                             [(equal? (ninth message) ?O) (cond\n\
    \                                                                            \
    \                                                                            \
    \                       [(equal? (tenth message) ?U) (cond\n                 \
    \                                                                            \
    \                                                                            \
    \           [(equal? (eleventh message) ?a) (cond\n                          \
    \                                                                            \
    \                                                                            \
    \         [(equal? (twelfth message) ?e) (cond\n                             \
    \                                                                            \
    \                                                                            \
    \                             [(equal? (thirteenth message) ?i) (cond\n      \
    \                                                                            \
    \                                                                            \
    \                                                                           [(equal?\
    \ (fourteenth message) ?o) (cond\n                                           \
    \                                                                            \
    \                                                                            \
    \                                               [(equal? (fifteenth message) ?u)\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            \
    \                            [(equal? (sixteenth message) ?A) (cond\n        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                [(equal? (seventeenth message) ?E) (cond\n                  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                            [(equal? (eighteenth message) ?I) (cond\n       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                              [(equal? (nineteenth\
    \ message) ?O) (cond\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                       [(equal? (twentieth message) ?U) (cond\n             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                       [(equal?\
    \ (twenty-first message) ?a) (cond\n                                         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                               [(equal? (twenty-second message)\
    \ ?e) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                              [(equal? (twenty-third message)\
    \ ?i) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                     [(equal?\
    \ (twenty-fourth message) ?o) (cond\n                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                          [(equal? (twenty-fifth message) ?u) (cond\n       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                 [(equal? (twenty-sixth\
    \ message) ?A) (cond\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                     [(equal? (twenty-seventh message) ?E) (cond\n          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \            [(equal? (twenty-eighth message) ?I) (cond\n                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                         [(equal? (twenty-ninth message) ", "  (cond\n    [(empty?\
    \ message) \"\"]\n    [(equal? (first message) ?a) (encode (substring message\
    \ 1 2))]\n    [(equal? (first message) ?e) (encode (substring message 1 3))]\n\
    \    [(equal? (first message) ?i) (encode (substring message 1 4))]\n    [(equal?\
    \ (first message) ?o) (encode (substring message 1 5))]\n    [(equal? (first message)\
    \ ?u) (encode (substring message 1 6))]\n    [else (cons (first message)\n   \
    \            (encode (substring message 2))])]))\n", "  (cond\n    [(empty? message)\
    \ \"\"]\n    [(equal? (first message) ?a) (encode (substring message 1 2))]\n\
    \    [(equal? (first message) ?e) (encode (substring message 1 3))]\n    [(equal?\
    \ (first message) ?i) (encode (substring message 1 4))]\n    [(equal? (first message)\
    \ ?o) (encode (substring message 1 5))]\n    [(equal? (first message) ?u) (encode\
    \ (substring message 1 6))]\n    [else (cons (first message)\n               (encode\
    \ (substring message 2)))]))\n", "  (let ((vowels '(a e i o u)))\n    (cond ((null?\
    \ message) \"\")\n          ((member (char-ref message 0) vowels) \n         \
    \  (char-ref message 0))\n          (else (append (cons (char-ref message 0) \n\
    \                            (encode (char-ref message 1))) \n               \
    \        (encode (char-ref message 2))))))))\n", "  (let ((vowels '(a e i o u)))\n\
    \    (cond\n      [(empty? message) empty]\n      [(member (first message) vowels)\
    \ (cons (first message) (encode (substring (second message) 0 (- (length message)\
    \ 1)))) ]\n      [else (cons (first message) (encode (substring (second message)\
    \ 0 (- (length message) 1)))) ]\n    )\n  )\n)\n", "  (let ([vowels '(a e i o\
    \ u)])\n    (cond [(empty? message) \"\"]\n          [(member (first message)\
    \ vowels) (second message)]\n          [else (cons (first message)\n         \
    \             (encode (substring (second message) 0 (- (length message) 1)))\n\
    \                      (encode (substring (second message) 1 (- (length message)\
    \ 1)))\n                      (encode (substring (second message) 2 (- (length\
    \ message) 1)))\n                      (encode (substring (second message) 3 (-\
    \ (length message) 1)))\n                      (encode (substring (second message)\
    \ 4 (- (length message) 1)))\n                      (encode (substring (second\
    \ message) 5 (- (length message) 1)))\n                      (encode (substring\
    \ (second message) 6 (- (length message) 1)))\n                      (encode (substring\
    \ (second message) 7 (- (length message) 1)))\n                      (encode (substring\
    \ (second message) 8 (- (length message) 1)))\n                      (encode (substring\
    \ (second message) 9 (- (length message) 1)))\n                      (encode (substring\
    \ (second message) 10 (- (length message) 1)))\n                      (encode\
    \ (substring (second message) 11 (- (length message) 1)))\n                  \
    \    (encode (substring (second message) 12 (- (length message) 1)))\n       \
    \               (encode (substring (second message) 13 (- (length message) 1)))\n\
    \                      (encode (substring (second message) 14 (- (length message)\
    \ 1)))\n                      (encode (substring (second message) 15 (- (length\
    \ message) 1)))\n                      (encode (substring (second message) 16\
    \ (- (length message) 1)))\n                      (encode (substring (second message)\
    \ 17 (- (length message) 1)))\n                      (encode (substring (second\
    \ message) 18 (- (length message) 1)))\n                      (encode (substring\
    \ (second message) 19 (- (length message) 1)))\n                      (encode\
    \ (substring (second message) 20 (- (length message) 1)))\n                  \
    \    (encode (substring (second message) 21 (- (length message) 1)))\n       \
    \               (encode (substring (second message) 22 (- (length message) 1)))\n\
    \                      (encode (substring (second message) 23 (- (length message)\
    \ 1)))\n                      (encode (substring (second message) 24 (- (length\
    \ message) 1)))\n                      (encode (substring (second message) 25\
    \ (- (length message) 1)))\n                      (encode (substring (second message)\
    \ 26 (- (length message) 1)))\n                      (encode (substring (second\
    \ message) 27", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message)\
    \ \"\"]\n      [(member (first message) vowels) (first message)]\n      [else\
    \ (cons (first message)\n                   (encode (substring message 1 \n  \
    \                                 (- (length message) 1)))\n                 \
    \  (encode (substring message 2\n                                   (- (length\
    \ message) 1)))\n                   (encode (substring message 3\n           \
    \                        (- (length message) 1)))\n                   (encode\
    \ (substring message 4\n                                   (- (length message)\
    \ 1)))\n                   (encode (substring message 5\n                    \
    \               (- (length message) 1)))\n                   (encode (substring\
    \ message 6\n                                   (- (length message) 1)))\n   \
    \                (encode (substring message 7\n                              \
    \     (- (length message) 1)))\n                   (encode (substring message\
    \ 8\n                                   (- (length message) 1)))\n           \
    \        (encode (substring message 9\n                                   (- (length\
    \ message) 1)))\n                   (encode (substring message 10\n          \
    \                         (- (length message) 1)))\n                   (encode\
    \ (substring message 11\n                                   (- (length message)\
    \ 1)))\n                   (encode (substring message 12\n                   \
    \                (- (length message) 1)))\n                   (encode (substring\
    \ message 13\n                                   (- (length message) 1)))\n  \
    \                 (encode (substring message 14\n                            \
    \       (- (length message) 1)))\n                   (encode (substring message\
    \ 15\n                                   (- (length message) 1)))\n          \
    \         (encode (substring message 16\n                                   (-\
    \ (length message) 1)))\n                   (encode (substring message 17\n  \
    \                                 (- (length message) 1)))\n                 \
    \  (encode (substring message 18\n                                   (- (length\
    \ message) 1)))\n                   (encode (substring message 19\n          \
    \                         (- (length message) 1)))\n                   (encode\
    \ (substring message 20\n                                   (- (length message)\
    \ 1)))\n                   (encode (substring message 21\n                   \
    \                (- (length message) 1)))\n                   (encode (substring\
    \ message 22\n                                   (- (length message) 1)))\n  \
    \                 (encode (substring message 23\n                            \
    \       (- (length message) 1)))\n                   (encode (substring message\
    \ 24\n                                   (- (length message) 1)))\n          \
    \         (encode (substring message 25\n                                   (-\
    \ (length message) 1)))\n                   (encode (substring message 26\n  \
    \                                 (- (length message) 1)))\n                 \
    \  (encode (substring message 27\n                                   (- (length\
    \ message) 1)))\n                   (encode (substring ", "  (let ([vowels '(a\
    \ e i o u)])\n    (cond [(empty? message) \"\"]\n          [(member (first message)\
    \ vowels) (first message)]\n          [else (cons (first message)\n          \
    \             (encode (substring message 1 (- (length message) 1)))]))))\n", " \
    \ (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n   \
    \   [(char-alphabet (first message)) (cons (first message) (encode (substring\
    \ message 1)))]\n      [(char-alphabet (first message)) (cons (first message)\
    \ (encode (substring message 1)))]\n      [(char-alphabet (first message)) (cons\
    \ (first message) (encode (substring message 1)))]\n      [(char-alphabet (first\
    \ message)) (cons (first message) (encode (substring message 1)))]\n      [(char-alphabet\
    \ (first message)) (cons (first message) (encode (substring message 1)))]\n  \
    \    [(char-alphabet (first message)) (cons (first message) (encode (substring\
    \ message 1)))]\n      [(char-alphabet (first message)) (cons (first message)\
    \ (encode (substring message 1)))]\n      [(char-alphabet (first message)) (cons\
    \ (first message) (encode (substring message 1)))]\n      [(char-alphabet (first\
    \ message)) (cons (first message) (encode (substring message 1)))]\n      [(char-alphabet\
    \ (first message)) (cons (first message) (encode (substring message 1)))]\n  \
    \    [(char-alphabet (first message)) (cons (first message) (encode (substring\
    \ message 1)))]\n      [(char-alphabet (first message)) (cons (first message)\
    \ (encode (substring message 1)))]\n      [(char-alphabet (first message)) (cons\
    \ (first message) (encode (substring message 1)))]\n      [(char-alphabet (first\
    \ message)) (cons (first message) (encode (substring message 1)))]\n      [(char-alphabet\
    \ (first message)) (cons (first message) (encode (substring message 1)))]\n  \
    \    [(char-alphabet (first message)) (cons (first message) (encode (substring\
    \ message 1)))]\n      [(char-alphabet (first message)) (cons (first message)\
    \ (encode (substring message 1)))]\n      [(char-alphabet (first message)) (cons\
    \ (first message) (encode (substring message 1)))]\n      [(char-alphabet (first\
    \ message)) (cons (first message) (encode (substring message 1)))]\n      [(char-alphabet\
    \ (first message)) (cons (first message) (encode (substring message 1)))]\n  \
    \    [(char-alphabet (", "  (define (helper message index)\n    (if (null? message)\n\
    \        '()\n        (if (char=? (car message) (car index))\n            (helper\
    \ (cdr message) (cdr index))\n            (cons (char->string (+ (char->int (car\
    \ message)) \n                                   (char->int (car index))) \n \
    \                      (helper (cdr message) (cdr index)))))\n        (helper\
    \ (cdr message) (cdr index))))\n  (helper message '(#\\A #\\E #\\I #\\O #\\U)))\n",
  "  (let loop ((message message) (result '()))\n    (cond ((null? message) result)\n\
    \          ((char-alphabet (car message)) (loop (cdr message) (cons (char-alphabet\
    \ (car message)) result)))\n          ((char-alphabet (car message)) (loop (cdr\
    \ message) (cons (char-alphabet (car message)) result)))\n          ((char-alphabet\
    \ (car message)) (loop (cdr message) (cons (char-alphabet (car message)) result)))\n\
    \          ((char-alphabet (car message)) (loop (cdr message) (cons (char-alphabet\
    \ (car message)) result)))\n          ((char-alphabet (car message)) (loop (cdr\
    \ message) (cons (char-alphabet (car message)) result)))\n          ((char-alphabet\
    \ (car message)) (loop (cdr message) (cons (char-alphabet (car message)) result)))\n\
    \          ((char-alphabet (car message)) (loop (cdr message) (cons (char-alphabet\
    \ (car message)) result)))\n          ((char-alphabet (car message)) (loop (cdr\
    \ message) (cons (char-alphabet (car message)) result)))\n          ((char-alphabet\
    \ (car message)) (loop (cdr message) (cons (char-alphabet (car message)) result)))\n\
    \          ((char-alphabet (car message)) (loop (cdr message) (cons (char-alphabet\
    \ (car message)) result)))\n          ((char-alphabet (car message)) (loop (cdr\
    \ message) (cons (char-alphabet (car message)) result)))\n          ((char-alphabet\
    \ (car message)) (loop (cdr message) (cons (char-alphabet (car message)) result)))\n\
    \          ((char-alphabet (car message)) (loop (cdr message) (cons (char-alphabet\
    \ (car message)) result)))\n          ((char-alphabet (car message)) (loop (cdr\
    \ message) (cons (char-alphabet (car message)) result)))\n          ((char-alphabet\
    \ (car message)) (loop (cdr message) (cons (char-alphabet (car message)) result)))\n\
    \          ((char-alphabet (car message)) (loop (cdr message) (cons (char-alphabet\
    \ (car message)) result)))\n          ((char-alphabet (car message)) ", "  (let\
    \ ((vowels '(a e i o u)))\n    (cond ((null? message) \"\")\n          ((member\
    \ (first message) vowels) (second message))\n          (else (cons (first message)\
    \ (encode (second message)))))))\n", "  (let ((vowels '(a e i o u)))\n    (cond\
    \ ((empty? message) '())\n          ((char-alphabet (first message))\n       \
    \    (cons (char-alphabet (first message))\n                 (encode (rest message))))\n\
    \          ((char-alphabet (first message))\n           (cons (char-alphabet (first\
    \ message))\n                 (encode (rest message))))\n          ((char-alphabet\
    \ (first message))\n           (cons (char-alphabet (first message))\n       \
    \          (encode (rest message))))\n          ((char-alphabet (first message))\n\
    \           (cons (char-alphabet (first message))\n                 (encode (rest\
    \ message))))\n          ((char-alphabet (first message))\n           (cons (char-alphabet\
    \ (first message))\n                 (encode (rest message))))\n          ((char-alphabet\
    \ (first message))\n           (cons (char-alphabet (first message))\n       \
    \          (encode (rest message))))\n          ((char-alphabet (first message))\n\
    \           (cons (char-alphabet (first message))\n                 (encode (rest\
    \ message))))\n          ((char-alphabet (first message))\n           (cons (char-alphabet\
    \ (first message))\n                 (encode (rest message))))\n          ((char-alphabet\
    \ (first message))\n           (cons (char-alphabet (first message))\n       \
    \          (encode (rest message))))\n          ((char-alphabet (first message))\n\
    \           (cons (char-alphabet (first message))\n                 (encode (rest\
    \ message))))\n          ((char-alphabet (first message))\n           (cons (char-alphabet\
    \ (first message))\n                 (encode (rest message))))\n          ((char-alphabet\
    \ (first message))\n           (cons (char-alphabet (first message))\n       \
    \          (encode (rest message))))\n          ((char-alphabet (first message))\n\
    \           (cons (char-alphabet (first message))\n                 (encode (rest\
    \ message))))\n          ((char-alphabet (first message))\n           (cons (char-alphabet\
    \ (first message))\n                 (encode (rest message))))\n          ((char-alphabet\
    \ (first message))\n           (cons (char-alphabet (first message))\n       \
    \          (encode (rest message))))\n          ((char-alphabet (first message))\n\
    \           (cons (char-alphabet (first message))\n                 (encode (rest\
    \ message))))\n          ((char-alphabet (first ", "  (define (helper message\
    \ vowels)\n    (cond\n      [(empty? message) \"\"]\n      [(member (first message)\
    \ vowels) (second message)]\n      [else (helper (rest message) (cons (first message)\
    \ vowels))]))\n  (helper (reverse message) '(a e i o u)))\n", "  (let ((vowels\
    \ '(a e i o u)))\n    (cond\n      [(empty? message) empty]\n      [(member (first\
    \ message) vowels) (cons (first message) (encode (substring (second message) 0\
    \ (- (length message) 1)))) ]\n      [(member (first message) '(A E I O U)) (cons\
    \ (first message) (encode (substring (second message) 0 (- (length message) 1))))\
    \ ]\n      [else (cons (first message) (encode (substring (second message) 0 (-\
    \ (length message) 1)))) ])))\n", "  (let ((letters '(#\\a #\\b #\\c #\\d #\\\
    e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\\
    v #\\w #\\x #\\y #\\z))\n        (vowels '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G\
    \ #\\H #\\I #\\J #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\\
    X #\\Y #\\Z)))\n    (cond\n      [(empty? message) \"\"]\n      [(char-alphabetic?\
    \ message) (char-alphabetic? (char-lower (first message)))]\n      [(char-alphabetic?\
    \ (char-upper (first message))) (char-alphabetic? (char-upper (first message)))]\n\
    \      [else (cons (char-upper (first message)) (encode (rest message)))]))\n\
    </code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThanks for your answer! I appreciate\
    \ it. I was able to solve it using your code. Thanks again!\n<|/ c |>\n<| c |>\n\
    I added my solution to the original post. Thanks again!\n<|/ c |>\n<| c |>\nI\
    \ added my solution to the original post. Thanks again!\n<|/ c |>\n<| a tags=racket,scheme\
    \ |>\nI solved it using your code. Thanks again!\n<code>", "  (define (swap-case\
    \ letter)\n    (if (char=? letter #\\a)\n        'a\n        (if (char=? letter\
    \ #\\z)\n            'z\n            (char->string letter))))\n  (define (replace-vowel\
    \ letter)\n    (if (char=? letter #\\a)\n        'a\n        (if (char=? letter\
    \ #\\z)\n            'z\n            (char->string letter))))\n  (define (replace-vowels\
    \ letter)\n    (if (char=? letter #\\a)\n        'a\n        (if (char=? letter\
    \ #\\z)\n            'z\n            (char->string letter))))\n  (define (replace-vowels-2\
    \ letter vowel)\n    (if (char=? letter #\\a)\n        'a\n        (if (char=?\
    \ letter #\\z)\n            'z\n            (char->string letter))))\n  (define\
    \ (replace-vowels-3 letter vowel vowel2)\n    (if (char=? letter #\\a)\n     \
    \   'a\n        (if (char=? letter #\\z)\n            'z\n            (char->string\
    \ letter))))\n  (define (replace-vowels-4 letter vowel vowel2 vowel3)\n    (if\
    \ (char=? letter #\\a)\n        'a\n        (if (char=? letter #\\z)\n       \
    \     'z\n            (char->string letter))))\n  (define (replace-vowels-5 letter\
    \ vowel vowel2 vowel3 vowel4)\n    (if (char=? letter #\\a)\n        'a\n    \
    \    (if (char=? letter #\\z)\n            'z\n            (char->string letter))))\n\
    \  (define (replace-vowels-6 letter vowel vowel2 vowel3 vowel4 vowel5)\n    (if\
    \ (char=? letter #\\a)\n        'a\n        (if (char=? letter #\\z)\n       \
    \     'z\n            (char->string letter))))\n  (define (replace-vowels-7 letter\
    \ vowel vowel2 vowel3 vowel4 vowel5 vowel6)\n    (if (char=? letter #\\a)\n  \
    \      'a\n        (if (char=? letter #\\z)\n            'z\n            (char->string\
    \ letter))))\n  (define (replace-vowels-8 letter vowel vowel2 vowel3 vowel4 vowel5\
    \ vowel6 vowel7)\n    (if (char=? letter #\\a)\n        'a\n        (if (char=?\
    \ letter #\\z)\n            'z\n            (char->string letter))))\n  (define\
    \ (replace-vowels-9 letter vowel vowel2 vowel3 vowel4 vowel5 vowel6 vowel7 vowel8)\n\
    \    (", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\
    \"]\n      [(char-alphabetic? message) message]\n      [(char-alphabetic? (first\
    \ message)) (encode (first message))]\n      [(char-alphabetic? (second message))\
    \ (encode (second message))]\n      [(char-alphabetic? (third message)) (encode\
    \ (third message))]\n      [(char-alphabetic? (fourth message)) (encode (fourth\
    \ message))]\n      [(char-alphabetic? (fifth message)) (encode (fifth message))]\n\
    \      [(char-alphabetic? (sixth message)) (encode (sixth message))]\n      [(char-alphabetic?\
    \ (seventh message)) (encode (seventh message))]\n      [(char-alphabetic? (eighth\
    \ message)) (encode (eighth message))]\n      [(char-alphabetic? (ninth message))\
    \ (encode (ninth message))]\n      [(char-alphabetic? (tenth message)) (encode\
    \ (tenth message))]\n      [(char-alphabetic? (eleventh message)) (encode (eleventh\
    \ message))]\n      [(char-alphabetic? (twelfth message)) (encode (twelfth message))]\n\
    \      [(char-alphabetic? (thirteenth message)) (encode (thirteenth message))]\n\
    \      [(char-alphabetic? (fourteenth message)) (encode (fourteenth message))]\n\
    \      [(char-alphabetic? (fifteenth message)) (encode (fifteenth message))]\n\
    \      [(char-alphabetic? (sixteenth message)) (encode (sixteenth message))]\n\
    \      [(char-alphabetic? (seventeenth message)) (encode (seventeenth message))]\n\
    \      [(char-alphabetic? (eighteenth message)) (encode (eighteenth message))]\n\
    \      [(char-alphabetic? (nineteenth message)) (encode (nineteenth message))]\n\
    \      [(char-alphabetic? (twentieth message)) (encode (twentieth message))]\n\
    \      [(char-alphabetic? (twenty-first message)) (encode (twenty-first message))]\n\
    \      [(char-alphabetic? (twenty-second message)) (encode (twenty-second message))]\n",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode\
    \ (substring message 1 2))]\n    [(equal? (first message) ?e) (encode (substring\
    \ message 1 3))]\n    [(equal? (first message) ?i) (encode (substring message\
    \ 1 4))]\n    [(equal? (first message) ?o) (encode (substring message 1 5))]\n\
    \    [(equal? (first message) ?u) (encode (substring message 1 6))]\n    [else\
    \ (cons (first message)\n               (encode (substring message 2))])]))\n",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode\
    \ (substring message 1 2))]\n    [(equal? (first message) ?e) (encode (substring\
    \ message 1 3))]\n    [(equal? (first message) ?i) (encode (substring message\
    \ 1 4))]\n    [(equal? (first message) ?o) (encode (substring message 1 5))]\n\
    \    [(equal? (first message) ?u) (encode (substring message 1 6))]\n    [else\
    \ (cons (first message)\n                (encode (substring message 2)))]))\n",
  "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n    \
    \  [(member (first message) vowels) (cons (first message) (encode (substring message\
    \ 1 (length message))))]\n      [else (cons (first message) (encode (substring\
    \ message 1 (length message))))])))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n\
    \      [(empty? message) message]\n      [(member (first message) vowels) (second\
    \ message)]\n      [else (cons (first message)\n                  (encode (substring\
    \ (second message) 0 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 1 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 2 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 3 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 4 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 5 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 6 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 7 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 8 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 9 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 10 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 11 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 12 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 13 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 14 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 15 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 16 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 17 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 18 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 19 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 20 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 21 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 22 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 23 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 24 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 25 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 26 (- (length message) 1)))\n                  (encode (substring\
    \ (second message) 27", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty?\
    \ message) \"\"]\n      [(member (first message) vowels) (cons (first message)\
    \ (encode (substring message 1 (length message))))]\n      [else (cons (first\
    \ message) (encode (substring message 1 (length message))))])))\n", "  (cond\n\
    \    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode-a message)]\n\
    \    [(equal? (first message) ?e) (encode-e message)]\n    [(equal? (first message)\
    \ ?i) (encode-i message)]\n    [(equal? (first message) ?o) (encode-o message)]\n\
    \    [(equal? (first message) ?u) (encode-u message)]\n    [else (encode-other\
    \ (first message))]))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty?\
    \ message) \"\"]\n      [(member (first message) vowels) (second message)]\n \
    \     [else (cons (first message)\n                  (encode (substring message\
    \ 1 (- (length message) 1)))]))))\n", "  (let ((vowels '(a e i o u)))\n    (cond\
    \ ((null? message) \"\")\n          ((char-alphabet (car message))\n         \
    \  (cons (char-alphabet (car message))\n                 (encode (substring message\
    \ 1 (char-alphabet (car message)))))\n           (encode (substring message 1\
    \ (char-alphabet (car message)))))\n          ((char-alphabet (car message))\n\
    \           (cons (char-alphabet (car message))\n                 (encode (substring\
    \ message 1 (char-alphabet (car message)))))\n           (encode (substring message\
    \ 1 (char-alphabet (car message)))))\n          ((char-alphabet (car message))\n\
    \           (cons (char-alphabet (car message))\n                 (encode (substring\
    \ message 1 (char-alphabet (car message)))))\n           (encode (substring message\
    \ 1 (char-alphabet (car message)))))\n          ((char-alphabet (car message))\n\
    \           (cons (char-alphabet (car message))\n                 (encode (substring\
    \ message 1 (char-alphabet (car message)))))\n           (encode (substring message\
    \ 1 (char-alphabet (car message)))))\n          ((char-alphabet (car message))\n\
    \           (cons (char-alphabet (car message))\n                 (encode (substring\
    \ message 1 (char-alphabet (car message)))))\n           (encode (substring message\
    \ 1 (char-alphabet (car message)))))\n          ((char-alphabet (car message))\n\
    \           (cons (char-alphabet (car message))\n                 (encode (substring\
    \ message 1 (char-alphabet (car message)))))\n           (encode (substring message\
    \ 1 (char-alphabet (car message)))))\n          ((char-alphabet (car message))\n\
    \           (cons (char-alphabet (car message))\n                 (encode (substring\
    \ message 1 (char-alphabet (car message)))))\n           (encode (substring message\
    \ 1 (char-alphabet (car message)))))\n          ((char-alphabet (car message))\n\
    \           (cons (char-alphabet (car message))\n                 (encode (substring\
    \ message 1 (char-alphabet (car message)))))\n           (encode (substring message\
    \ 1 (char-alphabet (car message)))))\n          ((char-alphabet (car message))\n\
    \           (cons (char-alphabet (car message))\n                 (encode (substring\
    \ message 1 (char-alphab", "  (define (helper i j)\n    (cond\n      [(char=?\
    \ (char-ref message i) 'a) (char-ref message (+ i 1))]\n      [(char=? (char-ref\
    \ message i) 'e) (char-ref message (+ i 1))]\n      [(char=? (char-ref message\
    \ i) 'i) (char-ref message (+ i 1))]\n      [(char=? (char-ref message i) 'o)\
    \ (char-ref message (+ i 1))]\n      [(char=? (char-ref message i) 'u) (char-ref\
    \ message (+ i 1))]\n      [(char=? (char-ref message i) 'y) (char-ref message\
    \ (+ i 1))]\n      [else (char-ref message (+ i 1))]))\n  (define (helper2 i j)\n\
    \    (cond\n      [(char=? (char-ref message i) 'a) (char-ref message (+ i 2))]\n\
    \      [(char=? (char-ref message i) 'e) (char-ref message (+ i 2))]\n      [(char=?\
    \ (char-ref message i) 'i) (char-ref message (+ i 2))]\n      [(char=? (char-ref\
    \ message i) 'o) (char-ref message (+ i 2))]\n      [(char=? (char-ref message\
    \ i) 'u) (char-ref message (+ i 2))]\n      [(char=? (char-ref message i) 'y)\
    \ (char-ref message (+ i 2))]\n      [else (char-ref message (+ i 2))]))\n  (define\
    \ (helper3 i j)\n    (cond\n      [(char=? (char-ref message i) 'a) (char-ref\
    \ message (+ i 3))]\n      [(char=? (char-ref message i) 'e) (char-ref message\
    \ (+ i 3))]\n      [(char=? (char-ref message i) 'i) (char-ref message (+ i 3))]\n\
    \      [(char=? (char-ref message i) 'o) (char-ref message (+ i 3))]\n      [(char=?\
    \ (char-ref message i) 'u) (char-ref message (+ i 3))]\n      [(char=? (char-ref\
    \ message i) 'y) (char-ref message (+ i 3))]\n      [else (char-ref message (+\
    \ i 3))]))\n  (define (helper4 i j)\n    (cond\n      [(char=? (char-ref message\
    \ i) 'a) (char-ref message (+ ", "  (let ([vowels '(a e i o u)])\n    (cond\n\
    \      [(empty? message) \"\"]\n      [(member (first message) vowels) (cons (first\
    \ message) (encode (substring message 1 (- (length message) 1)))) ]\n      [else\
    \ (cons (first message) (encode (substring message 1 (- (length message) 1))))\
    \ ])))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message)\
    \ ?a) (encode (substring message 1 2))]\n    [(equal? (first message) ?e) (encode\
    \ (substring message 1 3))]\n    [(equal? (first message) ?i) (encode (substring\
    \ message 1 4))]\n    [(equal? (first message) ?o) (encode (substring message\
    \ 1 5))]\n    [(equal? (first message) ?u) (encode (substring message 1 6))]\n\
    \    [(equal? (first message) ?A) (encode (substring message 1 7))]\n    [(equal?\
    \ (first message) ?E) (encode (substring message 1 8))]\n    [(equal? (first message)\
    \ ?I) (encode (substring message 1 9))]\n    [(equal? (first message) ?O) (encode\
    \ (substring message 1 10))]\n    [(equal? (first message) ?U) (encode (substring\
    \ message 1 11))]\n    [(equal? (first message) ?a) (encode (substring message\
    \ 1 12))]\n    [(equal? (first message) ?e) (encode (substring message 1 13))]\n\
    \    [(equal? (first message) ?i) (encode (substring message 1 14))]\n    [(equal?\
    \ (first message) ?o) (encode (substring message 1 15))]\n    [(equal? (first\
    \ message) ?u) (encode (substring message 1 16))]\n    [(equal? (first message)\
    \ ?A) (encode (substring message 1 17))]\n    [(equal? (first message) ?E) (encode\
    \ (substring message 1 18))]\n    [(equal? (first message) ?I) (encode (substring\
    \ message 1 19))]\n    [(equal? (first message) ?O) (encode (substring message\
    \ 1 20))]\n    [(equal? (first message) ?U) (encode (substring message 1 21))]\n\
    \    [(equal? (first message) ?a) (encode (substring message 1 22))]\n    [(equal?\
    \ (first message) ?e) (encode (substring message 1 23))]\n    [(equal? (first\
    \ message) ?i) (encode (substring message 1 24))]\n    [(equal? (first message)\
    \ ?o) (encode (substring message 1 25))]\n    [(equal? (first message) ?u) (encode\
    \ (substring message 1 26))]\n    [(equal? (first message) ?A) (encode (substring\
    \ message 1 27))]\n    [(equal? (first ", "  (cond\n    [(empty? message) \"\"\
    ]\n    [(equal? (first message) ?a) (encode (substring message 1 2))]\n    [(equal?\
    \ (first message) ?e) (encode (substring message 1 3))]\n    [(equal? (first message)\
    \ ?i) (encode (substring message 1 4))]\n    [(equal? (first message) ?o) (encode\
    \ (substring message 1 5))]\n    [(equal? (first message) ?u) (encode (substring\
    \ message 1 6))]\n    [(equal? (first message) ?A) (encode (substring message\
    \ 1 7))] \n    [(equal? (first message) ?E) (encode (substring message 1 8))]\
    \ \n    [(equal? (first message) ?I) (encode (substring message 1 9))] \n    [(equal?\
    \ (first message) ?O) (encode (substring message 1 10))] \n    [(equal? (first\
    \ message) ?U) (encode (substring message 1 11))] \n    [(equal? (first message)\
    \ ?a) (encode (substring message 1 12))]\n    [(equal? (first message) ?e) (encode\
    \ (substring message 1 13))]\n    [(equal? (first message) ?i) (encode (substring\
    \ message 1 14))]\n    [(equal? (first message) ?o) (encode (substring message\
    \ 1 15))]\n    [(equal? (first message) ?u) (encode (substring message 1 16))]\n\
    \    [(equal? (first message) ?A) (encode (substring message 1 17))]\n    [(equal?\
    \ (first message) ?E) (encode (substring message 1 18))]\n    [(equal? (first\
    \ message) ?I) (encode (substring message 1 19))]\n    [(equal? (first message)\
    \ ?O) (encode (substring message 1 20))]\n    [(equal? (first message) ?U) (encode\
    \ (substring message 1 21))]\n    [(equal? (first message) ?a) (encode (substring\
    \ message 1 22))]\n    [(equal? (first message) ?e) (encode (substring message\
    \ 1 23))]\n    [(equal? (first message) ?i) (encode (substring message 1 24))]\n\
    \    [(equal? (first message) ?o) (encode (substring message 1 25))]\n    [(equal?\
    \ (first message) ?u) (encode (substring message 1 26))]\n    [(equal? (first\
    \ message) ?A) (encode (substring message 1 27))]\n    [(equal", "  (define (helper\
    \ message index)\n    (cond [(null? message) \"\"]\n          [(char=? (char-code\
    \ (car message)) #\\a) (helper (cdr message) (+ index 1))]\n          [(char=?\
    \ (char-code (car message)) #\\e) (helper (cdr message) (+ index 2))]\n      \
    \    [(char=? (char-code (car message)) #\\i) (helper (cdr message) (+ index 3))]\n\
    \          [(char=? (char-code (car message)) #\\o) (helper (cdr message) (+ index\
    \ 4))]\n          [(char=? (char-code (car message)) #\\u) (helper (cdr message)\
    \ (+ index 5))]\n          [(char=? (char-code (car message)) #\\y) (helper (cdr\
    \ message) (+ index 6))]\n          [(char=? (char-code (car message)) #\\A) (helper\
    \ (cdr message) (+ index 7))]\n          [(char=? (char-code (car message)) #\\\
    E) (helper (cdr message) (+ index 8))]\n          [(char=? (char-code (car message))\
    \ #\\I) (helper (cdr message) (+ index 9))]\n          [(char=? (char-code (car\
    \ message)) #\\O) (helper (cdr message) (+ index 10))]\n          [(char=? (char-code\
    \ (car message)) #\\U) (helper (cdr message) (+ index 11))]\n          [(char=?\
    \ (char-code (car message)) #\\Y) (helper (cdr message) (+ index 12))]\n     \
    \     [(char=? (char-code (car message)) #\\a) (helper (cdr message) (+ index\
    \ 13))]\n          [(char=? (char-code (car message)) #\\e) (helper (cdr message)\
    \ (+ index 14))]\n          [(char=? (char-code (car message)) #\\i) (helper (cdr\
    \ message) (+ index 15))]\n          [(char=? (char-code (car message)) #\\o)\
    \ (helper (cdr message) (+ index 16))]\n          [(char=? (char-code (car message))\
    \ #\\u) (helper (cdr message) (+ index 17))]\n          [(char=? (char-code (car\
    \ message)) #\\y) (helper (cdr message) (+ index 18))]\n          [(char=? (char-code ",
  "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n    \
    \  [(member (first message) vowels) (first message)]\n      [else (cons (first\
    \ message)\n                  (encode (substring message 1 (length message))))])))\n",
  "  (define (enc-helper message vowels)\n    (cond\n      [(empty? message) \"\"\
    ]\n      [(member (first message) vowels) (enc-helper (rest message) (cons (first\
    \ message) vowels))]\n      [else (cons (first message) (enc-helper (rest message)\
    \ (cons (first message) vowels)))]))\n  (enc-helper message '(a e i o u)))\n",
  "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n    \
    \  [(member (first message) vowels) (first message)]\n      [else (cons (first\
    \ message)\n                   (encode (substring message 1 (- (length message)\
    \ 1)))]))))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message)\
    \ ?a) (encode (substring message 1 2))]\n    [(equal? (first message) ?e) (encode\
    \ (substring message 1 3))]\n    [(equal? (first message) ?i) (encode (substring\
    \ message 1 4))]\n    [(equal? (first message) ?o) (encode (substring message\
    \ 1 5))]\n    [(equal? (first message) ?u) (encode (substring message 1 6))]\n\
    \    [else (cons (first message)\n                (encode (substring message 2)))))\n",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode\
    \ (substring message 1 2))]\n    [(equal? (first message) ?e) (encode (substring\
    \ message 1 3))]\n    [(equal? (first message) ?i) (encode (substring message\
    \ 1 4))]\n    [(equal? (first message) ?o) (encode (substring message 1 5))]\n\
    \    [(equal? (first message) ?u) (encode (substring message 1 6))]\n    [(equal?\
    \ (first message) ?A) (encode (substring message 1 7))] \n    [(equal? (first\
    \ message) ?E) (encode (substring message 1 8))] \n    [(equal? (first message)\
    \ ?I) (encode (substring message 1 9))] \n    [(equal? (first message) ?O) (encode\
    \ (substring message 1 10))] \n    [(equal? (first message) ?U) (encode (substring\
    \ message 1 11))] \n    [(equal? (first message) ?a) (encode (substring message\
    \ 1 12))] \n    [(equal? (first message) ?e) (encode (substring message 1 13))]\
    \ \n    [(equal? (first message) ?i) (encode (substring message 1 14))] \n   \
    \ [(equal? (first message) ?o) (encode (substring message 1 15))] \n    [(equal?\
    \ (first message) ?u) (encode (substring message 1 16))] \n    [(equal? (first\
    \ message) ?A) (encode (substring message 1 17))] \n    [(equal? (first message)\
    \ ?E) (encode (substring message 1 18))] \n    [(equal? (first message) ?I) (encode\
    \ (substring message 1 19))] \n    [(equal? (first message) ?O) (encode (substring\
    \ message 1 20))] \n    [(equal? (first message) ?U) (encode (substring message\
    \ 1 21))] \n    [(equal? (first message) ?a) (encode (substring message 1 22))]\
    \ \n    [(equal? (first message) ?e) (encode (substring message 1 23))] \n   \
    \ [(equal? (first message) ?i) (encode (substring message 1 24))] \n    [(equal?\
    \ (first message) ?o) (encode (substring message 1 25))] \n    [(equal? (first\
    \ message) ?u) (encode (substring message 1 26))] \n    [(equal? (first message)\
    \ ?A) (", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message)\
    \ \"\"]\n      [(member (first message) vowels) (cons (first message) (encode\
    \ (substring message 1 (length message))))]\n      [else (cons (first message)\
    \ (encode (substring message 1 (length message))))])))\n", "  (cond\n    [(empty?\
    \ message) \"\"]\n    [(equal? (first message) ?a) (encode (substring message\
    \ 1 2))]\n    [(equal? (first message) ?e) (encode (substring message 1 3))]\n\
    \    [(equal? (first message) ?i) (encode (substring message 1 4))]\n    [(equal?\
    \ (first message) ?o) (encode (substring message 1 5))]\n    [(equal? (first message)\
    \ ?u) (encode (substring message 1 6))]\n    [(equal? (first message) ?A) (encode\
    \ (substring message 1 7))] \n    [(equal? (first message) ?E) (encode (substring\
    \ message 1 8))] \n    [(equal? (first message) ?I) (encode (substring message\
    \ 1 9))] \n    [(equal? (first message) ?O) (encode (substring message 1 10))]\
    \ \n    [(equal? (first message) ?U) (encode (substring message 1 11))] \n   \
    \ [(equal? (first message) ?a) (encode (substring message 1 12))] \n    [(equal?\
    \ (first message) ?e) (encode (substring message 1 13))] \n    [(equal? (first\
    \ message) ?i) (encode (substring message 1 14))] \n    [(equal? (first message)\
    \ ?o) (encode (substring message 1 15))] \n    [(equal? (first message) ?u) (encode\
    \ (substring message 1 16))] \n    [(equal? (first message) ?A) (encode (substring\
    \ message 1 17))] \n    [(equal? (first message) ?E) (encode (substring message\
    \ 1 18))] \n    [(equal? (first message) ?I) (encode (substring message 1 19))]\
    \ \n    [(equal? (first message) ?O) (encode (substring message 1 20))] \n   \
    \ [(equal? (first message) ?U) (encode (substring message 1 21))] \n    [(equal?\
    \ (first message) ?a) (encode (substring message 1 22))] \n    [(equal? (first\
    \ message) ?e) (encode (substring message 1 23))] \n    [(equal? (first message)\
    \ ?i) (encode (substring message 1 24))] \n    [(equal? (first message) ?o) (encode\
    \ (substring message 1 25))] \n    [(equal? (first message) ?u) (encode (substring\
    \ message 1 26))] \n    [(equal? (first message) ?A) (", "  (let ((vowels '(a\
    \ e i o u)))\n    (cond\n      [(empty? message) \"\"]\n      [(member (first\
    \ message) vowels) (second message)]\n      [else (cons (first message)\n    \
    \              (encode (substring message 1 (- (length message) 1))))]))) \n",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode\
    \ (substring message 1 2))]\n    [(equal? (first message) ?e) (encode (substring\
    \ message 1 3))]\n    [(equal? (first message) ?i) (encode (substring message\
    \ 1 4))]\n    [(equal? (first message) ?o) (encode (substring message 1 5))]\n\
    \    [(equal? (first message) ?u) (encode (substring message 1 6))]\n    [else\
    \ (cons (first message)\n               (encode (substring message 2))])]))\n",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode-a\
    \ message)]\n    [(equal? (first message) ?e) (encode-e message)]\n    [(equal?\
    \ (first message) ?i) (encode-i message)]\n    [(equal? (first message) ?o) (encode-o\
    \ message)]\n    [(equal? (first message) ?u) (encode-u message)]\n    [else (encode-others\
    \ message)]))\n", "  (define (vowel-position letter)\n    (cond [(char=? (char-code\
    \ letter) 'a) (char-code (char letter 'a))]\n          [(char=? (char-code letter)\
    \ 'e) (char-code (char letter 'e))]\n          [(char=? (char-code letter) 'i)\
    \ (char-code (char letter 'i))]\n          [(char=? (char-code letter) 'o) (char-code\
    \ (char letter 'o))]\n          [(char=? (char-code letter) 'u) (char-code (char\
    \ letter 'u))]\n          [else (error \"Invalid letter: ~a\" letter)]))\n  (define\
    \ (vowel-position letter position)\n    (cond [(char=? (char-code letter) 'a)\
    \ (char-code (char letter 'a))]\n          [(char=? (char-code letter) 'e) (char-code\
    \ (char letter 'e))]\n          [(char=? (char-code letter) 'i) (char-code (char\
    \ letter 'i))]\n          [(char=? (char-code letter) 'o) (char-code (char letter\
    \ 'o))]\n          [(char=? (char-code letter) 'u) (char-code (char letter 'u))]\n\
    \          [else (error \"Invalid letter: ~a\" letter)]))\n  (define (vowel-position\
    \ letter position)\n    (cond [(char=? (char-code letter) 'a) (char-code (char\
    \ letter 'a))]\n          [(char=? (char-code letter) 'e) (char-code (char letter\
    \ 'e))]\n          [(char=? (char-code letter) 'i) (char-code (char letter 'i))]\n\
    \          [(char=? (char-code letter) 'o) (char-code (char letter 'o))]\n   \
    \       [(char=? (char-code letter) 'u) (char-code (char letter 'u))]\n      \
    \    [else (error \"Invalid letter: ~a\" letter)]))\n  (define (vowel-position\
    \ letter position)\n    (cond [(char=? (char-code letter) 'a) (char-code (char\
    \ letter 'a))]\n          [(char=? (char-code letter) 'e) (char-code (char letter\
    \ 'e))]\n          [(char=? (char-code letter) 'i) (char-code (char letter 'i))]\n\
    \          [(char=? (char", "  (cond\n    [(empty? message) \"\"]\n    [(equal?\
    \ (first message) ?a) (encode (substring message 1 2))]\n    [(equal? (first message)\
    \ ?e) (encode (substring message 1 2))]\n    [(equal? (first message) ?i) (encode\
    \ (substring message 1 2))]\n    [(equal? (first message) ?o) (encode (substring\
    \ message 1 2))]\n    [(equal? (first message) ?u) (encode (substring message\
    \ 1 2))]\n    [(equal? (first message) ?A) (encode (substring message 1 2))]\n\
    \    [(equal? (first message) ?E) (encode (substring message 1 2))]\n    [(equal?\
    \ (first message) ?I) (encode (substring message 1 2))]\n    [(equal? (first message)\
    \ ?O) (encode (substring message 1 2))]\n    [(equal? (first message) ?U) (encode\
    \ (substring message 1 2))]\n    [else (cons (first message)\n              (encode\
    \ (substring message 2 message)))]))\n", "  (let ((vowels '(a e i o u)))\n   \
    \ (map (lambda (letter)\n           (let ((index (assoc letter vowels)))\n   \
    \          (if (null? index)\n                 (list letter)\n               \
    \  (cons (car index) (cdr index)))))\n         message)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
