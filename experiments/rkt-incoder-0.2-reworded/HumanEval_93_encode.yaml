name: HumanEval_93_encode
language: rkt
prompt: "#lang racket\n\n;; Write a function that takes a message, and encodes in\
  \ such a \n;; way that it swaps case of all letters, replaces all vowels in \n;;\
  \ the message with the letter that appears 2 places ahead of that \n;; vowel in\
  \ the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> (encode\
  \ \"test\")\n;; \"TGST\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C\
  \ MGSSCGG\"\n(define (encode message)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
  \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
  \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n  \
  \  (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
  \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
  \n(test-humaneval)"
completions: ["  (define (helper index message)\n    (if (null? message)\n       \
    \ '()\n        (cond ((char=? (char-code (car message)) #\\a) (cons (char-code\
    \ (car message)) (helper (+ index 1) (cdr message)))) \n              ((char=?\
    \ (char-code (car message)) #\\e) (cons (char-code (car message)) (helper (+ index\
    \ 1) (cdr message)))) \n              ((char=? (char-code (car message)) #\\i)\
    \ (cons (char-code (car message)) (helper (+ index 1) (cdr message)))) \n    \
    \          ((char=? (char-code (car message)) #\\o) (cons (char-code (car message))\
    \ (helper (+ index 1) (cdr message)))) \n              ((char=? (char-code (car\
    \ message)) #\\u) (cons (char-code (car message)) (helper (+ index 1) (cdr message))))\
    \ \n              ((char=? (char-code (car message)) #\\y) (cons (char-code (car\
    \ message)) (helper (+ index 1) (cdr message)))) \n              ((char=? (char-code\
    \ (car message)) #\\h) (cons (char-code (car message)) (helper (+ index 1) (cdr\
    \ message)))) \n              ((char=? (char-code (car message)) #\\o) (cons (char-code\
    \ (car message)) (helper (+ index 1) (cdr message)))) \n              ((char=?\
    \ (char-code (car message)) #\\o) (cons (char-code (car message)) (helper (+ index\
    \ 1) (cdr message)))) \n              ((char=? (char-code (car message)) #\\o)\
    \ (cons (char-code (car message)) (helper (+ index 1) (cdr message)))) \n    \
    \          ((char=? (char-code (car message)) #\\o) (cons (char-code (car message))\
    \ (helper (+ index 1) (cdr message)))) \n              ((char=? (char-code (car\
    \ message)) #\\o) (cons (char-code (car message)) (helper (+ index 1) (cdr message))))\
    \ \n              ((char=? (char-code (car message)) #\\o) (cons (char-code (car\
    \ message)) (helper (+ index 1) (cdr message)))) \n", "  (cond\n    [(empty? message)\
    \ \"\"]\n    [(equal? (first message) ?a) (encode (substring message 1 2))]\n\
    \    [(equal? (first message) ?e) (encode (substring message 1 3))]\n    [(equal?\
    \ (first message) ?i) (encode (substring message 1 4))]\n    [(equal? (first message)\
    \ ?o) (encode (substring message 1 5))]\n    [(equal? (first message) ?u) (encode\
    \ (substring message 1 6))]\n    [(equal? (first message) ?A) (encode (substring\
    \ message 1 7))] \n    [(equal? (first message) ?E) (encode (substring message\
    \ 1 8))] \n    [(equal? (first message) ?I) (encode (substring message 1 9))]\
    \ \n    [(equal? (first message) ?O) (encode (substring message 1 10))] \n   \
    \ [(equal? (first message) ?U) (encode (substring message 1 11))] \n    [(equal?\
    \ (first message) ?a) (encode (substring message 1 12))] \n    [(equal? (first\
    \ message) ?e) (encode (substring message 1 13))] \n    [(equal? (first message)\
    \ ?i) (encode (substring message 1 14))] \n    [(equal? (first message) ?o) (encode\
    \ (substring message 1 15))] \n    [(equal? (first message) ?u) (encode (substring\
    \ message 1 16))] \n    [(equal? (first message) ?A) (encode (substring message\
    \ 1 17))] \n    [(equal? (first message) ?E) (encode (substring message 1 18))]\
    \ \n    [(equal? (first message) ?I) (encode (substring message 1 19))] \n   \
    \ [(equal? (first message) ?O) (encode (substring message 1 20))] \n    [(equal?\
    \ (first message) ?U) (encode (substring message 1 21))] \n    [(equal? (first\
    \ message) ?a) (encode (substring message 1 22))] \n    [(equal? (first message)\
    \ ?e) (encode (substring message 1 23))] \n    [(equal? (first message) ?i) (encode\
    \ (substring message 1 24))] \n    [(equal? (first message) ?o) (encode (substring\
    \ message 1 25))] \n    [(equal? (first message) ?u) (encode (substring message\
    \ 1 26))] \n    [(equal? (first message) ?A) (", "  (let ((vowels '(a e i o u)))\n\
    \    (cond ((null? message) '())\n          ((member (char-ref message 0) vowels)\
    \ \n           (char-append (char-ref message 0) \n                       (char-ref\
    \ message (+ 1 \n                                           (char-ref message\
    \ 0)))))\n          (else \n           (append (encode (char-ref message 0)) \n\
    \                   (encode (char-ref message (+ 1 \n                        \
    \                       (char-ref message 0)))))))\n  )\n", "  (define (helper\
    \ i j)\n    (cond\n      [(= i j) (cons message '())]\n      [(char-alphabet (char\
    \ message i))\n       (helper (+ i 1) (+ j 1))]\n      [(char-alphabet (char message\
    \ j))\n       (helper (+ i 1) (+ j 1))]\n      [(char-alphabet (char message i))\n\
    \       (helper (+ i 1) (+ j 2))]\n      [(char-alphabet (char message j))\n \
    \      (helper (+ i 2) (+ j 1))]\n      [(char-alphabet (char message i))\n  \
    \     (helper (+ i 2) (+ j 2))]\n      [(char-alphabet (char message j))\n   \
    \    (helper (+ i 2) (+ j 2))]\n      [(char-alphabet (char message i))\n    \
    \   (helper (+ i 2) (+ j 3))]\n      [(char-alphabet (char message j))\n     \
    \  (helper (+ i 3) (+ j 2))]\n      [(char-alphabet (char message i))\n      \
    \ (helper (+ i 3) (+ j 3))]\n      [(char-alphabet (char message j))\n       (helper\
    \ (+ i 3) (+ j 3))]\n      [(char-alphabet (char message i))\n       (helper (+\
    \ i 3) (+ j 4))]\n      [(char-alphabet (char message j))\n       (helper (+ i\
    \ 4) (+ j 3))]\n      [(char-alphabet (char message i))\n       (helper (+ i 4)\
    \ (+ j 4))]\n      [(char-alphabet (char message j))\n       (helper (+ i 4) (+\
    \ j 4))]\n      [(char-alphabet (char message i))\n       (helper (+ i 4) (+ j\
    \ 5))]\n      [(char-alphabet (char message j))\n       (helper (+ i 5) (+ j 4))]\n\
    \      [(char-alphabet (char message i))\n       (helper (+ i 5) (+ j 5))]\n \
    \     [(char-alphabet (char message j))\n       (helper (+ i 5) (+ j 5))]\n  \
    \    [(char-alphabet (char message i))\n       (helper (+ i 5) (+ j 6))]\n   \
    \   [(char-alphabet (char message j))\n       (helper (+ i 6) (+ j 5))]\n    \
    \  [(char-alphabet (char message i))\n       (helper (+ i 6) (+ ", "  (cond\n\
    \    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode (substring\
    \ message 1 2))]\n    [(equal? (first message) ?e) (encode (substring message\
    \ 1 3))]\n    [(equal? (first message) ?i) (encode (substring message 1 4))]\n\
    \    [(equal? (first message) ?o) (encode (substring message 1 5))]\n    [(equal?\
    \ (first message) ?u) (encode (substring message 1 6))]\n    [else (cons (first\
    \ message)\n               (encode (substring message 2)))]))\n", "  (define (helper\
    \ message index)\n    (cond [(null? message) \"\"]\n          [(char=? (car message)\
    \ (car index)) \n           (helper (cdr message) (cons (car index) (cdr index)))]\n\
    \          [else (helper (cdr message) (cons (car index) (cdr index)))]))\n  (helper\
    \ message '()))\n", "  (let ((vowels '(a e i o u)))\n    (cond ((null? message)\
    \ '())\n          ((char-alphabet (car message))\n           (cons (char-alphabet\
    \ (car message))\n                 (encode (substring message 1 (char-alphabet\
    \ (car message)))))\n           (encode (substring message 1 (char-alphabet (car\
    \ message)))))\n          ((char-alphabet (car message))\n           (cons (char-alphabet\
    \ (car message))\n                 (encode (substring message 1 (char-alphabet\
    \ (car message)))))\n          ((char-alphabet (car message))\n           (cons\
    \ (char-alphabet (car message))\n                 (encode (substring message 1\
    \ (char-alphabet (car message)))))\n          ((char-alphabet (car message))\n\
    \           (cons (char-alphabet (car message))\n                 (encode (substring\
    \ message 1 (char-alphabet (car message)))))\n          ((char-alphabet (car message))\n\
    \           (cons (char-alphabet (car message))\n                 (encode (substring\
    \ message 1 (char-alphabet (car message)))))\n          ((char-alphabet (car message))\n\
    \           (cons (char-alphabet (car message))\n                 (encode (substring\
    \ message 1 (char-alphabet (car message)))))\n          ((char-alphabet (car message))\n\
    \           (cons (char-alphabet (car message))\n                 (encode (substring\
    \ message 1 (char-alphabet (car message)))))\n          ((char-alphabet (car message))\n\
    \           (cons (char-alphabet (car message))\n                 (encode (substring\
    \ message 1 (char-alphabet (car message)))))\n          ((char-alphabet (car message))\n\
    \           (cons (char-alphabet (car message))\n                 (encode (substring\
    \ message 1 (char-alphabet (car message)))))\n          ((char-alphabet (car message))\n\
    \           (cons (char-alphabet (car message))\n                 (encode (substring\
    \ message 1 (char-alphabet (car message)))))\n          ((char-alphabet (car message))\n\
    \           (cons (char-alphabet (car message))\n                 (encode (substring\
    \ message 1 (char-alphabet (car message)))))\n          ((char-alphabet (car message))\n\
    \           (cons (char-alphabet (car message))\n                 (encode (substring\
    \ message 1 (char", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty?\
    \ message) \"\"]\n      [(member (first message) vowels) (second message)]\n \
    \     [else (cons (first message)\n                   (encode (substring (second\
    \ message) 0 (- (length message) 1)))\n                   (encode (substring (second\
    \ message) 1 (- (length message) 1)))]))))\n", "  (let ((vowels '(a e i o u)))\n\
    \    (cond\n      [(empty? message) message]\n      [(member (first message) vowels)\
    \ (second message)]\n      [else (cons (first message)\n                  (encode\
    \ (substring (second message) 0 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 1 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 2 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 3 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 4 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 5 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 6 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 7 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 8 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 9 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 10 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 11 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 12 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 13 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 14 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 15 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 16 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 17 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 18 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 19 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 20 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 21 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 22 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 23 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 24 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 25 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 26 (- (length message) 1)))\n                  (encode\
    \ (substring (second message) 27", "  (cond\n    [(empty? message) \"\"]\n   \
    \ [(equal? (first message) ?a) (encode-a message)]\n    [(equal? (first message)\
    \ ?e) (encode-e message)]\n    [(equal? (first message) ?i) (encode-i message)]\n\
    \    [(equal? (first message) ?o) (encode-o message)]\n    [(equal? (first message)\
    \ ?u) (encode-u message)]\n    [else (encode-other (first message))]))\n", " \
    \ (let ((vowels '(a e i o u)))\n    (cond ((null? message) '())\n          ((member\
    \ (char-ref message 0) vowels) (cons (char-ref message 0) (encode (char-ref message\
    \ 1))))\n          (else (cons (char-ref message 0) (encode (char-ref message\
    \ 1)))))))\n", "  (define (helper message index)\n    (cond [(null? message) message]\n\
    \          [(char=? (car message) 'a) (helper (cdr message) (+ index 1))]\n  \
    \        [(char=? (car message) 'e) (helper (cdr message) (+ index 2))]\n    \
    \      [(char=? (car message) 'i) (helper (cdr message) (+ index 3))]\n      \
    \    [(char=? (car message) 'o) (helper (cdr message) (+ index 4))]\n        \
    \  [(char=? (car message) 'u) (helper (cdr message) (+ index 5))]\n          [(char=?\
    \ (car message) 'A) (helper (cdr message) (+ index 6))]\n          [(char=? (car\
    \ message) 'E) (helper (cdr message) (+ index 7))]\n          [(char=? (car message)\
    \ 'I) (helper (cdr message) (+ index 8))]\n          [(char=? (car message) 'O)\
    \ (helper (cdr message) (+ index 9))]\n          [(char=? (car message) 'U) (helper\
    \ (cdr message) (+ index 10))]\n          [(char=? (car message) 'a) (helper (cdr\
    \ message) (+ index 11))]\n          [(char=? (car message) 'e) (helper (cdr message)\
    \ (+ index 12))]\n          [(char=? (car message) 'i) (helper (cdr message) (+\
    \ index 13))]\n          [(char=? (car message) 'o) (helper (cdr message) (+ index\
    \ 14))]\n          [(char=? (car message) 'u) (helper (cdr message) (+ index 15))]\n\
    \          [(char=? (car message) 'A) (helper (cdr message) (+ index 16))]\n \
    \         [(char=? (car message) 'E) (helper (cdr message) (+ index 17))]\n  \
    \        [(char=? (car message) 'I) (helper (cdr message) (+ index 18))]\n   \
    \       [(char=? (car message) 'O) (helper (cdr message) (+ index 19))]\n    \
    \      [(char=? (car message) 'U) (helper (cdr message) (+ index 20))]\n     \
    \     [(char=? (car message) 'a) (helper (cdr message) (+ index 21))]\n      \
    \    [(char=? (car message) '", "  (define (enc-helper msg index vowels)\n   \
    \ (cond\n      [(empty? msg) \"\"]\n      [(equal? (char-ref msg index) vowels)\
    \ (substring msg 0 index)]\n      [else (cons (char-ref msg index) (enc-helper\
    \ (substring msg index) \n                                               (+ index\
    \ 1) vowels))]))\n  (enc-helper message 0 '(a e i o u)))\n", "  (let ([vowels\
    \ '(a e i o u)])\n    (cond\n      [(empty? message) \"\"]\n      [(member (first\
    \ message) vowels) (cons (first message) (encode (substring message 1 (- (length\
    \ message) 1))))]\n      [else (cons (first message) (encode (substring message\
    \ 1 (- (length message) 1)))])]))\n", "  (cond\n    [(empty? message) \"\"]\n\
    \    [(equal? (first message) ?a) (encode-a message)]\n    [(equal? (first message)\
    \ ?e) (encode-e message)]\n    [(equal? (first message) ?i) (encode-i message)]\n\
    \    [(equal? (first message) ?o) (encode-o message)]\n    [(equal? (first message)\
    \ ?u) (encode-u message)]\n    [else (encode-others message)]))\n", "  (let ((vowels\
    \ '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n      [(member (first\
    \ message) vowels) (second message)]\n      [else (cons (first message)\n    \
    \              (encode (substring message 1 (- (length message) 1))))]))) \n",
  "  (define (helper i j)\n    (if (< i j)\n        (cons (char->integer (char->string\
    \ (substring message i (add1 j)))) \n               (helper (add1 i) j))\n   \
    \     (cons (char->integer (char->string (substring message i (add1 j)))) \n \
    \              (helper (add1 i) j))))\n  (helper 0 0))\n", "  (cond\n    [(empty?\
    \ message) \"\"]\n    [(equal? (first message) ?a) (encode-a message)]\n    [(equal?\
    \ (first message) ?e) (encode-e message)]\n    [(equal? (first message) ?i) (encode-i\
    \ message)]\n    [(equal? (first message) ?o) (encode-o message)]\n    [(equal?\
    \ (first message) ?u) (encode-u message)]\n    [else (encode-other (first message))]))\n",
  "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n    \
    \  [(member (first message) vowels) (cons (first message) (encode (substring message\
    \ 1 (length (first message))))]\n      [else (cons (first message) (encode (substring\
    \ message 1 (length (first message))))])]))) \n", "  (define (helper message)\n\
    \    (cond\n      [(empty? message) \"\"]\n      [(char-alphabet (first message))\
    \ (helper (rest message))]\n      [else (cons (char-alphabet (first message))\
    \ \n                 (helper (rest message)))]))\n  (helper message))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
