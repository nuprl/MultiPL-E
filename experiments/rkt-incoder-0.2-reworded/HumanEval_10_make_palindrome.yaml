name: HumanEval_10_make_palindrome
language: rkt
prompt: "#lang racket\n\n;; Find the shortest palindrome that begins with a supplied\
  \ string.\n;; Algorithm idea is simple:\n;; - Find the longest postfix of supplied\
  \ string that is a palindrome.\n;; - Append to the end of the string reverse of\
  \ a string prefix that comes before the palindromic suffix.\n;; >>> (make_palindrome\
  \ \"\")\n;; \"\"\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome\
  \ \"cata\")\n;; \"catac\"\n(define (make_palindrome string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate make_palindrome))\n\
  \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"x\") \"\
  x\")\n    (check-equal? (candidate \"xyz\") \"xyzyx\")\n    (check-equal? (candidate\
  \ \"xyx\") \"xyx\")\n    (check-equal? (candidate \"jerry\") \"jerryrrej\")\n))\n\
  \n(test-humaneval)"
completions: ["  (let ((palindrome (make-string (string-length string) #\\space)))\n\
    \    (let loop ((i 0) (j 0))\n      (if (< i string-length)\n          (if (equal?\
    \ (substring string i 1) (substring string j 1))\n              (loop (+ i 1)\
    \ (+ j 1))\n              (loop (+ i 1) j))\n          (set! palindrome (append\
    \ palindrome (substring string i 1)))))))\n", "  (let ((longest-postfix (longest-postfix\
    \ string)))\n    (if (null? longest-postfix)\n        \"\"\n        (append (substring\
    \ string 0 (- (length string) longest-postfix))\n                (substring string\
    \ longest-postfix 0)))))\n", "  (let ((longest (length string)))\n    (if (= longest\
    \ 0)\n        \"\"\n        (let ((prefix (substring string 0 (- longest 1))))\n\
    \          (let ((suffix (substring string 1 (length string))))\n            (cons\
    \ (reverse prefix) (cons (reverse suffix) \"\")))))\n    ))\n", "  (let ((longest-postfix\
    \ string))\n    (let loop ((i 0)\n               (longest-postfix longest-postfix))\n\
    \      (if (< i string-length)\n          (let ((postfix string))\n          \
    \  (set! postfix string\n                   (append (substring postfix 0 i)\n\
    \                            (substring postfix i (string-length i))))\n     \
    \       (set! longest-postfix (append longest-postfix postfix))\n            (loop\
    \ (+ i 1) longest-postfix))\n          longest-postfix))))\n", "  (let ((palindrome-suffix\
    \ (reverse (string-prefix string))))\n    (string-append string palindrome-suffix)))\n",
  "  (let ((longest-palindromic-suffix (longest-palindromic-suffix string)))\n   \
    \ (if (null? longest-palindromic-suffix)\n        string\n        (append string\
    \ (reverse (substring string 0 (- (length string) longest-palindromic-suffix)))))\n\
    \    ))\n", "  (let ([len (string-length string)])\n    (cond\n      [(= len 0)\n\
    \       (string-append string \"\")]\n      [(string=? (substring string 0 len)\
    \ (string-reverse (substring string 0 len)))\n       (string-append string \"\"\
    )]\n      [else\n       (string-append string (substring string 0 len) (substring\
    \ string len len))]))) ; #lang racket\n", "  (let ((palindrome-suffix (reverse\
    \ (substring string 0 (string-length string))))\n        (palindrome-prefix (substring\
    \ string 1 (string-length string))))\n    (cond ((string=? palindrome-suffix palindrome-prefix)\n\
    \           (cons palindrome-suffix string))\n          ((string=? palindrome-prefix\
    \ palindrome-suffix)\n           (cons palindrome-prefix string))\n          (else\n\
    \           (cons palindrome-suffix palindrome-prefix))))\n", '  (let ((longest-postfix
    longest-postfix longest-postfix longest-postfix longest-postfix longest-postfix
    longest-postfix longest-postfix longest-postfix longest-postfix longest-postfix
    longest-postfix longest-postfix longest-postfix longest-postfix longest-postfix
    longest-postfix longest-postfix longest-postfix longest-postfix longest-postfix
    longest-postfix longest-postfix longest-postfix longest-postfix longest-postfix
    longest-postfix longest-postfix longest-postfix longest-postfix longest-postfix
    longest-postfix longest-postfix longest-postfix longest-postfix longest-postfix
    longest-postfix longest-postfix longest-postfix longest-postfix longest-postfix
    longest-postfix longest-postfix longest-postfix longest-postfix longest-postfix
    longest-postfix longest-postfix longest-postfix longest-postfix longest-postfix
    longest-postfix longest-postfix longest-postfix longest-postfix longest-postfix
    longest-postfix longest-postfix longest-postfix longest-postfix longest-postfix
    longest-postfix longest-postfix longest-postfix longest-postfix longest-postfix
    longest-postfix longest-postfix longest-postfix longest-postfix longest-postfix
    longest-postfix longest-postfix longest-postfix longest-postfix longest-postfix
    longest-postfix longest-postfix longest-postfix longest-postfix longest-postfix
    longest-postfix longest-postfix longest-postfix longest-postfix longest-postfix
    longest-postfix longest-postfix longest-postfix longest-postfix longest-postfix
    longest-postfix longest-postfix longest-postfix longest-postfix longest-postfix
    longest-postfix longest-postfix longest-postfix longest-postfix longest-postfix
    longest-postfix longest-postfix longest-postfix longest-postfix longest-postfix
    longest-postfix longest-postfix longest-postfix longest-postfix longest-postfix
    longest-postfix longest-postfix longest-postfix longest-postfix longest-postfix
    longest-postfix longest-postfix longest-postfix longest-postfix longest-postfix
    longest-postfix longest-postfix longest-postfix longest-postfix longest-postfix
    longest-postfix longest', "  (define (make_palindrome_helper string result)\n\
    \    (cond\n      [(empty? string) result]\n      [(equal? (first string) (reverse\
    \ (first string))) (make_palindrome_helper (rest string) (cons (reverse (first\
    \ string)) result))]\n      [else (make_palindrome_helper (rest string) (cons\
    \ (first string) result))]))\n  (make_palindrome_helper string '()))\n", "  (let\
    \ ((longest-postfix \"\"))\n    (loop for i from 0 to (string-length string)\n\
    \          do (set! longest-postfix (append longest-postfix (reverse (string-ref\
    \ string i))))\n          until (equal? (string-length string) (string-length\
    \ longest-postfix))\n          collect longest-postfix))\n", "  (let ((longest\
    \ (longest-postfix string)))\n    (if (null? longest)\n        \"\"\n        (append\
    \ string (make-reverse-string (string-ref string longest)))))\n  )\n", "  (define\
    \ (helper string start end)\n    (cond\n      [(empty? string) (list start)]\n\
    \      [(equal? (first string) (reverse (subseq string start end))) (cons start\
    \ (helper string (+ start 1) end))]\n      [else (helper string (+ start 1) end)]\n\
    \      ))\n  (helper string 0 string))\n", "  (let ((longest-palindromic-suffix\
    \ (longest-palindromic-suffix string)))\n    (if (null? longest-palindromic-suffix)\n\
    \        \"\"\n        (append string (reverse (substring string 0 (- (length\
    \ string) longest-palindromic-suffix)))))\n    ))\n", "  (let ((longest-palindromic-suffix\
    \ (longest-palindromic-suffix string)))\n    (if (null? longest-palindromic-suffix)\n\
    \        \"\"\n        (append (substring string 0 (- (length string) longest-palindromic-suffix))\n\
    \                (substring string longest-palindromic-suffix (- (length string)\
    \ longest-palindromic-suffix))\n                (make-palindrome (substring string\
    \ longest-palindromic-suffix (- (length string) longest-palindromic-suffix))))))\n",
  "  (let ((longest-palindromic-suffix (longest-palindromic-suffix string)))\n   \
    \ (append string (reverse (substring string 0 (- (length string) longest-palindromic-suffix)))))\n\
    \  )\n", "  (let ((longest-postfix \n         (longest-postfix-of-palindrome string\
    \ string)))\n    (if (null? longest-postfix)\n        \"\"\n        (append string\
    \ \n                (make-string (string-length string) \n                   \
    \        (string->char (reverse (substring string 0 (string-length string)))))\n\
    \                longest-postfix))))\n", "  (let ((longest-palindromic-suffix\
    \ (longest-palindromic string)))\n    (if (null? longest-palindromic-suffix)\n\
    \        \"\"\n        (append string (reverse (substring string 0 (- (length\
    \ string) longest-palindromic-suffix)))))\n    ))\n", "  (let ((prefix (reverse\
    \ (string-prefix-of string string)))\n        (suffix (string-suffix-of string\
    \ string)))\n    (string-append (make-palindrome-suffix prefix) suffix)))\n",
  "  (let ((longest-postfix \"\"))\n    (let loop ((i 0))\n      (if (< i string-length\
    \ string)\n          (begin\n            (set! longest-postfix (append longest-postfix\
    \ (reverse (string-ref string i))))\n            (loop (+ i 1))\n            (loop\
    \ (+ i 1))\n            (loop (+ i 1))\n            (loop (+ i 1))\n         \
    \   (loop (+ i 1))\n            (loop (+ i 1))\n            (loop (+ i 1))\n \
    \           (loop (+ i 1))\n            (loop (+ i 1))\n            (loop (+ i\
    \ 1))\n            (loop (+ i 1))\n            (loop (+ i 1))\n            (loop\
    \ (+ i 1))\n            (loop (+ i 1))\n            (loop (+ i 1))\n         \
    \   (loop (+ i 1))\n            (loop (+ i 1))\n            (loop (+ i 1))\n \
    \           (loop (+ i 1))\n            (loop (+ i 1))\n            (loop (+ i\
    \ 1))\n            (loop (+ i 1))\n            (loop (+ i 1))\n            (loop\
    \ (+ i 1))\n            (loop (+ i 1))\n            (loop (+ i 1))\n         \
    \   (loop (+ i 1))\n            (loop (+ i 1))\n            (loop (+ i 1))\n \
    \           (loop (+ i 1))\n            (loop (+ i 1))\n            (loop (+ i\
    \ 1))\n            (loop (+ i 1))\n            (loop (+ i 1))\n            (loop\
    \ (+ i 1))\n            (loop (+ i 1))\n            (loop (+ i 1))\n         \
    \   (loop (+ i 1))\n            (loop (+ i 1))\n            (loop (+ i 1))\n \
    \           (loop (+ i 1))\n            (loop (+ i 1))\n            (loop (+ i\
    \ 1))\n            (loop (+ i 1))\n            (loop (+ i 1))\n            (loop\
    \ (+ i 1))\n            (loop (+ i 1))\n            (loop (+ i 1))\n         \
    \   (loop (+ i 1))\n            (loop (+ i 1))\n            (loop (+ i 1))\n \
    \           (loop (+ i 1))\n            (loop (+ i 1))\n            (loop (+ i\
    \ 1))\n            (loop (+ i 1))\n            (loop (+ i 1))\n            (loop\
    \ (+ i 1))\n            (loop (+ i 1))\n            (loop (+ i 1))\n         \
    \   (loop (+ i 1))\n            (loop (+ i 1))\n            (loop (+ i 1))\n \
    \           (loop (+ i 1))\n            (loop (+ i 1))\n            (loop (+ i\
    \ 1))\n            (loop (+ i 1))\n            ("]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
