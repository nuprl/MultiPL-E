{
  "language": "rkt",
  "name": "HumanEval_151_double_the_difference",
  "results": [
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:26:4\nactual:     4.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:27:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:28:4\nactual:     -60.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:29:4\nactual:     6.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:30:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:31:4\nactual:     0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmpvxt3i7f1.rkt:17:40: square: unbound identifier\n  in: square\n  location...:\n   /tmp/tmpvxt3i7f1.rkt:17:40\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (square (first lst)))]\n        [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmpjnxxnnq1.rkt:16:44: square: unbound identifier\n  in: square\n  location...:\n   /tmp/tmpjnxxnnq1.rkt:16:44\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (square (first lst)))]\n        [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmpjnxxnnq1.rkt:16:44: square: unbound identifier\n  in: square\n  location...:\n   /tmp/tmpjnxxnnq1.rkt:16:44\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (second lst))]\n        [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:25:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:26:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:28:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:29:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:30:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n      0\n      (+ (* 2 (first lst)) (double_the_difference (rest lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd0d1avvr.rkt:25:4\nactual:     18.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd0d1avvr.rkt:26:4\nactual:     1.2\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd0d1avvr.rkt:27:4\nactual:     -120.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd0d1avvr.rkt:28:4\nactual:     10.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd0d1avvr.rkt:29:4\nactual:     16.4\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd0d1avvr.rkt:30:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (second lst))]\n        [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:25:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:26:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:28:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:29:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:30:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmpvxt3i7f1.rkt:17:40: square: unbound identifier\n  in: square\n  location...:\n   /tmp/tmpvxt3i7f1.rkt:17:40\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n      0\n      (+ (* (expt (- lst (first lst)) 2) (first lst))\n         (* (expt (- lst (first lst)) 2) (second lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc16zcdxe.rkt:26:4\n\n-: contract violation\n  expected: number?\n  given: '(5.0 4.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc16zcdxe.rkt:27:4\n\n-: contract violation\n  expected: number?\n  given: '(0.1 0.2 0.3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc16zcdxe.rkt:28:4\n\n-: contract violation\n  expected: number?\n  given: '(-10.0 -20.0 -30.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc16zcdxe.rkt:29:4\n\n-: contract violation\n  expected: number?\n  given: '(-1.0 -2.0 8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc16zcdxe.rkt:30:4\n\n-: contract violation\n  expected: number?\n  given: '(0.2 3.0 5.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc16zcdxe.rkt:31:4\n\n-: contract violation\n  expected: number?\n  given: '(-9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n      0\n      (+ (* 2 (car lst)) (double_the_difference (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpipwat0vf.rkt:25:4\nactual:     18.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpipwat0vf.rkt:26:4\nactual:     1.2\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpipwat0vf.rkt:27:4\nactual:     -120.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpipwat0vf.rkt:28:4\nactual:     10.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpipwat0vf.rkt:29:4\nactual:     16.4\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpipwat0vf.rkt:30:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (empty? lst)\n      0\n      (+ (* (first lst) (first lst)) (double_the_difference (rest lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyyx484j5.rkt:25:4\nactual:     41.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyyx484j5.rkt:26:4\nactual:     0.14\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyyx484j5.rkt:27:4\nactual:     1400.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyyx484j5.rkt:28:4\nactual:     69.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyyx484j5.rkt:29:4\nactual:     34.04\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyyx484j5.rkt:30:4\nactual:     330.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028188
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n      0\n      (+ (* 2 (first lst)) (double_the_difference (rest lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd0d1avvr.rkt:25:4\nactual:     18.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd0d1avvr.rkt:26:4\nactual:     1.2\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd0d1avvr.rkt:27:4\nactual:     -120.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd0d1avvr.rkt:28:4\nactual:     10.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd0d1avvr.rkt:29:4\nactual:     16.4\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd0d1avvr.rkt:30:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (second lst))]\n        [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:25:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:26:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:28:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:29:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:30:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (second lst))]\n        [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:25:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:26:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:28:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:29:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:30:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmpvxt3i7f1.rkt:17:40: square: unbound identifier\n  in: square\n  location...:\n   /tmp/tmpvxt3i7f1.rkt:17:40\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (+ (first lst) (double_the_difference (rest lst)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn15aent3.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn15aent3.rkt:27:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn15aent3.rkt:28:4\nactual:     -60.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn15aent3.rkt:29:4\nactual:     5.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn15aent3.rkt:30:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn15aent3.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n      0\n      (+ (* (expt (first lst) 2) (expt (first lst) 2))\n         (double_the_difference (rest lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9nauagkh.rkt:26:4\nactual:     881.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9nauagkh.rkt:27:4\nactual:     0.0098\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9nauagkh.rkt:28:4\nactual:     980000.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9nauagkh.rkt:29:4\nactual:     4113.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9nauagkh.rkt:30:4\nactual:     706.0016\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9nauagkh.rkt:31:4\nactual:     19338.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (empty? lst)\n      0\n      (+ (square (first lst)) (double_the_difference (rest lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmp7tfs3a9z.rkt:17:10: square: unbound identifier\n  in: square\n  location...:\n   /tmp/tmp7tfs3a9z.rkt:17:10\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (second lst))]\n        [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:25:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:26:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:28:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:29:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:30:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (square (first lst)))]\n        [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmpjnxxnnq1.rkt:16:44: square: unbound identifier\n  in: square\n  location...:\n   /tmp/tmpjnxxnnq1.rkt:16:44\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n      0\n      (+ (square (car lst)) (double_the_difference (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmp2ucqy2rs.rkt:17:10: square: unbound identifier\n  in: square\n  location...:\n   /tmp/tmp2ucqy2rs.rkt:17:10\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (square (first lst)))]\n        [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmpjnxxnnq1.rkt:16:44: square: unbound identifier\n  in: square\n  location...:\n   /tmp/tmpjnxxnnq1.rkt:16:44\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:26:4\nactual:     4.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:27:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:28:4\nactual:     -60.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:29:4\nactual:     6.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:30:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:31:4\nactual:     0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n      0\n      (+ (* (expt (- lst (car lst)) 2) (expt (- lst (cdr lst)) 2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1rtggz0h.rkt:25:4\n\n-: contract violation\n  expected: number?\n  given: '(5.0 4.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1rtggz0h.rkt:26:4\n\n-: contract violation\n  expected: number?\n  given: '(0.1 0.2 0.3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1rtggz0h.rkt:27:4\n\n-: contract violation\n  expected: number?\n  given: '(-10.0 -20.0 -30.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1rtggz0h.rkt:28:4\n\n-: contract violation\n  expected: number?\n  given: '(-1.0 -2.0 8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1rtggz0h.rkt:29:4\n\n-: contract violation\n  expected: number?\n  given: '(0.2 3.0 5.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1rtggz0h.rkt:30:4\n\n-: contract violation\n  expected: number?\n  given: '(-9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n      0\n      (+ (square (first lst)) (double_the_difference (rest lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmpswx_94gk.rkt:17:10: square: unbound identifier\n  in: square\n  location...:\n   /tmp/tmpswx_94gk.rkt:17:10\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (square (first lst)))]\n        [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmpjnxxnnq1.rkt:16:44: square: unbound identifier\n  in: square\n  location...:\n   /tmp/tmpjnxxnnq1.rkt:16:44\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (second lst))]\n        [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:25:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:26:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:28:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:29:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:30:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n      0\n      (+ (* (expt (first lst) 2) (expt (first lst) 2))\n         (double_the_difference (rest lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9nauagkh.rkt:26:4\nactual:     881.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9nauagkh.rkt:27:4\nactual:     0.0098\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9nauagkh.rkt:28:4\nactual:     980000.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9nauagkh.rkt:29:4\nactual:     4113.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9nauagkh.rkt:30:4\nactual:     706.0016\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9nauagkh.rkt:31:4\nactual:     19338.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmpvxt3i7f1.rkt:17:40: square: unbound identifier\n  in: square\n  location...:\n   /tmp/tmpvxt3i7f1.rkt:17:40\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n      0\n      (+ (* 2 (first lst))\n         (double_the_difference (rest lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzcvugyc0.rkt:26:4\nactual:     18.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzcvugyc0.rkt:27:4\nactual:     1.2\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzcvugyc0.rkt:28:4\nactual:     -120.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzcvugyc0.rkt:29:4\nactual:     10.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzcvugyc0.rkt:30:4\nactual:     16.4\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzcvugyc0.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmpvxt3i7f1.rkt:17:40: square: unbound identifier\n  in: square\n  location...:\n   /tmp/tmpvxt3i7f1.rkt:17:40\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n      0\n      (+ (* 2 (first lst))\n         (double_the_difference (rest lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzcvugyc0.rkt:26:4\nactual:     18.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzcvugyc0.rkt:27:4\nactual:     1.2\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzcvugyc0.rkt:28:4\nactual:     -120.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzcvugyc0.rkt:29:4\nactual:     10.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzcvugyc0.rkt:30:4\nactual:     16.4\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzcvugyc0.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (second lst))]\n        [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:25:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:26:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:28:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:29:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:30:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (empty? lst)\n      0\n      (+ (* (first lst) (first lst)) (double_the_difference (rest lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyyx484j5.rkt:25:4\nactual:     41.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyyx484j5.rkt:26:4\nactual:     0.14\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyyx484j5.rkt:27:4\nactual:     1400.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyyx484j5.rkt:28:4\nactual:     69.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyyx484j5.rkt:29:4\nactual:     34.04\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyyx484j5.rkt:30:4\nactual:     330.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028188
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:26:4\nactual:     4.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:27:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:28:4\nactual:     -60.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:29:4\nactual:     6.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:30:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:31:4\nactual:     0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmpvxt3i7f1.rkt:17:40: square: unbound identifier\n  in: square\n  location...:\n   /tmp/tmpvxt3i7f1.rkt:17:40\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n      0\n      (+ (* (expt (- lst (car lst)) 2) (expt (car lst) 2))\n         (double_the_difference (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f0qdak.rkt:26:4\n\n-: contract violation\n  expected: number?\n  given: '(5.0 4.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f0qdak.rkt:27:4\n\n-: contract violation\n  expected: number?\n  given: '(0.1 0.2 0.3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f0qdak.rkt:28:4\n\n-: contract violation\n  expected: number?\n  given: '(-10.0 -20.0 -30.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f0qdak.rkt:29:4\n\n-: contract violation\n  expected: number?\n  given: '(-1.0 -2.0 8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f0qdak.rkt:30:4\n\n-: contract violation\n  expected: number?\n  given: '(0.2 3.0 5.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f0qdak.rkt:31:4\n\n-: contract violation\n  expected: number?\n  given: '(-9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (second lst))]\n        [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:25:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:26:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:28:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:29:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:30:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n      0\n      (+ (* 2 (car lst)) (double_the_difference (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpipwat0vf.rkt:25:4\nactual:     18.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpipwat0vf.rkt:26:4\nactual:     1.2\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpipwat0vf.rkt:27:4\nactual:     -120.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpipwat0vf.rkt:28:4\nactual:     10.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpipwat0vf.rkt:29:4\nactual:     16.4\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpipwat0vf.rkt:30:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmpvxt3i7f1.rkt:17:40: square: unbound identifier\n  in: square\n  location...:\n   /tmp/tmpvxt3i7f1.rkt:17:40\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:26:4\nactual:     4.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:27:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:28:4\nactual:     -60.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:29:4\nactual:     6.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:30:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:31:4\nactual:     0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmpvxt3i7f1.rkt:17:40: square: unbound identifier\n  in: square\n  location...:\n   /tmp/tmpvxt3i7f1.rkt:17:40\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (second lst))]\n        [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:25:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:26:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:28:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:29:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:30:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmpvxt3i7f1.rkt:17:40: square: unbound identifier\n  in: square\n  location...:\n   /tmp/tmpvxt3i7f1.rkt:17:40\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n      0\n      (+ (* 2 (car lst)) (double_the_difference (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpipwat0vf.rkt:25:4\nactual:     18.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpipwat0vf.rkt:26:4\nactual:     1.2\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpipwat0vf.rkt:27:4\nactual:     -120.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpipwat0vf.rkt:28:4\nactual:     10.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpipwat0vf.rkt:29:4\nactual:     16.4\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpipwat0vf.rkt:30:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (second lst))]\n        [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:25:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:26:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:28:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:29:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:30:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:26:4\nactual:     4.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:27:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:28:4\nactual:     -60.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:29:4\nactual:     6.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:30:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:31:4\nactual:     0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (empty? lst)\n      0\n      (+ (square (first lst)) (double_the_difference (rest lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmp7tfs3a9z.rkt:17:10: square: unbound identifier\n  in: square\n  location...:\n   /tmp/tmp7tfs3a9z.rkt:17:10\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n      0\n      (+ (* 2 (first lst)) (double_the_difference (rest lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd0d1avvr.rkt:25:4\nactual:     18.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd0d1avvr.rkt:26:4\nactual:     1.2\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd0d1avvr.rkt:27:4\nactual:     -120.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd0d1avvr.rkt:28:4\nactual:     10.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd0d1avvr.rkt:29:4\nactual:     16.4\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd0d1avvr.rkt:30:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (second lst))]\n        [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:25:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:26:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:28:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:29:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:30:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (second lst))]\n        [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:25:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:26:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:28:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:29:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:30:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:26:4\nactual:     4.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:27:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:28:4\nactual:     -60.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:29:4\nactual:     6.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:30:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:31:4\nactual:     0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmpvxt3i7f1.rkt:17:40: square: unbound identifier\n  in: square\n  location...:\n   /tmp/tmpvxt3i7f1.rkt:17:40\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (second lst))]\n        [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:25:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:26:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:28:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:29:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:30:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (second lst))]\n        [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:25:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:26:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:28:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:29:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:30:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:26:4\nactual:     4.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:27:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:28:4\nactual:     -60.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:29:4\nactual:     6.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:30:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy375qv5y.rkt:31:4\nactual:     0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n      0\n      (+ (* (expt (- lst (car lst)) 2) (car lst))\n         (double_the_difference (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxulisd3.rkt:26:4\n\n-: contract violation\n  expected: number?\n  given: '(5.0 4.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxulisd3.rkt:27:4\n\n-: contract violation\n  expected: number?\n  given: '(0.1 0.2 0.3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxulisd3.rkt:28:4\n\n-: contract violation\n  expected: number?\n  given: '(-10.0 -20.0 -30.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxulisd3.rkt:29:4\n\n-: contract violation\n  expected: number?\n  given: '(-1.0 -2.0 8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxulisd3.rkt:30:4\n\n-: contract violation\n  expected: number?\n  given: '(0.2 3.0 5.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxulisd3.rkt:31:4\n\n-: contract violation\n  expected: number?\n  given: '(-9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (second lst))]\n        [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:25:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:26:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:28:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:29:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:30:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:26:4\nactual:     5.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:29:4\nactual:     -1.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposktb49w.rkt:31:4\nactual:     0.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (+ (first lst) (second lst))]\n        [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:25:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:26:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:28:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:29:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2e7ymxen.rkt:30:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:26:4\nactual:     9.0\nexpected:   25\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:27:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:29:4\nactual:     -3.0\nexpected:   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:30:4\n\nodd?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_w10424.rkt:31:4\nactual:     -16.0\nexpected:   165\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028228
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmpvxt3i7f1.rkt:17:40: square: unbound identifier\n  in: square\n  location...:\n   /tmp/tmpvxt3i7f1.rkt:17:40\n",
      "stdout": "",
      "timestamp": 1660028228
    }
  ]
}