name: HumanEval_132_is_nested
language: rkt
prompt: "#lang racket\n\n;; Create a function that takes a string as input which contains\
  \ only square brackets.\n;; The function should return #t if and only if there is\
  \ a valid subsequence of brackets \n;; where at least one bracket in the subsequence\
  \ is nested.\n;; >>> (is_nested \"[[]]\")\n;; #t\n;; >>> (is_nested \"[]]]]]]][[[[[]\"\
  )\n;; #f\n;; >>> (is_nested \"[][]\")\n;; #f\n;; >>> (is_nested \"[]\")\n;; #f\n\
  ;; >>> (is_nested \"[[][]]\")\n;; #t\n;; >>> (is_nested \"[[]][[\")\n;; #t\n(define\
  \ (is_nested string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_nested))\n\
  \    (check-equal? (candidate \"[[]]\") #t)\n    (check-equal? (candidate \"[]]]]]]][[[[[]\"\
  ) #f)\n    (check-equal? (candidate \"[][]\") #f)\n    (check-equal? (candidate\
  \ \"[]\") #f)\n    (check-equal? (candidate \"[[[[]]]]\") #t)\n    (check-equal?\
  \ (candidate \"[]]]]]]]]]]\") #f)\n    (check-equal? (candidate \"[][][[]]\") #t)\n\
  \    (check-equal? (candidate \"[[]\") #f)\n    (check-equal? (candidate \"[]]\"\
  ) #f)\n    (check-equal? (candidate \"[[]][[\") #t)\n    (check-equal? (candidate\
  \ \"[[][]]\") #t)\n    (check-equal? (candidate \"\") #f)\n    (check-equal? (candidate\
  \ \"[[[[[[[[\") #f)\n    (check-equal? (candidate \"]]]]]]]]\") #f)\n))\n\n(test-humaneval)"
completions: ["  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested\
    \ (cdr string))]\n        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n\
    \    [(equal? (car string) '[) #t]\n    [else (or (is_nested (cdr string))\n \
    \              (is_nested (string-append \"[\" string \"]\")))]))\n", "  (cond\n\
    \    [(empty? string) #f]\n    [(equal? (first string) '[) (is_nested (rest string))]\n\
    \    [else #f]))\n", "  (let loop ((i 0))\n    (if (< i string.length)\n     \
    \   (if (equal? (char-code (char string i)) (char string (i+1))) (loop (+ i 1))\n\
    \          (if (equal? (char-code (char string i)) (char string (i+1))) (loop\
    \ (+ i 1))\n            (if (equal? (char-code (char string i)) (char string (i+1)))\
    \ (loop (+ i 1))\n              (if (equal? (char-code (char string i)) (char\
    \ string (i+1))) (loop (+ i 1))\n                (if (equal? (char-code (char\
    \ string i)) (char string (i+1))) (loop (+ i 1))\n                  (if (equal?\
    \ (char-code (char string i)) (char string (i+1))) (loop (+ i 1))\n          \
    \          (if (equal? (char-code (char string i)) (char string (i+1))) (loop\
    \ (+ i 1))\n                      (if (equal? (char-code (char string i)) (char\
    \ string (i+1))) (loop (+ i 1))\n                        (if (equal? (char-code\
    \ (char string i)) (char string (i+1))) (loop (+ i 1))\n                     \
    \     (if (equal? (char-code (char string i)) (char string (i+1))) (loop (+ i\
    \ 1))\n                            (if (equal? (char-code (char string i)) (char\
    \ string (i+1))) (loop (+ i 1))\n                              (if (equal? (char-code\
    \ (char string i)) (char string (i+1))) (loop (+ i 1))\n                     \
    \           (if (equal? (char-code (char string i)) (char string (i+1))) (loop\
    \ (+ i 1))\n                                  (if (equal? (char-code (char string\
    \ i)) (char string (i+1))) (loop (+ i 1))\n                                  \
    \  (if (equal? (char-code (char string i)) (char string (i+1))) (loop (+ i 1))\n\
    \                                      (if (equal? (char-code (char string i))\
    \ (char string (i+1))) (loop (+ i 1))\n                                      \
    \  (if (equal? (char-code (char string i)) (char string (i+1))) (loop (+ i 1))\n\
    \                                          (if (equal? (char-code (char string\
    \ i)) (char string (i+1))) (loop (+ i 1))\n                                  \
    \          (if (equal? (char-code (char string i)) (char string (i+1))) (loop\
    \ (+ i 1))\n                                              (if (equal? (char-",
  "  (cond\n    [(empty? string) #f]\n    [(equal? (first string) '[') (is_nested\
    \ (rest string))]\n    [else (is_nested (rest string))]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (first string) '[') (is_nested (subseq string 1 2))]\n\
    \    [else (is_nested (subseq string 1 string))]))\n", "  (cond [(empty? string)\
    \ #f]\n        [(equal? (car string) '[') (is_nested (cdr string))]\n        [else\
    \ #f]))\n", "  (let loop ((i 0) (s string) (result #f))\n    (cond ((null? s)\
    \ result)\n          ((char=? (car s) '[) (loop (+ i 1) (cdr s) (or (not result)\
    \ (char=? (car s) '['))))\n          ((char=? (car s) '(') (loop (+ i 1) (cdr\
    \ s) (not result)))\n          (else (loop (+ i 1) (cdr s) result))))))\n", " \
    \ (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n        [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (first string) '[) (is_nested (rest string))]\n        [else #f]))\n", "  (cond\n\
    \    [(empty? string) #f]\n    [(equal? (car string) '[') (is_nested (cdr string))]\n\
    \    [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string)\
    \ '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (first string) '[') (is_nested (rest string))]\n \
    \   [else (is_nested (rest string))]))\n", "  (cond\n    [(empty? string) #f]\n\
    \    [(equal? (first string) '[) (is_nested (rest string))]\n    [else #f]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (first string) '[) (is_nested (rest string))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? string) #f]\n    [(equal? (car string) '[) (is_nested (cdr string))]\n\
    \    [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string)\
    \ '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (cond [(empty? string)\
    \ #f]\n        [(equal? (first string) '[) (is_nested (substring (second string)\
    \ 1))]\n        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (first string) '[') (is_nested (rest string))]\n    [else (is_nested (rest string))]\n\
    \  ))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
