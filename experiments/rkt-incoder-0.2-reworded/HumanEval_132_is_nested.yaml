name: HumanEval_132_is_nested
language: rkt
prompt: "#lang racket\n\n;; Create a function that takes a string as input which contains\
  \ only square brackets.\n;; The function should return #t if and only if there is\
  \ a valid subsequence of brackets \n;; where at least one bracket in the subsequence\
  \ is nested.\n;; >>> (is_nested \"[[]]\")\n;; #t\n;; >>> (is_nested \"[]]]]]]][[[[[]\"\
  )\n;; #f\n;; >>> (is_nested \"[][]\")\n;; #f\n;; >>> (is_nested \"[]\")\n;; #f\n\
  ;; >>> (is_nested \"[[][]]\")\n;; #t\n;; >>> (is_nested \"[[]][[\")\n;; #t\n(define\
  \ (is_nested string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_nested))\n\
  \    (check-equal? (candidate \"[[]]\") #t)\n    (check-equal? (candidate \"[]]]]]]][[[[[]\"\
  ) #f)\n    (check-equal? (candidate \"[][]\") #f)\n    (check-equal? (candidate\
  \ \"[]\") #f)\n    (check-equal? (candidate \"[[[[]]]]\") #t)\n    (check-equal?\
  \ (candidate \"[]]]]]]]]]]\") #f)\n    (check-equal? (candidate \"[][][[]]\") #t)\n\
  \    (check-equal? (candidate \"[[]\") #f)\n    (check-equal? (candidate \"[]]\"\
  ) #f)\n    (check-equal? (candidate \"[[]][[\") #t)\n    (check-equal? (candidate\
  \ \"[[][]]\") #t)\n    (check-equal? (candidate \"\") #f)\n    (check-equal? (candidate\
  \ \"[[[[[[[[\") #f)\n    (check-equal? (candidate \"]]]]]]]]\") #f)\n))\n\n(test-humaneval)"
completions: ["  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested\
    \ (cdr string))]\n        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n\
    \    [(equal? (car string) '[) #t]\n    [else (or (is_nested (cdr string))\n \
    \              (is_nested (string-append \"[\" string \"]\")))]))\n", "  (cond\n\
    \    [(empty? string) #f]\n    [(equal? (first string) '[) (is_nested (rest string))]\n\
    \    [else #f]))\n", "  (let loop ((i 0))\n    (if (< i string.length)\n     \
    \   (if (equal? (char-code (char string i)) (char string (i+1))) (loop (+ i 1))\n\
    \          (if (equal? (char-code (char string i)) (char string (i+1))) (loop\
    \ (+ i 1))\n            (if (equal? (char-code (char string i)) (char string (i+1)))\
    \ (loop (+ i 1))\n              (if (equal? (char-code (char string i)) (char\
    \ string (i+1))) (loop (+ i 1))\n                (if (equal? (char-code (char\
    \ string i)) (char string (i+1))) (loop (+ i 1))\n                  (if (equal?\
    \ (char-code (char string i)) (char string (i+1))) (loop (+ i 1))\n          \
    \          (if (equal? (char-code (char string i)) (char string (i+1))) (loop\
    \ (+ i 1))\n                      (if (equal? (char-code (char string i)) (char\
    \ string (i+1))) (loop (+ i 1))\n                        (if (equal? (char-code\
    \ (char string i)) (char string (i+1))) (loop (+ i 1))\n                     \
    \     (if (equal? (char-code (char string i)) (char string (i+1))) (loop (+ i\
    \ 1))\n                            (if (equal? (char-code (char string i)) (char\
    \ string (i+1))) (loop (+ i 1))\n                              (if (equal? (char-code\
    \ (char string i)) (char string (i+1))) (loop (+ i 1))\n                     \
    \           (if (equal? (char-code (char string i)) (char string (i+1))) (loop\
    \ (+ i 1))\n                                  (if (equal? (char-code (char string\
    \ i)) (char string (i+1))) (loop (+ i 1))\n                                  \
    \  (if (equal? (char-code (char string i)) (char string (i+1))) (loop (+ i 1))\n\
    \                                      (if (equal? (char-code (char string i))\
    \ (char string (i+1))) (loop (+ i 1))\n                                      \
    \  (if (equal? (char-code (char string i)) (char string (i+1))) (loop (+ i 1))\n\
    \                                          (if (equal? (char-code (char string\
    \ i)) (char string (i+1))) (loop (+ i 1))\n                                  \
    \          (if (equal? (char-code (char string i)) (char string (i+1))) (loop\
    \ (+ i 1))\n                                              (if (equal? (char-",
  "  (cond\n    [(empty? string) #f]\n    [(equal? (first string) '[') (is_nested\
    \ (rest string))]\n    [else (is_nested (rest string))]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (first string) '[') (is_nested (subseq string 1 2))]\n\
    \    [else (is_nested (subseq string 1 string))]))\n", "  (cond [(empty? string)\
    \ #f]\n        [(equal? (car string) '[') (is_nested (cdr string))]\n        [else\
    \ #f]))\n", "  (let loop ((i 0) (s string) (result #f))\n    (cond ((null? s)\
    \ result)\n          ((char=? (car s) '[) (loop (+ i 1) (cdr s) (or (not result)\
    \ (char=? (car s) '['))))\n          ((char=? (car s) '(') (loop (+ i 1) (cdr\
    \ s) (not result)))\n          (else (loop (+ i 1) (cdr s) result))))))\n", " \
    \ (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n        [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (first string) '[) (is_nested (rest string))]\n        [else #f]))\n", "  (cond\n\
    \    [(empty? string) #f]\n    [(equal? (car string) '[') (is_nested (cdr string))]\n\
    \    [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string)\
    \ '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (first string) '[') (is_nested (rest string))]\n \
    \   [else (is_nested (rest string))]))\n", "  (cond\n    [(empty? string) #f]\n\
    \    [(equal? (first string) '[) (is_nested (rest string))]\n    [else #f]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (first string) '[) (is_nested (rest string))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? string) #f]\n    [(equal? (car string) '[) (is_nested (cdr string))]\n\
    \    [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string)\
    \ '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (cond [(empty? string)\
    \ #f]\n        [(equal? (first string) '[) (is_nested (substring (second string)\
    \ 1))]\n        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (first string) '[') (is_nested (rest string))]\n    [else (is_nested (rest string))]\n\
    \  ))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested\
    \ (cdr string))]\n        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n\
    \    [(equal? (car string) '[) (is_nested (cdr string))]\n    [else #f]))\n",
  "  (let loop ((i 0) (string string))\n    (cond ((null? string) #f)\n          ((equal?\
    \ (char (car string)) '[)\n           (loop (add1 i) (cdr string)))\n        \
    \  ((equal? (char (car string)) '])) \n          (else\n           (loop (add1\
    \ i) string)))))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car string)\
    \ '[) (is_nested (cdr string))]\n    [else #f]))\n", "  (cond [(empty? string)\
    \ #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n        [else\
    \ #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car string) '[')\
    \ (is_nested (cdr string))]\n    [else #t]))\n", "  (cond [(empty? string) #f]\n\
    \        [(equal? (car string) '[) (is_nested (cdr string))]\n        [else #f]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n        [else #f]))\n", "  (let loop ((i 0) (s string) (result #f))\n\
    \    (cond ((null? s) result)\n          ((char=? (car s) #\\[) (loop (+ i 1)\
    \ (cdr s) (or (char=? (car s) #\\]) (loop (+ i 1) (cdr s) #f))))\n          (else\
    \ (loop (+ i 1) (cdr s) (or (char=? (car s) #\\]) (loop (+ i 1) (cdr s) #f)))))))\n",
  "  (cond\n    [(empty? string) #f]\n    [(equal? (first string) '[) (is_nested (rest\
    \ string))]\n    [else #f]))\n", "  (let loop ((i 0) (s string) (result #f))\n\
    \    (cond ((null? s) result)\n          ((char=? (car s) '[) (loop (add1 i) (sub1\
    \ s) (or (loop (add1 i) (cdr s)) result)))\n          ((char=? (car s) '(') (loop\
    \ (add1 i) (sub1 s) (or (loop (add1 i) (cdr s)) result)))\n          (else (loop\
    \ (add1 i) (sub1 s) result))))))\n", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (first string) '[') (is_nested (rest string))]\n    [else #f]))\n", "  (cond\
    \ [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n\
    \        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car\
    \ string) '[) (is_nested (cdr string))]\n    [else #f]))\n", "  (cond [(empty?\
    \ string) #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n \
    \       [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string)\
    \ '[') (is_nested (cdr string))]\n        [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (car string) '[) (is_nested (cdr string))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (first string) '[)\
    \ (is_nested (subseq string 1))]\n    [else #f]))\n", "  (cond [(empty? string)\
    \ #f]\n        [(equal? (first string) '[') (is_nested (rest string))]\n     \
    \   [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (first string)\
    \ '[) (is_nested (rest string))]\n        [else #f]))\n", "  (cond [(empty? string)\
    \ #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n        [else\
    \ #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (first string) '[')\
    \ (is_nested (rest string))]\n    [else #f]))\n", "  (cond [(empty? string) #f]\n\
    \        [(equal? (car string) '[) (is_nested (cdr string))]\n        [else #f]))\n",
  "  (cond\n    [(empty? string) #f]\n    [(equal? (first string) '[') (is_nested\
    \ (rest string))]\n    [else (is_nested (rest string))]))\n", "  (cond [(empty?\
    \ string) #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n \
    \       [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car\
    \ string) '[) #t]\n    [else (or (is_nested (cdr string))\n               (is_nested\
    \ (string-append string '[])))]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (first string) '[') (is_nested (rest string))]\n        [else #f]))\n", "  (cond\n\
    \    [(empty? string) #f]\n    [(equal? (first string) '[') (is_nested (subseq\
    \ string 1))]\n    [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (car string) '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (let\
    \ loop ((i 0) (string string))\n    (if (or (= i 0) (equal? string \"\")) #t\n\
    \        (if (equal? (char-ref string i) '[) (loop (+ i 1) (substring string (i+\
    \ 1) (length string)))\n            (loop (+ i 1) (substring string (i+ 1) (length\
    \ string)))))))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (first string)\
    \ '[') (is_nested (rest string))]\n    [else (is_nested (rest string))]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (first string) '[) (is_nested (rest\
    \ string))]\n        [else #f]))\n", "  (let loop ((i 0) (result #f))\n    (cond\n\
    \      [(empty? string) #f]\n      [(equal? (char (car string)) '[)\n       (loop\
    \ (add1 i) (not result))]\n      [(equal? (char (car string)) ']) (loop (add1\
    \ i) (not result))]\n      [else (loop (add1 i) (equal? (char (car string)) '[)))]\n\
    \      [(not result) (loop (add1 i) (equal? (char (car string)) '[)))]\n     \
    \ [(not result) (loop (add1 i) (equal? (char (car string)) '])))]\n    (not result)))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (first string) '[) (is_nested (subseq\
    \ string 1))]\n        [else #f]))\n", "  (cond [(empty? string) #f]\n       \
    \ [(equal? (car string) '[) (is_nested (cdr string))]\n        [else #f]))\n",
  "  (let loop ((i 0) (s string) (t #f))\n    (if (= i 0)\n        t\n        (loop\
    \ (+ i 1) (substring s i (string-length s)) (or (= (substring s i (string-length\
    \ s)) '[') (= (substring s i (string-length s)) '{')))))))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (first string) '[) (is_nested (rest string))]\n  \
    \  [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (first string)\
    \ '[) (is_nested (substring (first string) 1))]\n        [else #f]))\n", "  (cond\
    \ [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n\
    \        [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car\
    \ string) '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (cond [(empty?\
    \ string) #f]\n        [(equal? (first string) '[') (is_nested (rest string))]\n\
    \        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (first\
    \ string) '[) (is_nested (rest string))]\n    [else #f]))\n", "  (cond [(empty?\
    \ string) #f]\n        [(equal? (first string) '[) (is_nested (rest string))]\n\
    \        [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car\
    \ string) '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (cond [(empty?\
    \ string) #f]\n        [(equal? (first string) '[) (is_nested (rest string))]\n\
    \        [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (first\
    \ string) '[) (is_nested (subseq string 1 2))]\n        [else #f]))\n", "  (let\
    \ loop ((i 0) (string string))\n    (if (or (= i 0) (= i (string-length string)))\n\
    \        #f\n        (let ((char (string-to-char (substring string i 1))))\n \
    \         (if (char= char #\\[)\n              (loop (+ i 1) (substring string\
    \ i 2))\n              (loop (+ i 1) string)))))) \n", "  (cond ((null? string)\
    \ #f)\n        ((char=? (car string) '[)\n         (is_nested (cdr string)))\n\
    \        (else (is_nested (cdr string)))))\n", "  (cond [(empty? string) #f]\n\
    \        [(equal? (car string) '[') (is_nested (cdr string))]\n        [else (is_nested\
    \ (cdr string))]))\n", "  (let loop ((i 0) (string string))\n    (cond ((null?\
    \ string) #f)\n          ((eq? (car string) '[)\n           (loop (+ i 1) (cdr\
    \ string)))\n          ((eq? (car string) ']) \n           (loop (+ i 1) (cdr\
    \ string)))\n          (else (loop (+ i 1) (cdr string)))))\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\n<code>", "  (cond\n    [(empty? string) #f]\n    [(equal? (car\
    \ string) '[) #t]\n    [else (or (is_nested (cdr string))\n               (is_nested\
    \ (string-append string '[')))]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (car string) '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (cond\n\
    \    [(empty? string) #f]\n    [(equal? (first string) '[) (is_nested (subseq\
    \ string 1))]\n    [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (first string) '[') (is_nested (rest string))]\n    [else (is_nested (rest string))]))\n",
  "  (cond\n    [(empty? string) #f]\n    [(equal? (first string) '[) (is_nested (rest\
    \ string))]\n    [else #f]))\n", "  (let loop ((i 0) (s string))\n    (cond ((null?\
    \ s) #f)\n          ((equal? (char-ref s i) '[) (loop (+ i 1) (substring s i (+\
    \ i 1)))\n            (loop (+ i 1) (substring s i (+ i 1))))\n          (else\
    \ #t))))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car string) '[)\
    \ (is_nested (cdr string))]\n    [else #f]))\n", "  (cond [(empty? string) #f]\n\
    \        [(equal? (first string) '[) (is_nested (rest string))]\n        [else\
    \ #f]))\n", "  (let loop ((i 0) (s string) (result #f))\n    (cond ((null? s)\
    \ result)\n          ((char=? (car s) '[) (loop (add1 i) (sub1 s) (or (not result)\
    \ (loop (add1 i) (cdr s) result))))\n          (else (loop (add1 i) (sub1 s) result))))))\n",
  "  (cond\n    [(empty? string) #f]\n    [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n    [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (car string) '[) (is_nested (cdr string))]\n    [else #f]))\n", "  (cond [(empty?\
    \ string) #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n \
    \       [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car\
    \ string) '[) (is_nested (cdr string))]\n    [else #f]))\n", "  (let loop ((i\
    \ 0) (string string))\n    (cond ((null? string) #f)\n          ((equal? (char\
    \ (car string)) '[) (loop (add1 i) (substring string 0 (add1 i))))\n         \
    \ ((equal? (char (car string)) '[) (loop (add1 i) (substring string i (add1 i))))\n\
    \          ((equal? (char (car string)) '() (loop (add1 i) (substring string i\
    \ (add1 i))))\n          ((equal? (char (car string)) '(') (loop (add1 i) (substring\
    \ string i (add1 i))))\n          ((equal? (char (car string)) '[') (loop (add1\
    \ i) (substring string i (add1 i))))\n          ((equal? (char (car string)) '(')\
    \ (loop (add1 i) (substring string i (add1 i))))\n          ((equal? (char (car\
    \ string)) '#) (loop (add1 i) (substring string i (add1 i))))\n          (else\
    \ (loop (add1 i) (substring string i (add1 i)))))))\n", "  (let loop ((i 0) (s\
    \ string))\n    (if (or (= i 0) (= i #\\))\n        #f\n        (if (char= (char\
    \ s i) '[')\n            (loop (+ i 1) (substring s i (+ i 1)))\n            (loop\
    \ (+ i 1) (substring s i (+ i 1)))))))\n", "  (cond [(empty? string) #f]\n   \
    \     [(equal? (first string) '[) (is_nested (subseq string 1))]\n        [else\
    \ #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car string) '[)\
    \ (is_nested (cdr string))]\n    [else #f]))\n", "  (cond [(empty? string) #f]\n\
    \        [(equal? (car string) '[)\n         (is_nested (cdr string))]\n     \
    \   [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (first string)\
    \ '[') (is_nested (rest string))]\n    [else (is_nested (rest string))]))\n",
  "  (cond\n    [(empty? string) #f]\n    [(equal? (car string) '[') (is_nested (cdr\
    \ string))]\n    [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (first string) '[) (is_nested (rest string))]\n        [else #f]))\n", "  (cond\
    \ [(empty? string) #f]\n        [(equal? (first string) '[) (is_nested (rest string))]\n\
    \        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car\
    \ string) '[) (is_nested (cdr string))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (first string) '[) (is_nested (rest string))]\n  \
    \  [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string)\
    \ '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (cond [(empty? string)\
    \ #f]\n        [(equal? (first string) '[) (is_nested (rest string))]\n      \
    \  [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car string)\
    \ '[) (is_nested (cdr string))]\n    [else #f]))\n", "  (cond [(empty? string)\
    \ #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n        [else\
    \ #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string) '[')\
    \ (is_nested (cdr string))]\n        [else #f]))\n", "  (cond [(empty? string)\
    \ #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n        [else\
    \ #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested\
    \ (cdr string))]\n        [else #f]))\n", "  (let loop ((i 0) (s string) (t #f))\n\
    \    (cond ((null? s) t)\n          ((eq? (car s) '[) (loop (+ i 1) (cdr s) (or\
    \ (loop (+ i 1) (car s) #f) (loop (+ i 1) (cdr s) #f))))\n          (t (loop (+\
    \ i 1) (cdr s) #f)))))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car\
    \ string) '[) (is_nested (cdr string))]\n    [else #f]))\n", "  (let loop ((i\
    \ 0) (string string))\n    (cond ((null? string) #f)\n          ((equal? (char-ref\
    \ string i) '[)\n           (loop (+ i 1) (substring (string i) 1)))\n       \
    \   ((equal? (char-ref string i) '])) \n          (else (loop (+ i 1) string)))))\n",
  "  (cond\n    [(empty? string) #f]\n    [(equal? (first string) '[) (is_nested (rest\
    \ string))]\n    [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (car string) '[') (is_nested (cdr string))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? string) #f]\n    [(equal? (car string) '[) (is_nested (cdr string))]\n\
    \    [else #f]))\n", "  (cond ((empty? string) #f)\n        ((equal? (first string)\
    \ '[) (is_nested (rest string)))\n        (else (is_nested (rest string)))))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (car string) '[) (is_nested (cdr string))]\n    [else #f]))\n", "  (cond\n \
    \   [(empty? string) #f]\n    [(equal? (car string) '[) (is_nested (cdr string))]\n\
    \    [else #f]))\n", "  (let loop ((i 0) (string string))\n    (if (or (= i 0)\
    \ (= i (string-length string)))\n        #f\n        (if (char=? (char-ref string\
    \ i) '[')\n            (loop (+ i 1) (string-append string \"[\")\n          \
    \    (loop (+ i 1) (string-append string \"[\")\n                (loop (+ i 1)\
    \ (string-append string \"[\")\n                  (loop (+ i 1) (string-append\
    \ string \"[\")\n                    (loop (+ i 1) (string-append string \"[\"\
    )\n                      (loop (+ i 1) (string-append string \"[\")\n        \
    \                (loop (+ i 1) (string-append string \"[\")\n                \
    \          (loop (+ i 1) (string-append string \"[\")\n                      \
    \      (loop (+ i 1) (string-append string \"[\")\n                          \
    \    (loop (+ i 1) (string-append string \"[\")\n                            \
    \    (loop (+ i 1) (string-append string \"[\")\n                            \
    \      (loop (+ i 1) (string-append string \"[\")\n                          \
    \          (loop (+ i 1) (string-append string \"[\")\n                      \
    \                (loop (+ i 1) (string-append string \"[\")\n                \
    \                        (loop (+ i 1) (string-append string \"[\")\n        \
    \                                  (loop (+ i 1) (string-append string \"[\")\n\
    \                                            (loop (+ i 1) (string-append string\
    \ \"[\")\n                                              (loop (+ i 1) (string-append\
    \ string \"[\")\n                                                (loop (+ i 1)\
    \ (string-append string \"[\")\n                                             \
    \     (loop (+ i 1) (string-append string \"[\")\n                           \
    \                         (loop (+ i 1) (string-append string \"[\")\n       \
    \                                               (loop (+ i 1) (string-append string\
    \ \"[\")\n                                                        (loop (+ i 1)\
    \ (string-append string \"[\")\n                                             \
    \             (loop (+ i 1) (string-append string \"[\")\n                   \
    \                                         (loop (+ i 1) (string-append string\
    \ \"[\")\n                                                              (loop\
    \ (+ i 1) (string-append string \"[\")\n                                     \
    \                           (loop (+ i 1) (string-append string \"[\")\n     \
    \                                                             (loop (+ i 1) (string-append\
    \ string \"[\")\n                                                            \
    \        (loop (+ i 1) (string-append string \"[\")\n                        \
    \                                              (loop (+ i 1) (string-append string\
    \ \"[\")\n                                                                   \
    \     (loop (+ i 1) (string-append string \"[\")\n                           \
    \                                               (loop (+ ", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (car string) '[) (is_nested (cdr string))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car string) '[)\
    \ (is_nested (cdr string))]\n    [else #f]))\n", "  (let loop ((i 0) (s string))\n\
    \    (cond ((null? s) #f)\n          ((eq? (car s) '[) (loop (+ i 1) (cdr s)))\n\
    \          ((eq? (car s) '() (loop (+ i 1) (cdr s))))\n          (else (loop (+\
    \ i 1) (cdr s))))))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (first\
    \ string) '[') (is_nested (rest string))]\n    [else (is_nested (rest string))]))\n",
  "  (let loop ((i 0) (string string))\n    (cond ((null? string) #f)\n          ((char=\
    \ (first string) '[) (loop (+ i 1) (second string)))\n          ((char= (first\
    \ string) '() (loop (+ i 1) (second string)))\n          (else #t))))\n", "  (cond\
    \ [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n\
    \        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car\
    \ string) '[) (is_nested (cdr string))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (car string) '[) (is_nested (cdr string))]\n    [else\
    \ #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (first string) '[)\
    \ (is_nested (rest string))]\n        [else #f]))\n", "  (cond ((string=? string\
    \ \"[]\")\n         #t)\n        ((string=? string \"[[]\")\n         #t)\n  \
    \      ((string=? string \"[[][]\")\n         #t)\n        ((string=? string \"\
    [[][][]\")\n         #t)\n        ((string=? string \"[[][][][]\")\n         #t)\n\
    \        ((string=? string \"[[][][][][]\")\n         #t)\n        ((string=?\
    \ string \"[[][][][][][]\")\n         #t)\n        ((string=? string \"[[][][][][][][]\"\
    )\n         #t)\n        ((string=? string \"[[][][][][][][][]\")\n         #t)\n\
    \        ((string=? string \"[[][][][][][][][][]\")\n         #t)\n        ((string=?\
    \ string \"[[][][][][][][][][]\")\n         #t)\n        ((string=? string \"\
    [[][][][][][][][][][]\")\n         #t)\n        ((string=? string \"[[][][][][][][][][][][]\"\
    )\n         #t)\n        ((string=? string \"[[][][][][][][][][][][]\")\n    \
    \     #t)\n        ((string=? string \"[[][][][][][][][][][][][]\")\n        \
    \ #t)\n        ((string=? string \"[[][][][][][][][][][][][][]\")\n         #t)\n\
    \        ((string=? string \"[[][][][][][][][][][][][][][]\")\n         #t)\n\
    \        ((string=? string \"[[][][][][][][][][][][][][][]\")\n         #t)\n\
    \        ((string=? string \"[[][][][][][][][][][][][][][]\")\n         #t)\n\
    \        ((string=? string \"[[][][][][][][][][][][][][][]\")\n         #t)\n\
    \        ((string=? string \"[[][][][][][][][][][][][][][]\")\n         #t)\n\
    \        ((string=? string \"[[][][][][][][][][][][][][][][]\")\n         #t)\n\
    \        ((string=? string ", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (first string) '[') (is_nested (rest string))]\n        [else #f]))\n", "  (cond\
    \ [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n\
    \        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car\
    \ string) '[) (is_nested (cdr string))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (car string) '[) (is_nested (cdr string))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car string) '[)\
    \ (is_nested (cdr string))]\n    [else #f]))\n", "  (cond [(empty? string) #f]\n\
    \        [(equal? (car string) '[) (is_nested (cdr string))]\n        [else #f]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (first string) '[) (is_nested (rest\
    \ string))]\n        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (first string) '[) (is_nested (rest string))]\n    [else #f]))\n", "  (cond\
    \ [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n\
    \        [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car\
    \ string) '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (cond\n  \
    \  [(empty? string) #f]\n    [(equal? (car string) '[) (is_nested (cdr string))]\n\
    \    [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string)\
    \ '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (let loop ((i 0) (string\
    \ string))\n    (cond ((null? string) #f)\n          ((char= (char string i) '[)\
    \ (loop (+ i 1) (substring string i (+ i 1))))\n          ((char= (char string\
    \ i) '[) (loop (+ i 1) (substring string i (+ i 1))))\n          (else #t))))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n        [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (car string) '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (let\
    \ loop ((i 0) (string string))\n    (cond ((null? string) #f)\n          ((char=?\
    \ (car string) '[)\n           (loop (add1 i) (substring string 0 (add1 i))))\n\
    \          ((char=? (car string) '[)\n           (loop (add1 i) (substring string\
    \ i (add1 i))))\n          ((char=? (car string) '[)\n           (loop (add1 i)\
    \ (substring string i (add1 i))))\n          ((char=? (car string) '[)\n     \
    \      (loop (add1 i) (substring string i (add1 i))))\n          ((char=? (car\
    \ string) '[)\n           (loop (add1 i) (substring string i (add1 i))))\n   \
    \       ((char=? (car string) '[)\n           (loop (add1 i) (substring string\
    \ i (add1 i))))\n          ((char=? (car string) '[)\n           (loop (add1 i)\
    \ (substring string i (add1 i))))\n          ((char=? (car string) '[)\n     \
    \      (loop (add1 i) (substring string i (add1 i))))\n          ((char=? (car\
    \ string) '[)\n           (loop (add1 i) (substring string i (add1 i))))\n   \
    \       ((char=? (car string) '[)\n           (loop (add1 i) (substring string\
    \ i (add1 i))))\n          ((char=? (car string) '[)\n           (loop (add1 i)\
    \ (substring string i (add1 i))))\n          ((char=? (car string) '[)\n     \
    \      (loop (add1 i) (substring string i (add1 i))))\n          ((char=? (car\
    \ string) '[)\n           (loop (add1 i) (substring string i (add1 i))))\n   \
    \       ((char=? (car string) '[)\n           (loop (add1 i) (substring string\
    \ i (add1 i))))\n          ((char=? (car string) '[)\n           (loop (add1 i)\
    \ (substring string i (add1 i))))\n          ((char=? (car string) '[)\n     \
    \      (loop (add1 i) (substring string i (add1 i))))\n          ((char=? (car\
    \ string) '[)\n           (loop (add1 i) (substring string i (add1 ", "  (cond\
    \ [(empty? string) #f]\n        [(equal? (first string) '[) (is_nested (substring\
    \ string 1 (- (length string) 1)))]\n        [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (car string) '[) #t]\n    [else (or (is_nested (cdr\
    \ string))\n               (is_nested (string-append \"[\" (car string) \"]\"\
    )))]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (first string) '[)\
    \ (is_nested (rest string))]\n    [else #f]))\n", "  (let loop ((i 0) (string\
    \ string))\n    (cond ((null? string) #f)\n          ((equal? (char (car string))\
    \ '[)\n           (loop (+ i 1) (cdr string)))\n          ((equal? (char (car\
    \ string)) ']) \n           (loop (+ i 1) (cdr string)))\n          (else (loop\
    \ (+ i 1) (cdr string))))))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (car string) '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (let\
    \ loop ((i 0) (s string) (result #f))\n    (cond\n      [(empty? s) result]\n\
    \      [(equal? (car s) '[) (loop (add1 i) (cdr s) (or (not result) (equal? (car\
    \ s) '['))))]\n      [(equal? (car s) '(') (loop (add1 i) (cdr s) (or (not result)\
    \ (equal? (car s) '['))))]\n      [else (loop (add1 i) (cdr s) (or (not result)\
    \ (equal? (car s) '['))))]\n    )\n    result))\n", "  (let loop ((i 0) (string\
    \ string))\n    (cond ((null? string) #f)\n          ((equal? (char (car string))\
    \ '[)\n           (loop (add1 i) (substring string i (add1 (length string))))\n\
    \           (loop (add1 i) (substring string i (add1 (length string))))\n    \
    \       (loop (add1 i) (substring string i (add1 (length string))))\n        \
    \   (loop (add1 i) (substring string i (add1 (length string))))\n           (loop\
    \ (add1 i) (substring string i (add1 (length string))))\n           (loop (add1\
    \ i) (substring string i (add1 (length string))))\n           (loop (add1 i) (substring\
    \ string i (add1 (length string))))\n           (loop (add1 i) (substring string\
    \ i (add1 (length string))))\n           (loop (add1 i) (substring string i (add1\
    \ (length string))))\n           (loop (add1 i) (substring string i (add1 (length\
    \ string))))\n           (loop (add1 i) (substring string i (add1 (length string))))\n\
    \           (loop (add1 i) (substring string i (add1 (length string))))\n    \
    \       (loop (add1 i) (substring string i (add1 (length string))))\n        \
    \   (loop (add1 i) (substring string i (add1 (length string))))\n           (loop\
    \ (add1 i) (substring string i (add1 (length string))))\n           (loop (add1\
    \ i) (substring string i (add1 (length string))))\n           (loop (add1 i) (substring\
    \ string i (add1 (length string))))\n           (loop (add1 i) (substring string\
    \ i (add1 (length string))))\n           (loop (add1 i) (substring string i (add1\
    \ (length string))))\n           (loop (add1 i) (substring string i (add1 (length\
    \ string))))\n           (loop (add1 i) (substring string i (add1 (length string))))\n\
    \           (loop (add1 i) (substring string i (add1 (length string))))\n    \
    \       (loop (add1 i) (substring string i (add1 (length string))))\n        \
    \   (loop (add1 i) (substring string i (add1 (length string))))\n           (loop\
    \ (add1 i) (substring string i (add1 (length string))))\n           (loop (add1\
    \ i) (substring string i (add1 (length string))))\n           (loop (add1 i) (substring\
    \ string i (add1 (length string))))\n           (loop (add1 i) (substring string\
    \ i (add1 (length string))))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (first string) '[') (is_nested (subseq string 1 2))]\n        [(equal? (first\
    \ string) '(') (is_nested (subseq string 1 2))]\n        [else #f]))\n", "  (cond\
    \ [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (first string) '[) (is_nested (rest\
    \ string))]\n        [else #f]))\n", "  (let loop ((i 0) (s string))\n    (cond\
    \ ((null? s) #f)\n          ((eq? (car s) '[) (loop (+ i 1) (cdr s)))\n      \
    \    ((eq? (car s) '() (loop (+ i 1) (cdr s))))\n          (else (loop (+ i 1)\
    \ (cdr s))))))\n", "  (let loop ((i 0) (string string))\n    (cond ((null? string)\
    \ #f)\n          ((equal? (char (car string)) '[)\n           (loop (add1 i) (substring\
    \ string 0 (add1 i))))\n          ((equal? (char (car string)) '])) \n       \
    \   ((equal? (char (car string)) '[)\n           (loop (add1 i) (substring string\
    \ i (add1 i))))\n          ((equal? (char (car string)) '])) \n          (else\
    \ (loop (add1 i) (substring string i (add1 i)))))))\n", "  (cond [(empty? string)\
    \ #f]\n        [(equal? (first string) '[) (is_nested (rest string))]\n      \
    \  [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car string)\
    \ '[) (is_nested (cdr string))]\n    [else #f]))\n", "  (let loop ((i 0) (s string)\
    \ (t #f))\n    (cond ((null? s) t)\n          ((equal? (char-ref s i) '[) (loop\
    \ (+ i 1) (substring s i (+ i 1)) t))\n          ((equal? (char-ref s i) ']) (loop\
    \ (+ i 1) (substring s i (+ i 1)) t))\n          (t (loop (+ i 1) (substring s\
    \ i) t))))))\n", "  (cond [(empty? string) #f]\n        [(equal? (first string)\
    \ '[) (is_nested (rest string))]\n        [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (first string) '[) (is_nested (rest string))]\n  \
    \  [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string)\
    \ '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (let loop ((i 0) (s\
    \ string))\n    (cond\n      [(empty? s) #f]\n      [(equal? (car s) '[) (loop\
    \ (add1 i) (sub1 s))]\n      [else (loop (add1 i) (sub1 s))])))\n", "  (cond [(empty?\
    \ string) #f]\n        [(equal? (first string) '[) (is_nested (rest string))]\n\
    \        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car\
    \ string) '[) (is_nested (cdr string))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (car string) '[) (is_nested (cdr string))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car string) '[)\
    \ (is_nested (cdr string))]\n    [else #f]))\n", "  (cond\n    [(empty? string)\
    \ #f]\n    [(equal? (car string) '[) (is_nested (cdr string))]\n    [else #f]))\n",
  "  (cond ((null? string) #f)\n        ((equal? (car string) '[)\n         (is_nested\
    \ (cdr string)))\n        (else (is_nested (cdr string)))))\n", "  (cond\n   \
    \ [(empty? string) #f]\n    [(equal? (first string) '[) (is_nested (rest string))]\n\
    \    [else #f]))\n", "  (let loop ((i 0) (s string))\n    (if (or (= i 0) (eq?\
    \ s \"\"))\n        #f\n        (if (char=? (string-ref s i) '[')\n          \
    \  (loop (+ i 1) (substring s i (+ i 1)))\n            (loop (+ i 1) (substring\
    \ s i (+ i 1)))))))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (first\
    \ string) '[) (is_nested (rest string))]\n    [else #f]))\n", "  (let loop ((i\
    \ 0) (s string))\n    (cond\n      [(empty? s) #t]\n      [(equal? (car s) '[)\
    \ (loop (add1 i) (cdr s))]\n      [(equal? (car s) '()) (loop (add1 i) (cdr s))]\n\
    \      [else (loop (add1 i) (cdr s))])))\n", "  (cond [(empty? string) #f]\n \
    \       [(equal? (first string) '[) (is_nested (subseq string 1 2))]\n       \
    \ [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car string)\
    \ '[) (is_nested (cdr string))]\n    [else #f]))\n", "  (cond [(empty? string)\
    \ #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n        [else\
    \ #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car string) '[)\
    \ #t]\n    [else (is_nested (cdr string))]))\n", "  (cond [(empty? string) #f]\n\
    \        [(equal? (car string) '[) (is_nested (cdr string))]\n        [else #f]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (first string) '[) (is_nested (rest string))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? string) #f]\n    [(equal? (car string) '[) (is_nested (cdr string))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (first string)\
    \ '[') (is_nested (rest string))]\n    [else (is_nested (rest string))]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n        [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (first string) '[') (is_nested (subseq string 1 2))]\n        [(equal? (first\
    \ string) '(') (is_nested (subseq string 1 2))]\n        [else #t]))\n", "  (cond\
    \ [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n\
    \        [else #f]))\n", "  (let loop ((i 0) (string string))\n    (cond ((null?\
    \ string) #f)\n          ((equal? (char (car string)) '[) (loop (add1 i) (cdr\
    \ string)))\n          ((equal? (char (car string)) '[) (loop (add1 i) (cdr string)))\n\
    \          ((equal? (char (car string)) '() (loop (add1 i) (cdr string)))\n  \
    \        ((equal? (char (car string)) '() (loop (add1 i) (cdr string)))\n    \
    \      (else (loop (add1 i) (cdr string))))))\n", "  (cond [(empty? string) #f]\n\
    \        [(equal? (first string) '[') (is_nested (rest string))]\n        [else\
    \ (is_nested (rest string))]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (first string) '[') (is_nested (subseq string 1))]\n        [(equal? (first\
    \ string) '(') (is_nested (subseq string 1))]\n        [else #f]))\n", "  (cond\n\
    \    [(empty? string) #f]\n    [(equal? (first string) '[) (is_nested (substring\
    \ string 1))]\n    [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (first string) '[) (is_nested (rest string))]\n        [else #f]))\n", "  (let\
    \ loop ((i 0) (string string))\n    (cond ((null? string) #f)\n          ((char=?\
    \ (car string) '[) (loop (+ i 1) (cdr string)))\n          (else (loop (+ i 1)\
    \ (cdr string))))))\n", "  (let loop ((i 0) (string string) (result #f))\n   \
    \ (cond\n      [(empty? string) #f]\n      [(equal? (car string) '[) (loop (+\
    \ i 1) (cdr string) (not result))]\n      [(equal? (car string) '(#) (loop (+\
    \ i 1) (cdr string) (not result)))]\n      [else (loop (+ i 1) (cdr string) (and\
    \ result (equal? (car string) '[)))])))\n", "  (cond [(empty? string) #f]\n  \
    \      [(equal? (car string) '[) (is_nested (cdr string))]\n        [else #f]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n        [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (first string) '[) (is_nested (rest string))]\n        [else #f]))\n", "  (let\
    \ loop ((i 0) (s string) (result #f))\n    (cond ((null? s) result)\n        \
    \  ((char= (char s i) '[)\n           (loop (+ i 1) (substring s i (+ i 1)) result))\n\
    \          ((char= (char s i) '[)\n           (loop (+ i 1) (substring s i (+\
    \ i 1)) result))\n          ((char= (char s i) '[)\n           (loop (+ i 1) (substring\
    \ s i (+ i 1)) result))\n          ((char= (char s i) '[)\n           (loop (+\
    \ i 1) (substring s i (+ i 1)) result))\n          ((char= (char s i) '[)\n  \
    \         (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char= (char\
    \ s i) '[)\n           (loop (+ i 1) (substring s i (+ i 1)) result))\n      \
    \    ((char= (char s i) '[)\n           (loop (+ i 1) (substring s i (+ i 1))\
    \ result))\n          ((char= (char s i) '[)\n           (loop (+ i 1) (substring\
    \ s i (+ i 1)) result))\n          ((char= (char s i) '[)\n           (loop (+\
    \ i 1) (substring s i (+ i 1)) result))\n          ((char= (char s i) '[)\n  \
    \         (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char= (char\
    \ s i) '[)\n           (loop (+ i 1) (substring s i (+ i 1)) result))\n      \
    \    ((char= (char s i) '[)\n           (loop (+ i 1) (substring s i (+ i 1))\
    \ result))\n          ((char= (char s i) '[)\n           (loop (+ i 1) (substring\
    \ s i (+ i 1)) result))\n          ((char= (char s i) '[)\n           (loop (+\
    \ i 1) (substring s i (+ i 1)) result))\n          ((char= (char s i) '[)\n  \
    \         (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char= (char\
    \ s i) '[)\n           (loop (+ i 1) (substring s i (+ i 1)) result))\n      \
    \    ((char= (char s i) '[)\n           (loop (+ i 1) (substring s i (+ ", " \
    \ (let loop ((i 0) (result #f))\n    (cond ((null? string) #f)\n          ((equal?\
    \ (char (car string) i) '[)\n           (loop (+ i 1) #t))\n          ((equal?\
    \ (char (car string) i) ']) \n           (loop (+ i 1) (or (not result) (equal?\
    \ (char (car string) i) ']))))\n    (loop (+ i 1) result)))\n", "  (let loop ((i\
    \ 0) (string string))\n    (cond ((null? string) #f)\n          ((equal? (char\
    \ (car string)) '[)\n           (loop (+ i 1) (cdr string)))\n          ((equal?\
    \ (char (car string)) '])) \n          ((equal? (char (car string)) '[))\n   \
    \       ((equal? (char (car string)) '])))\n    (loop (+ i 1) string)))\n", " \
    \ (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n        [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (first string) '[) (is_nested (rest string))]\n        [else #f]))\n", "  (cond\n\
    \    [(empty? string) #f]\n    [(equal? (first string) '[) (is_nested (subseq\
    \ string 1))]\n    [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (car string) '[) (is_nested (cdr string))]\n    [else #f]))\n", "  (cond [(empty?\
    \ string) #f]\n        [(equal? (car string) '[') (is_nested (cdr string))]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n        [else #f]))\n", "  (let loop ((i 0) (string string))\n  \
    \  (cond ((null? string) #f)\n          ((equal? (char (car string)) #\\]) (loop\
    \ (+ i 1) (cdr string)))\n          ((equal? (char (car string)) #\\]) (loop (+\
    \ i 1) (cdr string)))\n          ((equal? (char (car string)) #\\[) (loop (+ i\
    \ 1) (cdr string)))\n          ((equal? (char (car string)) #\\]) (loop (+ i 1)\
    \ (cdr string)))\n          ((equal? (char (car string)) #\\]) (loop (+ i 1) (cdr\
    \ string)))\n          (else (loop (+ i 1) (cdr string)))))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| c |>\nThis doesn't work. Try it with `\"[[]]\"`.\n<|/ c |>\n<| c |>\n\
    I added a test case for that case.\n<|/ c |>\n<| c |>\nI added a test case for\
    \ that case.\n<|/ c |>\n<| c |>\nI added a test case for that case.\n<|/ c |>\n\
    <| c |>\nI added a test case for that case.\n<|/ c |>\n<| a dscore=1 |>\nI came\
    \ up with this solution:\n<code>", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (car string) '[) (is_nested (cdr string))]\n    [else #f]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
