name: HumanEval_43_pairs_sum_to_zero
language: rkt
prompt: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
  ;; it returns #t if there are two distinct elements in the list that\n;; sum to\
  \ zero, and #f otherwise.\n;; >>> (pairs_sum_to_zero (list 1 3 5 0))\n;; #f\n;;\
  \ >>> (pairs_sum_to_zero (list 1 3 -2 1))\n;; #f\n;; >>> (pairs_sum_to_zero (list\
  \ 1 2 3 7))\n;; #f\n;; >>> (pairs_sum_to_zero (list 2 4 -5 3 5 7))\n;; #t\n;; >>>\
  \ (pairs_sum_to_zero (list 1))\n;; #f\n(define (pairs_sum_to_zero l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
  \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
  \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal?\
  \ (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n\
  \    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate\
  \ (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30))\
  \ #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? l) #f]\n    [(member (first l) (rest l)) #t]\n\
    \    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond [(null? l) #f]\n     \
    \   [(equal? (first l) (first l)) #t]\n        [else (pairs_sum_to_zero (rest\
    \ l))]))\n", "  (cond [(null? l) #f]\n        [(= (first l) (first l)) #t]\n \
    \       [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(equal? (first l) (first l)) #t]\n    [else (pairs_sum_to_zero (rest l))]\n\
    \  ))\n", "  (cond\n    [(empty? l) #f]\n    [(equal? (first l) (first l)) #t]\n\
    \    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(equal? (first l) 0) #f]\n    [else (equal? (first l) (second l)) #t]))\n",
  "  (cond [(null? l) #f]\n        [(= (first l) (second l)) #t]\n        [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(member (car l) (cadr l))\
    \ #t]\n    [else (pairs_sum_to_zero (cdr l))]))\n", "  (let loop ((l l) (acc #t))\n\
    \    (cond ((null? l) acc)\n          ((= (first l) (first acc)) (loop (rest l)\
    \ (not acc)))\n          (else (loop (rest l) (or (= (first l) (first acc)) acc))))))\n",
  "  (let loop ((l l) (acc '()))\n    (cond ((null? l) acc)\n          ((equal? (first\
    \ l) (first acc)) (loop (rest l) (cons (rest acc) acc)))\n          (else (loop\
    \ (rest l) (cons (first l) (first acc)))))))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(equal? (first l) 0)\n     (equal? (second l) 0)\n     (equal? (third (first\
    \ l)) 0)\n     (equal? (fourth (first l)) 0)\n     (equal? (fifth (first l)) 0)\n\
    \     (equal? (sixth (first l)) 0)\n     (equal? (seventh (first l)) 0)\n    \
    \ (equal? (eighth (first l)) 0)\n     (equal? (ninth (first l)) 0)\n     (equal?\
    \ (tenth (first l)) 0)\n     (equal? (eleventh (first l)) 0)\n     (equal? (twelfth\
    \ (first l)) 0)]\n    [else #f]))\n", "  (let loop ((l l) (acc #t) (seen #f (cons\
    \ (car l) seen)))\n    (cond ((null? l) acc)\n          ((eqv? (car l) (cadr l))\
    \ (loop (cdr l) (not acc) (seen #t)))\n          ((eqv? (car l) (cadr l)) (loop\
    \ (cdr l) (acc) (seen #f)))\n          ((eqv? (car l) (cadr l)) (loop (cdr l)\
    \ (acc) (seen #f)))\n          (else (loop (cdr l) (not acc) (seen #f))))))\n",
  "  (cond\n    [(empty? l) #f]\n    [(member (first l) (second l)) #t]\n    [else\
    \ (pairs_sum_to_zero (rest l))]))\n", "  (cond ((null? l) #f)\n        ((equal?\
    \ (car l) (cadr l)) #t)\n        (else (pairs_sum_to_zero (cdr l)))))\n", "  (cond\
    \ ((null? l) #f)\n        ((equal? (first l) (first (car l))) #t)\n        (else\
    \ (pairs_sum_to_zero (rest l)))))\n", "  (cond\n    [(empty? l) #f]\n    [(equal?\
    \ (first l) (first l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(member (car l) (cdr l)) #t]\n    [else (pairs_sum_to_zero\
    \ (cdr l))]))\n", "  (cond [(null? l) #f]\n        [(equal? (first l) (second\
    \ l)) #t]\n        [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(member (car l) (cdr l)) #t]\n    [else (pairs_sum_to_zero (cdr\
    \ l))]))\n", "  (cond ((null? l) #f)\n        ((equal? (first l) (second l)) #t)\n\
    \        (else (pairs_sum_to_zero (rest l)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
