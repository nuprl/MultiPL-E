name: HumanEval_133_sum_squares
language: rkt
prompt: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
  \ the sum of squared numbers in the given list,\n;; round each element in the list\
  \ to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n\
  ;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n\
  ;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n\
  ;; 6\n(define (sum_squares lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
  \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
  \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
  \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate\
  \ (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0))\
  \ 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
  \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9\
  \ 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
  \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
  \ 2)\n))\n\n(test-humaneval)"
completions: ["  (if (null? lst)\n      0\n      (+ (* 2 (ceil (car lst)))\n     \
    \    (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2\
    \ (round (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n\
    \      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", " \
    \ (if (null? lst)\n      0\n      (+ (* 2 (round (first lst)))\n         (sum-squares\
    \ (rest lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (ceil (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 2 (round (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* (ceiling (first lst)) (ceiling (first lst)))\n  \
    \       (sum-squares (rest lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* lst (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n\
    \      (+ (* 2 (ceil (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if\
    \ (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n         (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 2 (car lst))\n         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n\
    \      0\n      (+ (* 1 (square (car lst)))\n         (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n         (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 2 (round (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", " \
    \ (if (null? lst)\n      0\n      (+ (* 2 (round (first lst)))\n         (sum-squares\
    \ (rest lst)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
