name: HumanEval_133_sum_squares
language: rkt
prompt: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
  \ the sum of squared numbers in the given list,\n;; round each element in the list\
  \ to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n\
  ;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n\
  ;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n\
  ;; 6\n(define (sum_squares lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
  \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
  \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
  \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate\
  \ (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0))\
  \ 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
  \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9\
  \ 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
  \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
  \ 2)\n))\n\n(test-humaneval)"
completions: ["  (if (null? lst)\n      0\n      (+ (* 2 (ceil (car lst)))\n     \
    \    (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2\
    \ (round (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n\
    \      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", " \
    \ (if (null? lst)\n      0\n      (+ (* 2 (round (first lst)))\n         (sum-squares\
    \ (rest lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (ceil (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 2 (round (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* (ceiling (first lst)) (ceiling (first lst)))\n  \
    \       (sum-squares (rest lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* lst (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n\
    \      (+ (* 2 (ceil (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if\
    \ (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n         (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 2 (car lst))\n         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n\
    \      0\n      (+ (* 1 (square (car lst)))\n         (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n         (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 2 (round (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", " \
    \ (if (null? lst)\n      0\n      (+ (* 2 (round (first lst)))\n         (sum-squares\
    \ (rest lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 1 (floor (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 2 (round (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", " \
    \ (if (null? lst)\n      0\n      (+ (* (ceil (car lst)) (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 2 (round (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (define\
    \ (helper lst acc)\n    (cond\n      [(null? lst) acc]\n      [(number? (car lst))\
    \ (helper (cdr lst) (+ (* acc (car lst)) acc))]\n      [else (helper (cdr lst)\
    \ (+ (* acc (car lst)) acc))]))\n  (helper lst 0))\n", "  (if (null? lst)\n  \
    \    0\n      (+ (* 2 (round (car lst)))\n         (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n         (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 0 (ceiling (first lst)))\n         (* 0 (ceiling (second lst)))\n       \
    \  (* 0 (ceiling (third lst))))))\n", "  (if (null? lst)\n      0\n      (+ (*\
    \ 2 (round (first lst)))\n         (sum-squares (rest lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* 2 (round (first lst)))\n         (sum-squares (rest\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 1 (round (first lst)))\n         (sum-squares (rest lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* 2 (round (car lst)))\n         (sum-squares (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (ceil (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 2 (round (first lst)))\n         (sum-squares (rest lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* 2 (round (car lst)))\n         (sum-squares (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 2 (round (first lst)))\n         (sum-squares (rest lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* 1 (square (car lst)))\n         (sum-squares (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (define (helper lst acc)\n    (if (null? lst)\n       \
    \ acc\n        (helper (cdr lst) (+ (* acc acc) (* (car lst) (car lst))))))\n\
    \  (helper lst 0.0))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (first\
    \ lst)))\n         (sum-squares (rest lst)))))\n", "  (if (null? lst)\n      0\n\
    \      (+ (* 2 (ceil (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if\
    \ (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n         (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* lst (car lst))\n         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n\
    \      0\n      (+ (* 0 (ceiling (first lst)))\n         (* 0 (ceiling (second\
    \ lst)))\n         (* 0 (ceiling (third lst))))))\n", "  (if (null? lst)\n   \
    \   0\n      (+ (* 1 (square (car lst)))\n         (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n         (sum-squares\
    \ (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [else (+ (square (car\
    \ lst)) (sum_squares (cdr lst)))]))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 2 (ceil (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* 2 (ceil (car lst)))\n         (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n         (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 2 (round (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", " \
    \ (if (null? lst)\n      0\n      (+ (* 0 (floor (car lst))) (sum-squares (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(number? (first lst))\
    \ (* 1 (first lst))]\n    [else (+ (first lst) (sum-squares (rest lst)))]))\n",
  "  (define (helper lst acc)\n    (if (null? lst)\n        acc\n        (helper (cdr\
    \ lst) (+ (* acc acc) (car lst))))\n    (helper (cdr lst) 0))\n  (helper lst 0))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(number? (first lst)) (* 2 (first lst))]))\n",
  "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n         (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* lst (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n\
    \      (+ (* 2 (round (car lst)))\n         (sum-squares (cdr lst)))))\n", " \
    \ (if (null? lst)\n      0\n      (+ (* 1 (square (car lst)))\n         (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (car lst))\n  \
    \       (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (*\
    \ 2 (round (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* 2 (round (car lst)))\n         (sum-squares (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (first lst)))\n\
    \         (sum-squares (rest lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 0 (floor (* lst (car lst))) (car lst))\n         (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* 2 (car lst)) (sum-squares (cdr lst)))))\n",
  "  (define (helper lst acc)\n    (if (null? lst)\n        acc\n        (helper (cdr\
    \ lst) (+ (* acc (car lst)) acc))))\n  (helper lst 0))\n", "  (if (null? lst)\n\
    \      0\n      (+ (* 2 (round (first lst)))\n         (sum-squares (rest lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* (round (car lst)) (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 0 (floor (car lst)))\n\
    \         (* 0 (floor (* (car lst) (ceil (car lst))))))\n  )\n)\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* 2 (round (first lst)))\n         (sum-squares (rest\
    \ lst)))))\n", "  (define (helper lst acc)\n    (if (null? lst)\n        acc\n\
    \        (helper (cdr lst) (+ (* acc acc) (* (car lst) (car lst))))))\n  (helper\
    \ lst 0.0))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (define (helper lst acc)\n    (if (null? lst)\n       \
    \ acc\n        (helper (cdr lst) (+ (* acc (car lst)) acc))))\n  (helper lst 0))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(number? (car lst)) (* car lst)]\n    [else\
    \ (+ (sum-squares (cdr lst)) (* car lst))]))\n", "  (if (null? lst)\n      0\n\
    \      (+ (* 2 (ceil (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if\
    \ (null? lst)\n      0\n      (+ (* 0 (floor (+ (car lst) (car lst))) (car lst))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* (round (car lst)) (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* lst (car lst))\n         (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* 0 (floor (car lst)))\n         (* 0 (floor\
    \ (* (car lst) (floor car lst))))\n         (sum-squares (cdr lst)))))\n", " \
    \ (if (null? lst)\n      0\n      (+ (* 2 (ceil (car lst)))\n         (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (define (helper lst acc)\n    (if (null? lst)\n       \
    \ acc\n        (helper (cdr lst) (+ (* acc (car lst)) acc))))\n  (helper lst 0))\n",
  "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n         (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (first lst)))\n\
    \         (sum-squares (rest lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* lst (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n\
    \      (+ (* lst (car lst))\n         (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", " \
    \ (if (null? lst)\n      0\n      (+ (* 2 (ceil (car lst)))\n         (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 2 (round (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", " \
    \ (if (null? lst)\n      0\n      (+ (* 2 (round (first lst)))\n         (sum-squares\
    \ (rest lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 2 (ceil (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* 1 (square (car lst)))\n         (sum-squares (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (define (sum-squares lst)\n    (if\
    \ (null? lst)\n        0\n        (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n\
    \  (sum-squares lst))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (car\
    \ lst)))\n         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n\
    \      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n\
    \      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* 0 (floor (car lst)))\n         (* 0 (floor (square\
    \ (car lst))))\n         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n \
    \     0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* 2 (ceil (car lst)))\n         (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* 2 (ceil (car lst)))\n         (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (ceil (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 2 (ceil (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* 2 (round (first lst)))\n         (sum-squares (rest\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* lst (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n\
    \      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n\
    \      0\n      (+ (* 2 (round (first lst)))\n         (sum-squares (rest lst)))))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(number? (first lst)) (* 2 (first lst))]\n\
    \    [else (+ (first lst) (sum-squares (rest lst)))]))\n", "  (if (null? lst)\n\
    \      0\n      (+ (* 2 (round (car lst)))\n         (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* 2 (ceil (car lst)))\n         (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* lst (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n\
    \      (+ (* (ceil (car lst)) (car lst)) (sum-squares (cdr lst)))))\n", "  (if\
    \ (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n         (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 2 (round (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* (ceiling (first lst)) (first lst)) (sum-squares (rest\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 0 (floor (+ (* 0 (car\
    \ lst)) (car lst)))\n          (floor (+ (* 0 (cdr lst)) (cdr lst)))))))\n", " \
    \ (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n         (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 0 (floor (+ (* 0 (floor (car lst)) (floor (cdr lst))))))\n         (sum_squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (ceil (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 1 (square (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* 2 (round (first lst)))\n         (sum-squares (rest\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 2 (round (first lst)))\n         (sum-squares (rest lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* 2 (round (car lst)))\n         (sum-squares (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 2 (round (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* 2 (round (car lst)))\n         (sum-squares (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* (round (car lst)) (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* (round (car lst)) (car lst)) (sum-squares (cdr lst)))))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(number? (car lst)) (* car lst)]\n    [else\
    \ (+ (sum-squares (cdr lst)) (* car lst))]))\n", "  (if (null? lst)\n      0\n\
    \      (+ (* 2 (ceil (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if\
    \ (null? lst)\n      0\n      (+ (* 2 (round (first lst)))\n         (sum-squares\
    \ (rest lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (first\
    \ lst)))\n         (sum-squares (rest lst)))))\n", "  (if (null? lst)\n      0\n\
    \      (+ (* 2 (ceil (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if\
    \ (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(number? (car lst)) (* car lst)]\n    [else\
    \ (+ (sum-squares (cdr lst)) (* car lst))]))\n", "  (if (null? lst)\n      0\n\
    \      (+ (* 2 (ceil (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if\
    \ (null? lst)\n      0\n      (+ (* 2 (ceil (car lst)))\n         (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (first lst)))\n\
    \         (sum-squares (rest lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 2 (ceil (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* 1 (square (car lst)))\n         (sum-squares (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* lst (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n\
    \      (+ (* 1 (square (car lst))) (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [(number? (first lst)) (* 1 (sum-squares (rest\
    \ lst)))]\n    [else (+ (first lst) (sum-squares (rest lst)))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(number? (car lst)) (* car lst)]\n    [else (+ (sum-squares\
    \ (cdr lst)) (* car lst))]))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round\
    \ (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n  \
    \    0\n      (+ (* 2 (round (car lst)))\n         (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* 2 (round (first lst)))\n         (sum-squares\
    \ (rest lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 1 (square (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 2 (round (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* 0 (round (first lst)))\n         (sum-squares (rest\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 1 (square (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* lst (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n\
    \      (+ (* 0 (ceiling (first lst)) (* 1 (second lst))) (sum_squares (rest lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* 1 (floor (car lst)))\n         (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 0 (round (first lst)))\n         (sum-squares (rest lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* 2 (round (first lst)))\n         (sum-squares (rest\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (round (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 2 (ceil (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* 2 (round (first lst)))\n         (sum-squares (rest\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 1 (floor (car lst)))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* 2 (round (car lst)))\n         (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* 0 (floor (car lst)))\n         (* 0 (floor (* (car\
    \ lst) (floor lst))))\n         (sum-squares (cdr lst)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
