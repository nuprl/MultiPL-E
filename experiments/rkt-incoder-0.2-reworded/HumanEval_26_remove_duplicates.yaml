name: HumanEval_26_remove_duplicates
language: rkt
prompt: "#lang racket\n\n;; From a list of integers, remove all elements that occur\
  \ more than once.\n;; Keep order of elements left the same as in the input.\n;;\
  \ >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates\
  \ numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_duplicates))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list 1 2 3 2 4 3 5))\
  \ (list 1 4 5))\n))\n\n(test-humaneval)"
completions: ["  (if (null? numbers)\n      '()\n      (cons (car numbers)\n     \
    \       (remove_duplicates (cdr numbers)))))\n", "  (cond\n    [(empty? numbers)\
    \ numbers]\n    [(member (first numbers) (remove_duplicates (rest numbers))) \n\
    \     (cons (first numbers) (remove_duplicates (rest numbers)))]\n    [else (remove_duplicates\
    \ (rest numbers))]))\n", "  (cond [(empty? numbers) numbers]\n        [(equal?\
    \ (first numbers) (first numbers)) (remove_duplicates rest)]\n        [else (cons\
    \ (first numbers) (remove_duplicates rest))]))\n", "  (if (null? numbers)\n  \
    \    '()\n      (let ((head (car numbers))\n            (tail (cdr numbers)))\n\
    \        (if (null? tail)\n            (cons head (remove_duplicates '()))\n \
    \           (if (equal? (car tail) head)\n                (remove_duplicates tail)\n\
    \                (cons head (remove_duplicates tail)))))\n  )\n", "  (cond\n \
    \   [(empty? numbers) numbers]\n    [(member (first numbers) (remove_duplicates\
    \ (rest numbers))) \n     (cons (first numbers) (remove_duplicates (rest numbers)))]\n\
    \    [else (remove_duplicates (rest numbers))]))\n", "  (cond [(empty? numbers)\
    \ '()]\n        [(member (first numbers) (remove_duplicates rest)) (cons (first\
    \ numbers) (remove_duplicates rest))]\n        [else (cons (first numbers) (remove_duplicates\
    \ rest))]))\n", "  (if (null? numbers)\n      '()\n      (cons (car numbers)\n\
    \            (remove_duplicates (cdr numbers)))))\n", "  (cond\n    [(empty? numbers)\
    \ numbers]\n    [(member (first numbers) (remove_duplicates (rest numbers))) \n\
    \     (cons (first numbers) (remove_duplicates (rest numbers)))]\n    [else (cons\
    \ (first numbers) (remove_duplicates (rest numbers)))]))\n", "  (cond\n    [(empty?\
    \ numbers) numbers]\n    [(member (first numbers) (remove_duplicates (rest numbers)))\
    \ \n     (cons (first numbers) (remove_duplicates (rest numbers)))]\n    [else\
    \ (remove_duplicates (rest numbers))]))\n", "  (cond [(empty? numbers) numbers]\n\
    \        [(member (first numbers) (remove_duplicates rest)) (cons (first numbers)\
    \ (remove_duplicates rest))]\n        [else (cons (first numbers) (remove_duplicates\
    \ rest))]))\n", "  (cond\n    [(empty? numbers) numbers]\n    [(member (first\
    \ numbers) (remove_duplicates (rest numbers))) \n     (cons (first numbers) (remove_duplicates\
    \ (rest numbers)))]\n    [else (remove_duplicates (rest numbers))]))\n", "  (cond\
    \ [(empty? numbers) numbers]\n        [(member (first numbers) (remove_duplicates\
    \ (rest numbers))) \n         (cons (first numbers) (remove_duplicates (rest numbers)))]\n\
    \        [else (remove_duplicates (rest numbers))]))\n", "  (cond [(empty? numbers)\
    \ numbers]\n        [(member (first numbers) (remove_duplicates rest)) (cons (first\
    \ numbers) (remove_duplicates rest))]\n        [else (cons (first numbers) (remove_duplicates\
    \ rest))]))\n", "  (if (null? numbers)\n      '()\n      (let ((result (cons (car\
    \ numbers) (remove_duplicates (cdr numbers)))))\n        (if (null? (cdr result))\n\
    \            (cons (car result) result)\n            (cons (car result) (remove_duplicates\
    \ (cdr result)))))))\n", "  (if (null? numbers)\n      '()\n      (cons (car numbers)\n\
    \            (remove_duplicates (cdr numbers)))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((head (car numbers))\n            (tail (cdr numbers)))\n\
    \        (if (null? tail)\n            (cons head (remove_duplicates '()))\n \
    \           (if (equal? head (car tail))\n                (remove_duplicates tail)\n\
    \                (cons head (remove_duplicates tail)))))\n  )\n", "  (cond\n \
    \   [(empty? numbers) numbers]\n    [(member (first numbers) (remove_duplicates\
    \ rest)) (cons (first numbers) (remove_duplicates rest))]\n    [else (cons (first\
    \ numbers) (remove_duplicates rest))]))\n", "  (cond\n    [(empty? numbers) numbers]\n\
    \    [(member (first numbers) (remove_duplicates (rest numbers))) \n     (cons\
    \ (first numbers) (remove_duplicates (rest numbers)))]\n    [else (remove_duplicates\
    \ (rest numbers))]))\n", "  (if (null? numbers)\n      '()\n      (let ((head\
    \ (car numbers))\n            (tail (cdr numbers)))\n        (if (null? tail)\n\
    \            (cons head (remove_duplicates '()))\n            (if (equal? head\
    \ tail)\n                (remove_duplicates tail)\n                (cons head\
    \ (remove_duplicates tail)))))\n  )\n", "  (cond [(empty? numbers) numbers]\n\
    \        [(equal? (first numbers) (first (rest numbers))) (remove_duplicates (rest\
    \ numbers))]\n        [else (cons (first numbers) (remove_duplicates (rest numbers)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
