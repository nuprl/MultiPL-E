name: HumanEval_145_order_by_points
language: rb
prompt: "# Write a function which sorts the given array of integers\n# in ascending\
  \ order according to the sum of their digits.\n# Note: if there are several items\
  \ with similar sum of their digits,\n# order them based on their index in original\
  \ array.\n# For example:\n# >>> order_by_points.call([1, 11, -1, -11, -12])\n# [-1,\
  \ -11, 1, -12, 11]\n# >>> order_by_points.call([])\n# []\ndef order_by_points(nums)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
  \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11],\
  \ candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423,\
  \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145,\
  \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
  \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9], candidate.call([1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76, -21, 0, 4, 23, 6, 6],\
  \ candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
completions: ["    nums.sort(key=lambda x: sum(int(y) for y in str(x)))\n    return\
    \ nums", '    return sorted(nums, key=lambda num: sum(int(i) for i in str(num)))',
  "    sorted_nums = sorted(nums, key=lambda num: num[0])\n    return sorted_nums",
  "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums", '    return
    sorted(nums, key=lambda num: sum(int(i) for i in str(num)))', "    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n    return nums", "    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n    return nums", "    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n    return nums", '    return sorted(nums,
    key=lambda num: sum(int(i) for i in str(num)))', "    nums.sort(key=lambda x:\
    \ sum(int(i) for i in str(x)))\n    return nums", "    nums.sort(key=lambda x:\
    \ sum(int(i) for i in str(x)))\n    return nums", '    return sorted(nums, key=lambda
    num: sum(int(i) for i in str(num)))', '    return sorted(nums, key=lambda num:
    sum(int(x) for x in str(num)))', '    return sorted(nums, key=lambda num: sum(int(num)
    for num in str(num)))', '    return sorted(nums, key=lambda num: sum(int(x) for
    x in str(num)))', "    sorted_nums = sorted(nums, key=lambda num: num[0])\n  \
    \  return sorted_nums", '    return sorted(nums, key=lambda num: sum(int(i) for
    i in str(num)))', "    sorted_nums = sorted(nums, key=lambda num: num[0])\n  \
    \  return sorted_nums", '    return sorted(nums, key=lambda num: sum(int(x) for
    x in str(num)))', "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums", '    return sorted(nums, key=lambda x: sum(int(i) for i in
    str(x)))', '    return sorted(nums, key=lambda num: sum(int(i) for i in str(num)))',
  "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums", " \
    \   nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums", '    return
    sorted(nums, key=lambda num: sum(int(num) for num in str(num)))', '    return
    sorted(nums, key=lambda num: sum(int(num) for num in str(num)))', '    return
    sorted(nums, key=lambda x: sum(int(i) for i in str(x)))', "    sorted_nums = sorted(nums)\n\
    \    for i in range(len(sorted_nums) - 1):\n        if sorted_nums[i] + sorted_nums[i\
    \ + 1] == sorted_nums[i + 1]:\n            sorted_nums[i + 1] = sorted_nums[i]\n\
    \            sorted_nums[i] = sorted_nums[i + 1]\n            sorted_nums[i +\
    \ 1] = sorted_nums[i + 1]\n    return sorted_nums", "    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n    return nums", "    nums.sort(key=lambda\
    \ x: sum(int(y) for y in str(x)))\n    return nums", "    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n    return nums", "    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n    return nums", "    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n    return nums", "    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n    return nums", "    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n    return nums", '    return sorted(nums,
    key=lambda num: sum(int(x) for x in str(num)))', '    return sorted(nums, key=lambda
    x: sum(int(i) for i in str(x)))', '    return sorted(nums, key=lambda x: sum(int(i)
    for i in str(x)))', '    return sorted(nums, key=lambda num: sum(int(num) for
    num in str(num)))', "    # Your code here\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\n    return nums", "    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\n    return nums", '    return sorted(nums, key=lambda x:
    sum(int(i) for i in str(x)))', '    return sorted(nums, key=lambda x: sum(int(i)
    for i in str(x)))', "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums", '    return sorted(nums, key=lambda num: sum(int(digit) for
    digit in str(num)))', '    return sorted(nums, key=lambda num: sum(int(digit)
    for digit in str(num)))', '    return sorted(nums, key=lambda num: sum(int(digit)
    for digit in str(num)))', '    return sorted(nums, key=lambda num: sum(int(digit)
    for digit in str(num)))', '    return sorted(nums, key=lambda num: sum(int(x)
    for x in str(num)))', "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums", '    return sorted(nums, key=lambda num: sum(int(i) for i in
    str(num)))', "    nums.sort(key=lambda num: sum(int(x) for x in str(num)))\n \
    \   return nums", '    return sorted(nums, key=lambda num: sum(int(x) for x in
    str(num)))', '    return sorted(nums, key=lambda num: sum(int(x) for x in str(num)))',
  '    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))', "    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n    return nums", "    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n    return nums", "    nums.sort(key=lambda\
    \ x: sum(int(y) for y in str(x)))\n    return nums", "    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n    return nums", '    return sorted(nums,
    key=lambda num: sum(int(x) for x in str(num)))', '    return sorted(nums, key=lambda
    num: sum(int(x) for x in str(num)))', "    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\n    return nums", "    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\n    return nums", '    return sorted(nums, key=lambda x:
    sum(int(i) for i in str(x)))', '    return sorted(nums, key=lambda num: sum(int(x)
    for x in str(num)))', '    return sorted(nums, key=lambda x: sum(int(i) for i
    in str(x)))', '    return sorted(nums, key=lambda num: sum(int(x) for x in str(num)))',
  '    return sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))',
  '    return sorted(nums, key=lambda num: sum(int(i) for i in str(num)))', '    return
    sorted(nums, key=lambda num: sum(int(x) for x in str(num)))', "    nums.sort(key=lambda\
    \ x: sum(int(y) for y in str(x)))\n    return nums", '    return sorted(nums,
    key=lambda x: sum(int(i) for i in str(x)))', "    sorted_nums = sorted(nums, key=lambda\
    \ num: num[0])\n    return sorted_nums", '    return sorted(nums, key=lambda num:
    sum(int(digit) for digit in str(num)))', '    return sorted(nums, key=lambda x:
    sum(int(i) for i in str(x)))', '    return sorted(nums, key=lambda num: sum(int(num)
    for num in str(num)))', '    return sorted(nums, key=lambda num: sum(int(digit)
    for digit in str(num)))', "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums", "    sorted_nums = sorted(nums, key=lambda num: num[0])\n \
    \   return sorted_nums", "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums", "    nums.sort(key=lambda x: sum(int(y) for y in str(x)))\n\
    \    return nums", "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums", '    return sorted(nums, key=lambda num: sum(int(x) for x in
    str(num)))', '    return sorted(nums, key=lambda num: sum(int(digit) for digit
    in str(num)))', "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  \
    \  return nums", '    return sorted(nums, key=lambda num: sum(int(i) for i in
    str(num)))', "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return\
    \ nums", "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return\
    \ nums", '    return sorted(nums, key=lambda num: sum(int(num) for num in str(num)))',
  '    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))', '    return
    sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))', "    # Your\
    \ code here\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return\
    \ nums", '    return sorted(nums, key=lambda num: sum(int(x) for x in str(num)))',
  "    sorted_nums = sorted(nums, key=lambda num: num[0])\n    return sorted_nums",
  "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums", " \
    \   nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums", '    return
    sorted(nums, key=lambda num: sum(int(num) for num in str(num)))', "    nums.sort(key=lambda\
    \ x: sum(int(y) for y in str(x)))\n    return nums", "    sorted_nums = sorted(nums)\n\
    \    for i in range(len(sorted_nums) - 1):\n        if sorted_nums[i] + sorted_nums[i\
    \ + 1] == sorted_nums[i + 1]:\n            sorted_nums[i + 1] = sorted_nums[i]\
    \ + sorted_nums[i + 1]\n            sorted_nums[i] = sorted_nums[i + 1] - sorted_nums[i]\n\
    \            del sorted_nums[i + 1]\n    return sorted_nums", '    return sorted(nums,
    key=lambda x: sum(int(i) for i in str(x)))', '    return sorted(nums, key=lambda
    x: sum(int(i) for i in str(x)))', "    nums.sort(key=lambda x: sum(int(i) for\
    \ i in str(x)))\n    return nums", '    return sorted(nums, key=lambda num: sum(int(x)
    for x in str(num)))', '    return sorted(nums, key=lambda num: sum(int(digit)
    for digit in str(num)))', '    return sorted(nums, key=lambda num: sum(int(i)
    for i in str(num)))', '    return sorted(nums, key=lambda num: sum(int(x) for
    x in str(num)))', '    return sorted(nums, key=lambda num: sum(int(digit) for
    digit in str(num)))', '    return sorted(nums, key=lambda num: sum(int(i) for
    i in str(num)))', "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums", '    return sorted(nums, key=lambda x: sum(int(i) for i in
    str(x)))', '    return sorted(nums, key=lambda num: sum(int(i) for i in str(num)))',
  "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums", '    return
    sorted(nums, key=lambda num: sum(int(i) for i in str(num)))', '    return sorted(nums,
    key=lambda num: sum(int(num) for num in str(num)))', "    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n    return nums", '    return sorted(nums,
    key=lambda x: sum(int(i) for i in str(x)))', "    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\n    return nums", '    return sorted(nums, key=lambda num:
    sum(int(x) for x in str(num)))', '    return sorted(nums, key=lambda x: sum(int(y)
    for y in str(x)))', '    return sorted(nums, key=lambda num: sum(int(i) for i
    in str(num)))', '    return sorted(nums, key=lambda num: sum(int(num) for num
    in str(num)))', "    nums.sort(key=lambda x: sum(int(y) for y in str(x)))\n  \
    \  return nums", '    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))',
  '    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))', "    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n    return nums", "    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n    return nums", '    return sorted(nums,
    key=lambda num: sum(int(digit) for digit in str(num)))', '    return sorted(nums,
    key=lambda num: sum(int(digit) for digit in str(num)))', '    return sorted(nums,
    key=lambda num: sum(int(i) for i in str(num)))', '    return sorted(nums, key=lambda
    x: sum(int(i) for i in str(x)))', "    nums.sort(key=lambda x: sum(int(i) for\
    \ i in str(x)))\n    return nums", '    return sorted(nums, key=lambda num: sum(int(digit)
    for digit in str(num)))', "    nums.sort(key=lambda x: sum(int(y) for y in str(x)))\n\
    \    return nums", '    return sorted(nums, key=lambda num: sum(int(i) for i in
    str(num)))', '    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))',
  "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums", '    return
    sorted(nums, key=lambda num: sum(int(x) for x in str(num)))', "    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n    return nums", "    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n    return nums", "    sorted_nums = sorted(nums)\n\
    \    return sorted_nums", "    nums.sort(key=lambda x: sum(int(y) for y in str(x)))\n\
    \    return nums", '    return sorted(nums, key=lambda num: sum(int(num) for num
    in str(num)))', '    return sorted(nums, key=lambda num: sum(int(i) for i in str(num)))',
  '    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))', "    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n    return nums", '    return sorted(nums,
    key=lambda x: sum(int(i) for i in str(x)))', "    nums.sort(key=lambda x: sum(int(y)\
    \ for y in str(x)))\n    return nums", "    sorted_nums = sorted(nums, key=lambda\
    \ num: sum(int(x) for x in str(num)))\n    return sorted_nums", '    return sorted(nums,
    key=lambda x: sum(int(i) for i in str(x)))', '    return sorted(nums, key=lambda
    x: sum(int(i) for i in str(x)))', '    return sorted(nums, key=lambda num: sum(int(i)
    for i in str(num)))', "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums", '    return sorted(nums, key=lambda num: sum(int(digit) for
    digit in str(num)))', '    return sorted(nums, key=lambda num: sum(int(digit)
    for digit in str(num)))', '    return sorted(nums, key=lambda num: sum(int(i)
    for i in str(num)))', "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums", '    return sorted(nums, key=lambda num: sum(int(num) for num
    in str(num)))', '    return sorted(nums, key=lambda num: sum(int(num) for num
    in str(num)))', '    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))',
  "    # Your code here\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums", "    # Your code here\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\n    return nums", "    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\n    return nums", '    return sorted(nums, key=lambda num:
    sum(int(x) for x in str(num)))', "    # Sort the array based on the sum of digits\n\
    \    sorted_nums = sorted(nums, key=lambda num: sum(int(x) for x in str(num)))\n\
    \    # Sort the array based on the index\n    return sorted_nums", '    return
    sorted(nums, key=lambda x: sum(int(i) for i in str(x)))', '    return sorted(nums,
    key=lambda x: sum(int(y) for y in str(x)))', '    return sorted(nums, key=lambda
    num: sum(int(x) for x in str(num)))', '    return sorted(nums, key=lambda num:
    sum(int(num) for num in str(num)))', '    return sorted(nums, key=lambda num:
    sum(int(digit) for digit in str(num)))', "    nums.sort(key=lambda num: sum(int(x)\
    \ for x in str(num)))\n    return nums", "    nums.sort(key=lambda num: sum(int(x)\
    \ for x in str(num)))\n    return nums", '    return sorted(nums, key=lambda num:
    sum(int(digit) for digit in str(num)))', '    return sorted(nums, key=lambda num:
    sum(int(digit) for digit in str(num)))', "    sorted_nums = sorted(nums)\n   \
    \ return sorted_nums", "    sorted_nums = sorted(nums, key=lambda num: num[0])\n\
    \    return sorted_nums", "    sorted_nums = sorted(nums)\n    for i in range(len(sorted_nums)\
    \ - 1):\n        if sorted_nums[i] + sorted_nums[i + 1] == sorted_nums[i + 1]:\n\
    \            sorted_nums[i + 1] = sorted_nums[i]\n            sorted_nums[i] =\
    \ sorted_nums[i + 1]\n            sorted_nums[i + 1] = sorted_nums[i]\n    return\
    \ sorted_nums", "    nums.sort(key=lambda x: sum(int(y) for y in str(x)))\n  \
    \  return nums", '    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))',
  "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums", " \
    \   nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums", " \
    \   nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums", '    return
    sorted(nums, key=lambda num: sum(int(i) for i in str(num)))', '    return sorted(nums,
    key=lambda num: sum(int(digit) for digit in str(num)))', "    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n    return nums", '    return sorted(nums,
    key=lambda num: sum(int(digit) for digit in str(num)))', '    return sorted(nums,
    key=lambda x: sum(int(i) for i in str(x)))', '    return sorted(nums, key=lambda
    num: sum(int(digit) for digit in str(num)))', '    return sorted(nums, key=lambda
    x: sum(int(i) for i in str(x)))', "    nums.sort(key=lambda x: sum(int(c) for\
    \ c in str(x)))\n    return nums", "    nums.sort(key=lambda x: sum(int(i) for\
    \ i in str(x)))\n    return nums", '    return sorted(nums, key=lambda num: sum(int(digit)
    for digit in str(num)))', '    return sorted(nums, key=lambda num: sum(int(x)
    for x in str(num)))', '    return sorted(nums, key=lambda num: sum(int(digit)
    for digit in str(num)))', '    return sorted(nums, key=lambda num: sum(int(x)
    for x in str(num)))', '    return sorted(nums, key=lambda num: sum(int(digit)
    for digit in str(num)))', "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums", '    return sorted(nums, key=lambda num: sum(int(i) for i in
    str(num)))', '    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))',
  '    return sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))',
  '    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))']
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
