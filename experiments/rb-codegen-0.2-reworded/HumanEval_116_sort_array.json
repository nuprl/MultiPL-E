{
  "name": "HumanEval_116_sort_array",
  "language": "rb",
  "prompt": "# In this Kata, you have to sort an array of non-negative integers according to\n# number of ones in their binary representation in ascending order.\n# For similar number of ones, sort based on decimal value.\n# It must be implemented like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1, 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n",
  "completions": [
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    # Your code here\n    arr.sort()\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr\n",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr\n",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    # Your code here\n    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    # Your code here\n    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    # Sort based on number of ones\n    arr.sort(key=lambda x: bin(x).count('1'))\n    # Sort based on decimal value\n    arr.sort(key=lambda x: int(x))\n    return arr",
    "    # Sort based on number of ones\n    arr.sort(key=lambda x: bin(x)[2:])\n    # Sort based on decimal value\n    arr.sort(key=lambda x: x)",
    "    # Sort based on number of ones\n    arr.sort(key=lambda x: bin(x)[2:])\n    # Sort based on decimal value\n    arr.sort(key=lambda x: x)\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr = sorted(arr, key=lambda x: bin(x)[2:])\n    arr = sorted(arr, key=lambda x: x)\n    return arr",
    "    # Sort based on number of ones\n    arr.sort(key=lambda x: bin(x).count('1'))\n    # Sort based on decimal value\n    arr.sort(key=lambda x: int(x))\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    return sorted(arr, key=lambda x: bin(x)[2:])\n",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    # return sorted(arr, key=lambda x: bin(x)[2:])\n    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr = sorted(arr, key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr\n",
    "    # Sort based on number of ones in binary representation\n    return sorted(arr, key=lambda x: bin(x)[2:].count('1'))",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    # Sort based on number of ones\n    arr.sort(key=lambda x: bin(x).count('1'))\n    # Sort based on decimal value\n    arr.sort(key=lambda x: x)\n    return arr",
    "    # Sort based on number of ones in binary representation\n    arr.sort(key=lambda x: bin(x)[2:])\n    # Sort based on decimal value\n    arr.sort(key=lambda x: x)",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    # Sort based on number of ones\n    arr.sort(key=lambda x: bin(x)[2:])\n    # Sort based on decimal value\n    arr.sort(key=lambda x: int(x))\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    # Sort based on number of ones\n    arr.sort(key=lambda x: bin(x).count('1'))\n    # Sort based on decimal value\n    arr.sort(key=lambda x: int(x))\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    # sort by number of ones\n    arr.sort(key=lambda x: bin(x).count('1'))\n    # sort by decimal value\n    arr.sort(key=lambda x: int(x))\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort()\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort()\n    return arr",
    "    arr = sorted(arr, key=lambda x: bin(x)[2:])\n    arr = sorted(arr, key=lambda x: x)\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort()\n    return arr",
    "    arr = sorted(arr, key=lambda x: bin(x)[2:])\n    return arr",
    "    # Sort based on number of ones in binary representation\n    return sorted(arr, key=lambda x: bin(x).count('1'))",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    # Your code here\n    arr.sort()\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    # Sort based on number of ones in binary representation\n    # >>> sort_array([1, 5, 2, 3, 4])\n    # [1, 2, 3, 4, 5]\n    # >>> sort_array([-2, -3, -4, -5, -6])\n    # [-6, -5, -4, -3, -2]\n    # >>> sort_array([1, 0, 2, 3, 4])\n    # [0, 1, 2, 3, 4]\n    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    # Sort based on number of ones in binary representation\n    arr.sort(key=lambda x: bin(x)[2:])\n    # Sort based on decimal value\n    arr.sort(key=lambda x: x)",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    # Sort based on number of ones\n    arr.sort(key=lambda x: bin(x).count('1'))\n    # Sort based on decimal value\n    arr.sort(key=lambda x: int(x))\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort()\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    # Write your code here\n    arr.sort()\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr = sorted(arr, key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    # Sort based on number of ones\n    arr.sort(key=lambda x: bin(x).count('1'))\n    # Sort based on decimal value\n    arr.sort(key=lambda x: int(x))\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort()\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    # Sort based on number of ones\n    arr.sort(key=lambda x: bin(x).count('1'))\n    # Sort based on decimal value\n    arr.sort(key=lambda x: int(x))\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    return sorted(arr, key=lambda x: bin(x)[2:])\n",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    # Sort based on number of ones\n    arr.sort(key=lambda x: bin(x).count('1'))\n    # Sort based on decimal value\n    arr.sort(key=lambda x: int(x))\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort()\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr\n",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    return sorted(arr, key=lambda x: bin(x)[2:])",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr",
    "    arr.sort(key=lambda x: bin(x)[2:])\n    return arr"
  ],
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ]
}