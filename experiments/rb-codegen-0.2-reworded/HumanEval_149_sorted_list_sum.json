{
  "name": "HumanEval_149_sorted_list_sum",
  "language": "rb",
  "prompt": "# Write a function that accepts an array of strings as a parameter,\n# deletes the strings that have odd lengths from it,\n# and returns the resulted array with a sorted order,\n# The array is always an array of strings and never an array of numbers,\n# and it may contain duplicates.\n# The order of the array should be ascending by length of each word, and you\n# should return the array sorted by that rule.\n# If two words have the same length, sort the array alphabetically.\n# The function should return an array of strings in sorted order.\n# You may assume that all words will have the same length.\n# For example:\n# >>> list_sort.call([\"aa\", \"a\", \"aaa\"])\n# [\"aa\"]\n# >>> list_sort.call([\"ab\", \"a\", \"aaa\", \"cd\"])\n# [\"ab\", \"cd\"]\ndef sorted_list_sum(lst)\n",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sorted_list_sum\n    candidate = method(:sorted_list_sum)\n    assert_equal([\"aa\"], candidate.call([\"aa\", \"a\", \"aaa\"]))\n    assert_equal([\"AI\", \"asdf\", \"school\"], candidate.call([\"school\", \"AI\", \"asdf\", \"b\"]))\n    assert_equal([], candidate.call([\"d\", \"b\", \"c\", \"a\"]))\n    assert_equal([\"abcd\", \"dcba\"], candidate.call([\"d\", \"dcba\", \"abcd\", \"a\"]))\n    assert_equal([\"AI\", \"ai\", \"au\"], candidate.call([\"AI\", \"ai\", \"au\"]))\n    assert_equal([], candidate.call([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]))\n    assert_equal([\"cc\", \"dd\", \"aaaa\", \"bbbb\"], candidate.call([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]))\n  end\nend\n",
  "completions": [
    "    if len(lst) == 0:\n        return []\n    else:\n        return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        return sorted(lst)\n    if len(lst) == 3:\n        return sorted(lst)\n    if len(lst) == 4:\n        return sorted(lst)\n    if len(lst) == 5:\n        return sorted(lst)\n    if len(lst) == 6:\n        return sorted(lst)\n    if len(lst) == 7:\n        return sorted(lst)\n    if len(lst) == 8:\n        return sorted(lst)\n    if len(lst) == 9:\n        return sorted(lst)\n    if len(lst) == 10:\n        return sorted(lst)\n    if len(lst) == 11:\n        return sorted(lst)\n    if len(lst) == 12:\n        return sorted(lst)\n    if len(lst) == 13:\n        return sorted(lst)\n    if len(lst) == 14:\n        return sorted(lst)\n    if len(lst) == 15:\n        return sorted(lst)\n    if len(lst) == 16:\n        return sorted(lst)\n    if len(lst) == 17:\n        return sorted(lst)\n    if len(lst) == 18:\n        return sorted(lst)\n    if len(lst) == 19:\n        return sorted(lst)\n    if len(lst) == 20:\n        return sorted(lst)\n    if len(lst) == 21:\n        return sorted(lst)\n    if len(lst) == 22:\n        return sorted(lst)\n    if len(lst) == 23:\n        return sorted(lst)\n    if len(lst) == 24:\n        return sorted(lst)\n    if len(lst) == 25:\n        return sorted(lst)\n    if len(lst) == 26:\n        return sorted(lst)\n    if len(lst",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    if len(lst) < 2:\n        return lst\n    else:\n        return sorted_list_sum(lst[1:]) + [lst[0]]",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    lst.sort(key=len)\n    return lst[0:len(lst)//2] + sorted_list_sum(lst[len(lst)//2:])",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    if len(lst) == 0:\n        return []\n    else:\n        return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return [lst[0], lst[1]]\n        else:\n            return lst\n    if len(lst) == 3:\n        if lst[0] == lst[1] and lst[0] == lst[2]:\n            return [lst[0], lst[1], lst[2]]\n        else:\n            return lst\n    if len(lst) == 4:\n        if lst[0] == lst[1] and lst[0] == lst[2] and lst[0] == lst[3]:\n            return [lst[0], lst[1], lst[2], lst[3]]\n        else:\n            return lst\n    if len(lst) == 5:\n        if lst[0] == lst[1] and lst[0] == lst[2] and lst[0] == lst[3] and lst[0] == lst[4]:\n            return [lst[0], lst[1], lst[2], lst[3], lst[4]]\n        else:\n            return lst\n    if len(lst) == 6:\n        if lst[0] == lst[1] and lst[0] == lst[2] and lst[0] == lst[3] and lst[0] == lst[4] and lst[0] == lst[5]:\n            return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5]]\n        else:\n            return lst\n    if len(lst) == 7:\n        if lst[0] == lst[1] and lst[0] == lst[2] and lst[0] == lst[3] and lst[0] == lst[4] and lst[0] == lst[5",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return [lst[0], lst[1]]\n        else:\n            return lst\n    if len(lst) == 3:\n        if lst[0] == lst[1] or lst[1] == lst[2]:\n            return [lst[0], lst[1], lst[2]]\n        else:\n            return lst\n    if len(lst) == 4:\n        if lst[0] == lst[1] or lst[1] == lst[2] or lst[2] == lst[3]:\n            return [lst[0], lst[1], lst[2], lst[3]]\n        else:\n            return lst\n    if len(lst) == 5:\n        if lst[0] == lst[1] or lst[1] == lst[2] or lst[2] == lst[3] or lst[3] == lst[4]:\n            return [lst[0], lst[1], lst[2], lst[3], lst[4]]\n        else:\n            return lst\n    if len(lst) == 6:\n        if lst[0] == lst[1] or lst[1] == lst[2] or lst[2] == lst[3] or lst[3] == lst[4] or lst[4] == lst[5]:\n            return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5]]\n        else:\n            return lst\n    if len(lst) == 7:\n        if lst[0] == lst[1] or lst[1] == lst[2] or lst[2] == lst[3] or lst[3] == lst[4] or lst[4] == lst[5",
    "    return sorted(lst, key=lambda x: len(x))",
    "    if len(lst) == 0:\n        return []\n    else:\n        return sorted_list_sum(lst[1:]) + [lst[0]]",
    "    return sorted(lst, key=lambda x: len(x))",
    "    if len(lst) <= 1:\n        return lst\n    else:\n        return sorted_list_sum(lst[1:]) + [lst[0]]",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        return sorted(lst)\n    if len(lst) % 2 == 0:\n        return sorted(lst)\n    else:\n        return sorted(lst[0:len(lst)//2]) + sorted(lst[len(lst)//2:])",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        return sorted(lst)\n    if len(lst) == 3:\n        return sorted(lst)\n    if len(lst) == 4:\n        return sorted(lst)\n    if len(lst) == 5:\n        return sorted(lst)\n    if len(lst) == 6:\n        return sorted(lst)\n    if len(lst) == 7:\n        return sorted(lst)\n    if len(lst) == 8:\n        return sorted(lst)\n    if len(lst) == 9:\n        return sorted(lst)\n    if len(lst) == 10:\n        return sorted(lst)\n    if len(lst) == 11:\n        return sorted(lst)\n    if len(lst) == 12:\n        return sorted(lst)\n    if len(lst) == 13:\n        return sorted(lst)\n    if len(lst) == 14:\n        return sorted(lst)\n    if len(lst) == 15:\n        return sorted(lst)\n    if len(lst) == 16:\n        return sorted(lst)\n    if len(lst) == 17:\n        return sorted(lst)\n    if len(lst) == 18:\n        return sorted(lst)\n    if len(lst) == 19:\n        return sorted(lst)\n    if len(lst) == 20:\n        return sorted(lst)\n    if len(lst) == 21:\n        return sorted(lst)\n    if len(lst) == 22:\n        return sorted(lst)\n    if len(lst) == 23:\n        return sorted(lst)\n    if len(lst) == 24:\n        return sorted(lst)\n    if len(lst) == 25:\n        return sorted(lst)\n    if len(lst) == 26:\n        return sorted(lst)\n    if len(lst",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    if len(lst) == 0:\n        return []\n    lst.sort(key=len)\n    return lst[::2]",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return lst\n        else:\n            return lst[0] + lst[1]\n    if len(lst) == 3:\n        if lst[0] == lst[1] or lst[0] == lst[2]:\n            return lst[0] + lst[1] + lst[2]\n        else:\n            return lst[0] + lst[1] + lst[2]\n    if len(lst) == 4:\n        if lst[0] == lst[1] or lst[0] == lst[2] or lst[0] == lst[3]:\n            return lst[0] + lst[1] + lst[2] + lst[3]\n        else:\n            return lst[0] + lst[1] + lst[2] + lst[3]\n    if len(lst) == 5:\n        if lst[0] == lst[1] or lst[0] == lst[2] or lst[0] == lst[3] or lst[0] == lst[4]:\n            return lst[0] + lst[1] + lst[2] + lst[3] + lst[4]\n        else:\n            return lst[0] + lst[1] + lst[2] + lst[3] + lst[4]\n    if len(lst) == 6:\n        if lst[0] == lst[1] or lst[0] == lst[2] or lst[0] == lst[3] or lst[0] == lst[4] or lst[0] == lst[5]:\n            return lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5]\n        else:\n            return l",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    if len(lst) == 0:\n        return []\n    else:\n        return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return [lst[0], lst[1]]\n        else:\n            return lst\n    if len(lst) == 3:\n        if lst[0] == lst[1] or lst[0] == lst[2]:\n            return [lst[0], lst[1], lst[2]]\n        else:\n            return lst\n    if len(lst) == 4:\n        if lst[0] == lst[1] or lst[0] == lst[2] or lst[0] == lst[3]:\n            return [lst[0], lst[1], lst[2], lst[3]]\n        else:\n            return lst\n    if len(lst) == 5:\n        if lst[0] == lst[1] or lst[0] == lst[2] or lst[0] == lst[3] or lst[0] == lst[4]:\n            return [lst[0], lst[1], lst[2], lst[3], lst[4]]\n        else:\n            return lst\n    if len(lst) == 6:\n        if lst[0] == lst[1] or lst[0] == lst[2] or lst[0] == lst[3] or lst[0] == lst[4] or lst[0] == lst[5]:\n            return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5]]\n        else:\n            return lst\n    if len(lst) == 7:\n        if lst[0] == lst[1] or lst[0] == lst[2] or lst[0] == lst[3] or lst[0] == lst[4] or lst[0] == lst[5",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    return sorted(lst, key=lambda x: len(x))",
    "    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return [lst[0], lst[1]]\n        else:\n            return lst\n    if len(lst) == 3:\n        if lst[0] == lst[1] or lst[0] == lst[2]:\n            return [lst[0], lst[1], lst[2]]\n        else:\n            return lst\n    if len(lst) == 4:\n        if lst[0] == lst[1] or lst[0] == lst[2] or lst[0] == lst[3]:\n            return [lst[0], lst[1], lst[2], lst[3]]\n        else:\n            return lst\n    if len(lst) == 5:\n        if lst[0] == lst[1] or lst[0] == lst[2] or lst[0] == lst[3] or lst[0] == lst[4]:\n            return [lst[0], lst[1], lst[2], lst[3], lst[4]]\n        else:\n            return lst\n    if len(lst) == 6:\n        if lst[0] == lst[1] or lst[0] == lst[2] or lst[0] == lst[3] or lst[0] == lst[4] or lst[0] == lst[5]:\n            return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5]]\n        else:\n            return lst\n    if len(lst) == 7:\n        if lst[0] == lst[1] or lst[0] == lst[2] or lst[0] == lst[3] or lst[0] == lst[4] or lst[0] == lst[5"
  ],
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ]
}