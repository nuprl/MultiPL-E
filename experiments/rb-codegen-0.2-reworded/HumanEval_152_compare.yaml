name: HumanEval_152_compare
language: rb
prompt: "# I think we all remember that feeling when the result of some long-awaited\n\
  # event is finally known. The feelings and thoughts you have at that moment are\n\
  # definitely worth noting down and comparing.\n# Your task is to determine if a\
  \ person correctly guessed the results of a number of matches.\n# You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n# Return an array of the same length denoting how far off each guess was. If\
  \ they have guessed correctly,\n# the value is 0, and if not, the value is the absolute\
  \ difference between the guess and the score.\n# example:\n# >>> compare.call([1,\
  \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n# [0, 0, 0, 0, 3, 3]\n# >>> compare.call([0,\
  \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n# [4, 4, 1, 0, 0, 6]\ndef compare(game,\
  \ guess)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
  \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
  \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0,\
  \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2, 4, 6], candidate.call([1,\
  \ 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0, 1], candidate.call([1, 2, 3,\
  \ 5], [-1, 2, 3, 4]))\n  end\nend\n"
completions: []
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
