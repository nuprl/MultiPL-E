name: HumanEval_142_sum_squares
language: rb
prompt: "# \"\n# This function will take an array of integers. For all entries in\
  \ the array, the function shall square the integer entry if its index is a \n# multiple\
  \ of 3 and will cube the integer entry if its index is a multiple of 4 and not a\
  \ multiple of 3. The function will not \n# change the entries in the array whose\
  \ indexes are not a multiple of 3 or 4. The function shall then return the sum of\
  \ all entries. \n# Examples:\n# >>> lst\n# [1, 2, 3]\n# >>> lst\n# []\n# >>> lst\n\
  # [-1, -5, 2, -1, -5]\ndef sum_squares(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_squares\n\
  \    candidate = method(:sum_squares)\n    assert_equal(6, candidate.call([1, 2,\
  \ 3]))\n    assert_equal(14, candidate.call([1, 4, 9]))\n    assert_equal(0, candidate.call([]))\n\
  \    assert_equal(9, candidate.call([1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    assert_equal(-3,\
  \ candidate.call([-1, -1, -1, -1, -1, -1, -1, -1, -1]))\n    assert_equal(0, candidate.call([0]))\n\
  \    assert_equal(-126, candidate.call([-1, -5, 2, -1, -5]))\n    assert_equal(3030,\
  \ candidate.call([-56, -99, 1, 0, -2]))\n    assert_equal(0, candidate.call([-1,\
  \ 0, 0, 0, 0, 0, 0, 0, -1]))\n    assert_equal(-14196, candidate.call([-16, -9,\
  \ -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]))\n    assert_equal(-1448,\
  \ candidate.call([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13,\
  \ 11, 16, 16, 4, 10]))\n  end\nend\n"
completions: []
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
