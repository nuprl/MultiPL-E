{
  "name": "HumanEval_99_closest_integer",
  "language": "rb",
  "prompt": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer.call(\"10\")\n# 10\n# >>> closest_integer.call(\"15.3\")\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\ndef closest_integer(value)\n",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_closest_integer\n    candidate = method(:closest_integer)\n    assert_equal(10, candidate.call(\"10\"))\n    assert_equal(15, candidate.call(\"14.5\"))\n    assert_equal(-16, candidate.call(\"-15.5\"))\n    assert_equal(15, candidate.call(\"15.3\"))\n    assert_equal(0, candidate.call(\"0\"))\n  end\nend\n",
  "completions": [
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    # Your code here\n    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    # Your code here\n    if value == \"\":\n        return 0\n    else:\n        return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(round(float(value)))",
    "    return int(round(float(value)))",
    "    if value.isalpha():\n        return int(value)\n    else:\n        return int(value) + 0.5",
    "    # Convert the string to a float\n    value = float(value)\n    # If the value is an integer, return it\n    if int(value) == value:\n        return int(value)\n    # If the value is not an integer, find the closest integer\n    # to the value\n    else:\n        return int(value) + (value - int(value))",
    "    return int(round(float(value)))",
    "    return int(round(float(value)))",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(round(float(value)))",
    "    # Convert the value to a string\n    value = str(value)\n    # Convert the value to an integer\n    value = int(value)\n    # Convert the value to a float\n    value = float(value)\n    # If the value is a float, round it away from zero\n    if value % 1 > 0:\n        return int(value)\n    # If the value is a float, round it away from zero\n    elif value % 1 < 0:\n        return int(value) - 1\n    # If the value is an integer, return it\n    else:\n        return value",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(value)",
    "    # Your code here\n    if value == \"\":\n        return 0\n    else:\n        return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(round(float(value)))",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    # Your function should return an integer\n    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    # Your function should return the closest integer to the given value\n    # If the given value is not a number, return None\n    try:\n        return int(value)\n    except ValueError:\n        return None",
    "    return int(round(float(value)))",
    "    # Your code here\n    return int(value)",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(round(float(value)))",
    "    return int(round(float(value)))",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(round(float(value)))",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    # your code goes here\n    if value.isdigit():\n        return int(value)\n    else:\n        return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(round(float(value)))",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(round(float(value)))",
    "    return int(round(float(value)))",
    "    # Your function should return the closest integer to the given value\n    # (a string)\n    # Note:\n    # The function should return the closest integer to the given value\n    # (a string). If the given value is equidistant from two integers,\n    # round it away from zero.\n    # Examples\n    # >>> closest_integer(\"10\")\n    # 10\n    # >>> closest_integer(\"15.3\")\n    # 15\n    # >>> closest_integer(\"14.5\")\n    # 15\n    # >>> closest_integer(\"-14.5\")\n    # -15\n    # >>> closest_integer(\"15.5\")\n    # 16\n    # >>> closest_integer(\"-15.5\")\n    # -16\n    # >>> closest_integer(\"15.4\")\n    # 15\n    # >>> closest_integer(\"-15.4\")\n    # -15\n    # >>> closest_integer(\"15.6\")\n    # 16\n    # >>> closest_integer(\"-15.6\")\n    # -16\n    # >>> closest_integer(\"15.7\")\n    # 16\n    # >>> closest_integer(\"-15.7\")\n    # -16\n    # >>> closest_integer(\"15.8\")\n    # 16\n    # >>> closest_integer(\"-15.8\")\n    # -16\n    # >>> closest_integer(\"15.9\")\n    # 16\n    # >>> closest_integer(\"-15.9\")\n    # -16\n    # >>> closest_integer(\"15.0\")\n    # 16\n    # >>> closest_integer(\"-15.0\")\n    # -16\n    # >>> closest_integer(\"15.1\")\n    # 16\n    # >>> closest_integer(\"-15.1\")\n    # -16\n    # >>> closest_integer(\"15.2\")\n    # 16\n    # >>> closest_integer(\"-15.2\")\n    # -16\n    # >>> closest_integer(\"15.3\")\n    # 16\n    # >>> closest_integer(\"-15.3\")\n    # -16\n    # >>> closest_integer(\"15.4\")\n    # 16\n    # >>> closest_integer(\"-15.4\")\n    # -16\n    #",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(round(float(value)))",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(value)",
    "    return int(round(float(value)))"
  ],
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ]
}