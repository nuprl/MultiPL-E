name: HumanEval_78_hex_key
language: rb
prompt: "# You have been tasked to write a function that receives \n# a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n# digits that are primes\
  \ (prime number, or a prime, is a natural number \n# greater than 1 that is not\
  \ a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2,\
  \ 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13,\
  \ 17,...\n# So you have to determine a number of the following digits: 2, 3, 5,\
  \ 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is\
  \ always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n\
  # Examples:\n# >>> hex_key.call(\"AB\")\n# 1\n# >>> hex_key.call(\"1077E\")\n# 2\n\
  # >>> hex_key.call(\"ABED1A33\")\n# 4\n# >>> hex_key.call(\"123456789ABCDEF0\")\n\
  # 6\n# >>> hex_key.call(\"2020\")\n# 2\ndef hex_key(num)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_hex_key\n\
  \    candidate = method(:hex_key)\n    assert_equal(1, candidate.call(\"AB\"))\n\
  \    assert_equal(2, candidate.call(\"1077E\"))\n    assert_equal(4, candidate.call(\"\
  ABED1A33\"))\n    assert_equal(2, candidate.call(\"2020\"))\n    assert_equal(6,\
  \ candidate.call(\"123456789ABCDEF0\"))\n    assert_equal(12, candidate.call(\"\
  112233445566778899AABBCCDDEEFF00\"))\n  end\nend\n"
completions: []
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
