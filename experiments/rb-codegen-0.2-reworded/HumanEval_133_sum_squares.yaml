name: HumanEval_133_sum_squares
language: rb
prompt: "# You are given an array of numbers.\n# You need to return the sum of squared\
  \ numbers in the given array,\n# round each element in the array to the upper int(Ceiling)\
  \ first.\n# Examples:\n# >>> lst.call([1.0, 2.0, 3.0])\n# 14\n# >>> lst.call([1.0,\
  \ 4.0, 9.0])\n# 98\n# >>> lst.call([1.0, 3.0, 5.0, 7.0])\n# 84\n# >>> lst.call([1.4,\
  \ 4.2, 0.0])\n# 29\n# >>> lst.call([-2.4, 1.0, 1.0])\n# 6\ndef sum_squares(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_squares\n\
  \    candidate = method(:sum_squares)\n    assert_equal(14, candidate.call([1.0,\
  \ 2.0, 3.0]))\n    assert_equal(14, candidate.call([1.0, 2.0, 3.0]))\n    assert_equal(84,\
  \ candidate.call([1.0, 3.0, 5.0, 7.0]))\n    assert_equal(29, candidate.call([1.4,\
  \ 4.2, 0.0]))\n    assert_equal(6, candidate.call([-2.4, 1.0, 1.0]))\n    assert_equal(10230,\
  \ candidate.call([100.0, 1.0, 15.0, 2.0]))\n    assert_equal(200000000, candidate.call([10000.0,\
  \ 10000.0]))\n    assert_equal(75, candidate.call([-1.4, 4.6, 6.3]))\n    assert_equal(1086,\
  \ candidate.call([-1.4, 17.9, 18.9, 19.9]))\n    assert_equal(0, candidate.call([0.0]))\n\
  \    assert_equal(1, candidate.call([-1.0]))\n    assert_equal(2, candidate.call([-1.0,\
  \ 1.0, 0.0]))\n  end\nend\n"
completions: ['    return sum(map(lambda x: x * x, lst))', '    return sum(map(lambda
    x: int(x * x), lst))', '    return sum(map(lambda x: int(x)**2, lst))', '    return
    sum([int(math.ceil(x))**2 for x in lst])', '    return sum(map(lambda x: int(x
    * x), lst))', '    return sum(map(lambda x: int(x)**2, lst))', '    return sum(map(lambda
    x: int(math.ceil(x*x)) if x != 0 else 0, lst))', '    return sum(map(lambda x:
    int(x * x), lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return
    sum(map(lambda x: int(x * x), lst))', '    return sum(map(lambda x: int(x * x),
    lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return sum(map(lambda
    x: int(math.ceil(x * x)) if x != 0 else 0, lst))', '    return sum(map(lambda
    x: int(x * x), lst))', '    return sum([int(math.ceil(x))**2 for x in lst])',
  '    return sum(map(lambda x: int(math.ceil(x * x)) if x != 0 else 0, lst))', '    return
    sum(map(lambda x: x*x, lst))', '    return sum(map(lambda x: int(math.ceil(x *
    x)) , lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return sum(map(lambda
    x: int(x * x), lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return
    sum(map(lambda x: int(math.ceil(x * x)) if x != 0 else 0, lst))', '    return
    sum(map(lambda x: int(math.ceil(x * x)), lst))', '    return sum(map(lambda x:
    int(math.ceil(x*x)) if x != 0 else 0, lst))', '    return sum([int(math.ceil(x))**2
    for x in lst])', '    return sum(map(lambda x: int(x)**2, lst))', '    return
    sum(map(lambda x: int(x * x), lst))', '    return sum(map(lambda x: int(math.ceil(x
    * x)) if x != 0 else 0, lst))', '    return sum(map(lambda x: int(math.ceil(x
    * x)) if x != 0 else 0, lst))', '    return sum(map(lambda x: int(x)**2, lst))',
  '    return sum(map(lambda x: int(x)**2, lst))', '    return sum(map(lambda x: int(x
    * x), lst))', '    return sum(map(lambda x: x * x, lst))', '    return sum(map(lambda
    x: int(x * x), lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return
    sum(map(lambda x: int(x)**2, lst))', '    return sum(map(lambda x: int(x * x),
    lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return sum(map(lambda
    x: int(x)**2, lst))', '    return sum(map(lambda x: int(math.ceil(x*x)) , lst))',
  '    return sum(map(lambda x: x * x, lst))', '    return sum(map(lambda x: int(math.ceil(x
    * x)), lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return sum(map(lambda
    x: int(x)**2, lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return
    sum(map(lambda x: int(x * x), lst))', '    return sum(map(lambda x: int(x * x),
    lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return sum(map(lambda
    x: int(math.ceil(x * x)) if x != 0 else 0, lst))', '    return sum(map(lambda
    x: int(x * x), lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return
    sum(map(lambda x: int(math.ceil(x*x)) if x != 0 else 0, lst))', '    return sum(map(lambda
    x: int(x)**2, lst))', '    return sum(map(lambda x: int(math.ceil(x * x)), lst))',
  '    return sum(map(lambda x: x * x, lst))', '    return sum(map(lambda x: int(math.ceil(x
    * x)) if x != 0 else 0, lst))', '    return sum([int(math.ceil(x))**2 for x in
    lst])', '    return sum(map(lambda x: int(math.ceil(x * x)) if x != 0 else 0,
    lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return sum(map(lambda
    x: int(x * x), lst))', '    return sum(map(lambda x: int(math.ceil(x * x)), lst))',
  '    return sum(map(lambda x: int(math.ceil(x * x)) if x != 0 else 0, lst))', '    return
    sum([int(math.ceil(x))**2 for x in lst])', '    return sum(map(lambda x: int(math.ceil(x
    * x)) if x != 0 else 0, lst))', '    return sum(map(lambda x: int(math.ceil(x*x))
    , lst))', '    return sum(map(lambda x: int(x)**2, lst))', '    return sum(map(lambda
    x: int(math.ceil(x*x)) if x != 0 else 0, lst))', '    return sum(map(lambda x:
    int(x * x), lst))', '    return sum(map(lambda x: int(x)**2, lst))', '    return
    sum(map(lambda x: int(math.ceil(x * x)) if x != 0 else 0, lst))', '    return
    sum(map(lambda x: int(x)**2, lst))', '    return sum(map(lambda x: x * x, lst))',
  '    return sum(map(lambda x: int(x * x), lst))', '    return sum(map(lambda x:
    int(x * x), lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return
    sum([int(math.ceil(x))**2 for x in lst])', '    return sum(map(lambda x: int(math.ceil(x
    * x)) , lst))', '    return sum(map(lambda x: int(math.ceil(x * x)), lst))', '    return
    sum(map(lambda x: int(math.ceil(x*x)), lst))', '    return sum([x**2 for x in
    lst])', '    return sum(map(lambda x: x * x, lst))', '    return sum(map(lambda
    x: int(x)**2, lst))', '    return sum(map(lambda x: x*x, lst))', '    return sum(map(lambda
    x: int(math.ceil(x * x)) if x != 0 else 0, lst))', '    return sum(map(lambda
    x: x * x, lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return
    sum(map(lambda x: int(x * x), lst))', '    return sum(map(lambda x: x * x, lst))',
  '    return sum(map(lambda x: x*x, lst))', '    return sum(map(lambda x: int(math.ceil(x
    * x)) if x != 0 else 0, lst))', '    return sum(map(lambda x: int(math.ceil(x
    * x)) if x != 0 else 0, lst))', '    return sum(map(lambda x: int(x * x), lst))',
  '    return sum(map(lambda x: int(math.ceil(x * x)) if x != 0 else 0, lst))', '    return
    sum(map(lambda x: x**2, lst))', '    return sum(map(lambda x: int(math.ceil(x*x))
    if x != 0 else 0, lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return
    sum(map(lambda x: int(math.ceil(x * x)) if x != 0 else 0, lst))', '    return
    sum(map(lambda x: int(x * x), lst))', '    return sum(map(lambda x: int(math.ceil(x*x))
    if x != 0 else 0, lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return
    sum(map(lambda x: x * x, lst))', '    return sum(map(lambda x: int(x * x), lst))',
  '    return sum(map(lambda x: x * x, lst))', '    return sum(map(lambda x: int(x
    * x), lst))', '    return sum(map(lambda x: int(math.ceil(x*x)) if x != 0 else
    0, lst))', '    return sum(map(lambda x: int(x)**2, lst))', '    return sum(map(lambda
    x: int(x * x), lst))', '    return sum(map(lambda x: int(math.ceil(x ** 2)), lst))',
  '    return sum(map(lambda x: int(x)**2, lst))', '    return sum(map(lambda x: int(x
    * x), lst))', '    return sum(map(lambda x: int(math.ceil(x * x)) if x != 0 else
    0, lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return sum(map(lambda
    x: int(x)**2, lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return
    sum(map(lambda x: int(x * x), lst))', '    return sum(map(lambda x: int(x)**2,
    lst))', '    return sum(map(lambda x: x*x, lst))', '    return sum(map(lambda
    x: int(x)**2, lst))', '    return sum([int(math.ceil(x)) ** 2 for x in lst])',
  '    return sum(map(lambda x: int(x * x), lst))', '    return sum(map(lambda x:
    x**2, lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return sum(map(lambda
    x: int(math.ceil(x * x)) if x != 0 else 0, lst))', '    return sum([int(round(x**2))
    for x in lst])', '    return sum(map(lambda x: x**2, lst))', '    return sum(map(lambda
    x: int(math.ceil(x*x)) if x != 0 else 0, lst))', '    return sum(map(lambda x:
    int(x * x), lst))', '    return sum(map(lambda x: x * x, lst))', '    return sum(map(lambda
    x: int(x * x), lst))', '    return sum(map(lambda x: int(math.ceil(x * x)) if
    x != 0 else 0, lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return
    sum(map(lambda x: int(math.ceil(x * x)), lst))', '    return sum(map(lambda x:
    int(x * x), lst))', '    return sum(map(lambda x: int(x)**2, lst))', '    return
    sum(map(lambda x: int(x)**2, lst))', '    return sum(map(lambda x: int(math.ceil(x
    * x)) if x != 0 else 0, lst))', '    return sum(map(lambda x: int(math.ceil(x
    ** 2)), lst))', '    return sum(map(lambda x: int(math.ceil(x * x)) if x != 0
    else 0, lst))', '    return sum(map(lambda x: x**2, lst))', '    return sum(map(lambda
    x: int(x * x), lst))', '    return sum(map(lambda x: int(x)**2, lst))', '    return
    sum(map(lambda x: int(math.ceil(x * x)), lst))', '    return sum(map(lambda x:
    x * x, lst))', '    return sum(map(lambda x: int(math.ceil(x * x)), lst))', '    return
    sum(map(lambda x: int(x * x), lst))', '    return sum(map(lambda x: int(x * x),
    lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return sum(map(lambda
    x: x * x, lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return
    sum(map(lambda x: int(x * x), lst))', '    return sum(map(lambda x: x**2, lst))',
  '    return sum(map(lambda x: int(math.ceil(x * x)) if x != 0 else 0, lst))', '    return
    sum(map(lambda x: int(x * x), lst))', '    return sum(map(lambda x: int(x)**2,
    lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return sum(map(lambda
    x: int(math.ceil(x * x)), lst))', '    return sum(map(lambda x: int(math.ceil(x*x))
    if x != 0 else 0, lst))', '    return sum(map(lambda x: int(math.ceil(x * x))
    if x != 0 else 0, lst))', '    return sum(map(lambda x: int(math.ceil(x * x))
    if x != 0 else 0, lst))', '    return sum(map(lambda x: int(x)**2, lst))', '    return
    sum([int(math.ceil(x))**2 for x in lst])', '    return sum(map(lambda x: int(x)**2,
    lst))', '    return sum(map(lambda x: int(math.ceil(x*x)) if x != 0 else 0, lst))',
  '    return sum(map(lambda x: int(x * x), lst))', '    return sum([int(math.ceil(x))**2
    for x in lst])', '    return sum(map(lambda x: int(math.ceil(x * x)), lst))',
  '    return sum(map(lambda x: x*x, lst))', '    return sum(map(lambda x: int(x *
    x), lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return sum([int(math.ceil(x))
    ** 2 for x in lst])', '    return sum(map(lambda x: int(math.ceil(x * x)) if x
    != 0 else 0, lst))', '    return sum([int(round(x**2)) for x in lst])', '    return
    sum(map(lambda x: x**2, lst))', '    return sum(map(lambda x: int(math.ceil(x
    * x)) if x != 0 else 0, lst))', '    return sum(map(lambda x: int(math.ceil(x
    ** 2)), lst))', '    return sum(map(lambda x: x * x, lst))', '    return sum(map(lambda
    x: int(math.ceil(x * x)), lst))', '    return sum(map(lambda x: int(x)**2, lst))',
  '    return sum(map(lambda x: int(x * x), lst))', '    return sum(map(lambda x:
    int(math.ceil(x * x)), lst))', '    return sum(map(lambda x: int(x * x), lst))',
  '    return sum(map(lambda x: int(x)**2, lst))', '    return sum(map(lambda x: int(x)**2,
    lst))', '    return sum(map(lambda x: x * x, lst))', '    return sum(map(lambda
    x: int(x)**2, lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return
    sum(map(lambda x: int(x * x), lst))', '    return sum(map(lambda x: int(math.ceil(x*x))
    if x != 0 else 0, lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return
    sum(map(lambda x: int(x * x), lst))', '    return sum(map(lambda x: int(math.ceil(x
    * x)) if x != 0 else 0, lst))', '    return sum(map(lambda x: int(math.ceil(x*x)),
    lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return sum([int(math.ceil(x))**2
    for x in lst])', '    return sum(map(lambda x: x * x, lst))', '    return sum(map(lambda
    x: x*x, lst))', '    return sum(map(lambda x: int(math.ceil(x * x)) if x != 0
    else 0, lst))', '    return sum(map(lambda x: int(math.ceil(x * x)) if x != 0
    else 0, lst))', '    return sum(map(lambda x: int(x * x), lst))', '    return
    sum(map(lambda x: int(x)**2, lst))']
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
