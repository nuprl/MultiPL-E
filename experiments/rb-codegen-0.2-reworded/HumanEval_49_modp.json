{
  "name": "HumanEval_49_modp",
  "language": "rb",
  "prompt": "# Return 2^n modulo p (be aware of numerics).\n# >>> modp.call(3, 5)\n# 3\n# >>> modp.call(1101, 101)\n# 2\n# >>> modp.call(0, 101)\n# 1\n# >>> modp.call(3, 11)\n# 8\n# >>> modp.call(100, 101)\n# 1\ndef modp(n, p)\n",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_modp\n    candidate = method(:modp)\n    assert_equal(3, candidate.call(3, 5))\n    assert_equal(2, candidate.call(1101, 101))\n    assert_equal(1, candidate.call(0, 101))\n    assert_equal(8, candidate.call(3, 11))\n    assert_equal(1, candidate.call(100, 101))\n    assert_equal(4, candidate.call(30, 5))\n    assert_equal(3, candidate.call(31, 5))\n  end\nend\n",
  "completions": [
    "    if n < 0:\n        return 0\n    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    return pow(2, n, p)",
    "    if n < 0:\n        n = n % p\n    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    if p == 0:\n        return 1\n    if n == 0:\n        return 0\n    return (p * modp(n // p, p) % p) % p",
    "    if n == 0:\n        return 1\n    return pow(2, n, p)",
    "    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    if n == 0:\n        return 1\n    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    if n == 0:\n        return 1\n    else:\n        return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    if p < 0:\n        p = -p\n    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    if n < 0:\n        n = n % p\n    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    if n < 0:\n        return 0\n    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    if n == 0:\n        return 1\n    return pow(2, n, p)",
    "    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    if n < 0:\n        n = n % p\n    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    if n < 0:\n        n = n % p\n    if n < 0:\n        n += p\n    return n",
    "    return pow(2, n, p)",
    "    if n == 0:\n        return 1\n    return pow(2, n, p)",
    "    if n == 0:\n        return 1\n    else:\n        return pow(2, n, p)",
    "    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    if n == 0:\n        return 1\n    else:\n        return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    if n < 0:\n        return 0\n    return pow(2, n, p)",
    "    if n < 0:\n        return n % p\n    return (n * (p - 1) + p) % p",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    if n < 0:\n        return 0\n    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    if n < 0:\n        return n % p\n    return (n * (p - 1)) % p",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    if n == 0:\n        return 1\n    else:\n        return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    if n < 0:\n        n = n % p\n    if n < 0:\n        n += p\n    return n",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    if n == 0:\n        return 1\n    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    if n == 0:\n        return 1\n    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    if n == 0:\n        return 1\n    return (2 ** n) % p",
    "    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    return pow(2, n, p)",
    "    return pow(2, n, p)",
    "    if n < 0:\n        n = n % p\n    return pow(2, n, p)",
    "    return pow(2, n, p)"
  ],
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ]
}