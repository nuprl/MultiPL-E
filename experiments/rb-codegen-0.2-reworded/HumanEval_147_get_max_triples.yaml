name: HumanEval_147_get_max_triples
language: rb
prompt: "# You are given a positive integer n. You have to create an integer array\
  \ a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i\
  \ - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j <\
  \ k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# >>> get_max_triples.call(5)\n\
  # 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7,\
  \ 13).\ndef get_max_triples(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_max_triples\n\
  \    candidate = method(:get_max_triples)\n    assert_equal(1, candidate.call(5))\n\
  \    assert_equal(4, candidate.call(6))\n    assert_equal(36, candidate.call(10))\n\
  \    assert_equal(53361, candidate.call(100))\n  end\nend\n"
completions: ['    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', "    a\
    \ = [1] * n\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1,\
    \ n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] +\
    \ a[k]) % 3 == 0:\n                    count += 1\n    return count", '    return
    sum(i * i - i + 1 for i in range(1, n + 1)) / 3', "    a = [1] * n\n    for i\
    \ in range(1, n):\n        a[i] = i * i - i + 1\n    return sum(a[i] + a[j] +\
    \ a[k] for i in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n))\
    \ // 3", '    return sum(i * i - i + 1 for i in range(1, n + 1)) // 3', "    a\
    \ = [1] * n\n    for i in range(1, n):\n        a[i] = i * i - i + 1\n    return\
    \ sum(a[i] + a[j] + a[k] for i in range(1, n) for j in range(i+1, n) for k in\
    \ range(j+1, n)) // 3", "    a = [1] * n\n    for i in range(1, n):\n        a[i]\
    \ = i * i - i + 1\n    return sum(a[i] + a[j] + a[k] for i in range(1, n) for\
    \ j in range(i + 1, n) for k in range(j + 1, n)) // 3", '    return sum(i * i
    - i + 1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for i in
    range(1, n + 1)) / 3', "    a = [1] * n\n    for i in range(1, n):\n        a[i]\
    \ = i * i - i + 1\n    return sum(a[i] + a[j] + a[k] for i in range(1, n) for\
    \ j in range(i, n) for k in range(j, n)) // 3", '    return sum(i * i - i + 1
    for i in range(1, n + 1)) // 3', '    return sum(i * i - i + 1 for i in range(1,
    n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return
    sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i +
    1 for i in range(1, n + 1)) // 3', '    return sum(i * i - i + 1 for i in range(1,
    n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', " \
    \   a = [1] * n\n    for i in range(1, n):\n        a[i] = i * i - i + 1\n   \
    \ return sum(a[i] + a[j] + a[k] for i in range(1, n) for j in range(i + 1, n)\
    \ for k in range(j + 1, n)) // 3", '    return sum(i * i - i + 1 for i in range(1,
    n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1, n + 1)) // 3', '    return
    sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i +
    1 for i in range(1, n + 1)) / 3', "    a = [1] * n\n    count = 0\n    for i in\
    \ range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1,\
    \ n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                   \
    \ count += 1\n    return count", '    return sum(i * i - i + 1 for i in range(1,
    n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return
    sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i +
    1 for i in range(1, n + 1)) // 3', "    a = [1] * n\n    for i in range(1, n):\n\
    \        a[i] = i * i - i + 1\n    return sum(a[i] + a[j] + a[k] for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n)) / 3", "    a = [1] * n\n\
    \    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n \
    \           for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) %\
    \ 3 == 0:\n                    count += 1\n    return count", '    return sum(i
    * i - i + 1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for
    i in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1, n
    + 1)) / 3', "    a = [1] * n\n    for i in range(1, n):\n        a[i] = i * i\
    \ - i + 1\n    return sum(a[i] + a[j] + a[k] for i in range(1, n) for j in range(i\
    \ + 1, n) for k in range(j + 1, n)) // 3", '    return sum(i * i - i + 1 for i
    in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1, n +
    1)) // 3', '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', "   \
    \ a = [1] * n\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1,\
    \ n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] +\
    \ a[k]) % 3 == 0:\n                    count += 1\n    return count", '    return
    sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i +
    1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1,
    n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1, n + 1)) // 3', " \
    \   a = [1] * n\n    for i in range(1, n):\n        a[i] = i * i - i + 1\n   \
    \ return sum(a[i] + a[j] + a[k] for i in range(1, n) for j in range(i + 1, n)\
    \ for k in range(j + 1, n)) / 3", '    return sum(i * i - i + 1 for i in range(1,
    n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return
    sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i +
    1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1,
    n + 1)) // 3', "    a = [1] * n\n    for i in range(1, n):\n        a[i] = i *\
    \ i - i + 1\n    return sum(a[i] + a[j] + a[k] for i in range(1, n) for j in range(i\
    \ + 1, n) for k in range(j + 1, n)) // 3", '    return sum(i * i - i + 1 for i
    in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1, n +
    1)) // 3', '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', "   \
    \ a = [1] * n\n    count = 0\n    for i in range(1, n):\n        for j in range(i\
    \ + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] +\
    \ a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", '    return
    sum(i * i - i + 1 for i in range(1, n + 1)) // 3', "    a = [1] * n\n    for i\
    \ in range(1, n):\n        a[i] = i * i - i + 1\n    return sum(a[i] + a[j] +\
    \ a[k] for i in range(1, n) for j in range(i, n) for k in range(j, n)) / 3", '    return
    sum([i * i - i + 1 for i in range(1, n + 1)]) // 3', '    return sum(i * i - i
    + 1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1,
    n + 1)) // 3', '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return
    sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i +
    1 for i in range(1, n + 1)) / 3', "    a = [1] * n\n    count = 0\n    for i in\
    \ range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j\
    \ + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n              \
    \      count += 1\n    return count", '    return sum(i * i - i + 1 for i in range(1,
    n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return
    sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i +
    1 for i in range(1, n + 1)) / 3', "    a = [1] * n\n    count = 0\n    for i in\
    \ range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j\
    \ + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                \
    \    count += 1\n    return count", '    return sum(i * i - i + 1 for i in range(1,
    n + 1)) / 3', "    a = [1] * n\n    count = 0\n    for i in range(1, n):\n   \
    \     for j in range(i+1, n):\n            for k in range(j+1, n):\n         \
    \       if a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) and a[i] + a[j] + a[k]\
    \ % 3 == 0:\n                    count += 1\n    return count", '    return sum(i
    * i - i + 1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for
    i in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1, n
    + 1)) / 3', "    a = [1] * n\n    count = 0\n    for i in range(1, n):\n     \
    \   for j in range(i + 1, n):\n            for k in range(j + 1, n):\n       \
    \         if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\
    \    return count", '    return sum(i * i - i + 1 for i in range(1, n + 1)) /
    3', '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return
    sum(i * i - i + 1 for i in range(1, n + 1)) / 3', "    a = [1] * n\n    for i\
    \ in range(1, n):\n        a[i] = i * i - i + 1\n    return sum(a[i] + a[j] +\
    \ a[k] for i in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n))\
    \ // 3", '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return
    sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i +
    1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1,
    n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return
    sum(i * i - i + 1 for i in range(1, n + 1)) / 3', "    a = [1] * n\n    count\
    \ = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n        \
    \    for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] == 3 * (a[i]\
    \ + a[j] + a[k]) and a[i] + a[j] + a[k] > 0:\n                    count += 1\n\
    \    return count", '    return sum(i * i - i + 1 for i in range(1, n + 1)) /
    3', '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', "    a = [1]\
    \ * n\n    for i in range(1, n):\n        a[i] = i * i - i + 1\n    return sum(a[i]\
    \ + a[j] + a[k] for i in range(1, n) for j in range(i + 1, n) for k in range(j\
    \ + 1, n)) // 3", "    a = [1] * n\n    for i in range(1, n):\n        a[i] =\
    \ i * i - i + 1\n    return sum(a[i] + a[j] + a[k] for i in range(1, n) for j\
    \ in range(i + 1, n) for k in range(j + 1, n)) // 3", "    a = [1] * n\n    for\
    \ i in range(1, n):\n        a[i] = i * i - i + 1\n    return sum(a[i] + a[j]\
    \ + a[k] for i in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n))\
    \ // 3", '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return
    sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i +
    1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1,
    n + 1)) / 3', "    a = [1] * n\n    for i in range(1, n):\n        a[i] = i *\
    \ i - i + 1\n    return sum(a[i] + a[j] + a[k] for i in range(1, n) for j in range(i+1,\
    \ n) for k in range(j+1, n)) / 3", '    return sum(i * i - i + 1 for i in range(1,
    n + 1)) / 3', '    return sum(i*i-i+1 for i in range(1,n+1))//3', '    return
    sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return sum(i*i-i+1 for
    i in range(1,n+1))//3', '    return sum(i * i - i + 1 for i in range(1, n + 1))
    / 3', '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return
    sum(i * i - i + 1 for i in range(1, n + 1)) / 3', "    a = [1] * n\n    cnt =\
    \ 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n          \
    \  for k in range(j + 1, n):\n                if i * i - i + 1 == j * j - j +\
    \ 1 == k * k - k + 1 and i + j + k % 3 == 0:\n                    cnt += 1\n \
    \                   a[i], a[j], a[k] = i, j, k\n    return cnt", '    return sum(i
    * i - i + 1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for
    i in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1, n
    + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1, n + 1)) // 3', '    return
    sum(i * i - i + 1 for i in range(1, n + 1)) // 3', '    return sum(i * i - i +
    1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1,
    n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return
    sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i +
    1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1,
    n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return
    sum(i * i - i + 1 for i in range(1, n + 1)) // 3', '    return sum(i * i - i +
    1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1,
    n + 1)) / 3', "    a = [1] * n\n    count = 0\n    for i in range(1, n):\n   \
    \     for j in range(i + 1, n):\n            for k in range(j + 1, n):\n     \
    \           if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\
    \    return count", '    return sum(i * i - i + 1 for i in range(1, n + 1)) //
    3', "    a = [1] * n\n    count = 0\n    for i in range(1, n):\n        for j\
    \ in range(i + 1, n):\n            for k in range(j + 1, n):\n               \
    \ if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return\
    \ count", '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return
    sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i +
    1 for i in range(1, n + 1)) // 3', "    a = [1] * n\n    for i in range(1, n):\n\
    \        a[i] = i * i - i + 1\n    return sum(a[i] + a[j] + a[k] for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n)) / 3", '    return sum(i
    * i - i + 1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for
    i in range(1, n + 1)) / 3', "    a = [1] * n\n    count = 0\n    for i in range(1,\
    \ n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n\
    \                if i*i + j*j + k*k == 3*n:\n                    count += 1\n\
    \    return count", '    return sum(i * i - i + 1 for i in range(1, n + 1)) /
    3', "    a = [1] * n\n    for i in range(1, n):\n        a[i] = i * i - i + 1\n\
    \    return sum(a[i] + a[j] + a[k] for i in range(1, n) for j in range(i, n) for\
    \ k in range(j, n)) // 3", "    a = [1] * n\n    for i in range(1, n):\n     \
    \   a[i] = i * i - i + 1\n    return sum(a[i] + a[j] + a[k] for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n)) // 3", '    return sum(i
    * i - i + 1 for i in range(1, n + 1)) / 3', "    a = [1] * n\n    count = 0\n\
    \    for i in range(1, n):\n        for j in range(i+1, n):\n            for k\
    \ in range(j+1, n):\n                if i*i + j*j == k*k + 1:\n              \
    \      a[i] += a[j] + a[k]\n                    count += 1\n    return count",
  '    return sum(i * i - i + 1 for i in range(1, n + 1)) // 3', '    return sum(i
    * i - i + 1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for
    i in range(1, n + 1)) // 3', '    return sum(i * i - i + 1 for i in range(1, n
    + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', "  \
    \  a = [1] * n\n    c = 0\n    for i in range(1, n):\n        for j in range(i\
    \ + 1, n):\n            for k in range(j + 1, n):\n                if i * i -\
    \ i + 1 == k * k - k + 1 and i * i - i + 1 == j * j - j + 1:\n               \
    \     a[i], a[j], a[k] = i, j, k\n                    c += 1\n    return c", " \
    \   a = [1] * n\n    for i in range(1, n):\n        a[i] = i * i - i + 1\n   \
    \ return sum(a[i] + a[j] + a[k] for i in range(1, n) for j in range(i + 1, n)\
    \ for k in range(j + 1, n)) // 3", "    a = [1] * n\n    for i in range(1, n):\n\
    \        a[i] = i * i - i + 1\n    return sum(a[i] + a[j] + a[k] for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n)) // 3", '    return sum(i
    * i - i + 1 for i in range(1, n + 1)) / 3', "    a = [1] * n\n    count = 0\n\
    \    for i in range(1, n):\n        for j in range(i + 1, n):\n            for\
    \ k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n \
    \                   count += 1\n    return count", '    return sum(i * i - i +
    1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1,
    n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return
    sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i +
    1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1,
    n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return
    sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i +
    1 for i in range(1, n + 1)) // 3', '    return sum([i * i - i + 1 for i in range(1,
    n + 1)]) // 3', '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3',
  '    return sum(i * i - i + 1 for i in range(1, n + 1)) // 3', '    return sum(i
    * i - i + 1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for
    i in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1, n
    + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return
    sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i +
    1 for i in range(1, n + 1)) / 3', "    a = [1] * n\n    for i in range(1, n):\n\
    \        a[i] = i * i - i + 1\n    return sum(a[i] + a[j] + a[k] for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n)) // 3", "    a = [1] *\
    \ n\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n\
    \            for k in range(j + 1, n):\n                if i * i - i + 1 == j\
    \ * j - j + 1 == k * k - k + 1 and i + j + k % 3 == 0:\n                    count\
    \ += 1\n                    a[i], a[j], a[k] = i, j, k\n    return count", " \
    \   a = [1] * n\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1,\
    \ n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] +\
    \ a[k]) % 3 == 0:\n                    count += 1\n    return count", '    return
    sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i +
    1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1,
    n + 1)) / 3', "    a = [1] * n\n    for i in range(1, n):\n        a[i] = i *\
    \ i - i + 1\n    return sum(a[i] + a[j] + a[k] for i in range(1, n) for j in range(i+1,\
    \ n) for k in range(j+1, n)) // 3", "    a = [1] * n\n    for i in range(1, n):\n\
    \        a[i] = i * i - i + 1\n    return sum(a[i] + a[j] + a[k] for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n)) // 3", '    return sum(i
    * i - i + 1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for
    i in range(1, n + 1)) / 3', "    a = [1] * n\n    count = 0\n    for i in range(1,\
    \ n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n\
    \                if a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) and a[i] +\
    \ a[j] + a[k] > 0:\n                    count += 1\n    return count", "    a\
    \ = [1] * n\n    for i in range(1, n):\n        a[i] = i * i - i + 1\n    return\
    \ sum(a[i] + a[j] + a[k] for i in range(1, n) for j in range(i + 1, n) for k in\
    \ range(j + 1, n)) // 3", '    return sum(i * i - i + 1 for i in range(1, n +
    1)) // 3', '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', "   \
    \ a = [1] * n\n    for i in range(1, n):\n        a[i] = i * i - i + 1\n    return\
    \ sum(a[i] + a[j] + a[k] for i in range(1, n) for j in range(i + 1, n) for k in\
    \ range(j + 1, n)) / 3", '    return sum(i * i - i + 1 for i in range(1, n + 1))
    / 3', "    a = [1] * n\n    for i in range(1, n):\n        a[i] = i * i - i +\
    \ 1\n    return sum(a[i] + a[j] + a[k] for i in range(1, n) for j in range(i +\
    \ 1, n) for k in range(j + 1, n)) // 3", "    a = [1] * n\n    for i in range(1,\
    \ n):\n        a[i] = i * i - i + 1\n    return sum(a[i] + a[j] + a[k] for i in\
    \ range(1, n) for j in range(i + 1, n) for k in range(j + 1, n)) / 3", '    return
    sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return sum(i * i - i +
    1 for i in range(1, n + 1)) / 3', '    return sum([i * i - i + 1 for i in range(1,
    n + 1)]) // 3', '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3',
  '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', "    a = [1] * n\n\
    \    for i in range(1, n):\n        a[i] = i * i - i + 1\n    return sum(a[i]\
    \ + a[j] + a[k] for i in range(1, n) for j in range(i+1, n) for k in range(j+1,\
    \ n)) // 3", '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return
    sum(i * i - i + 1 for i in range(1, n + 1)) / 3', "    a = [1] * n\n    for i\
    \ in range(1, n):\n        a[i] = i * i - i + 1\n    return sum(a[i] + a[j] +\
    \ a[k] for i in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n))\
    \ // 3", '    return sum(i * i - i + 1 for i in range(1, n + 1)) // 3', '    return
    sum(i * i - i + 1 for i in range(1, n + 1)) / 3', "    a = [1] * n\n    for i\
    \ in range(1, n):\n        a[i] = i * i - i + 1\n    return sum(a[i] + a[j] +\
    \ a[k] for i in range(1, n) for j in range(i, n) for k in range(j, n)) // 3",
  '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', '    return sum(i
    * i - i + 1 for i in range(1, n + 1)) // 3', '    return sum(i * i - i + 1 for
    i in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1, n
    + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1, n + 1)) / 3', "  \
    \  a = [1] * n\n    for i in range(1, n):\n        a[i] = i * i - i + 1\n    return\
    \ sum(a[i] + a[j] + a[k] for i in range(1, n) for j in range(i + 1, n) for k in\
    \ range(j + 1, n)) // 3", '    return sum(i * i - i + 1 for i in range(1, n +
    1)) / 3', "    a = [1] * n\n    for i in range(1, n):\n        a[i] = i * i -\
    \ i + 1\n    return sum(a[i] + a[j] + a[k] for i in range(1, n) for j in range(i\
    \ + 1, n) for k in range(j + 1, n)) // 3", '    return sum(i * i - i + 1 for i
    in range(1, n + 1)) / 3', '    return sum(i * i - i + 1 for i in range(1, n +
    1)) / 3', '    return sum(i * i - i + 1 for i in range(1, n + 1)) // 3']
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
