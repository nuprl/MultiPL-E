name: HumanEval_20_find_closest_elements
language: rb
prompt: "# From a supplied array of numbers (of length at least two) select and return\
  \ two that are the closest to each\n# other and return them in order (smaller number,\
  \ larger number).\n# >>> find_closest_elements.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  # [2.0, 2.2]\n# >>> find_closest_elements.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
  # [2.0, 2.0]\ndef find_closest_elements(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
  \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0,\
  \ 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0,\
  \ 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0,\
  \ 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2,\
  \ 3.1, 4.1, 5.1]))\n  end\nend\n"
completions: ["    if len(numbers) < 2:\n        return numbers\n    else:\n     \
    \   return sorted(numbers)[0], sorted(numbers)[1]", "    if len(numbers) < 2:\n\
    \        return numbers\n    else:\n        return sorted(numbers)[0], sorted(numbers)[-1]",
  "    if len(numbers) < 2:\n        return numbers\n    else:\n        min_diff =\
    \ numbers[0] - numbers[1]\n        min_index = 0\n        for i in range(1, len(numbers)):\n\
    \            diff = numbers[i] - numbers[i-1]\n            if diff < min_diff:\n\
    \                min_diff = diff\n                min_index = i\n        return\
    \ [numbers[min_index], numbers[(min_index + 1) % len(numbers)]]", "    if len(numbers)\
    \ < 2:\n        return None\n    min_diff = numbers[0] - numbers[1]\n    min_index\
    \ = 0\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n\
    \        if diff < min_diff:\n            min_diff = diff\n            min_index\
    \ = i\n    return [numbers[min_index], numbers[(min_index+1)%len(numbers)]]",
  "    if len(numbers) < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    if len(numbers) < 2:\n        return numbers\n   \
    \ else:\n        return sorted(numbers)[0], sorted(numbers)[1]", "    if len(numbers)\
    \ < 2:\n        return None\n    min_diff = float('inf')\n    min_index = 0\n\
    \    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n\
    \            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n\
    \                min_diff = diff\n                min_index = (i, j)\n    return\
    \ [numbers[min_index[0]], numbers[min_index[1]]]", "    if len(numbers) < 2:\n\
    \        return numbers\n    else:\n        return sorted(numbers)[0], sorted(numbers)[1]",
  "    if len(numbers) < 2:\n        return None\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[-1]", "    if len(numbers) < 2:\n        return numbers\n  \
    \  min_diff = numbers[0] - numbers[1]\n    min_diff_index = 0\n    for i in range(1,\
    \ len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff <\
    \ min_diff:\n            min_diff = diff\n            min_diff_index = i\n   \
    \ return [numbers[min_diff_index], numbers[(min_diff_index + 1) % len(numbers)]]",
  "    if len(numbers) < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", '    return sorted(numbers)[0], sorted(numbers)[-1]', " \
    \   if len(numbers) < 2:\n        return numbers\n    else:\n        min_diff\
    \ = abs(numbers[0] - numbers[1])\n        for i in range(2, len(numbers)):\n \
    \           diff = abs(numbers[i] - numbers[i-1])\n            if diff < min_diff:\n\
    \                min_diff = diff\n                min_index = i\n        return\
    \ [numbers[min_index], numbers[(min_index + 1) % len(numbers)]]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    min_diff = numbers[0] - numbers[1]\n    min_index\
    \ = 0\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i\
    \ - 1]\n        if diff < min_diff:\n            min_diff = diff\n           \
    \ min_index = i\n    return [numbers[min_index], numbers[(min_index + 1) % len(numbers)]]",
  "    if len(numbers) < 2:\n        return numbers\n    else:\n        min_diff =\
    \ abs(numbers[0] - numbers[1])\n        min_index = 0\n        for i in range(1,\
    \ len(numbers)):\n            diff = abs(numbers[i] - numbers[min_index])\n  \
    \          if diff < min_diff:\n                min_diff = diff\n            \
    \    min_index = i\n        return [numbers[min_index], numbers[min_index + 1]]",
  '    return sorted(numbers)[0], sorted(numbers)[-1]', "    if len(numbers) < 2:\n\
    \        raise ValueError(\"Input array must contain at least two elements\")\n\
    \    min_diff = float(\"inf\")\n    min_index = 0\n    for i in range(len(numbers)):\n\
    \        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n\
    \                min_index = i\n                min_index2 = j\n    return [numbers[min_index],\
    \ numbers[min_index2]]", "    if len(numbers) < 2:\n        return numbers\n \
    \   min_diff = float('inf')\n    min_index = 0\n    for i in range(len(numbers)):\n\
    \        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n\
    \                min_index = i\n                min_index2 = j\n    return [numbers[min_index],\
    \ numbers[min_index2]]", "    if len(numbers) < 2:\n        return numbers\n \
    \   else:\n        return sorted(numbers)[0], sorted(numbers)[1]", '    return
    sorted(numbers)[0], sorted(numbers)[-1]', "    if len(numbers) < 2:\n        return\
    \ numbers\n    else:\n        return sorted(numbers)[0], sorted(numbers)[-1]",
  "    if len(numbers) < 2:\n        return None\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    if len(numbers) < 2:\n        return numbers\n   \
    \ else:\n        return sorted(numbers)[0], sorted(numbers)[1]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", '    return sorted(numbers)[0], sorted(numbers)[-1]', " \
    \   if len(numbers) < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    if len(numbers) < 2:\n        return numbers\n   \
    \ else:\n        min_number = min(numbers)\n        min_index = numbers.index(min_number)\n\
    \        max_number = max(numbers)\n        max_index = numbers.index(max_number)\n\
    \        if min_index == max_index:\n            return [min_number, max_number]\n\
    \        else:\n            return [numbers[min_index], numbers[max_index]]",
  "    if len(numbers) < 2:\n        return None\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    if len(numbers) < 2:\n        return numbers\n   \
    \ else:\n        return sorted(numbers)[0], sorted(numbers)[1]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    # Sort the array\n    numbers.sort()", "    if len(numbers)\
    \ < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", '    return sorted(numbers)[0], sorted(numbers)[-1]', " \
    \   if len(numbers) < 2:\n        return numbers\n    min_diff = numbers[0] -\
    \ numbers[1]\n    min_diff_index = 0\n    for i in range(1, len(numbers)):\n \
    \       diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n      \
    \      min_diff = diff\n            min_diff_index = i\n    return [numbers[min_diff_index],\
    \ numbers[(min_diff_index + 1) % len(numbers)]]", "    if len(numbers) < 2:\n\
    \        raise ValueError(\"Input array must be at least length 2\")\n    min_diff\
    \ = float(\"inf\")\n    min_index = 0\n    for i in range(len(numbers)):\n   \
    \     for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n\
    \                min_index = i\n                min_index2 = j\n    return [numbers[min_index],\
    \ numbers[min_index2]]", "    # Sort the array\n    numbers.sort()", "    if len(numbers)\
    \ < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    if len(numbers) < 2:\n        return numbers\n   \
    \ min_diff = numbers[0] - numbers[1]\n    min_index = 0\n    for i in range(1,\
    \ len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff\
    \ < min_diff:\n            min_diff = diff\n            min_index = i\n    return\
    \ [numbers[min_index], numbers[(min_index + 1) % len(numbers)]]", "    if len(numbers)\
    \ < 2:\n        return None\n    else:\n        return sorted(numbers)[0], sorted(numbers)[1]",
  "    if len(numbers) < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    if len(numbers) < 2:\n        return numbers\n   \
    \ else:\n        return sorted(numbers)[0], sorted(numbers)[1]", "    if len(numbers)\
    \ < 2:\n        raise ValueError(\"Need at least two numbers to find closest pair\"\
    )\n    numbers.sort()\n    return [numbers[0], numbers[1]]", "    if len(numbers)\
    \ < 2:\n        return None\n    else:\n        return sorted(numbers)[0], sorted(numbers)[1]",
  "    if len(numbers) < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[-1]", "    # Sort the array\n    numbers.sort()", "    if len(numbers)\
    \ < 2:\n        return numbers\n    min_diff = numbers[0] - numbers[1]\n    min_diff_index\
    \ = 0\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i\
    \ - 1]\n        if diff < min_diff:\n            min_diff = diff\n           \
    \ min_diff_index = i\n    return [numbers[min_diff_index - 1], numbers[min_diff_index]]",
  '    return sorted(numbers)[0], sorted(numbers)[-1]', "    if len(numbers) < 2:\n\
    \        return numbers\n    else:\n        return sorted(numbers)[0], sorted(numbers)[-1]",
  "    if len(numbers) < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[-1]", "    if len(numbers) < 2:\n        raise ValueError(\"\
    Input must be at least two numbers\")\n    return sorted(numbers)[0], sorted(numbers)[-1]",
  "    if len(numbers) < 2:\n        raise ValueError('Input array must have at least\
    \ two elements')\n    \n    min_diff = float('inf')\n    min_index = 0\n    min_value\
    \ = numbers[0]\n    max_index = 0\n    max_value = numbers[0]\n    \n    for i\
    \ in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[0])\n  \
    \      if diff < min_diff:\n            min_diff = diff\n            min_index\
    \ = i\n            min_value = numbers[i]\n        \n        diff = abs(numbers[i]\
    \ - numbers[0])\n        if diff < min_diff:\n            min_diff = diff\n  \
    \          min_index = i\n            min_value = numbers[i]\n        \n     \
    \   diff = abs(numbers[i] - numbers[0])\n        if diff < min_diff:\n       \
    \     min_diff = diff\n            max_index = i\n            max_value = numbers[i]\n\
    \        \n        diff = abs(numbers[i] - numbers[0])\n        if diff < min_diff:\n\
    \            min_diff = diff\n            max_index = i\n            max_value\
    \ = numbers[i]\n    \n    return [min_value, max_value]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", '    return sorted(numbers)[0], sorted(numbers)[-1]', " \
    \   if len(numbers) < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[-1]", "    if len(numbers) < 2:\n        return numbers\n  \
    \  else:\n        return sorted(numbers)[0], sorted(numbers)[1]", '    return
    sorted(numbers)[0], sorted(numbers)[-1]', "    if len(numbers) < 2:\n        return\
    \ numbers\n    else:\n        return sorted(numbers)[0], sorted(numbers)[1]",
  "    if len(numbers) < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", '    return sorted(numbers)[0], sorted(numbers)[-1]', '    return
    sorted(numbers)[0], sorted(numbers)[-1]', "    if len(numbers) < 2:\n        return\
    \ None\n    else:\n        return sorted(numbers)[0], sorted(numbers)[1]", " \
    \   if len(numbers) < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", '    return sorted(numbers)[0], sorted(numbers)[-1]', " \
    \   if len(numbers) < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    if len(numbers) < 2:\n        return numbers\n   \
    \ else:\n        return sorted(numbers)[0], sorted(numbers)[-1]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[-1]", '    return sorted(numbers)[0], sorted(numbers)[-1]',
  '    return sorted(numbers)[0], sorted(numbers)[-1]', '    return sorted(numbers)[0],
    sorted(numbers)[-1]', "    if len(numbers) < 2:\n        return numbers\n    else:\n\
    \        return sorted(numbers)[0], sorted(numbers)[1]", "    if len(numbers)\
    \ < 2:\n        return None\n    min_diff = numbers[0] - numbers[1]\n    min_index\
    \ = 0\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n\
    \        if diff < min_diff:\n            min_diff = diff\n            min_index\
    \ = i\n    return [numbers[min_index], numbers[(min_index + 1) % len(numbers)]]",
  "    if len(numbers) < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[-1]", "    if len(numbers) < 2:\n        return numbers\n  \
    \  else:\n        return sorted(numbers)[0], sorted(numbers)[1]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    if len(numbers) < 2:\n        return numbers\n   \
    \ else:\n        return sorted(numbers)[0], sorted(numbers)[-1]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    min_diff = numbers[0] - numbers[1]\n    min_index\
    \ = 0\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n\
    \        if diff < min_diff:\n            min_diff = diff\n            min_index\
    \ = i\n    return [numbers[min_index], numbers[(min_index + 1) % len(numbers)]]",
  "    if len(numbers) < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    if len(numbers) < 2:\n        return numbers\n   \
    \ else:\n        return sorted(numbers)[0], sorted(numbers)[1]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    if len(numbers) < 2:\n        return None\n    else:\n\
    \        return sorted(numbers)[0], sorted(numbers)[1]", "    # Sort the array\n\
    \    numbers.sort()", "    if len(numbers) < 2:\n        return numbers\n    else:\n\
    \        return sorted(numbers)[0], sorted(numbers)[-1]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    if len(numbers) < 2:\n        return numbers\n   \
    \ min_diff = numbers[0] - numbers[1]\n    min_index = 0\n    min_diff_index =\
    \ 1\n    for i in range(2, len(numbers)):\n        diff = numbers[i] - numbers[i\
    \ - 1]\n        if diff < min_diff:\n            min_diff = diff\n           \
    \ min_index = i\n            min_diff_index = i - 1\n    return [numbers[min_index],\
    \ numbers[min_diff_index]]", "    if len(numbers) < 2:\n        raise ValueError('Array\
    \ must contain at least two elements')\n    \n    min_diff = float('inf')\n  \
    \  min_index = 0\n    min_value = numbers[0]\n    max_index = 0\n    max_value\
    \ = numbers[0]\n    \n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i]\
    \ - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n\
    \            min_index = i\n            min_value = numbers[i]\n        \n   \
    \     if diff > max_diff:\n            max_diff = diff\n            max_index\
    \ = i\n            max_value = numbers[i]\n    \n    return [min_value, max_value]",
  "    if len(numbers) < 2:\n        return None\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[-1]", "    if len(numbers) < 2:\n        return numbers\n  \
    \  else:\n        return sorted(numbers)[0], sorted(numbers)[1]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    if len(numbers) < 2:\n        raise ValueError('Input\
    \ array must contain at least two elements')\n    min_diff = numbers[0] - numbers[1]\n\
    \    min_index = 0\n    for i in range(1, len(numbers)):\n        diff = numbers[i]\
    \ - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n \
    \           min_index = i\n    return [numbers[min_index], numbers[(min_index\
    \ + 1) % len(numbers)]]", '    return sorted(numbers)[0], sorted(numbers)[-1]',
  "    # Sort the array\n    numbers.sort()\n    # Get the first two elements\n  \
    \  first_two = numbers[0:2]\n    # Get the last two elements\n    last_two = numbers[-2:]\n\
    \    # Return the two closest elements\n    return first_two, last_two", "   \
    \ # Sort the array\n    numbers.sort()\n    # Return the two closest elements\n\
    \    return numbers[0], numbers[1]", "    if len(numbers) < 2:\n        return\
    \ numbers\n    else:\n        return sorted(numbers)[0], sorted(numbers)[-1]",
  "    if len(numbers) < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[-1]", "    if len(numbers) < 2:\n        raise ValueError(\"\
    Input array must be at least length 2\")\n    numbers.sort()\n    return numbers[0],\
    \ numbers[1]", "    if len(numbers) < 2:\n        return numbers\n    else:\n\
    \        return sorted(numbers)[0], sorted(numbers)[-1]", '    return sorted(numbers)[0],
    sorted(numbers)[-1]', "    if len(numbers) < 2:\n        return numbers\n    else:\n\
    \        return sorted(numbers)[0], sorted(numbers)[1]", "    # Sort the array\n\
    \    numbers.sort()\n    # Get the first two elements\n    first_two = numbers[0:2]\n\
    \    # Get the last two elements\n    last_two = numbers[-2:]\n    # Return the\
    \ first two elements\n    return first_two + last_two", '    return sorted(numbers)[0],
    sorted(numbers)[-1]', "    if len(numbers) < 2:\n        raise ValueError('Array\
    \ must contain at least two elements')\n    return sorted(numbers)[0], sorted(numbers)[1]",
  "    if len(numbers) < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    if len(numbers) < 2:\n        return numbers\n   \
    \ min_diff = numbers[0] - numbers[1]\n    min_index = 0\n    for i in range(1,\
    \ len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff\
    \ < min_diff:\n            min_diff = diff\n            min_index = i\n    return\
    \ [numbers[min_index], numbers[(min_index + 1) % len(numbers)]]", '    return
    sorted(numbers)[0], sorted(numbers)[-1]', "    if len(numbers) < 2:\n        return\
    \ numbers\n    else:\n        return sorted(numbers)[0], sorted(numbers)[1]",
  '    return sorted(numbers)[0], sorted(numbers)[-1]', '    return sorted(numbers)[0],
    sorted(numbers)[-1]', "    if len(numbers) < 2:\n        return numbers\n    else:\n\
    \        return sorted(numbers)[0], sorted(numbers)[1]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    if len(numbers) < 2:\n        return numbers\n   \
    \ else:\n        return sorted(numbers)[0], sorted(numbers)[-1]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    if len(numbers) < 2:\n        return numbers\n   \
    \ else:\n        return sorted(numbers)[0], sorted(numbers)[-1]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    # Sort the array\n    numbers.sort()\n    # Get the\
    \ first two elements\n    first = numbers[0]\n    second = numbers[1]\n    # Get\
    \ the distance between the first and second\n    distance = abs(first - second)\n\
    \    # Get the distance between the second and the third\n    third = numbers[2]\n\
    \    distance2 = abs(second - third)\n    # If the distance between the first\
    \ and second is less than the distance between the second and the third\n    if\
    \ distance < distance2:\n        # Return the first and second\n        return\
    \ [first, second]\n    # If the distance between the second and third is less\
    \ than the distance between the first and second\n    elif distance2 < distance:\n\
    \        # Return the second and third\n        return [second, third]\n    #\
    \ If the distance between the first and second is equal to the distance between\
    \ the second and third\n    else:\n        # Return the first and second\n   \
    \     return [first, second]", "    if len(numbers) < 2:\n        return numbers\n\
    \    min_diff = numbers[0] - numbers[1]\n    min_index = 0\n    for i in range(1,\
    \ len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff\
    \ < min_diff:\n            min_diff = diff\n            min_index = i\n    return\
    \ [numbers[min_index], numbers[(min_index + 1) % len(numbers)]]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[-1]", "    if len(numbers) < 2:\n        return numbers\n  \
    \  else:\n        return sorted(numbers)[0], sorted(numbers)[1]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    min_diff = numbers[0] - numbers[1]\n    min_index\
    \ = 0\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n\
    \        if diff < min_diff:\n            min_diff = diff\n            min_index\
    \ = i\n    return [numbers[min_index], numbers[(min_index + 1) % len(numbers)]]",
  "    if len(numbers) < 2:\n        raise ValueError('Input array must have at least\
    \ two elements')\n    min_diff = float('inf')\n    min_index = 0\n    max_index\
    \ = 0\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n\
    \            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n\
    \                min_diff = diff\n                min_index = i\n            \
    \    max_index = j\n    return [numbers[min_index], numbers[max_index]]", "  \
    \  if len(numbers) < 2:\n        return None\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    if len(numbers) < 2:\n        return numbers\n   \
    \ else:\n        return sorted(numbers)[0], sorted(numbers)[1]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[-1]", "    if len(numbers) < 2:\n        return None\n    else:\n\
    \        return sorted(numbers)[0], sorted(numbers)[-1]", '    return sorted(numbers)[0],
    sorted(numbers)[-1]', "    # Sort the array\n    numbers.sort()\n    # Initialize\
    \ the minimum and maximum values\n    min_value = numbers[0]\n    max_value =\
    \ numbers[0]\n    # Iterate through the array\n    for number in numbers:\n  \
    \      # If the current value is less than the minimum, set the minimum to it\n\
    \        if number < min_value:\n            min_value = number\n        # If\
    \ the current value is greater than the maximum, set the maximum to it\n     \
    \   if number > max_value:\n            max_value = number\n    # Return the minimum\
    \ and maximum values\n    return [min_value, max_value]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    if len(numbers) < 2:\n        return None\n    else:\n\
    \        return sorted(numbers)[0], sorted(numbers)[-1]", '    return sorted(numbers)[0],
    sorted(numbers)[-1]', "    if len(numbers) < 2:\n        return numbers\n    else:\n\
    \        return sorted(numbers)[0], sorted(numbers)[-1]", '    return sorted(numbers)[0],
    sorted(numbers)[-1]', "    if len(numbers) < 2:\n        return None\n    min_diff\
    \ = float('inf')\n    min_index = 0\n    for i in range(len(numbers)):\n     \
    \   for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] -\
    \ numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n\
    \                min_index = i\n                min_index2 = j\n    return [numbers[min_index],\
    \ numbers[min_index2]]", "    if len(numbers) < 2:\n        return numbers\n \
    \   else:\n        return sorted(numbers)[0], sorted(numbers)[1]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[-1]", "    if len(numbers) < 2:\n        return None\n    else:\n\
    \        return sorted(numbers)[0], sorted(numbers)[-1]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    min_diff = numbers[0] - numbers[1]\n    min_index\
    \ = 0\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i\
    \ - 1]\n        if diff < min_diff:\n            min_diff = diff\n           \
    \ min_index = i\n    return [numbers[min_index], numbers[(min_index + 1) % len(numbers)]]",
  '    return sorted(numbers)[0], sorted(numbers)[-1]', "    if len(numbers) < 2:\n\
    \        return numbers\n    else:\n        return sorted(numbers)[0], sorted(numbers)[1]",
  "    if len(numbers) < 2:\n        return None\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[-1]", "    if len(numbers) < 2:\n        raise ValueError('Input\
    \ array must have at least two elements')\n    numbers.sort()\n    return numbers[0],\
    \ numbers[1]", "    if len(numbers) < 2:\n        return numbers\n    else:\n\
    \        return sorted(numbers)[0], sorted(numbers)[1]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    if len(numbers) < 2:\n        return numbers\n   \
    \ else:\n        return sorted(numbers)[0], sorted(numbers)[-1]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    if len(numbers) < 2:\n        raise ValueError('Array\
    \ must have at least two elements')\n    min_diff = float('inf')\n    min_index\
    \ = 0\n    min_value = numbers[0]\n    for i in range(1, len(numbers)):\n    \
    \    diff = abs(numbers[i] - numbers[0])\n        if diff < min_diff:\n      \
    \      min_diff = diff\n            min_index = i\n            min_value = numbers[i]\n\
    \    return [numbers[min_index], numbers[0]]", "    if len(numbers) < 2:\n   \
    \     return None\n    min_diff = float('inf')\n    min_num = None\n    max_num\
    \ = None\n    for num in numbers:\n        diff = abs(num - numbers[0])\n    \
    \    if diff < min_diff:\n            min_diff = diff\n            min_num = num\n\
    \            max_num = numbers[0]\n        elif diff == min_diff:\n          \
    \  min_num = min(min_num, num)\n            max_num = max(max_num, num)\n    return\
    \ [min_num, max_num]", "    if len(numbers) < 2:\n        return None\n    else:\n\
    \        return sorted(numbers)[0], sorted(numbers)[1]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[-1]", "    # Sort the array\n    numbers.sort()\n    # Find\
    \ the two closest numbers\n    return [numbers[0], numbers[1]]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", '    return sorted(numbers)[0], sorted(numbers)[-1]', '    return
    sorted(numbers)[0], sorted(numbers)[-1]', '    return sorted(numbers)[0], sorted(numbers)[-1]',
  "    if len(numbers) < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[-1]", "    if len(numbers) < 2:\n        return numbers\n  \
    \  else:\n        return sorted(numbers)[0], sorted(numbers)[1]", '    return
    sorted(numbers)[0], sorted(numbers)[-1]', "    if len(numbers) < 2:\n        return\
    \ numbers\n    else:\n        return sorted(numbers)[0], sorted(numbers)[1]",
  "    # Sort the array\n    numbers.sort()\n    # Get the first two elements\n  \
    \  first_two = numbers[0:2]\n    # Return the two closest elements\n    return\
    \ first_two", "    if len(numbers) < 2:\n        return None\n    else:\n    \
    \    return sorted(numbers)[0], sorted(numbers)[1]", "    if len(numbers) < 2:\n\
    \        return numbers\n    else:\n        return sorted(numbers)[0], sorted(numbers)[1]",
  "    if len(numbers) < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    if len(numbers) < 2:\n        return numbers\n   \
    \ else:\n        return sorted(numbers)[0], sorted(numbers)[-1]", '    return
    sorted(numbers)[0], sorted(numbers)[-1]', "    if len(numbers) < 2:\n        return\
    \ numbers\n    else:\n        return sorted(numbers)[0], sorted(numbers)[1]",
  '    return sorted(numbers)[0], sorted(numbers)[-1]', "    if len(numbers) < 2:\n\
    \        return numbers\n    else:\n        return sorted(numbers)[0], sorted(numbers)[1]",
  "    if len(numbers) < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    if len(numbers) < 2:\n        return numbers\n   \
    \ min_diff = numbers[0] - numbers[1]\n    min_diff_index = 0\n    for i in range(1,\
    \ len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff\
    \ < min_diff:\n            min_diff = diff\n            min_diff_index = i\n \
    \   return [numbers[min_diff_index], numbers[(min_diff_index + 1) % len(numbers)]]",
  "    if len(numbers) < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    if len(numbers) < 2:\n        raise Exception(\"You\
    \ must supply at least two numbers\")\n    min_diff = float(\"inf\")\n    min_diff_index\
    \ = 0\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n\
    \            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n\
    \                min_diff = diff\n                min_diff_index = i\n    return\
    \ [numbers[min_diff_index], numbers[(min_diff_index + 1) % len(numbers)]]", " \
    \   if len(numbers) < 2:\n        return None\n    else:\n        min_diff = numbers[0]\
    \ - numbers[1]\n        min_index = 0\n        for i in range(1, len(numbers)):\n\
    \            diff = numbers[i] - numbers[i - 1]\n            if diff < min_diff:\n\
    \                min_diff = diff\n                min_index = i\n        return\
    \ [numbers[min_index], numbers[(min_index + 1) % len(numbers)]]", '    return
    sorted(numbers)[0], sorted(numbers)[-1]', "    if len(numbers) < 2:\n        return\
    \ None\n    else:\n        return sorted(numbers)[0], sorted(numbers)[1]", '    return
    sorted(numbers)[0], sorted(numbers)[-1]', "    if len(numbers) < 2:\n        return\
    \ numbers\n    else:\n        return sorted(numbers)[0], sorted(numbers)[1]",
  '    return sorted(numbers)[0], sorted(numbers)[-1]', "    if len(numbers) < 2:\n\
    \        return numbers\n    else:\n        return sorted(numbers)[0], sorted(numbers)[-1]",
  "    if len(numbers) < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[-1]", "    # Sort the array\n    numbers.sort()\n    # Initialize\
    \ the min and max values\n    min = numbers[0]\n    max = numbers[0]\n    # Iterate\
    \ through the array\n    for i in range(1, len(numbers)):\n        # If the current\
    \ value is less than the min, set min to be the current value\n        if numbers[i]\
    \ < min:\n            min = numbers[i]\n        # If the current value is greater\
    \ than the max, set max to be the current value\n        if numbers[i] > max:\n\
    \            max = numbers[i]\n    # Return the two closest values\n    return\
    \ [min, max]", "    if len(numbers) < 2:\n        return None\n    min_diff =\
    \ float('inf')\n    min_index = 0\n    for i in range(len(numbers)):\n       \
    \ for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff:\n                min_diff = diff\n          \
    \      min_index = i\n                min_index2 = j\n    return [numbers[min_index],\
    \ numbers[min_index2]]", "    if len(numbers) < 2:\n        return numbers\n \
    \   min_diff = numbers[0] - numbers[1]\n    min_index = 0\n    for i in range(1,\
    \ len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff\
    \ < min_diff:\n            min_diff = diff\n            min_index = i\n    return\
    \ [numbers[min_index], numbers[(min_index + 1) % len(numbers)]]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    if len(numbers) < 2:\n        return numbers\n   \
    \ else:\n        return sorted(numbers)[0], sorted(numbers)[-1]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", '    return sorted(numbers)[0], sorted(numbers)[-1]', " \
    \   if len(numbers) < 2:\n        return numbers\n    min_diff = float(\"inf\"\
    )\n    min_index = 0\n    max_index = 0\n    for i in range(0, len(numbers)):\n\
    \        diff = abs(numbers[i] - numbers[0])\n        if diff < min_diff:\n  \
    \          min_diff = diff\n            min_index = i\n        diff = abs(numbers[i]\
    \ - numbers[1])\n        if diff < min_diff:\n            min_diff = diff\n  \
    \          max_index = i\n    return [numbers[min_index], numbers[max_index]]",
  "    if len(numbers) < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[-1]", "    if len(numbers) < 2:\n        return numbers\n  \
    \  else:\n        return sorted(numbers)[0], sorted(numbers)[1]", "    # Sort\
    \ the array\n    numbers.sort()\n    # Return the two closest elements\n    return\
    \ numbers[0], numbers[1]", "    if len(numbers) < 2:\n        return numbers\n\
    \    else:\n        return sorted(numbers)[0], sorted(numbers)[1]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", '    return sorted(numbers)[0], sorted(numbers)[-1]', " \
    \   if len(numbers) < 2:\n        return numbers\n    min_diff = numbers[0] -\
    \ numbers[1]\n    min_index = 0\n    for i in range(1, len(numbers)):\n      \
    \  diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n           \
    \ min_diff = diff\n            min_index = i\n    return [numbers[min_index],\
    \ numbers[(min_index + 1) % len(numbers)]]", "    if len(numbers) < 2:\n     \
    \   return numbers\n    min_diff = numbers[0] - numbers[1]\n    min_diff_index\
    \ = 0\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i\
    \ - 1]\n        if diff < min_diff:\n            min_diff = diff\n           \
    \ min_diff_index = i\n    return [numbers[min_diff_index], numbers[(min_diff_index\
    \ + 1) % len(numbers)]]", "    if len(numbers) < 2:\n        return numbers\n\
    \    else:\n        return sorted(numbers)[0], sorted(numbers)[1]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    if len(numbers) < 2:\n        return numbers\n   \
    \ else:\n        return sorted(numbers)[0], sorted(numbers)[-1]", "    # Sort\
    \ the array\n    numbers.sort()\n    # Return the two closest elements\n    return\
    \ numbers[0], numbers[1]", "    if len(numbers) < 2:\n        return None\n  \
    \  else:\n        return sorted(numbers)[0], sorted(numbers)[-1]", "    if len(numbers)\
    \ < 2:\n        return numbers\n    else:\n        return sorted(numbers)[0],\
    \ sorted(numbers)[1]", "    if len(numbers) < 2:\n        return None\n    else:\n\
    \        return sorted(numbers)[0], sorted(numbers)[-1]"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
