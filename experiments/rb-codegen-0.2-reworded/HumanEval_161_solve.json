{
  "name": "HumanEval_161_solve",
  "language": "rb",
  "prompt": "# You are given a string s.\n# if s[i] is a letter, reverse its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string contains no letters, reverse the string.\n# The function should return the resulted string.\n# Examples\n# >>> solve.call(\"1234\")\n# \"4321\"\n# >>> solve.call(\"ab\")\n# \"AB\"\n# >>> solve.call(\"#a@C\")\n# \"#A@c\"\ndef solve(s)\n",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n",
  "completions": [
    "    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]",
    "    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[1::-1] + s[0]",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n    return s",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:].lower()",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n    return s",
    "    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    if s[0].isupper():\n        return s[::-1].lower()\n    if s[0].islower():\n        return s[::-1].upper()\n    return s[::-1]",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        else:\n            s[i] = s[i]\n    return s",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:].lower()",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1] if s[0].isalpha() else s",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].translate(str.maketrans(\"abcdefghijklmnopqrstuvwxyz\", \"zyxwvutsrqponmlkjihgfedcba\"))",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1] if s[0].islower() else s[0].upper() + s[1:]",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1] if s[0].isalpha() else s",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].translate(str.maketrans(\"\", \"\").translate(s[::-1]))",
    "    if len(s) == 0:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if not s:\n        return s\n    return \"\".join(s[i] if s[i].isalpha() else s[i].upper() for i in range(len(s)))",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.m",
    "    if not s:\n        return s\n    l = len(s)\n    if l == 1:\n        return s\n    for i in range(l):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n    return s",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:].lower()\n",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n    return s",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].swapcase()",
    "    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n    return s",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n    return s",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n    return s",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1] if s[0].isalpha() else s",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n    return s",
    "    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if s[0] == '#':\n        return '#' + s[1:]\n    if s[0] == '@':\n        return '@' + s[1:]\n    if s[0] == '$':\n        return '$' + s[1:]\n    if s[0] == '%':\n        return '%' + s[1:]\n    if s[0] == '&':\n        return '&' + s[1:]\n    if s[0] == '^':\n        return '^' + s[1:]\n    if s[0] == '*':\n        return '*' + s[1:]\n    if s[0] == '+':\n        return '+' + s[1:]\n    if s[0] == '-':\n        return '-' + s[1:]\n    if s[0] == '=':\n        return '=' + s[1:]\n    if s[0] == '<':\n        return '<' + s[1:]\n    if s[0] == '>':\n        return '>' + s[1:]\n    if s[0] == '{':\n        return '{' + s[1:]\n    if s[0] == '}':\n        return '}' + s[1:]\n    if s[0] == '(':\n        return '(' + s[1:]\n    if s[0] == ')':\n        return ')' + s[1:]\n    if s[0] == '[':\n        return '[' + s[1:]\n    if s[0] == ']':\n        return ']' + s[1:]\n    if s[0] == '.':\n        return '.' + s[1:]\n    if s[0] == ',':\n        return ',' + s[1:]\n    if s[0] == ':':\n        return ':' + s[1:]\n    if s[0] == ';':\n        return ';' + s[1:]\n    if s[0] == '!':\n",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1] if s[0].isalpha() else s",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:] if s[0].isalpha() else s[::-1]",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1] if s[0].isalpha() else s",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1] if s[0].isalpha() else s",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if s[0] == '#':\n        return '#' + s[1:]\n    if s[0] == '@':\n        return s[1:] + '@'\n    if s[0] == '$':\n        return s[1:] + '$'\n    if s[0] == '%':\n        return s[1:] + '%'\n    if s[0] == '^':\n        return s[1:] + '^'\n    if s[0] == '&':\n        return s[1:] + '&'\n    if s[0] == '*':\n        return s[1:] + '*'\n    if s[0] == '+':\n        return s[1:] + '+'\n    if s[0] == '-':\n        return s[1:] + '-'\n    if s[0] == '=':\n        return s[1:] + '='\n    if s[0] == '<':\n        return s[1:] + '<'\n    if s[0] == '>':\n        return s[1:] + '>'\n    if s[0] == '{':\n        return s[1:] + '{'\n    if s[0] == '}':\n        return s[1:] + '}'\n    if s[0] == '(':\n        return s[1:] + '('\n    if s[0] == ')':\n        return s[1:] + ')'\n    if s[0] == '[':\n        return s[1:] + '['\n    if s[0] == ']':\n        return s[1:] + ']'\n    if s[0] == '.':\n        return s[1:] + '.'\n    if s[0] == ',':\n        return s[1:] + ','\n    if s[0] == ':':\n        return s[1:] + ':'\n    if s[0] == ';':\n        return s[1:] + ';'\n    if s[0] == '!':\n",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        i += 1\n    return s",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1] if s[0].isalpha() else s",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].translate(str.maketrans(\"\", \"\", string.ascii_lowercase))",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1] if s[0].isalpha() else s",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n    return s",
    "    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].translate(str.maketrans(\"\", \"\", string.ascii_lowercase))",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n    return s",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1] if s[0].isalpha() else s",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:].lower()\n",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:].lower()",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:].lower()",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n    return s",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1] if s[0].isalpha() else s",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.m",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1] if s[0].isalpha() else s",
    "    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() if s[0].islower() else s[0].lower() + s[1:]",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    return s[::-1]",
    "    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        else:\n            s[i] = s[i]\n    return s\n",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n    return s",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:].lower()\n",
    "    if not s:\n        return s\n    l = len(s)\n    if l == 1:\n        return s\n    i = 0\n    while i < l:\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        i += 1\n    return s",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    return s[::-1]",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n    return s",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if not s:\n        return s\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            result += s[i].upper() if s[i].islower() else s[i].lower()\n        else:\n            result += s[i]\n    return result",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:].lower()",
    "    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[1:][::-1] + s[0]",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() if s[0].islower() else s[0].lower() + s[1:]",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    return s[::-1]",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:].lower()",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.m",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1] if s[0].isalpha() else s",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:].lower()",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]",
    "    if len(s) == 0:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1].upper()",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1] if s[0].isalpha() else s",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:] if s[0].isalpha() else s[::-1]",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() if s[0].isalpha() else s[0].lower() + s[1:]",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].swapcase()\n",
    "    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[1::-1] + s[0]",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]",
    "    if not s:\n        return s\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            result += s[i].upper() if s[i].islower() else s[i].lower()\n        else:\n            result += s[i]\n    return result",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    return s[::-1]",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1] if s[0].isalpha() else s",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() if s[0].islower() else s[0].lower() + s[1:]",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())\n",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        i += 1\n    return s",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1] if s[0].isalpha() else s",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].translate(str.maketrans(\"\", \"\", string.ascii_lowercase))",
    "    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if s[0] == '#':\n        return '#' + s[1:]\n    if s[0] == '@':\n        return '@' + s[1:]\n    if s[0] == '$':\n        return '$' + s[1:]\n    if s[0] == '%':\n        return '%' + s[1:]\n    if s[0] == '^':\n        return '^' + s[1:]\n    if s[0] == '&':\n        return '&' + s[1:]\n    if s[0] == '*':\n        return '*' + s[1:]\n    if s[0] == '=':\n        return '=' + s[1:]\n    if s[0] == '+':\n        return '+' + s[1:]\n    if s[0] == '-':\n        return '-' + s[1:]\n    if s[0] == '<':\n        return '<' + s[1:]\n    if s[0] == '>':\n        return '>' + s[1:]\n    if s[0] == '.':\n        return '.' + s[1:]\n    if s[0] == ',':\n        return ',' + s[1:]\n    if s[0] == ':':\n        return ':' + s[1:]\n    if s[0] == ';':\n        return ';' + s[1:]\n    if s[0] == '!':\n        return '!' + s[1:]\n    if s[0] == '?':\n        return '?' + s[1:]\n    if s[0] == '\"':\n        return '\"' + s[1:]\n    if s[0] == '\\'':\n        return '\\'' + s[1:]\n    if s[0] == '{':\n        return '{' + s[1:]\n    if s[0] == '}':\n        return '}' + s[1:]\n    if s[0] ==",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:].lower()",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.m",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    return s[::-1]",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:].lower()",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].swapcase()",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n    return s",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n    return s",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].translate(str.maketrans(\"\", \"\", string.ascii_lowercase))",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n    return s",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1] if s[0].isalpha() else s",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1] if s[0].isalpha() else s",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n    return s",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        i += 1\n    return s",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1] if s[0].isalpha() else s",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        else:\n            s[i] = s[i]\n    return s",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n    return s",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n    return s",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].swapcase()",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        else:\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n    return s",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].swapcase()",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].swapcase()",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:].lower()",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    return s[::-1]",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() if s[0].islower() else s[0].lower() + s[1:]",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n    return s",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1] if s[0].isalpha() else s",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if s[0] == '#':\n        return s[1:]\n    if s[-1] == '#':\n        return s[:-1]\n    if s[0] == '@':\n        return s[1:]\n    if s[-1] == '@':\n        return s[:-1]\n    if s[0] == '#' or s[0] == '@':\n        return s[1:]\n    if s[-1] == '#' or s[-1] == '@':\n        return s[:-1]\n    return s[::-1]",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].translate(str.maketrans(\"\", \"\", string.ascii_lowercase))",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        else:\n            s[i] = s[i]\n    return s",
    "    if not s:\n        return s\n    l = len(s)\n    if l == 1:\n        return s\n    for i in range(l):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        else:\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n    return s",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1] if s[0].isalpha() else s",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:].lower()",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if not s:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    return s[::-1]",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.m",
    "    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    if s[-1].isalpha():\n        return s[::-1]\n    return s[::-1] + s[1::-1]",
    "    if len(s) == 0:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        i += 1\n    return s",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n    return s",
    "    if not s:\n        return s\n    return \"\".join(s[i] if s[i].isalpha() else s[i].upper() for i in range(len(s)))",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n    return s",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.m",
    "    if not s:\n        return s\n    l = len(s)\n    if l == 1:\n        return s\n    i = 0\n    while i < l:\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        i += 1\n    return s",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())\n",
    "    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if s[0] == \"#\":\n        return \"#\" + s[1:].upper()\n    if s[0] == \"@\":\n        return \"@\" + s[1:].lower()\n    if s[0] == \" \":\n        return \" \" + s[1:].upper()\n    if s[0] == \" \":\n        return \" \" + s[1:].lower()\n    if s[0] == \".\":\n        return \".\" + s[1:].upper()\n    if s[0] == \".\":\n        return \".\" + s[1:].lower()\n    if s[0] == \",\":\n        return \",\" + s[1:].upper()\n    if s[0] == \",\":\n        return \",\" + s[1:].lower()\n    if s[0] == \":\":\n        return \":\" + s[1:].upper()\n    if s[0] == \":\":\n        return \":\" + s[1:].lower()\n    if s[0] == \";\":\n        return \";\" + s[1:].upper()\n    if s[0] == \";\":\n        return \";\" + s[1:].lower()\n    if s[0] == \"\\\"\":\n        return \"\\\"\" + s[1:].upper()\n    if s[0] == \"\\\"\":\n        return \"\\\"\" + s[1:].lower()\n    if s[0] == \"'\":\n        return \"'\" + s[1:].upper()\n    if s[0] == \"'\":\n        return \"'\" + s[1:].lower()\n    if s[0] == \"\\\\\":\n        return \"\\\\\" + s[1:].upper()\n    if s[0] == \"\\\\\":\n        return \"\\\\\" + s[1:].lower()\n    if s[0] == \"/\":\n        return \"/\" + s[1:].upper()\n    if s[0] == \"/\":\n        return \"/\" + s[1:].lower()\n    if s[0]",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() if s[0].isalpha() else s[0].lower() + s[1:]",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n    return s",
    "    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    return s[::-1]",
    "    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[1::-1] + s[0]\n",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.maketrans(\"\",\"\")).translate(str.m",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    return s[::-1]",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].translate(str.maketrans(\"\", \"\", string.ascii_lowercase))",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:].lower()",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1] if s[0].islower() else s",
    "    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if s[0] == '#':\n        return '#' + s[1:]\n    if s[0] == '@':\n        return s[1:] + '@'\n    if s[0] == '$':\n        return s[1:] + '$'\n    if s[0] == '%':\n        return s[1:] + '%'\n    if s[0] == '^':\n        return s[1:] + '^'\n    if s[0] == '&':\n        return s[1:] + '&'\n    if s[0] == '*':\n        return s[1:] + '*'\n    if s[0] == '-':\n        return s[1:] + '-'\n    if s[0] == '_':\n        return s[1:] + '_'\n    if s[0] == '=':\n        return s[1:] + '='\n    if s[0] == '+':\n        return s[1:] + '+'\n    if s[0] == '{':\n        return s[1:] + '{'\n    if s[0] == '}':\n        return s[1:] + '}'\n    if s[0] == '(':\n        return s[1:] + '('\n    if s[0] == ')':\n        return s[1:] + ')'\n    if s[0] == '<':\n        return s[1:] + '<'\n    if s[0] == '>':\n        return s[1:] + '>'\n    if s[0] == '.':\n        return s[1:] + '.'\n    if s[0] == ',':\n        return s[1:] + ','\n    if s[0] == ':':\n        return s[1:] + ':'\n    if s[0] == ';':\n        return s[1:] + ';'\n    if s[0] == '!':\n        return s[1:] + '!'\n    if s[0] == '?'",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:].lower()",
    "    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].swapcase()",
    "    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if s[0] == '#':\n        return '#' + s[1:]\n    if s[0] == '@':\n        return '@' + s[1:]\n    if s[0] == '$':\n        return '$' + s[1:]\n    if s[0] == '%':\n        return '%' + s[1:]\n    if s[0] == '^':\n        return '^' + s[1:]\n    if s[0] == '&':\n        return '&' + s[1:]\n    if s[0] == '*':\n        return '*' + s[1:]\n    if s[0] == '=':\n        return '=' + s[1:]\n    if s[0] == '+':\n        return '+' + s[1:]\n    if s[0] == '-':\n        return '-' + s[1:]\n    if s[0] == '_':\n        return '_' + s[1:]\n    if s[0] == '{':\n        return '{' + s[1:]\n    if s[0] == '}':\n        return '}' + s[1:]\n    if s[0] == '<':\n        return '<' + s[1:]\n    if s[0] == '>':\n        return '>' + s[1:]\n    if s[0] == '~':\n        return '~' + s[1:]\n    if s[0] == '\\\\':\n        return '\\\\' + s[1:]\n    if s[0] == '|':\n        return '|' + s[1:]\n    if s[0] == ':':\n        return ':' + s[1:]\n    if s[0] == ';':\n        return ';' + s[1:]\n    if s[0] == ',':\n        return ',' + s[1:]\n    if s[0] == '.':\n        return '.' + s[1:]\n    if s[0",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1] if s[0].isalpha() else s",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].translate(str.maketrans(\"abcdefghijklmnopqrstuvwxyz\", \"zyxwvutsrqponmlkjihgfedcba\"))",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n    return s",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n    return s",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].translate(str.maketrans(\"\", \"\", string.ascii_lowercase))",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:].lower()",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1] if s[0].isalpha() else s",
    "    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:].lower()",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() if s[0].islower() else s[0].lower() + s[1:]",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n    return s",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n    return s",
    "    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[1::-1]",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[::-1] if s[0].isalpha() else s",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].translate(str.maketrans(\"\", \"\", string.ascii_lowercase))",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:].lower()",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].swapcase()",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].replace(s[0].lower(), s[0].upper())",
    "    if not s:\n        return s\n    if not s[0].isalpha():\n        return s[::-1]\n    return s[::-1].swapcase()",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:].lower()"
  ],
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ]
}