{
  "name": "HumanEval_43_pairs_sum_to_zero",
  "language": "rb",
  "prompt": "# pairs_sum_to_zero takes an array of integers as an input.\n# it returns true if there are two distinct elements in the array that\n# sum to zero, and false otherwise.\n# >>> pairs_sum_to_zero.call([1, 3, 5, 0])\n# false\n# >>> pairs_sum_to_zero.call([1, 3, -2, 1])\n# false\n# >>> pairs_sum_to_zero.call([1, 2, 3, 7])\n# false\n# >>> pairs_sum_to_zero.call([2, 4, -5, 3, 5, 7])\n# true\n# >>> pairs_sum_to_zero.call([1])\n# false\ndef pairs_sum_to_zero(l)\n",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\nend\n",
  "completions": [
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return any(l[i] + l[i+1] == 0 for i in range(len(l) - 1))",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[1] + l[2] == 0)",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(l).intersection(set(map(lambda x: -x, l)))) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0 and pairs_sum_to_zero(l[1:])",
    "    if len(l) < 2:\n        return False\n    else:\n        for i in range(len(l) - 1):\n            if l[i] + l[i + 1] == 0:\n                return True\n        return False",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(filter(lambda x: x == 0, l)) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and pairs_sum_to_zero(l[1:])",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (pairs_sum_to_zero(l[1:]) or pairs_sum_to_zero(l[2:]))",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(l).intersection(set(l[::-1]))) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[1] + l[2] == 0)",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[1] + l[2] == 0) and pairs_sum_to_zero(l[3:])",
    "    if len(l) < 2:\n        return False\n    l = sorted(l)\n    for i in range(len(l) - 1):\n        if l[i] + l[i + 1] == 0:\n            return True\n    return False",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(filter(lambda x, y: x + y == 0, l)) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return any(l[i] + l[i + 1] == 0 for i in range(len(l) - 1))",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[0] != l[1])",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0 and pairs_sum_to_zero(l[1:])",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (pairs_sum_to_zero(l[1:]) or pairs_sum_to_zero(l[2:]))",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[1] + l[2] == 0)",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[0] != l[1])",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and pairs_sum_to_zero(l[1:])",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(l)) == 2 and sum(l) == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(l).intersection(set(l[::-1]))) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(filter(lambda x: x == 0, l)) == 2",
    "    if len(l) < 2:\n        return False\n    return len(set(l).intersection(set(l[::-1]))) > 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(filter(lambda x: x == 0, l)) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[1] + l[2] == 0)",
    "    if len(l) < 2:\n        return False\n    else:\n        for i in range(len(l) - 1):\n            if l[i] + l[i + 1] == 0:\n                return True\n        return False",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and pairs_sum_to_zero(l[1:])",
    "    if len(l) < 2:\n        return False\n    else:\n        return any(l[i] + l[i + 1] == 0 for i in range(len(l) - 1))",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(filter(lambda x: x + l[0] == 0, l)) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[0] != l[1])",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(filter(lambda x: x + l[0] == 0, l)) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(filter(lambda x: x + l[0] == 0, l)) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[1] + l[2] == 0) and (l[2] + l[3] == 0) and (l[3] + l[4] == 0) and (l[4] + l[5] == 0) and (l[5] + l[6] == 0) and (l[6] + l[7] == 0) and (l[7] + l[8] == 0) and (l[8] + l[9] == 0) and (l[9] + l[10] == 0) and (l[10] + l[11] == 0) and (l[11] + l[12] == 0) and (l[12] + l[13] == 0) and (l[13] + l[14] == 0) and (l[14] + l[15] == 0) and (l[15] + l[16] == 0) and (l[16] + l[17] == 0) and (l[17] + l[18] == 0) and (l[18] + l[19] == 0) and (l[19] + l[20] == 0) and (l[20] + l[21] == 0) and (l[21] + l[22] == 0) and (l[22] + l[23] == 0) and (l[23] + l[24] == 0) and (l[24] + l[25] == 0) and (l[25] + l[26] == 0) and (l[26] + l[27] == 0) and (l[27] + l[28] == 0) and (l[28] + l[29] == 0) and (l[29] + l[30] == 0) and (l[30] + l[31] == 0) and (l[31] + l[32] == 0) and (l[32] + l[33] == 0) and (l[33] + l[34] == 0) and (l[34] + l[35] == 0) and (l",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        for i in range(len(l) - 1):\n            if l[i] + l[i + 1] == 0:\n                return True\n        return False",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(l).intersection(set(l[::-1]))) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return any(l[i] + l[i+1] == 0 for i in range(len(l) - 1))",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(l)) == 2 and l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        for i in range(len(l) - 1):\n            if l[i] + l[i + 1] == 0:\n                return True\n        return False",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[1] + l[2] == 0)",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(l).intersection(set(l[::-1]))) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0 and pairs_sum_to_zero(l[1:])",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (pairs_sum_to_zero(l[1:]) or pairs_sum_to_zero(l[2:]))",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (pairs_sum_to_zero(l[1:]) or pairs_sum_to_zero(l[1:] + [l[0]]))",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[1] + l[2] == 0)",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (pairs_sum_to_zero(l[1:]) or pairs_sum_to_zero(l[2:]))",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and pairs_sum_to_zero(l[1:])",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(filter(lambda x: x + l[0] == 0, l)) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[1] + l[2] == 0)",
    "    if len(l) < 2:\n        return False\n    else:\n        return any(l[i] + l[i+1] == 0 for i in range(len(l) - 1))",
    "    if len(l) < 2:\n        return False\n    else:\n        for i in range(len(l)):\n            for j in range(i+1, len(l)):\n                if l[i] + l[j] == 0:\n                    return True\n    return False",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(filter(lambda x: x == 0, l)) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0 and pairs_sum_to_zero(l[1:])",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(l).intersection(set(l[::-1]))) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(l).intersection(set(l[::-1]))) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return any(l[i] + l[j] == 0 for i in range(len(l)) for j in range(i + 1, len(l)))",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(l)) == 2 and sum(l) == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(l)) == 2 and l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[1] + l[2] == 0)",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(filter(lambda x: x == 0, l)) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[1] + l[2] == 0)",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(filter(lambda x: x+x in l, l)) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[1] + l[2] == 0) and pairs_sum_to_zero(l[3:])",
    "    if len(l) < 2:\n        return False\n    l = sorted(l)\n    for i in range(len(l) - 1):\n        if l[i] + l[i + 1] == 0:\n            return True\n    return False",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[1] + l[2] == 0) and (l[2] + l[3] == 0) and (l[3] + l[4] == 0) and (l[4] + l[5] == 0) and (l[5] + l[6] == 0) and (l[6] + l[7] == 0) and (l[7] + l[8] == 0) and (l[8] + l[9] == 0) and (l[9] + l[10] == 0) and (l[10] + l[11] == 0) and (l[11] + l[12] == 0) and (l[12] + l[13] == 0) and (l[13] + l[14] == 0) and (l[14] + l[15] == 0) and (l[15] + l[16] == 0) and (l[16] + l[17] == 0) and (l[17] + l[18] == 0) and (l[18] + l[19] == 0) and (l[19] + l[20] == 0) and (l[20] + l[21] == 0) and (l[21] + l[22] == 0) and (l[22] + l[23] == 0) and (l[23] + l[24] == 0) and (l[24] + l[25] == 0) and (l[25] + l[26] == 0) and (l[26] + l[27] == 0) and (l[27] + l[28] == 0) and (l[28] + l[29] == 0) and (l[29] + l[30] == 0) and (l[30] + l[31] == 0) and (l[31] + l[32] == 0) and (l[32] + l[33] == 0) and (l[33] + l[34] == 0) and (l[34] + l[35] == 0) and (l",
    "    if len(l) < 2:\n        return False\n    else:\n        return any(l[i] + l[i+1] == 0 for i in range(len(l) - 1))",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[1] + l[2] == 0)",
    "    if len(l) < 2:\n        return False\n    else:\n        return any(l[i] + l[i+1] == 0 for i in range(len(l) - 1))",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(l).intersection(set(l[::-1]))) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(filter(lambda x: x == 0, l)) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[1] + l[2] == 0) and (l[2] + l[3] == 0) and (l[3] + l[4] == 0) and (l[4] + l[5] == 0) and (l[5] + l[6] == 0) and (l[6] + l[7] == 0) and (l[7] + l[8] == 0) and (l[8] + l[9] == 0) and (l[9] + l[10] == 0) and (l[10] + l[11] == 0) and (l[11] + l[12] == 0) and (l[12] + l[13] == 0) and (l[13] + l[14] == 0) and (l[14] + l[15] == 0) and (l[15] + l[16] == 0) and (l[16] + l[17] == 0) and (l[17] + l[18] == 0) and (l[18] + l[19] == 0) and (l[19] + l[20] == 0) and (l[20] + l[21] == 0) and (l[21] + l[22] == 0) and (l[22] + l[23] == 0) and (l[23] + l[24] == 0) and (l[24] + l[25] == 0) and (l[25] + l[26] == 0) and (l[26] + l[27] == 0) and (l[27] + l[28] == 0) and (l[28] + l[29] == 0) and (l[29] + l[30] == 0) and (l[30] + l[31] == 0) and (l[31] + l[32] == 0) and (l[32] + l[33] == 0) and (l[33] + l[34] == 0) and (l[34] + l[35] == 0) and (l",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and pairs_sum_to_zero(l[1:])",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[1] + l[2] == 0) and pairs_sum_to_zero(l[3:])",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(l).intersection(set(map(lambda x: x + x, l)))) > 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return any(l[i] + l[j] == 0 for i in range(len(l)) for j in range(i + 1, len(l)))",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(l)) == 2 and sum(l) == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(l)) == 2 and l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and pairs_sum_to_zero(l[1:])",
    "    if len(l) < 2:\n        return False\n    else:\n        return any(l[i] + l[i+1] == 0 for i in range(len(l)-1))",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[0] != l[1])",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(l).intersection(set(l[::-1]))) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (pairs_sum_to_zero(l[1:]) or pairs_sum_to_zero(l[2:]))",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (pairs_sum_to_zero(l[1:]) or pairs_sum_to_zero(l[1:]))",
    "    if len(l) < 2:\n        return False\n    else:\n        return any(l[i] + l[i+1] == 0 for i in range(len(l) - 1))",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[1] + l[2] == 0)",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0 and pairs_sum_to_zero(l[1:])",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(l[0] + l[1] for l in l)) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return any(l[i] + l[j] == 0 for i in range(len(l)) for j in range(i+1, len(l)))",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(l).intersection(set(l[::-1]))) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and pairs_sum_to_zero(l[1:])",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(l).intersection(set(l[::-1]))) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0 and pairs_sum_to_zero(l[1:])",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0 and pairs_sum_to_zero(l[1:])",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[1] + l[2] == 0)",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    return len(set(l)) == 2 and sum(l) == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(filter(lambda x: x + l[0] == 0, l)) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(l).intersection(set(l[::-1]))) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[1] + l[2] == 0) and pairs_sum_to_zero(l[3:])",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[0] != l[1])",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[0] != l[1])",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0 and pairs_sum_to_zero(l[1:])",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(filter(lambda x: x == 0, l)) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and pairs_sum_to_zero(l[1:])",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(filter(lambda x: x == 0, l)) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and pairs_sum_to_zero(l[1:])",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[0] != l[1])",
    "    if len(l) < 2:\n        return False\n    else:\n        return any(l[i] + l[i+1] == 0 for i in range(len(l) - 1))",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (pairs_sum_to_zero(l[1:]) or pairs_sum_to_zero(l[2:]))",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (pairs_sum_to_zero(l[1:]) or pairs_sum_to_zero(l[2:]))",
    "    if len(l) < 2:\n        return False\n    return any(l[i] + l[i+1] == 0 for i in range(len(l) - 1))",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[0] != l[1])",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0 and pairs_sum_to_zero(l[1:])",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (pairs_sum_to_zero(l[1:]) or pairs_sum_to_zero(l[1:]))",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[0] != l[1])",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and pairs_sum_to_zero(l[1:])",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[1] + l[2] == 0) and pairs_sum_to_zero(l[3:])",
    "    if len(l) < 2:\n        return False\n    return len(filter(lambda x: x + l[0] == 0, l)) == 2",
    "    if len(l) < 2:\n        return False\n    return len(set(l)) == 2 and l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(filter(lambda x, y: x + y == 0, l)) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(filter(lambda x: x == 0, l)) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[0] != l[1])",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(filter(lambda x: x + l[0] == 0, l))) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (pairs_sum_to_zero(l[1:]) or pairs_sum_to_zero(l[2:]))",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (pairs_sum_to_zero(l[1:]) or pairs_sum_to_zero(l[2:]))",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[0] != l[1])",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and pairs_sum_to_zero(l[1:])",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[1] + l[2] == 0)",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[1] + l[2] == 0)",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0 and pairs_sum_to_zero(l[1:])",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[0] != l[1])",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[0] != l[1])",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(filter(lambda x: x == 0, l)) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[1] + l[2] == 0)",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[0] != l[1])",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (pairs_sum_to_zero(l[1:]) or pairs_sum_to_zero(l[2:]))",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (pairs_sum_to_zero(l[1:]) or pairs_sum_to_zero(l[2:]))",
    "    if len(l) < 2:\n        return False\n    else:\n        return any(l[i] + l[i+1] == 0 for i in range(len(l) - 1))",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and pairs_sum_to_zero(l[1:])",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (pairs_sum_to_zero(l[1:]) or pairs_sum_to_zero(l[2:]))",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(l).intersection(set(l[::-1]))) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(l).intersection(set(l[::-1]))) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(l).intersection(set(l[::-1]))) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(filter(lambda x: x == 0, l)) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(l)) == 2 and l[0] + l[1] == 0",
    "    if len(l) < 2:\n        return False\n    else:\n        for i in range(len(l) - 1):\n            if l[i] + l[i + 1] == 0:\n                return True\n        return False",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and pairs_sum_to_zero(l[1:])",
    "    if len(l) < 2:\n        return False\n    else:\n        return any(l[i] + l[j] == 0 for i in range(len(l)) for j in range(i+1, len(l)))",
    "    if len(l) < 2:\n        return False\n    if len(l) == 2:\n        return l[0] == l[1]\n    if l[0] == 0:\n        return pairs_sum_to_zero(l[1:])\n    if l[1] == 0:\n        return pairs_sum_to_zero(l[0:])\n    return False",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and pairs_sum_to_zero(l[1:])",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[1] + l[2] == 0) and pairs_sum_to_zero(l[3:])",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(l).intersection(set(map(lambda x: -x, l)))) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return len(set(l).intersection(set(l[::-1]))) == 2",
    "    if len(l) < 2:\n        return False\n    else:\n        return any(l[i] + l[i+1] == 0 for i in range(len(l) - 1))",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[0] != l[1])",
    "    if len(l) < 2:\n        return False\n    else:\n        return (l[0] + l[1] == 0) and (l[1] + l[2] == 0)"
  ],
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ]
}