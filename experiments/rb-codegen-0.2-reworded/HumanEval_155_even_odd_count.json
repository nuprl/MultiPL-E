{
  "name": "HumanEval_155_even_odd_count",
  "language": "rb",
  "prompt": "# Given an integer. return an array that has the number of even and odd digits respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n# >>> even_odd_count.call(123)\n# [1, 2]\ndef even_odd_count(num)\n",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_odd_count\n    candidate = method(:even_odd_count)\n    assert_equal([0, 1], candidate.call(7))\n    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2, 2], candidate.call(3452))\n    assert_equal([3, 3], candidate.call(346211))\n    assert_equal([3, 3], candidate.call(-345821))\n    assert_equal([1, 0], candidate.call(-2))\n    assert_equal([2, 3], candidate.call(-45347))\n    assert_equal([1, 0], candidate.call(0))\n  end\nend\n",
  "completions": [
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    return [int(num/2), num%2]",
    "    if num == 0:\n        return [0, 0]\n    if num < 0:\n        return [0, 0]\n    count = 0\n    while num > 0:\n        count += 1\n        num /= 10\n    return [count % 2, count / 2]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 2\n    return [even_count, odd_count]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num /= 2\n    return [even_count, odd_count]",
    "    return [int(num/2), int(num%2)]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        num, digit = divmod(num, 2)\n        if digit == 0:\n            even += 1\n        else:\n            odd += 1\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    return [len(list(filter(lambda x: x % 2 == 0, num))) , len(list(filter(lambda x: x % 2 != 0, num))) ]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    return [int(num/2), int(num%2)]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num / 2\n    return [even, odd]",
    "    return [len(list(filter(lambda x: x % 2 == 0, num))) , len(list(filter(lambda x: x % 2 != 0, num))) ]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    return [int(num/2), int(num%2)]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 2\n    return [even_count, odd_count]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    return [int(num/2), int(num%2)]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    return [int(num/2), int(num%2)]",
    "    return [int(num/2), int(num%2)]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num / 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    return [int(num/2), int(num%2)]",
    "    return [int(num/2), int(num%2)]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num / 2\n    return [even, odd]",
    "    return [int(num/2), int(num%2)]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 2\n    return [even_count, odd_count]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    return [len(list(filter(lambda x: x % 2 == 0, num))) , len(list(filter(lambda x: x % 2 != 0, num))) ]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    return [len(list(filter(lambda x: x % 2 == 0, num))), len(list(filter(lambda x: x % 2 != 0, num)))]",
    "    return [int(num/2), int(num%2)]",
    "    if num < 0:\n        return [0, 0]\n    if num == 0:\n        return [0, 0]\n    if num % 2 == 0:\n        return [1, 0]\n    return [0, 1]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num / 2\n    return [even, odd]",
    "    return [int(num/2), int(num%2)]",
    "    if num < 0:\n        return [0, 0]\n    elif num == 0:\n        return [0, 0]\n    else:\n        return [0, 1] + even_odd_count(num // 2) + even_odd_count(num % 2)",
    "    return [int(num/2), int(num%2)]",
    "    return [int(num/2), int(num%2)]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    return [int(num/2), int(num%2)]",
    "    return [int(num/2), int(num%2)]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    return [int(num/2), int(num%2)]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    return [int(num/2), int(num%2)]",
    "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 2\n    return [even_count, odd_count]",
    "    return [int(num/2), int(num%2)]",
    "    return [int(num/2), int(num%2)]",
    "    if num < 0:\n        return [0, 0]\n    elif num == 0:\n        return [0, 0]\n    elif num % 2 == 0:\n        return [1, 0]\n    else:\n        return [0, 1]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    return [int(num/2), int(num%2)]",
    "    return [int(num/2), int(num%2)]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    count = 0\n    while num > 0:\n        count += 1 if num % 2 == 0 else 0\n        num /= 10\n    return [count, num]",
    "    return [int(num/2), int(num%2)]",
    "    return [len(str(num)) % 2, len(str(num)) // 2]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num /= 2\n    return [even_count, odd_count]",
    "    return [int(num/2), int(num%2)]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 2\n    return [even_count, odd_count]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num / 2\n    return [even, odd]",
    "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 2\n    return [even_count, odd_count]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    return [int(num/2), num%2]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 2\n    return [even_count, odd_count]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    return [int(num/2), int(num%2)]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num / 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    return [int(num/2), int(num%2)]",
    "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 2\n    return [even_count, odd_count]",
    "    return [len(list(filter(lambda x: x % 2 == 0, map(int, str(num))))), len(list(filter(lambda x: x % 2 != 0, map(int, str(num)))))]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    if num < 0:\n        return [0, 0]\n    if num == 0:\n        return [0, 0]\n    if num % 2 == 0:\n        return [1, 0]\n    return [0, 1]",
    "    return [len(list(filter(lambda x: x % 2 == 0, str(num)))) , len(list(filter(lambda x: x % 2 != 0, str(num))))]",
    "    return [int(num/2), num%2]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even, odd = 0, 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    return [int(num/2), int(num%2)]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    if num < 0:\n        return [0, 0]\n    elif num == 0:\n        return [0, 0]\n    else:\n        return [1, num % 2]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    return [int(num/2), int(num%2)]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    if num == 0:\n        return [0, 0]\n    else:\n        return [0, num % 2] + even_odd_count(num / 2)",
    "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num /= 2\n    return [even_count, odd_count]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num / 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    return [int(num/2), int(num%2)]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    return [int(num/2), int(num%2)]",
    "    return [int(num/2), int(num%2)]",
    "    return [int(num/2), int(num%2)]",
    "    return [int(num/2), num % 2]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    return [int(num/2), int(num%2)]",
    "    return [int(num/2), int(num%2)]",
    "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num / 2\n    return [even_count, odd_count]",
    "    return [int(num/2), int(num%2)]",
    "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 2\n    return [even_count, odd_count]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    return [len(str(num)) % 2, len(str(num)) // 2]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    return [len(list(filter(lambda x: x % 2 == 0, str(num)))) - 1, len(list(filter(lambda x: x % 2 != 0, str(num)))) - 1]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    return [int(num/2), int(num%2)]",
    "    return [len(list(filter(lambda x: x % 2 == 0, str(num)))) , len(list(filter(lambda x: x % 2 != 0, str(num))))]",
    "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 2\n    return [even_count, odd_count]",
    "    return [int(num/2), int(num%2)]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    return [int(num/2), int(num%2)]",
    "    return [int(num/2), int(num%2)]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 2\n    return [even_count, odd_count]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 2\n    return [even_count, odd_count]",
    "    return [int(num/2), int(num%2)]",
    "    if num < 0:\n        return [0, 0]\n    if num == 0:\n        return [0, 0]\n    if num % 2 == 0:\n        return [1, 0]\n    else:\n        return [0, 1]",
    "    if num == 0:\n        return [0, 0]\n    if num < 0:\n        return [0, 0]\n    if num % 2 == 0:\n        return [1, 0]\n    return [0, 1]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 2\n    return [even_count, odd_count]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 2\n    return [even_count, odd_count]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 2\n    return [even_count, odd_count]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    return [int(num/2), int(num%2)]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 2\n    return [even_count, odd_count]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    return [int(num/2), int(num%2)]",
    "    return [len(list(filter(lambda x: x % 2 == 0, num))) , len(list(filter(lambda x: x % 2 != 0, num))) ]",
    "    return [int(num/2), int(num%2)]",
    "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 2\n    return [even_count, odd_count]",
    "    if num == 0:\n        return [0, 0]\n    elif num < 0:\n        return [0, 0]\n    else:\n        return [0, 1] + even_odd_count(num // 2)",
    "    return [int(num/2), int(num%2)]",
    "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 2\n    return [even_count, odd_count]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 2\n    return [even_count, odd_count]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    count = 0\n    while num > 0:\n        count += num % 2\n        num = num // 2\n    return [count, num]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    return [int(num/2), int(num%2)]",
    "    if num < 0:\n        return [0, 0]\n    elif num == 0:\n        return [0, 0]\n    else:\n        return [0, 1] + even_odd_count(num // 2) + even_odd_count(num % 2)",
    "    return [int(num/2), int(num%2)]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return [even, odd]",
    "    return [int(num/2), int(num%2)]",
    "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 2\n    return [even_count, odd_count]"
  ],
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ]
}