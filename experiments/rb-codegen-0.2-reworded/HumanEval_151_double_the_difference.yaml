name: HumanEval_151_double_the_difference
language: rb
prompt: "# Given an array of numbers, return the sum of squares of the numbers\n#\
  \ in the array that are odd. Ignore numbers that are negative or not integers.\n\
  # >>> double_the_difference.call([1, 3, 2, 0])\n# 10\n# >>> double_the_difference.call([-1,\
  \ -2, 0])\n# 0\n# >>> double_the_difference.call([9, -2])\n# 81\n# >>> double_the_difference.call([0])\n\
  # 0\n# If the input array is empty, return 0.\ndef double_the_difference(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
  \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
  \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
  \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0,\
  \ candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
  \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
  \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
completions: ["    sum = 0\n    for i in lst:\n        if i < 0 or not i.is_integer():\n\
    \            continue\n        sum += i * i\n    return sum", '    return sum([x**2
    for x in lst if x > 0 and x % 1 == 0])', "    sum = 0\n    for i in lst:\n   \
    \     if i > 0 and i % 2 == 1:\n            sum += i * i\n    return sum", " \
    \   sum = 0\n    for i in lst:\n        if i > 0 and i % 2 == 1:\n           \
    \ sum += i * i\n    return sum", "    sum = 0\n    for i in lst:\n        if i\
    \ >= 0 and i % 2 == 1:\n            sum += i * i\n    return sum", '    return
    sum([x**2 for x in lst if x > 0 and x % 1 == 1])', "    sum = 0\n    for i in\
    \ lst:\n        if i < 0:\n            continue\n        if i % 2 == 1:\n    \
    \        sum += i * i\n    return sum", "    sum = 0\n    for i in lst:\n    \
    \    if i < 0 or i % 1 != 0:\n            continue\n        sum += i * i\n   \
    \ return sum", '    return sum(map(lambda x: x*x, filter(lambda x: x%2==1, lst)))',
  "    if len(lst) == 0:\n        return 0\n    else:\n        return sum([x**2 for\
    \ x in lst if x > 0 and x % 1 == 1])", '    return sum(map(lambda x: x*x, filter(lambda
    x: x%2==1, lst)))', '    return sum(map(lambda x: x * x, filter(lambda x: x %
    2 == 1, lst)))', '    return sum(map(lambda x: x * x, filter(lambda x: x % 2 ==
    1, lst)))', "    if len(lst) == 0:\n        return 0\n    return sum(map(lambda\
    \ x: x*x, filter(lambda x: x%2==1, lst)))", "    sum = 0\n    for i in lst:\n\
    \        if i < 0:\n            continue\n        if i % 2 == 1:\n           \
    \ sum += i * i\n    return sum", "    sum = 0\n    for i in lst:\n        if i\
    \ < 0 or not i.is_integer():\n            continue\n        sum += i ** 2\n  \
    \  return sum", "    sum = 0\n    for i in lst:\n        if i < 0 or i % 1 !=\
    \ 0:\n            continue\n        sum += i * i\n    return sum", '    return
    sum([x**2 for x in lst if x > 0 and x % 1 == 0])', "    if len(lst) == 0:\n  \
    \      return 0\n    return sum(map(lambda x: x*x, filter(lambda x: x%2 == 1,\
    \ lst)))", '    return sum(map(lambda x: x*x, filter(lambda x: x%2==1, lst)))',
  "    sum = 0\n    for i in lst:\n        if i < 0 or i % 1 != 0:\n            continue\n\
    \        sum += i * i\n    return sum", '    return sum(map(lambda x: x*x, filter(lambda
    x: x%2==1, lst)))', '    return sum(map(lambda x: x*x, filter(lambda x: x%2, lst)))',
  '    return sum([x**2 for x in lst if x > 0 and x % 1 == 1])', "    sum = 0\n  \
    \  for i in lst:\n        if i >= 0 and i % 2 == 1:\n            sum += i * i\n\
    \    return sum", "    sum = 0\n    for i in lst:\n        if i > 0 and i % 2\
    \ == 1:\n            sum += i * i\n    return sum", "    sum = 0\n    for i in\
    \ lst:\n        if i > 0 and i % 2 == 1:\n            sum += i * i\n    return\
    \ sum", '    return sum(map(lambda x: x*x, filter(lambda x: x%2, lst)))', '    return
    sum(map(lambda x: x*x, filter(lambda x: x%2==1, lst)))', "    if len(lst) == 0:\n\
    \        return 0\n    sum = 0\n    for i in lst:\n        if i < 0 or not i.is_integer():\n\
    \            continue\n        sum += i ** 2\n    return sum", "    if len(lst)\
    \ == 0:\n        return 0\n    sum = 0\n    for i in lst:\n        if i < 0 or\
    \ not i.is_integer():\n            continue\n        sum += i * i\n    return\
    \ sum", '    return sum([x**2 for x in lst if x > 0 and x % 1 == 1])', '    return
    sum(map(lambda x: x*x, filter(lambda x: x%2==1, lst)))', '    return sum([i *
    i for i in lst if i > 0 and i % 2])', '    return sum(map(lambda x: x*x, filter(lambda
    x: x%2==1, lst)))', '    return sum(map(lambda x: x*x, filter(lambda x: x%2, lst)))',
  "    sum = 0\n    for i in lst:\n        if i < 0 or not i.is_integer():\n     \
    \       continue\n        sum += i * i\n    return sum", "    if len(lst) == 0:\n\
    \        return 0\n    sum = 0\n    for i in lst:\n        if i < 0 or i % 1 !=\
    \ 0:\n            continue\n        sum += i * i\n    return sum", '    return
    sum([i**2 for i in lst if i > 0 and i % 1 == 1])', '    return sum(map(lambda
    x: x*x, filter(lambda x: x%2==1, lst)))', '    return sum(map(lambda x: x ** 2,
    filter(lambda x: x > 0 and x % 1 == 0, lst)))', "    sum = 0\n    for i in lst:\n\
    \        if i < 0 or i % 1 != 0:\n            continue\n        sum += i * i\n\
    \    return sum", "    sum = 0\n    for i in lst:\n        if i > 0 and i % 2\
    \ == 1:\n            sum += i * i\n    return sum", '    return sum(map(lambda
    x: x ** 2, filter(lambda x: x % 2 == 1, lst)))', "    sum = 0\n    for i in lst:\n\
    \        if i < 0:\n            continue\n        if i % 2 == 1:\n           \
    \ sum += i * i\n    return sum", '    return sum([x**2 for x in lst if x > 0 and
    x % 1 == 1])', "    sum = 0\n    for i in lst:\n        if i < 0 or i % 1 != 0:\n\
    \            continue\n        sum += i * i\n    return sum", "    if len(lst)\
    \ == 0:\n        return 0\n    else:\n        return sum(map(lambda x: x*x, filter(lambda\
    \ x: x%2, lst)))", '    return sum([x*x for x in lst if x > 0 and int(x) % 2])',
  "    sum = 0\n    for i in lst:\n        if i < 0 or not i.is_integer():\n     \
    \       continue\n        sum += i ** 2\n    return sum", '    return sum(map(lambda
    x: x * x, filter(lambda x: x % 2 == 1, lst)))', "    sum = 0\n    for i in lst:\n\
    \        if i > 0 and i % 2 == 1:\n            sum += i * i\n    return sum",
  '    return sum([x**2 for x in lst if x > 0 and int(x) == x])', "    sum = 0\n \
    \   for i in lst:\n        if i < 0 or not i.is_integer():\n            continue\n\
    \        sum += i**2\n    return sum", "    sum = 0\n    for i in lst:\n     \
    \   if i < 0 or i % 1 != 0:\n            continue\n        sum += i * i\n    return\
    \ sum", "    if len(lst) == 0:\n        return 0\n    sum = 0\n    for i in lst:\n\
    \        if i > 0 and i % 2 == 1:\n            sum += i * i\n    return sum",
  "    sum = 0\n    for i in lst:\n        if i < 0 or not i.is_integer():\n     \
    \       continue\n        sum += i ** 2\n    return sum", '    return sum(map(lambda
    x: x * x, filter(lambda x: x % 2 == 1, lst)))', "    sum = 0\n    for i in lst:\n\
    \        if i > 0 and i % 2 == 1:\n            sum += i * i\n    return sum",
  '    return sum([i**2 for i in lst if i > 0 and i % 1])', '    return sum(map(lambda
    x: x*x, filter(lambda x: x%2==1, lst)))', "    sum = 0\n    for i in lst:\n  \
    \      if i < 0:\n            continue\n        if i % 2 == 1:\n            sum\
    \ += i * i\n    return sum", '    return sum([x**2 for x in lst if x > 0 and int(x)
    % 2 == 1])', "    sum = 0\n    for i in lst:\n        if i >= 0 and i % 2 == 1:\n\
    \            sum += i * i\n    return sum", '    return sum([x**2 for x in lst
    if x > 0 and x % 1 == 0])', '    return sum([x**2 for x in lst if x > 0 and x
    % 1 == 1])', "    sum = 0\n    for i in lst:\n        if i < 0:\n            continue\n\
    \        if i % 2 == 1:\n            sum += i * i\n    return sum", "    sum =\
    \ 0\n    for i in lst:\n        if i >= 0 and i % 2 == 1:\n            sum +=\
    \ i * i\n    return sum", '    return sum(map(lambda x: x*x, filter(lambda x:
    x%2, lst)))', '    return sum(map(lambda x: x * x, filter(lambda x: x % 2 == 1,
    lst)))', '    return sum(map(lambda x: x*x, filter(lambda x: x%2, lst)))', '    return
    sum(map(lambda x: x*x, filter(lambda x: x%2==1, lst)))', '    return sum([x**2
    for x in lst if x > 0 and int(x) % 2])', '    return sum(map(lambda x: x*x, filter(lambda
    x: x%2==1, lst)))', "    if len(lst) == 0:\n        return 0\n    sum = 0\n  \
    \  for i in lst:\n        if i < 0 or not i.is_integer():\n            continue\n\
    \        sum += i ** 2\n    return sum", '    return sum(map(lambda x: x * x,
    filter(lambda x: x % 2 == 1, lst)))', '    return sum([x**2 for x in lst if x
    > 0 and x % 1 == 1])', "    sum = 0\n    for i in lst:\n        if i < 0 or i\
    \ % 1 != 0:\n            continue\n        sum += i * i\n    return sum", "  \
    \  sum = 0\n    for i in lst:\n        if i < 0:\n            continue\n     \
    \   if i % 2 == 1:\n            sum += i * i\n    return sum", '    return sum(map(lambda
    x: x ** 2, filter(lambda x: x % 2 == 1, lst)))', '    return sum([x**2 for x in
    lst if x > 0 and x % 1 == 1])', "    sum = 0\n    for i in lst:\n        if i\
    \ < 0:\n            continue\n        if i % 2 == 1:\n            sum += i * i\n\
    \    return sum", '    return sum(map(lambda x: x*x, filter(lambda x: x%2==1,
    lst)))', '    return sum(map(lambda x: x ** 2, filter(lambda x: x % 2 != 0, lst)))',
  '    return sum(map(lambda x: x*x, filter(lambda x: x%2, lst)))', '    return sum(map(lambda
    x: x * x, filter(lambda x: x % 2 == 1, lst)))', '    return sum(map(lambda x:
    x*x, filter(lambda x: x%2==1, lst)))', "    if len(lst) == 0:\n        return\
    \ 0\n    sum = 0\n    for i in lst:\n        if i < 0 or not i.is_integer():\n\
    \            continue\n        sum += i * i\n    return sum", '    return sum(map(lambda
    x: x*x, filter(lambda x: x%2==1, lst)))', "    sum = 0\n    for i in lst:\n  \
    \      if i < 0 or not i.is_integer():\n            continue\n        sum += i\
    \ * i\n    return sum", '    return sum(map(lambda x: x * x, filter(lambda x:
    x > 0 and x % 1 == 1, lst)))', "    if len(lst) == 0:\n        return 0\n    sum_of_squares\
    \ = 0\n    for i in lst:\n        if i % 2 == 1:\n            sum_of_squares +=\
    \ i ** 2\n    return sum_of_squares", '    return sum(map(lambda x: x ** 2, filter(lambda
    x: x > 0 and x % 1 == 0, lst)))', '    return sum([x**2 for x in lst if x > 0
    and int(x) % 2 == 1])', '    return sum([i ** 2 for i in lst if i > 0 and i %
    1 == 1])', '    return sum(map(lambda x: x * x, filter(lambda x: x % 2 != 0, lst)))',
  "    sum = 0\n    for i in lst:\n        if i < 0 or i % 1 != 0:\n            continue\n\
    \        sum += i * i\n    return sum", "    sum = 0\n    for i in lst:\n    \
    \    if i < 0:\n            continue\n        if i % 2 == 1:\n            sum\
    \ += i * i\n    return sum", "    if len(lst) == 0:\n        return 0\n    return\
    \ sum([i * i for i in lst if i > 0 and i % 2 == 1])", "    sum = 0\n    for i\
    \ in lst:\n        if i > 0 and i % 2 == 1:\n            sum += i * i\n    return\
    \ sum", '    return sum(map(lambda x: x * x, filter(lambda x: x % 2 != 0, lst)))',
  "    sum = 0\n    for i in lst:\n        if i >= 0 and i % 2 == 1:\n           \
    \ sum += i * i\n    return sum", '    return sum(map(lambda x: x * x, filter(lambda
    x: x % 2 == 1, lst)))', "    if len(lst) == 0:\n        return 0\n    else:\n\
    \        return sum(map(lambda x: x*x, filter(lambda x: x%2==1, lst)))", '    return
    sum(map(lambda x: x*x, filter(lambda x: x%2==1, lst)))', '    return sum([x**2
    for x in lst if x > 0 and x % 1 == 1])', '    return sum(map(lambda x: x ** 2,
    filter(lambda x: x % 2, lst)))', "    if len(lst) == 0:\n        return 0\n  \
    \  else:\n        return sum(map(lambda x: x * x, filter(lambda x: x % 2 != 0,\
    \ lst)))", '    return sum([i**2 for i in lst if i > 0 and i % 1 == 1])', '    return
    sum(map(lambda x: x*x, filter(lambda x: x%2, lst)))', '    return sum([i**2 for
    i in lst if i > 0 and i % 1 == 1])', '    return sum(map(lambda x: x * x, filter(lambda
    x: x % 2 == 1, lst)))', '    return sum([x**2 for x in lst if x > 0 and x % 1
    == 1])', '    return sum(map(lambda x: x*x, filter(lambda x: x%2, lst)))', " \
    \   sum = 0\n    for i in lst:\n        if i < 0 or i % 1 != 0:\n            continue\n\
    \        sum += i * i\n    return sum", "    sum = 0\n    for i in lst:\n    \
    \    if i < 0:\n            continue\n        if i % 2 == 1:\n            sum\
    \ += i * i\n    return sum", "    return sum(map(lambda x: x ** 2, filter(lambda\
    \ x: x > 0 and x % 1 == 0, lst)))\n", "    if len(lst) == 0:\n        return 0\n\
    \    sum_of_squares = 0\n    for i in lst:\n        if i > 0 and i % 2 == 1:\n\
    \            sum_of_squares += i * i\n    return sum_of_squares", "    sum = 0\n\
    \    for i in lst:\n        if i > 0 and i % 2 == 1:\n            sum += i * i\n\
    \    return sum", "    if len(lst) == 0:\n        return 0\n    else:\n      \
    \  return sum([x**2 for x in lst if x > 0 and x % 1 == 1])", "    sum = 0\n  \
    \  for i in lst:\n        if i < 0 or i % 1 != 0:\n            continue\n    \
    \    sum += i * i\n    return sum", '    return sum(map(lambda x: x*x, filter(lambda
    x: x%2==1, lst)))', '    return sum(map(lambda x: x**2, filter(lambda x: x > 0
    and x % 1 == 0, lst)))', "    sum = 0\n    for i in lst:\n        if i < 0 or\
    \ i % 1 != 0:\n            continue\n        sum += i * i\n    return sum", " \
    \   sum = 0\n    for i in lst:\n        if i < 0 or not i.is_integer():\n    \
    \        continue\n        sum += i ** 2\n    return sum", '    return sum(map(lambda
    x: x * x, filter(lambda x: x % 2 != 0, lst)))', '    return sum([i**2 for i in
    lst if i > 0 and i % 1 == 1])', '    return sum(map(lambda x: x * x, filter(lambda
    x: x % 2 != 0, lst)))', '    return sum(map(lambda x: x*x, filter(lambda x: x
    > 0 and x % 1 == 1, lst)))', "    return sum(map(lambda x: x ** 2, filter(lambda\
    \ x: x > 0 and x % 1 == 0, lst)))\n", "    sum = 0\n    for i in lst:\n      \
    \  if i > 0 and i % 2 == 1:\n            sum += i * i\n    return sum", '    return
    sum(map(lambda x: x*x, filter(lambda x: x%2==1, lst)))', '    return sum(map(lambda
    x: x*x, filter(lambda x: x%2, lst)))', '    return sum(map(lambda x: x**2, filter(lambda
    x: x%2==1, lst)))', "    if len(lst) == 0:\n        return 0\n    else:\n    \
    \    return sum([x**2 for x in lst if x > 0 and x % 1 == 1])", "    if len(lst)\
    \ == 0:\n        return 0\n    else:\n        return sum([x**2 for x in lst if\
    \ x > 0 and x % 1 == 1])", '    return sum([x**2 for x in lst if x > 0 and x %
    1 == 1])', '    return sum([x**2 for x in lst if x > 0 and x % 1 == 1])', '    return
    sum(map(lambda x: x*x, filter(lambda x: x%2, lst)))', "    sum = 0\n    for i\
    \ in lst:\n        if i > 0 and i % 2 == 1:\n            sum += i * i\n    return\
    \ sum", '    return sum([i**2 for i in lst if i > 0 and i % 2])', '    return
    sum(map(lambda x: x*x, filter(lambda x: x%2==1, lst)))', '    return sum(map(lambda
    x: x*x, filter(lambda x: x%2==1, lst)))', '    return sum(map(lambda x: x*x, filter(lambda
    x: x%2, lst)))', '    return sum(map(lambda x: x*x, filter(lambda x: x%2==1, lst)))',
  "    sum = 0\n    for i in lst:\n        if i > 0 and i % 2 == 1:\n            sum\
    \ += i * i\n    return sum", '    return sum(map(lambda x: x * x, filter(lambda
    x: x % 2 != 0, lst)))', '    return sum(map(lambda x: x ** 2, filter(lambda x:
    x % 2, lst)))', '    return sum(map(lambda x: x * x, filter(lambda x: x % 2 ==
    1, lst)))', '    return sum(map(lambda x: x*x, filter(lambda x: x%2, lst)))',
  "    sum = 0\n    for i in lst:\n        if i < 0:\n            continue\n     \
    \   if i % 2 == 1:\n            sum += i * i\n    return sum", "    sum = 0\n\
    \    for i in lst:\n        if i < 0 or not i.is_integer():\n            continue\n\
    \        sum += i ** 2\n    return sum", "    sum = 0\n    for i in lst:\n   \
    \     if i >= 0 and i % 2 == 1:\n            sum += i * i\n    return sum", '    return
    sum(map(lambda x: x * x, filter(lambda x: x % 2 == 1, lst)))', '    return sum([x**2
    for x in lst if x > 0 and x % 1 == 1])', '    return sum(map(lambda x: x ** 2,
    filter(lambda x: x % 2, lst)))', "    sum = 0\n    for i in lst:\n        if i\
    \ > 0 and i % 2 == 1:\n            sum += i * i\n    return sum", "    sum = 0\n\
    \    for i in lst:\n        if i > 0 and i % 2 == 1:\n            sum += i * i\n\
    \    return sum", '    return sum(map(lambda x: x * x, filter(lambda x: x % 2
    == 1, lst)))', '    return sum(map(lambda x: x * x, filter(lambda x: x % 2 ==
    1, lst)))', '    return sum([i**2 for i in lst if i > 0 and i % 2 == 1])', '    return
    sum(map(lambda x: x*x, filter(lambda x: x%2==1, lst)))', '    return sum(map(lambda
    x: x*x, filter(lambda x: x%2==1, lst)))', "    if len(lst) == 0:\n        return\
    \ 0\n    return sum(x**2 for x in lst if x > 0 and x % 1 == 1)", '    return sum([x**2
    for x in lst if x > 0 and int(x) % 2 == 1])', '    return sum(map(lambda x: x
    ** 2, filter(lambda x: x > 0 and x % 1 == 0, lst)))', '    return sum([x**2 for
    x in lst if x > 0 and x % 1 == 1])', "    sum = 0\n    for i in lst:\n       \
    \ if i > 0 and i % 2 == 1:\n            sum += i * i\n    return sum", '    return
    sum([x**2 for x in lst if x > 0 and x % 1 == 1])', '    return sum(map(lambda
    x: x ** 2, filter(lambda x: x % 2, lst)))', '    return sum([i ** 2 for i in lst
    if i > 0 and i % 1 == 1])', '    return sum(map(lambda x: x * x, filter(lambda
    x: x % 2 == 1, lst)))', "    sum = 0\n    for i in lst:\n        if i > 0 and\
    \ i % 2 == 1:\n            sum += i * i\n    return sum", "    sum = 0\n    for\
    \ i in lst:\n        if i > 0 and i % 2 == 1:\n            sum += i * i\n    return\
    \ sum", "    sum = 0\n    for i in lst:\n        if i > 0 and i % 2 == 1:\n  \
    \          sum += i * i\n    return sum", "    if len(lst) == 0:\n        return\
    \ 0\n    else:\n        return sum([x**2 for x in lst if x > 0 and x % 1 == 1])",
  '    return sum([i**2 for i in lst if i > 0 and i % 1 == 1])', "    sum = 0\n  \
    \  for i in lst:\n        if i > 0 and i % 2 == 1:\n            sum += i * i\n\
    \    return sum", '    return sum(map(lambda x: x ** 2, filter(lambda x: x > 0
    and x % 1 == 0, lst)))', "    sum = 0\n    for i in lst:\n        if i < 0 or\
    \ not i.is_integer():\n            continue\n        sum += i ** 2\n    return\
    \ sum", '    return sum(x**2 for x in lst if x > 0 and x % 1 == 1)', '    return
    sum(map(lambda x: x * x, filter(lambda x: x % 2 == 1, lst)))', "    sum = 0\n\
    \    for i in lst:\n        if i > 0 and i % 2 == 1:\n            sum += i * i\n\
    \    return sum", '    return sum(map(lambda x: x*x, filter(lambda x: x%2, lst)))',
  '    return sum(map(lambda x: x * x, filter(lambda x: x % 2 == 1, lst)))', '    return
    sum([x**2 for x in lst if x > 0 and x % 1 == 0])', '    return sum([x**2 for x
    in lst if x > 0 and x % 1 == 0])', '    return sum(map(lambda x: x * x, filter(lambda
    x: x > 0 and x % 1 == 0, lst)))', '    return sum([x**2 for x in lst if x > 0
    and int(x) % 2 == 1])', "    sum = 0\n    for i in lst:\n        if i > 0 and\
    \ i % 2 == 1:\n            sum += i * i\n    return sum", '    return sum(map(lambda
    x: x*x, filter(lambda x: x%2==1, lst)))', '    return sum(map(lambda x: x * x,
    filter(lambda x: x > 0 and x % 1 == 0, lst)))', '    return sum(map(lambda x:
    x*x, filter(lambda x: x%2==1, lst)))', '    return sum(map(lambda x: x ** 2, filter(lambda
    x: x % 2 != 0, lst)))', "    if len(lst) == 0:\n        return 0\n    sum = 0\n\
    \    for i in lst:\n        if i > 0 and i % 2 == 1:\n            sum += i * i\n\
    \    return sum", '    return sum(map(lambda x: x*x, filter(lambda x: x%2, lst)))',
  "    sum = 0\n    for i in lst:\n        if i >= 0 and i % 2 == 1:\n           \
    \ sum += i * i\n    return sum", '    return sum([x**2 for x in lst if x > 0 and
    x % 1 == 1])', '    return sum(map(lambda x: x * x, filter(lambda x: x % 2 !=
    0, lst)))', '    return sum(map(lambda x: x*x, filter(lambda x: x%2, lst)))']
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
