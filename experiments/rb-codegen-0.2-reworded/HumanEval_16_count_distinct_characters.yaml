name: HumanEval_16_count_distinct_characters
language: rb
prompt: "# Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n# >>> count_distinct_characters.call(\"xyzXYZ\")\n# 3\n# >>>\
  \ count_distinct_characters.call(\"Jerry\")\n# 4\ndef count_distinct_characters(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
  \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
  \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
  abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n    assert_equal(5,\
  \ candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
completions: ['    return len(set(string))', "    count = 0\n    for char in string:\n\
    \        if char.isalpha():\n            count += 1\n    return count", "    count\
    \ = 0\n    for i in range(len(string)):\n        if string[i] != string[i].lower():\n\
    \            count += 1\n    return count", "    count = 0\n    for char in string:\n\
    \        if char.isalpha():\n            count += 1\n    return count", "    count\
    \ = 0\n    for i in range(len(string)):\n        if string[i] != string[i].lower():\n\
    \            count += 1\n    return count", "    count = 0\n    for char in string:\n\
    \        if char.isalpha():\n            count += 1\n    return count", '    return
    len(set(string))', '    return len(set(string))', "    count = 0\n    for i in\
    \ range(len(string)):\n        if string[i] != string[i].lower():\n          \
    \  count += 1\n    return count\n", "    count = 0\n    for char in string:\n\
    \        if char.isalpha():\n            count += 1\n    return count", '    return
    len(set(string))', '    return len(set(string))', "    count = 0\n    for char\
    \ in string:\n        if char.isalpha():\n            count += 1\n    return count",
  "    count = 0\n    for i in string:\n        if i.isalpha():\n            count\
    \ += 1\n    return count", '    return len(set(string))', '    return len(set(string))',
  '    return len(set(string))', '    return len(set(string))', '    return len(set(string))',
  "    count = 0\n    for char in string:\n        if char.isalpha():\n          \
    \  count += 1\n    return count", "    count = 0\n    for i in range(len(string)):\n\
    \        count += 1 if string[i] not in string[i+1:] else 0\n    return count",
  '    return len(set(string))', '    return len(set(string))', "    count = 0\n \
    \   for char in string:\n        if char.isalpha():\n            count += 1\n\
    \    return count", "    count = 0\n    for char in string:\n        if char.isalpha():\n\
    \            count += 1\n    return count", '    return len(set(string))', '    return
    len(set(string))', '    return len(set(string))', '    return len(set(string))',
  '    return len(set(string))', '    return len(set(string))', '    return len(set(string))',
  "    count = 0\n    for char in string:\n        if char.isalpha():\n          \
    \  count += 1\n    return count", '    return len(set(string))', "    count =\
    \ 0\n    for char in string:\n        if char.isalpha():\n            count +=\
    \ 1\n    return count", "    count = 0\n    for char in string:\n        if char.isalpha():\n\
    \            count += 1\n    return count", '    return len(set(string))', '    return
    len(set(string))', '    return len(set(string))', "    count = 0\n    for char\
    \ in string:\n        if char.isalpha():\n            count += 1\n    return count",
  "    count = 0\n    for char in string:\n        if char.isalpha():\n          \
    \  count += 1\n    return count", '    return len(set(string))', '    return len(set(string))',
  '    return len(set(string))', '    return len(set(string))', "    count = 0\n \
    \   for i in range(len(string)):\n        if string[i] != string[i].lower():\n\
    \            count += 1\n    return count", '    return len(set(string))', '    return
    len(set(string))', '    return len(set(string))', '    return len(set(string))',
  "    count = 0\n    for char in string:\n        if char.isalpha():\n          \
    \  count += 1\n    return count", '    return len(set(string))', '    return len(set(string))',
  "    count = 0\n    for i in range(len(string)):\n        if string[i] != string[i].lower():\n\
    \            count += 1\n    return count", '    return len(set(string))', '    return
    len(set(string))', "    count = 0\n    for i in range(len(string)):\n        if\
    \ string[i] != string[i].lower():\n            count += 1\n    return count",
  '    return len(set(string))', "    count = 0\n    for char in string:\n       \
    \ if char.isalpha():\n            count += 1\n    return count", '    return len(set(string))',
  "    count = 0\n    for i in range(len(string)):\n        if string[i] != string[i].lower():\n\
    \            count += 1\n    return count\n", "    count = 0\n    for char in\
    \ string:\n        if char.isalpha():\n            count += 1\n    return count",
  '    return len(set(string))', '    return len(set(string))', "    count = 0\n \
    \   for char in string:\n        if char.isalpha():\n            count += 1\n\
    \    return count", "    count = 0\n    for char in string:\n        if char.isalpha():\n\
    \            count += 1\n    return count", "    count = 0\n    for char in string:\n\
    \        if char.isalpha():\n            count += 1\n    return count", "    count\
    \ = 0\n    for c in string:\n        if c.isalpha():\n            count += 1\n\
    \    return count", "    count = 0\n    for char in string:\n        if char.isalpha():\n\
    \            count += 1\n    return count", '    return len(set(string))', " \
    \   count = 0\n    for char in string:\n        if char.isalpha():\n         \
    \   count += 1\n    return count", '    return len(set(string))', '    return
    len(set(string))', "    count = 0\n    for char in string:\n        if char.isalpha():\n\
    \            count += 1\n    return count", '    return len(set(string))', '    return
    len(set(string))', '    return len(set(string))', "    count = 0\n    for char\
    \ in string:\n        if char.isalpha():\n            count += 1\n    return count",
  '    return len(set(string))', '    return len(set(string))', '    return len(set(string))',
  '    return len(set(string))', '    return len(set(string))', "    count = 0\n \
    \   for char in string:\n        if char.isalpha():\n            count += 1\n\
    \    return count", "    count = 0\n    for char in string:\n        if char.isalpha():\n\
    \            count += 1\n    return count", "    count = 0\n    for char in string:\n\
    \        if char.isalpha():\n            count += 1\n    return count", '    return
    len(set(string))', '    return len(set(string))', '    return len(set(string))',
  '    return len(set(string))', "    count = 0\n    for i in string:\n        if\
    \ i.isalpha():\n            count += 1\n    return count", '    return len(set(string))',
  "    count = 0\n    for i in string:\n        if i.isalpha():\n            count\
    \ += 1\n    return count", '    return len(set(string))', "    count = 0\n   \
    \ for i in range(len(string)):\n        if string[i] != string[i].lower():\n \
    \           count += 1\n    return count", "    count = 0\n    for char in string:\n\
    \        if char.isalpha():\n            count += 1\n    return count", '    return
    len(set(string))', '    return len(set(string))', '    return len(set(string))',
  '    return len(set(string))', "    count = 0\n    for i in string:\n        if\
    \ i.isalpha():\n            count += 1\n    return count", '    return len(set(string))',
  "    count = 0\n    for char in string:\n        if char.isalpha():\n          \
    \  count += 1\n    return count", '    return len(set(string))', "    count =\
    \ 0\n    for i in range(len(string)):\n        if string[i] != string[i].lower():\n\
    \            count += 1\n    return count", "    count = 0\n    for char in string:\n\
    \        if char.isalpha():\n            count += 1\n    return count", '    return
    len(set(string))', "    count = 0\n    for i in range(len(string)):\n        if\
    \ string[i] != string[i].lower():\n            count += 1\n    return count",
  "    count = 0\n    for i in string:\n        if i.isalpha():\n            count\
    \ += 1\n    return count", "    count = 0\n    for char in string:\n        if\
    \ char.isalpha():\n            count += 1\n    return count", "    count = 0\n\
    \    for char in string:\n        if char.isalpha():\n            count += 1\n\
    \    return count", '    return len(set(string))', '    return len(set(string))',
  "    count = 0\n    for i in range(len(string)):\n        if string[i] != string[i].lower():\n\
    \            count += 1\n    return count", "    count = 0\n    for i in string:\n\
    \        if i.isalpha():\n            count += 1\n    return count", '    return
    len(set(string))', "    count = 0\n    for char in string:\n        if char.isalpha():\n\
    \            count += 1\n    return count", '    return len(set(string))', '    return
    len(set(string))', '    return len(set(string))', '    return len(set(string))',
  '    return len(set(string))', "    count = 0\n    for i in string:\n        if\
    \ i.isalpha():\n            count += 1\n    return count", '    return len(set(string))',
  "    count = 0\n    for char in string:\n        if char.isalpha():\n          \
    \  count += 1\n    return count", "    count = 0\n    for char in string:\n  \
    \      if char.isalpha():\n            count += 1\n    return count", '    return
    len(set(string))', '    return len(set(string))', "    count = 0\n    for char\
    \ in string:\n        if char.isalpha():\n            count += 1\n    return count",
  '    return len(set(string))', "    count = 0\n    for i in range(len(string)):\n\
    \        if string[i] != string[i].lower():\n            count += 1\n    return\
    \ count", '    return len(set(string))', "    count = 0\n    for char in string:\n\
    \        if char.isalpha():\n            count += 1\n    return count", '    return
    len(set(string))', '    return len(set(string))', "    count = 0\n    for i in\
    \ range(len(string)):\n        if string[i] != string[i].lower():\n          \
    \  count += 1\n    return count", "    count = 0\n    for char in string:\n  \
    \      if char.isalpha():\n            count += 1\n    return count", "    count\
    \ = 0\n    for char in string:\n        if char.isalpha():\n            count\
    \ += 1\n    return count", '    return len(set(string))', "    count = 0\n   \
    \ for i in string:\n        if i.isalpha():\n            count += 1\n    return\
    \ count", '    return len(set(string))', '    return len(set(string))', '    return
    len(set(string))', "    count = 0\n    for i in range(len(string)):\n        if\
    \ string[i] != string[i].lower():\n            count += 1\n    return count",
  '    return len(set(string))', '    return len(set(string))', "    count = 0\n \
    \   for char in string:\n        count += 1 if char.isalpha() else 0\n    return\
    \ count", '    return len(set(string))', "    count = 0\n    for char in string:\n\
    \        if char.isalpha():\n            count += 1\n    return count", '    return
    len(set(string))', '    return len(set(string))', '    return len(set(string))',
  '    return len(set(string))', '    return len(set(string))', "    count = 0\n \
    \   for char in string:\n        if char.isalpha():\n            count += 1\n\
    \    return count", '    return len(set(string))', "    count = 0\n    for i in\
    \ range(len(string)):\n        if string[i] != string[i].lower():\n          \
    \  count += 1\n    return count", "    count = 0\n    for char in string:\n  \
    \      if char.isalpha():\n            count += 1\n    return count", "    count\
    \ = 0\n    for i in range(len(string)):\n        if string[i] != string[i].lower():\n\
    \            count += 1\n    return count", "    count = 0\n    for char in string:\n\
    \        if char.isalpha():\n            count += 1\n    return count", "    count\
    \ = 0\n    for i in range(len(string)):\n        if string[i] != string[i].lower():\n\
    \            count += 1\n    return count", "    count = 0\n    for char in string:\n\
    \        if char.isalpha():\n            count += 1\n    return count", '    return
    len(set(string))', '    return len(set(string))', '    return len(set(string))',
  '    return len(set(string))', '    return len(set(string))', '    return len(set(string))',
  "    count = 0\n    for char in string:\n        if char.isalpha():\n          \
    \  count += 1\n    return count", "    count = 0\n    for i in string:\n     \
    \   if i.isalpha():\n            count += 1\n    return count", '    return len(set(string))',
  "    count = 0\n    for i in string:\n        if i.isalpha():\n            count\
    \ += 1\n    return count", '    return len(set(string))', "    count = 0\n   \
    \ for char in string:\n        if char.isalpha():\n            count += 1\n  \
    \  return count", '    return len(set(string))', "    count = 0\n    for char\
    \ in string:\n        if char.isalpha():\n            count += 1\n    return count",
  "    count = 0\n    for char in string:\n        if char.isalpha():\n          \
    \  count += 1\n    return count", "    count = 0\n    for char in string:\n  \
    \      if char.isalpha():\n            count += 1\n    return count", '    return
    len(set(string))', '    return len(set(string))', '    return len(set(string))',
  "    count = 0\n    for char in string:\n        if char.isalpha():\n          \
    \  count += 1\n    return count", '    return len(set(string))', '    return len(set(string))',
  '    return len(set(string))', "    count = 0\n    for char in string:\n       \
    \ if char.isalpha():\n            count += 1\n    return count", '    return len(set(string))',
  '    return len(set(string))', "    count = 0\n    for char in string:\n       \
    \ if char.isalpha():\n            count += 1\n    return count", '    return len(set(string))',
  '    return len(set(string))', "    count = 0\n    for i in string:\n        if\
    \ i.isalpha():\n            count += 1\n    return count", '    return len(set(string))',
  "    count = 0\n    for char in string:\n        if char.isalpha():\n          \
    \  count += 1\n    return count", "    count = 0\n    for char in string:\n  \
    \      if char.isalpha():\n            count += 1\n    return count", '    return
    len(set(string))', '    return len(set(string))', '    return len(set(string))',
  '    return len(set(string))', '    return len(set(string))']
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
