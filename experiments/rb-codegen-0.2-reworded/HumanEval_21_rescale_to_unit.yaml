name: HumanEval_21_rescale_to_unit
language: rb
prompt: "# Given array of numbers (of at least two elements), apply a linear transform\
  \ to that array,\n# such that the smallest number will become 0 and the largest\
  \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
  \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
  \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
  \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
  \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
  \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
  \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
  end\n"
completions: ['    return [n / max(numbers) for n in numbers]', '    return [numbers[0]
    - min(numbers) * 1.0, numbers[1] - min(numbers) * 1.0, numbers[2] - min(numbers)
    * 1.0, numbers[3] - min(numbers) * 1.0, numbers[4] - min(numbers) * 1.0]', '    return
    [x / max(numbers) for x in numbers]', '    return [x / max(numbers) for x in numbers]',
  '    return [n / max(numbers) for n in numbers]', "    min_val = min(numbers)\n\
    \    max_val = max(numbers)\n    return [x - min_val for x in numbers] / (max_val\
    \ - min_val)", "    min_val = min(numbers)\n    max_val = max(numbers)\n    return\
    \ [(n - min_val) / (max_val - min_val) for n in numbers]", '    return [0.0 if
    x < 0.0 else x / max(numbers) for x in numbers]', '    return [n/max(numbers)
    for n in numbers]', '    return [n / max(numbers) for n in numbers]', '    return
    [n / max(numbers) for n in numbers]', '    return [0.0] + [x / max(numbers) for
    x in numbers] + [1.0]', '    return [x/max(numbers) for x in numbers]', '    return
    [x/max(numbers) for x in numbers]', '    return [n/max(numbers) for n in numbers]',
  '    return [0.0] + [n / max(numbers) for n in numbers] + [1.0]', '    return [n
    / max(numbers) for n in numbers]', '    return [x / max(numbers) for x in numbers]',
  '    return [x / max(numbers) for x in numbers]', '    return [n / max(numbers)
    for n in numbers]', '    return [0.0 if x < min(numbers) else x / max(numbers)
    for x in numbers]', "    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    return [x - min_value for x in numbers] / (max_value - min_value)", '    return
    [x / max(numbers) for x in numbers]', '    return [n / max(numbers) for n in numbers]',
  '    return [0.0] + [x / max(numbers) for x in numbers] + [1.0]', '    return [x/max(numbers)
    for x in numbers]', '    return [n / max(numbers) for n in numbers]', '    return
    [0.0 if x < min(numbers) else (1.0 if x > max(numbers) else (x - min(numbers))
    / (max(numbers) - min(numbers))) for x in numbers]', '    return [n / max(numbers)
    for n in numbers]', '    return [n / max(numbers) for n in numbers]', '    return
    [n / max(numbers) for n in numbers]', "    min_value = min(numbers)\n    max_value\
    \ = max(numbers)\n    return [x - min_value for x in numbers] / (max_value - min_value)",
  '    return [x / max(numbers) for x in numbers]', "    min_val = min(numbers)\n\
    \    max_val = max(numbers)\n    return [x - min_val for x in numbers] / (max_val\
    \ - min_val)", '    return [0.0] + [n/sum(numbers) for n in numbers] + [1.0]',
  '    return [n / max(numbers) for n in numbers]', '    return [x / max(numbers)
    for x in numbers]', '    return [n / max(numbers) for n in numbers]', '    return
    [0.0] + [n / max(numbers) for n in numbers] + [1.0]', '    return [n / max(numbers)
    for n in numbers]', '    return [x / max(numbers) for x in numbers]', '    return
    [n / max(numbers) for n in numbers]', '    return [n / max(numbers) for n in numbers]',
  '    return [x / max(numbers) for x in numbers]', '    return [n / max(numbers)
    for n in numbers]', '    return [n / max(numbers) for n in numbers]', "    min_value\
    \ = min(numbers)\n    max_value = max(numbers)\n    return [(n - min_value) /\
    \ (max_value - min_value) for n in numbers]", '    return [x/max(numbers) for
    x in numbers]', '    return [x / max(numbers) for x in numbers]', '    return
    [numbers[0] / max(numbers), numbers[1] / max(numbers)]', '    return [n / max(numbers)
    for n in numbers]', '    return [float(n)/max(numbers) for n in numbers]', '    return
    [numbers[0] - min(numbers) * 1.0, numbers[1] - min(numbers) * 1.0, numbers[2]
    - min(numbers) * 1.0, numbers[3] - min(numbers) * 1.0, numbers[4] - min(numbers)
    * 1.0]', "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(n\
    \ - min_val) / (max_val - min_val) for n in numbers]", '    return [0.0] + [n
    / max(numbers) for n in numbers] + [1.0]', "    min_val = min(numbers)\n    max_val\
    \ = max(numbers)\n    return [n - min_val for n in numbers]", '    return [n /
    max(numbers) for n in numbers]', "    min_value = min(numbers)\n    max_value\
    \ = max(numbers)\n    return [value - min_value for value in numbers] / (max_value\
    \ - min_value)", "    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    return [x - min_value for x in numbers] / (max_value - min_value)", '    return
    [x/max(numbers) for x in numbers]', '    return [0.0] + [n / max(numbers) for
    n in numbers] + [1.0]', "    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    return [x - min_value for x in numbers] / (max_value - min_value)", '    return
    [x / max(numbers) for x in numbers]', '    return [n / max(numbers) for n in numbers]',
  '    return [numbers[0] / max(numbers), numbers[1] / max(numbers), numbers[2] /
    max(numbers), numbers[3] / max(numbers), numbers[4] / max(numbers)]', '    return
    [0.0] + [x / max(numbers) for x in numbers] + [1.0]', "    min_value = min(numbers)\n\
    \    max_value = max(numbers)\n    return [(n - min_value) / (max_value - min_value)\
    \ for n in numbers]", '    return [0.0 if x < 0.0 else (1.0 if x > 1.0 else x)
    for x in numbers]', "    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    return [x - min_value for x in numbers] / (max_value - min_value)", '    return
    [n/max(numbers) for n in numbers]', '    return [0.0] + [n / max(numbers) for
    n in numbers] + [1.0]', '    return [n / max(numbers) for n in numbers]', '    return
    [0.0 if x < min(numbers) else (1.0 if x > max(numbers) else (x - min(numbers))
    / (max(numbers) - min(numbers))) for x in numbers]', '    return [n / max(numbers)
    for n in numbers]', "    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    return [(x - min_value) / (max_value - min_value) for x in numbers]", " \
    \   min_value = min(numbers)\n    max_value = max(numbers)\n    return [x - min_value\
    \ for x in numbers] / (max_value - min_value)", '    return [x / max(numbers)
    for x in numbers]', "    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    return [(n - min_value) / (max_value - min_value) for n in numbers]", " \
    \   min_value = min(numbers)\n    max_value = max(numbers)\n    return [x - min_value\
    \ for x in numbers] / (max_value - min_value)", "    min_value = min(numbers)\n\
    \    max_value = max(numbers)\n    return [(n - min_value) / (max_value - min_value)\
    \ for n in numbers]", '    return [x / max(numbers) for x in numbers]', '    return
    [x / max(numbers) for x in numbers]', '    return [n / max(numbers) for n in numbers]',
  '    return [n/max(numbers) for n in numbers]', '    return [0.0 if x < min(numbers)
    else (1.0 if x > max(numbers) else (x - min(numbers)) / (max(numbers) - min(numbers)))
    for x in numbers]', '    return [x / max(numbers) for x in numbers]', "    min_value\
    \ = min(numbers)\n    max_value = max(numbers)\n    return [x - min_value for\
    \ x in numbers] / (max_value - min_value)", "    min_value = min(numbers)\n  \
    \  max_value = max(numbers)\n    return [(n - min_value) / (max_value - min_value)\
    \ for n in numbers]", '    return [0.0] + [n/max(numbers) for n in numbers] +
    [1.0]', "    min_value = min(numbers)\n    max_value = max(numbers)\n    return\
    \ [(n - min_value) / (max_value - min_value) for n in numbers]", '    return [numbers[0]
    - min(numbers) * 1.0, numbers[1] - min(numbers) * 1.0, numbers[2] - min(numbers)
    * 1.0, numbers[3] - min(numbers) * 1.0, numbers[4] - min(numbers) * 1.0]', " \
    \   min_value = min(numbers)\n    max_value = max(numbers)\n    return [n - min_value\
    \ for n in numbers]", '    return [0.0] + [n / max(numbers) for n in numbers]
    + [1.0]', '    return [n / max(numbers) for n in numbers]', '    return [n / max(numbers)
    for n in numbers]', "    min_val = min(numbers)\n    max_val = max(numbers)\n\
    \    return [n - min_val for n in numbers]", '    return [n/max(numbers) for n
    in numbers]', '    return [n / max(numbers) for n in numbers]', '    return [0.0]
    + [x / max(numbers) for x in numbers] + [1.0]', '    return [float(i) / max(numbers)
    for i in numbers]', '    return [n / max(numbers) for n in numbers]', '    return
    [n / max(numbers) for n in numbers]', "    min_value = min(numbers)\n    max_value\
    \ = max(numbers)\n    return [(n - min_value) / (max_value - min_value) for n\
    \ in numbers]", '    return [n / max(numbers) for n in numbers]', '    return
    [n/max(numbers) for n in numbers]', "    min_value = min(numbers)\n    max_value\
    \ = max(numbers)\n    return [x - min_value for x in numbers] / (max_value - min_value)",
  '    return [n/max(numbers) for n in numbers]', '    return [0.0] + [x / max(numbers)
    for x in numbers] + [1.0]', '    return [x / max(numbers) for x in numbers]',
  "    min_value = min(numbers)\n    max_value = max(numbers)\n    return [(n - min_value)\
    \ / (max_value - min_value) for n in numbers]", '    return [numbers[0] / max(numbers),
    numbers[1] / max(numbers)]', '    return [n / max(numbers) for n in numbers]',
  "    min_value = min(numbers)\n    max_value = max(numbers)\n    return [x - min_value\
    \ for x in numbers] / (max_value - min_value)", '    return [n/max(numbers) for
    n in numbers]', '    return [n / max(numbers) for n in numbers]', '    return
    [n/max(numbers) for n in numbers]', "    min_value = min(numbers)\n    max_value\
    \ = max(numbers)\n    return [x - min_value for x in numbers] / (max_value - min_value)",
  '    return [x / max(numbers) for x in numbers]', '    return [n / max(numbers)
    for n in numbers]', '    return [n / max(numbers) for n in numbers]', '    return
    [x / max(numbers) for x in numbers]', "    min_val = min(numbers)\n    max_val\
    \ = max(numbers)\n    return [(n - min_val) / (max_val - min_val) for n in numbers]",
  '    return [n/max(numbers) for n in numbers]', '    return [x - min(numbers) for
    x in numbers]', '    return [0.0 if x < 0.0 else x / max(numbers) for x in numbers]',
  '    return [x / max(numbers) for x in numbers]', "    min_value = min(numbers)\n\
    \    max_value = max(numbers)\n    return [x - min_value for x in numbers] / (max_value\
    \ - min_value)", "    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    return [x - min_value for x in numbers] / (max_value - min_value)", '    return
    [n / max(numbers) for n in numbers]', '    return [n/max(numbers) for n in numbers]',
  "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [x - min_val\
    \ for x in numbers] / (max_val - min_val)", "    min_val = min(numbers)\n    max_val\
    \ = max(numbers)\n    return [x - min_val for x in numbers] / (max_val - min_val)",
  '    return [0.0] + [x / max(numbers) for x in numbers] + [1.0]', '    return [n
    / max(numbers) for n in numbers]', '    return [n / max(numbers) for n in numbers]',
  '    return [0.0] + [x / max(numbers) for x in numbers] + [1.0]', '    return [n
    / max(numbers) for n in numbers]', '    return [0.0] + [x / max(numbers) for x
    in numbers] + [1.0]', '    return [x / max(numbers) for x in numbers]', "    min_value\
    \ = min(numbers)\n    max_value = max(numbers)\n    return [x - min_value for\
    \ x in numbers] / (max_value - min_value)", '    return [0.0 if x < 0.0 else (1.0
    if x > 1.0 else x) for x in numbers]', '    return [x / max(numbers) for x in
    numbers]', '    return [numbers[0] - min(numbers) * 1.0, numbers[1] - min(numbers)
    * 1.0, numbers[2] - min(numbers) * 1.0, numbers[3] - min(numbers) * 1.0, numbers[4]
    - min(numbers) * 1.0]', "    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    return [(n - min_value) / (max_value - min_value) for n in numbers]", '    return
    [n / max(numbers) for n in numbers]', '    return [n/max(numbers) for n in numbers]',
  '    return [n / max(numbers) for n in numbers]', '    return [0.0] + [x / max(numbers)
    for x in numbers] + [1.0]', "    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    return [x - min_value for x in numbers] / (max_value - min_value)", "   \
    \ min_value = min(numbers)\n    max_value = max(numbers)\n    return [x - min_value\
    \ for x in numbers] / (max_value - min_value)", '    return [0.0] + [x / max(numbers)
    for x in numbers] + [1.0]', '    return [n / max(numbers) for n in numbers]',
  '    return [n/max(numbers) for n in numbers]', "    min_value = min(numbers)\n\
    \    max_value = max(numbers)\n    return [x - min_value for x in numbers] / (max_value\
    \ - min_value)", "    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    return [x - min_value for x in numbers] / (max_value - min_value)", "   \
    \ min_value = min(numbers)\n    max_value = max(numbers)\n    return [value -\
    \ min_value for value in numbers] / (max_value - min_value)", "    min_value =\
    \ min(numbers)\n    max_value = max(numbers)\n    return [x - min_value for x\
    \ in numbers] / (max_value - min_value)", '    return [n / max(numbers) for n
    in numbers]', '    return [n / max(numbers) for n in numbers]', "    min_value\
    \ = min(numbers)\n    max_value = max(numbers)\n    return [x - min_value for\
    \ x in numbers] / (max_value - min_value)", '    return [n / max(numbers) for
    n in numbers]', '    return [n/max(numbers) for n in numbers]', '    return [x
    / max(numbers) for x in numbers]', "    min_val = min(numbers)\n    max_val =\
    \ max(numbers)\n    return [x - min_val for x in numbers] / (max_val - min_val)",
  '    return [n/max(numbers) for n in numbers]', '    return [n / max(numbers) for
    n in numbers]', '    return [x / max(numbers) for x in numbers]', '    return
    [n/max(numbers) for n in numbers]', '    return [numbers[0] - min(numbers) * 1.0,
    numbers[1] - min(numbers) * 1.0, numbers[2] - min(numbers) * 1.0, numbers[3] -
    min(numbers) * 1.0, numbers[4] - min(numbers) * 1.0]', '    return [numbers[0]
    / max(numbers), numbers[1] / max(numbers)]', "    min_value = min(numbers)\n \
    \   max_value = max(numbers)\n    return [(n - min_value) / (max_value - min_value)\
    \ for n in numbers]", '    return [numbers[0] - min(numbers) * 1.0, numbers[1]
    - min(numbers) * 1.0, numbers[2] - min(numbers) * 1.0, numbers[3] - min(numbers)
    * 1.0, numbers[4] - min(numbers) * 1.0]', "    min_value = min(numbers)\n    max_value\
    \ = max(numbers)\n    return [(n - min_value) / (max_value - min_value) for n\
    \ in numbers]", '    return [n/max(numbers) for n in numbers]', '    return [x
    / max(numbers) for x in numbers]', "    min_value = min(numbers)\n    max_value\
    \ = max(numbers)\n    return [x - min_value for x in numbers] / (max_value - min_value)",
  '    return [n / max(numbers) for n in numbers]', '    return [numbers[0] / max(numbers),
    numbers[1] / max(numbers)]', '    return [n / max(numbers) for n in numbers]',
  "    min_value = min(numbers)\n    max_value = max(numbers)\n    return [(n - min_value)\
    \ / (max_value - min_value) for n in numbers]", '    return [0.0 if x < 0.0 else
    (1.0 if x > 1.0 else x) for x in numbers]', '    return [0.0] + [n / max(numbers)
    for n in numbers] + [1.0]', '    return [n / max(numbers) for n in numbers]',
  '    return [0.0] + [x / max(numbers) for x in numbers] + [1.0]', '    return [numbers[0]
    - min(numbers) + 1, numbers[1] - min(numbers) + 1, numbers[2] - min(numbers) +
    1, numbers[3] - min(numbers) + 1, numbers[4] - min(numbers) + 1]', '    return
    [0.0] + [n / max(numbers) for n in numbers] + [1.0]', '    return [0.0] + [n /
    max(numbers) for n in numbers] + [1.0]', '    return [numbers[0] - min(numbers)
    * 1.0, numbers[1] - min(numbers) * 1.0, numbers[2] - min(numbers) * 1.0, numbers[3]
    - min(numbers) * 1.0, numbers[4] - min(numbers) * 1.0]', '    return [0.0 if x
    < min(numbers) else (1.0 if x > max(numbers) else (x - min(numbers)) / (max(numbers)
    - min(numbers))) for x in numbers]', '    return [n / max(numbers) for n in numbers]',
  "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(n - min_val)\
    \ / (max_val - min_val) for n in numbers]", '    return [0.0] + [n / max(numbers)
    for n in numbers] + [1.0]', '    return [0.0] + [x / max(numbers) for x in numbers]
    + [1.0]', '    return [x / max(numbers) for x in numbers]', '    return [n / max(numbers)
    for n in numbers]', '    return [numbers[0] - min(numbers) + 1.0] + [numbers[i]
    / max(numbers) for i in range(1, len(numbers))]', '    return [0.0] + [x / max(numbers)
    for x in numbers] + [1.0]', "    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    return [x - min_value for x in numbers] / (max_value - min_value)", '    return
    [x / max(numbers) for x in numbers]', '    return [0.0 if x < 0.0 else (1.0 if
    x > 1.0 else x) for x in numbers]']
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
