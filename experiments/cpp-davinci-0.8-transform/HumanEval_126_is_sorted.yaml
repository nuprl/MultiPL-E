name: HumanEval_126_is_sorted
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
  \ return whether or not they are sorted\n// in ascending order. If list has more\
  \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
  \ and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
  // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
  \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
  \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
  \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
  \ (long)2, (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
  \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
  \ lst) {\n"
tests: "}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
  \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
  \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
  \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
  \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3,\
  \ (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
  \ (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
completions: []
stop_tokens:
- "\n}"
