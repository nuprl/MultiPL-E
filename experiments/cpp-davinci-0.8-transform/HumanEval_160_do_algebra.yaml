name: HumanEval_160_do_algebra
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two lists operator,\
  \ and operand. The first list has basic algebra operations, and \n// the second\
  \ list is a list of integers. Use the two given lists to build the algebric \n//\
  \ expression and return the evaluation of this expression.\n// The basic algebra\
  \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( *\
  \ ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+',\
  \ '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result =\
  \ 9\n// Note:\n// The length of operator list is equal to the length of operand\
  \ list minus one.\n// Operand is a list of of non-negative integers.\n// Operator\
  \ list has at least one operator, and operand list has at least two operands.\n\
  long do_algebra(std::vector<std::string> op, std::vector<long> operand) {\n"
tests: "}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3,\
  \ (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
  \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4}))) ==\
  \ (8));\n}\n"
completions: []
stop_tokens:
- "\n}"
