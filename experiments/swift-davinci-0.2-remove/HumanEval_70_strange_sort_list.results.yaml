language: swift
name: HumanEval_70_strange_sort_list
results:
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            result.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while !lst.isEmpty\
    \ {\n        let min = lst.min()!\n        let max = lst.max()!\n        result.append(min)\n\
    \        result.append(max)\n        lst.remove(min)\n        lst.remove(max)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpf5pxdy1f.swift:14:13: error: no exact matches in call to instance\
    \ method 'remove'\n        lst.remove(min)\n            ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n/tmp/tmpf5pxdy1f.swift:15:13: error: no exact matches\
    \ in call to instance method 'remove'\n        lst.remove(max)\n            ^\n\
    Swift.Array:10:37: note: incorrect labels for candidate (have: '(_:)', expected:\
    \ '(at:)')\n    @inlinable public mutating func remove(at index: Int) -> Element\n\
    \                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1660028453
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst.sorted()\n    var result: [Int] = []\n\
    \    var is_min = true\n    while !lst.isEmpty {\n        if is_min {\n      \
    \      result.append(lst.removeFirst())\n        } else {\n            result.append(lst.removeLast())\n\
    \        }\n        is_min = !is_min\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while !lst.isEmpty\
    \ {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            result.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var sorted: [Int] = []\n    while\
    \ !lst.isEmpty {\n        sorted.append(lst.remove(at: lst.index(of: lst.min()!)!))\n\
    \        if !lst.isEmpty {\n            sorted.append(lst.remove(at: lst.index(of:\
    \ lst.max()!)!))\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            result.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while !lst.isEmpty\
    \ {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            result.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while lst.count\
    \ > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while lst.count\
    \ > 0 {\n        let min = lst.min()!\n        let max = lst.max()!\n        result.append(min)\n\
    \        result.append(max)\n        lst.remove(at: lst.index(of: min)!)\n   \
    \     lst.remove(at: lst.index(of: max)!)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpmmb5hwxt/tmpmmb5hwxt.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b2098428c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b209811f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b209811f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b209811f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b209811ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpmmb5hwxt                        0x0000556283fce78c <unavailable> + 10124

    6    tmpmmb5hwxt                        0x0000556283fcd7db <unavailable> + 6107

    7    libc.so.6                          0x00002b2098614460 __libc_start_main +
    245

    8    tmpmmb5hwxt                        0x0000556283fcd379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    let sorted = lst.sorted()\n    var result = [Int]()\n\
    \    var i = 0\n    var j = sorted.count - 1\n    while i <= j {\n        result.append(sorted[i])\n\
    \        i += 1\n        if i <= j {\n            result.append(sorted[j])\n \
    \           j -= 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ lst.count > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        result.append(lst.remove(at: lst.index(of: lst.min()!)!))\n     \
    \   if !lst.isEmpty {\n            result.append(lst.remove(at: lst.index(of:\
    \ lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while !lst.isEmpty\
    \ {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            result.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpvkm58_fw/tmpvkm58_fw.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f899c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f896bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f896bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f896bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f896bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvkm58_fw                        0x000055eb21f4b73d <unavailable> + 10045

    6    tmpvkm58_fw                        0x000055eb21f4a77b <unavailable> + 6011

    7    libc.so.6                          0x00002b0f89bb4460 __libc_start_main +
    245

    8    tmpvkm58_fw                        0x000055eb21f4a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpvkm58_fw/tmpvkm58_fw.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f899c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f896bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f896bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f896bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f896bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvkm58_fw                        0x000055eb21f4b73d <unavailable> + 10045

    6    tmpvkm58_fw                        0x000055eb21f4a77b <unavailable> + 6011

    7    libc.so.6                          0x00002b0f89bb4460 __libc_start_main +
    245

    8    tmpvkm58_fw                        0x000055eb21f4a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result: [Int] = []\n    var lst = lst\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(min)\n\
    \        lst.remove(max)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpyntmkg39.swift:14:13: error: no exact matches in call to instance\
    \ method 'remove'\n        lst.remove(min)\n            ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n/tmp/tmpyntmkg39.swift:15:13: error: no exact matches\
    \ in call to instance method 'remove'\n        lst.remove(max)\n            ^\n\
    Swift.Array:10:37: note: incorrect labels for candidate (have: '(_:)', expected:\
    \ '(at:)')\n    @inlinable public mutating func remove(at index: Int) -> Element\n\
    \                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1660028453
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while !lst.isEmpty\
    \ {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            result.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpvkm58_fw/tmpvkm58_fw.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f899c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f896bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f896bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f896bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f896bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvkm58_fw                        0x000055eb21f4b73d <unavailable> + 10045

    6    tmpvkm58_fw                        0x000055eb21f4a77b <unavailable> + 6011

    7    libc.so.6                          0x00002b0f89bb4460 __libc_start_main +
    245

    8    tmpvkm58_fw                        0x000055eb21f4a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        lst.remove(at: lst.index(of: min)!)\n   \
    \     if !lst.isEmpty {\n            result.append(max)\n            lst.remove(at:\
    \ lst.index(of: max)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            result.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ lst.count > 0 {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmph6yg_j02/tmph6yg_j02.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b73d6718c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73d640f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b73d640f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b73d640f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b73d640ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmph6yg_j02                        0x0000562c2e5d5737 <unavailable> + 10039

    6    tmph6yg_j02                        0x0000562c2e5d477b <unavailable> + 6011

    7    libc.so.6                          0x00002b73d6904460 __libc_start_main +
    245

    8    tmph6yg_j02                        0x0000562c2e5d4319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ lst.count > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var sorted = lst.sorted()\n\
    \    var min = sorted.removeFirst()\n    var max = sorted.removeLast()\n    while\
    \ !sorted.isEmpty {\n        result.append(min)\n        result.append(max)\n\
    \        min = sorted.removeFirst()\n        max = sorted.removeLast()\n    }\n\
    \    result.append(min)\n    result.append(max)\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:870: Fatal error: Can''t remove
    last element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d4bf49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d4bc40561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9d4bc40286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9d4bc4013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9d4bc3fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b9d4bd41c1d <unavailable> + 2489373

    6    tmpnc4tvaxf                        0x0000560771d1d416 <unavailable> + 9238

    7    tmpnc4tvaxf                        0x0000560771d1c76b <unavailable> + 5995

    8    libc.so.6                          0x00002b9d4c135460 __libc_start_main +
    245

    9    tmpnc4tvaxf                        0x0000560771d1c309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var res = [Int]()\n    while !lst.isEmpty\
    \ {\n        res.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            res.append(lst.max()!)\n            lst.remove(at:\
    \ lst.index(of: lst.max()!)!)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ lst.count > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        let min = lst.min()!\n        let max = lst.max()!\n        result.append(min)\n\
    \        result.append(max)\n        lst.remove(at: lst.index(of: min)!)\n   \
    \     lst.remove(at: lst.index(of: max)!)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpj1a7q7ru/tmpj1a7q7ru.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b6666a06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66666fd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b66666fd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b66666fd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b66666fcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpj1a7q7ru                        0x000056531b682789 <unavailable> + 10121

    6    tmpj1a7q7ru                        0x000056531b6817cb <unavailable> + 6091

    7    libc.so.6                          0x00002b6666bf2460 __libc_start_main +
    245

    8    tmpj1a7q7ru                        0x000056531b681369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while !lst.isEmpty\
    \ {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            result.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpvkm58_fw/tmpvkm58_fw.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f899c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f896bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f896bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f896bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f896bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvkm58_fw                        0x000055eb21f4b73d <unavailable> + 10045

    6    tmpvkm58_fw                        0x000055eb21f4a77b <unavailable> + 6011

    7    libc.so.6                          0x00002b0f89bb4460 __libc_start_main +
    245

    8    tmpvkm58_fw                        0x000055eb21f4a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpvkm58_fw/tmpvkm58_fw.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f899c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f896bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f896bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f896bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f896bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvkm58_fw                        0x000055eb21f4b73d <unavailable> + 10045

    6    tmpvkm58_fw                        0x000055eb21f4a77b <unavailable> + 6011

    7    libc.so.6                          0x00002b0f89bb4460 __libc_start_main +
    245

    8    tmpvkm58_fw                        0x000055eb21f4a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while lst.count\
    \ > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while lst.count\
    \ > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpvkm58_fw/tmpvkm58_fw.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f899c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f896bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f896bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f896bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f896bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvkm58_fw                        0x000055eb21f4b73d <unavailable> + 10045

    6    tmpvkm58_fw                        0x000055eb21f4a77b <unavailable> + 6011

    7    libc.so.6                          0x00002b0f89bb4460 __libc_start_main +
    245

    8    tmpvkm58_fw                        0x000055eb21f4a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ lst.count > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while !lst.isEmpty\
    \ {\n        let min = lst.min()!\n        let max = lst.max()!\n        result.append(min)\n\
    \        result.append(max)\n        lst.remove(at: lst.index(of: min)!)\n   \
    \     lst.remove(at: lst.index(of: max)!)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp68jh45e4/tmp68jh45e4.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b5de9ebec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5de9bb5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5de9bb5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5de9bb513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5de9bb4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp68jh45e4                        0x00005633d5bff782 <unavailable> + 10114

    6    tmp68jh45e4                        0x00005633d5bfe7cb <unavailable> + 6091

    7    libc.so.6                          0x00002b5dea0aa460 __libc_start_main +
    245

    8    tmp68jh45e4                        0x00005633d5bfe369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result: [Int] = []\n    var lst = lst\n    var min\
    \ = lst.min()!\n    var max = lst.max()!\n    while lst.count > 0 {\n        if\
    \ lst.contains(min) {\n            result.append(min)\n            lst.remove(at:\
    \ lst.index(of: min)!)\n        }\n        if lst.contains(max) {\n          \
    \  result.append(max)\n            lst.remove(at: lst.index(of: max)!)\n     \
    \   }\n        min = lst.min()!\n        max = lst.max()!\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp5tlp1fwc/tmp5tlp1fwc.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b38669cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38666c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b38666c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b38666c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b38666c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp5tlp1fwc                        0x0000564a541e4972 <unavailable> + 10610

    6    tmp5tlp1fwc                        0x0000564a541e36ac <unavailable> + 5804

    7    libc.so.6                          0x00002b3866bba460 __libc_start_main +
    245

    8    tmp5tlp1fwc                        0x0000564a541e3389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while lst.count\
    \ > 0 {\n        let min = lst.min()!\n        let max = lst.max()!\n        result.append(min)\n\
    \        result.append(max)\n        lst.remove(at: lst.index(of: min)!)\n   \
    \     lst.remove(at: lst.index(of: max)!)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp_bvo8vf1/tmp_bvo8vf1.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ae00c440c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae00c137561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae00c137286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae00c13713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae00c136bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp_bvo8vf1                        0x00005568d884c793 <unavailable> + 10131

    6    tmp_bvo8vf1                        0x00005568d884b7db <unavailable> + 6107

    7    libc.so.6                          0x00002ae00c62c460 __libc_start_main +
    245

    8    tmp_bvo8vf1                        0x00005568d884b379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ lst.count > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while !lst.isEmpty\
    \ {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            result.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpvkm58_fw/tmpvkm58_fw.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f899c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f896bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f896bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f896bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f896bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvkm58_fw                        0x000055eb21f4b73d <unavailable> + 10045

    6    tmpvkm58_fw                        0x000055eb21f4a77b <unavailable> + 6011

    7    libc.so.6                          0x00002b0f89bb4460 __libc_start_main +
    245

    8    tmpvkm58_fw                        0x000055eb21f4a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var res: [Int] = []\n    while lst.count\
    \ > 0 {\n        res.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            res.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var res = [Int]()\n    while !lst.isEmpty\
    \ {\n        res.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            res.append(lst.max()!)\n            lst.remove(at:\
    \ lst.index(of: lst.max()!)!)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var res = [Int]()\n    var min = Int.max\n\
    \    var max = Int.min\n    var min_idx = 0\n    var max_idx = 0\n    var i =\
    \ 0\n    while i < lst.count {\n        if lst[i] < min {\n            min = lst[i]\n\
    \            min_idx = i\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n            max_idx = i\n        }\n        i += 1\n    }\n    res.append(min)\n\
    \    lst.remove(at: min_idx)\n    res.append(max)\n    lst.remove(at: max_idx)\n\
    \    while lst.count > 0 {\n        min = Int.max\n        max = Int.min\n   \
    \     min_idx = 0\n        max_idx = 0\n        i = 0\n        while i < lst.count\
    \ {\n            if lst[i] < min {\n                min = lst[i]\n           \
    \     min_idx = i\n            }\n            if lst[i] > max {\n            \
    \    max = lst[i]\n                max_idx = i\n            }\n            i +=\
    \ 1\n        }\n        res.append(min)\n        lst.remove(at: min_idx)\n   \
    \     res.append(max)\n        lst.remove(at: max_idx)\n    }\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:1331: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adbff30fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbff006561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adbff006286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adbff00613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adbff005bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002adbfeff3018 <unavailable> + 1355800

    6    tmpb_2l4t5t                        0x0000557fd5167479 <unavailable> + 9337

    7    tmpb_2l4t5t                        0x0000557fd516649c <unavailable> + 5276

    8    libc.so.6                          0x00002adbff4fb460 __libc_start_main +
    245

    9    tmpb_2l4t5t                        0x0000557fd5166179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result: [Int] = []\n    var lst = lst\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result: [Int] = []\n    var lst = lst\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmparj12jw6/tmparj12jw6.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0525823c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b052551a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b052551a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b052551a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0525519bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmparj12jw6                        0x00005618a0420744 <unavailable> + 10052

    6    tmparj12jw6                        0x00005618a041f77b <unavailable> + 6011

    7    libc.so.6                          0x00002b0525a0f460 __libc_start_main +
    245

    8    tmparj12jw6                        0x00005618a041f319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while !lst.isEmpty\
    \ {\n        result.append(lst.remove(at: lst.index(of: lst.min()!)!))\n     \
    \   if !lst.isEmpty {\n            result.append(lst.remove(at: lst.index(of:\
    \ lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while !lst.isEmpty\
    \ {\n        let min = lst.min()\n        let max = lst.max()\n        if let\
    \ min = min {\n            result.append(min)\n            lst.remove(at: lst.index(of:\
    \ min)!)\n        }\n        if let max = max {\n            result.append(max)\n\
    \            lst.remove(at: lst.index(of: max)!)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmphn1odjqf/tmphn1odjqf.swift:18: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ac34a886c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac34a57d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac34a57d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac34a57d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac34a57cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmphn1odjqf                        0x0000559798c8a725 <unavailable> + 10021

    6    tmphn1odjqf                        0x0000559798c897cb <unavailable> + 6091

    7    libc.so.6                          0x00002ac34aa72460 __libc_start_main +
    245

    8    tmphn1odjqf                        0x0000559798c89369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ lst.count > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            result.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ lst.count > 0 {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        lst.remove(at: lst.index(of: min)!)\n   \
    \     if lst.count > 0 {\n            result.append(max)\n            lst.remove(at:\
    \ lst.index(of: max)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while !lst.isEmpty\
    \ {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            result.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ lst.count > 0 {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmph6yg_j02/tmph6yg_j02.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b73d6718c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73d640f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b73d640f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b73d640f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b73d640ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmph6yg_j02                        0x0000562c2e5d5737 <unavailable> + 10039

    6    tmph6yg_j02                        0x0000562c2e5d477b <unavailable> + 6011

    7    libc.so.6                          0x00002b73d6904460 __libc_start_main +
    245

    8    tmph6yg_j02                        0x0000562c2e5d4319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpvkm58_fw/tmpvkm58_fw.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f899c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f896bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f896bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f896bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f896bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvkm58_fw                        0x000055eb21f4b73d <unavailable> + 10045

    6    tmpvkm58_fw                        0x000055eb21f4a77b <unavailable> + 6011

    7    libc.so.6                          0x00002b0f89bb4460 __libc_start_main +
    245

    8    tmpvkm58_fw                        0x000055eb21f4a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result: [Int] = []\n    var lst = lst\n    while\
    \ !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of: lst.min()!)!))\n\
    \        if !lst.isEmpty {\n            result.append(lst.remove(at: lst.index(of:\
    \ lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while lst.count\
    \ > 0 {\n        let min = lst.min()!\n        let max = lst.max()!\n        result.append(min)\n\
    \        result.append(max)\n        lst.remove(at: lst.index(of: min)!)\n   \
    \     lst.remove(at: lst.index(of: max)!)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpmmb5hwxt/tmpmmb5hwxt.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b2098428c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b209811f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b209811f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b209811f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b209811ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpmmb5hwxt                        0x0000556283fce78c <unavailable> + 10124

    6    tmpmmb5hwxt                        0x0000556283fcd7db <unavailable> + 6107

    7    libc.so.6                          0x00002b2098614460 __libc_start_main +
    245

    8    tmpmmb5hwxt                        0x0000556283fcd379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            result.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var res = [Int]()\n    while lst.count\
    \ > 0 {\n        let min = lst.min()!\n        let max = lst.max()!\n        res.append(min)\n\
    \        res.append(max)\n        lst.remove(at: lst.index(of: min)!)\n      \
    \  lst.remove(at: lst.index(of: max)!)\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp1j0k1jp6/tmp1j0k1jp6.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9876c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9873bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae9873bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae9873bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae9873bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp1j0k1jp6                        0x000055e45f3b678c <unavailable> + 10124

    6    tmp1j0k1jp6                        0x000055e45f3b57db <unavailable> + 6107

    7    libc.so.6                          0x00002ae9878b1460 __libc_start_main +
    245

    8    tmp1j0k1jp6                        0x000055e45f3b5379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpvkm58_fw/tmpvkm58_fw.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f899c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f896bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f896bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f896bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f896bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvkm58_fw                        0x000055eb21f4b73d <unavailable> + 10045

    6    tmpvkm58_fw                        0x000055eb21f4a77b <unavailable> + 6011

    7    libc.so.6                          0x00002b0f89bb4460 __libc_start_main +
    245

    8    tmpvkm58_fw                        0x000055eb21f4a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ lst.count > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var res = [Int]()\n    while !lst.isEmpty\
    \ {\n        res.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            res.append(lst.max()!)\n            lst.remove(at:\
    \ lst.index(of: lst.max()!)!)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var sorted = lst.sorted()\n    var result = [Int]()\n\
    \    var i = 0\n    var j = sorted.count - 1\n    while i <= j {\n        result.append(sorted[i])\n\
    \        i += 1\n        if i <= j {\n            result.append(sorted[j])\n \
    \           j -= 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpvkm58_fw/tmpvkm58_fw.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f899c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f896bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f896bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f896bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f896bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvkm58_fw                        0x000055eb21f4b73d <unavailable> + 10045

    6    tmpvkm58_fw                        0x000055eb21f4a77b <unavailable> + 6011

    7    libc.so.6                          0x00002b0f89bb4460 __libc_start_main +
    245

    8    tmpvkm58_fw                        0x000055eb21f4a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while lst.count\
    \ > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        lst.remove(at: lst.index(of: min)!)\n   \
    \     if !lst.isEmpty {\n            result.append(max)\n            lst.remove(at:\
    \ lst.index(of: max)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var res = [Int]()\n    while !lst.isEmpty\
    \ {\n        res.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            res.append(lst.max()!)\n            lst.remove(at:\
    \ lst.index(of: lst.max()!)!)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of: lst.min()!)!))\n\
    \        if !lst.isEmpty {\n            result.append(lst.remove(at: lst.index(of:\
    \ lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    var min\
    \ = lst.min()\n    var max = lst.max()\n    while lst.count > 0 {\n        if\
    \ let min = min {\n            result.append(min)\n            lst.remove(at:\
    \ lst.index(of: min)!)\n        }\n        if let max = max {\n            result.append(max)\n\
    \            lst.remove(at: lst.index(of: max)!)\n        }\n        min = lst.min()\n\
    \        max = lst.max()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp214tqwmp/tmp214tqwmp.swift:18: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b41018e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41015d8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b41015d8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b41015d813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b41015d7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp214tqwmp                        0x00005585ff04269f <unavailable> + 9887

    6    tmp214tqwmp                        0x00005585ff04177b <unavailable> + 6011

    7    libc.so.6                          0x00002b4101acd460 __libc_start_main +
    245

    8    tmp214tqwmp                        0x00005585ff041319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result: [Int] = []\n    var lst = lst\n    while\
    \ lst.count > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var res: [Int] = []\n    while !lst.isEmpty\
    \ {\n        res.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            res.append(lst.max()!)\n            lst.remove(at:\
    \ lst.index(of: lst.max()!)!)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            result.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpvkm58_fw/tmpvkm58_fw.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f899c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f896bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f896bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f896bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f896bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvkm58_fw                        0x000055eb21f4b73d <unavailable> + 10045

    6    tmpvkm58_fw                        0x000055eb21f4a77b <unavailable> + 6011

    7    libc.so.6                          0x00002b0f89bb4460 __libc_start_main +
    245

    8    tmpvkm58_fw                        0x000055eb21f4a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var sorted = lst.sorted()\n\
    \    var min = sorted.removeFirst()\n    var max = sorted.removeLast()\n    while\
    \ !sorted.isEmpty {\n        result.append(min)\n        result.append(max)\n\
    \        min = sorted.removeFirst()\n        max = sorted.removeLast()\n    }\n\
    \    result.append(min)\n    result.append(max)\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:870: Fatal error: Can''t remove
    last element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d4bf49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d4bc40561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9d4bc40286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9d4bc4013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9d4bc3fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b9d4bd41c1d <unavailable> + 2489373

    6    tmpnc4tvaxf                        0x0000560771d1d416 <unavailable> + 9238

    7    tmpnc4tvaxf                        0x0000560771d1c76b <unavailable> + 5995

    8    libc.so.6                          0x00002b9d4c135460 __libc_start_main +
    245

    9    tmpnc4tvaxf                        0x0000560771d1c309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while !lst.isEmpty\
    \ {\n        result.append(lst.remove(at: lst.index(of: lst.min()!)!))\n     \
    \   result.append(lst.remove(at: lst.index(of: lst.max()!)!))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp267y1hei/tmp267y1hei.swift:11: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b18daecfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18dabc6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b18dabc6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b18dabc613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b18dabc5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp267y1hei                        0x000055c313b5e64a <unavailable> + 9802

    6    tmp267y1hei                        0x000055c313b5d7cb <unavailable> + 6091

    7    libc.so.6                          0x00002b18db0bb460 __libc_start_main +
    245

    8    tmp267y1hei                        0x000055c313b5d369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ lst.count > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        result.append(lst.remove(at: lst.index(of: lst.min()!)!))\n     \
    \   result.append(lst.remove(at: lst.index(of: lst.max()!)!))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp04bcgxob/tmp04bcgxob.swift:11: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b3baf7b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3baf4aa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3baf4aa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3baf4aa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3baf4a9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp04bcgxob                        0x00005573711c9651 <unavailable> + 9809

    6    tmp04bcgxob                        0x00005573711c87cb <unavailable> + 6091

    7    libc.so.6                          0x00002b3baf99f460 __libc_start_main +
    245

    8    tmp04bcgxob                        0x00005573711c8369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        lst.remove(at: lst.index(of: min)!)\n   \
    \     if !lst.isEmpty {\n            result.append(max)\n            lst.remove(at:\
    \ lst.index(of: max)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while lst.count\
    \ > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ lst.count > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ lst.count > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            result.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        let min = lst.min()!\n        let max = lst.max()!\n        result.append(min)\n\
    \        result.append(max)\n        lst.remove(at: lst.index(of: min)!)\n   \
    \     lst.remove(at: lst.index(of: max)!)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpj1a7q7ru/tmpj1a7q7ru.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b6666a06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66666fd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b66666fd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b66666fd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b66666fcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpj1a7q7ru                        0x000056531b682789 <unavailable> + 10121

    6    tmpj1a7q7ru                        0x000056531b6817cb <unavailable> + 6091

    7    libc.so.6                          0x00002b6666bf2460 __libc_start_main +
    245

    8    tmpj1a7q7ru                        0x000056531b681369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var res = [Int]()\n    while !lst.isEmpty\
    \ {\n        let min = lst.min()!\n        res.append(min)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        if !lst.isEmpty {\n            let max = lst.max()!\n\
    \            res.append(max)\n            lst.remove(at: lst.index(of: max)!)\n\
    \        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result: [Int] = []\n    var lst = lst\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmparj12jw6/tmparj12jw6.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0525823c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b052551a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b052551a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b052551a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0525519bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmparj12jw6                        0x00005618a0420744 <unavailable> + 10052

    6    tmparj12jw6                        0x00005618a041f77b <unavailable> + 6011

    7    libc.so.6                          0x00002b0525a0f460 __libc_start_main +
    245

    8    tmparj12jw6                        0x00005618a041f319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpvkm58_fw/tmpvkm58_fw.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f899c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f896bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f896bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f896bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f896bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvkm58_fw                        0x000055eb21f4b73d <unavailable> + 10045

    6    tmpvkm58_fw                        0x000055eb21f4a77b <unavailable> + 6011

    7    libc.so.6                          0x00002b0f89bb4460 __libc_start_main +
    245

    8    tmpvkm58_fw                        0x000055eb21f4a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while !lst.isEmpty\
    \ {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            result.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        let min = lst.min()!\n        let max = lst.max()!\n        result.append(min)\n\
    \        result.append(max)\n        lst.remove(at: lst.index(of: min)!)\n   \
    \     lst.remove(at: lst.index(of: max)!)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpj1a7q7ru/tmpj1a7q7ru.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b6666a06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66666fd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b66666fd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b66666fd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b66666fcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpj1a7q7ru                        0x000056531b682789 <unavailable> + 10121

    6    tmpj1a7q7ru                        0x000056531b6817cb <unavailable> + 6091

    7    libc.so.6                          0x00002b6666bf2460 __libc_start_main +
    245

    8    tmpj1a7q7ru                        0x000056531b681369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        result.append(lst.remove(at: lst.index(of: lst.min()!)!))\n     \
    \   result.append(lst.remove(at: lst.index(of: lst.max()!)!))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp04bcgxob/tmp04bcgxob.swift:11: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b3baf7b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3baf4aa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3baf4aa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3baf4aa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3baf4a9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp04bcgxob                        0x00005573711c9651 <unavailable> + 9809

    6    tmp04bcgxob                        0x00005573711c87cb <unavailable> + 6091

    7    libc.so.6                          0x00002b3baf99f460 __libc_start_main +
    245

    8    tmp04bcgxob                        0x00005573711c8369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpvkm58_fw/tmpvkm58_fw.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f899c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f896bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f896bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f896bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f896bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvkm58_fw                        0x000055eb21f4b73d <unavailable> + 10045

    6    tmpvkm58_fw                        0x000055eb21f4a77b <unavailable> + 6011

    7    libc.so.6                          0x00002b0f89bb4460 __libc_start_main +
    245

    8    tmpvkm58_fw                        0x000055eb21f4a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        result.append(lst.remove(at: lst.index(of: lst.min()!)!))\n     \
    \   if !lst.isEmpty {\n            result.append(lst.remove(at: lst.index(of:\
    \ lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var res = [Int]()\n    while !lst.isEmpty\
    \ {\n        let min = lst.min()!\n        let max = lst.max()!\n        res.append(min)\n\
    \        res.append(max)\n        lst.remove(at: lst.index(of: min)!)\n      \
    \  lst.remove(at: lst.index(of: max)!)\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmplz110fa4/tmplz110fa4.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b36efabdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ef7b4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ef7b4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ef7b413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ef7b3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmplz110fa4                        0x000055f9ae527782 <unavailable> + 10114

    6    tmplz110fa4                        0x000055f9ae5267cb <unavailable> + 6091

    7    libc.so.6                          0x00002b36efca9460 __libc_start_main +
    245

    8    tmplz110fa4                        0x000055f9ae526369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpvkm58_fw/tmpvkm58_fw.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f899c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f896bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f896bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f896bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f896bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvkm58_fw                        0x000055eb21f4b73d <unavailable> + 10045

    6    tmpvkm58_fw                        0x000055eb21f4a77b <unavailable> + 6011

    7    libc.so.6                          0x00002b0f89bb4460 __libc_start_main +
    245

    8    tmpvkm58_fw                        0x000055eb21f4a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var sorted_list = [Int]()\n    var lst = lst\n    while\
    \ lst.count > 0 {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        sorted_list.append(min)\n        sorted_list.append(max)\n        lst.remove(min)\n\
    \        lst.remove(max)\n    }\n    return sorted_list\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmprhg87le_.swift:14:13: error: no exact matches in call to instance\
    \ method 'remove'\n        lst.remove(min)\n            ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n/tmp/tmprhg87le_.swift:15:13: error: no exact matches\
    \ in call to instance method 'remove'\n        lst.remove(max)\n            ^\n\
    Swift.Array:10:37: note: incorrect labels for candidate (have: '(_:)', expected:\
    \ '(at:)')\n    @inlinable public mutating func remove(at index: Int) -> Element\n\
    \                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var res = [Int]()\n    while !lst.isEmpty\
    \ {\n        let min = lst.min()!\n        let max = lst.max()!\n        res.append(min)\n\
    \        res.append(max)\n        lst.remove(at: lst.index(of: min)!)\n      \
    \  lst.remove(at: lst.index(of: max)!)\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmplz110fa4/tmplz110fa4.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b36efabdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ef7b4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ef7b4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ef7b413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ef7b3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmplz110fa4                        0x000055f9ae527782 <unavailable> + 10114

    6    tmplz110fa4                        0x000055f9ae5267cb <unavailable> + 6091

    7    libc.so.6                          0x00002b36efca9460 __libc_start_main +
    245

    8    tmplz110fa4                        0x000055f9ae526369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while !lst.isEmpty\
    \ {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            result.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpvkm58_fw/tmpvkm58_fw.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f899c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f896bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f896bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f896bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f896bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvkm58_fw                        0x000055eb21f4b73d <unavailable> + 10045

    6    tmpvkm58_fw                        0x000055eb21f4a77b <unavailable> + 6011

    7    libc.so.6                          0x00002b0f89bb4460 __libc_start_main +
    245

    8    tmpvkm58_fw                        0x000055eb21f4a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while lst.count\
    \ > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while lst.count\
    \ > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while lst.count\
    \ > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of: lst.min()!)!))\n\
    \        if !lst.isEmpty {\n            result.append(lst.remove(at: lst.index(of:\
    \ lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ lst.count > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while lst.count\
    \ > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while lst.count\
    \ > 0 {\n        let min = lst.min()!\n        let max = lst.max()!\n        result.append(min)\n\
    \        result.append(max)\n        lst.remove(at: lst.index(of: min)!)\n   \
    \     lst.remove(at: lst.index(of: max)!)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp_bvo8vf1/tmp_bvo8vf1.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ae00c440c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae00c137561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae00c137286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae00c13713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae00c136bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp_bvo8vf1                        0x00005568d884c793 <unavailable> + 10131

    6    tmp_bvo8vf1                        0x00005568d884b7db <unavailable> + 6107

    7    libc.so.6                          0x00002ae00c62c460 __libc_start_main +
    245

    8    tmp_bvo8vf1                        0x00005568d884b379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpvkm58_fw/tmpvkm58_fw.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f899c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f896bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f896bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f896bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f896bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvkm58_fw                        0x000055eb21f4b73d <unavailable> + 10045

    6    tmpvkm58_fw                        0x000055eb21f4a77b <unavailable> + 6011

    7    libc.so.6                          0x00002b0f89bb4460 __libc_start_main +
    245

    8    tmpvkm58_fw                        0x000055eb21f4a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpvkm58_fw/tmpvkm58_fw.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f899c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f896bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f896bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f896bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f896bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvkm58_fw                        0x000055eb21f4b73d <unavailable> + 10045

    6    tmpvkm58_fw                        0x000055eb21f4a77b <unavailable> + 6011

    7    libc.so.6                          0x00002b0f89bb4460 __libc_start_main +
    245

    8    tmpvkm58_fw                        0x000055eb21f4a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while !lst.isEmpty\
    \ {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            result.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            result.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpvkm58_fw/tmpvkm58_fw.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f899c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f896bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f896bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f896bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f896bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvkm58_fw                        0x000055eb21f4b73d <unavailable> + 10045

    6    tmpvkm58_fw                        0x000055eb21f4a77b <unavailable> + 6011

    7    libc.so.6                          0x00002b0f89bb4460 __libc_start_main +
    245

    8    tmpvkm58_fw                        0x000055eb21f4a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            result.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst.sorted()\n    var result: [Int] = []\n\
    \    var i = 0\n    while lst.count > 0 {\n        if i % 2 == 0 {\n         \
    \   result.append(lst.removeFirst())\n        } else {\n            result.append(lst.removeLast())\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result: [Int] = []\n    var lst = lst\n    var min\
    \ = lst.min()!\n    var max = lst.max()!\n    var min_index = lst.indexOf(min)!\n\
    \    var max_index = lst.indexOf(max)!\n    var min_max_index = min_index\n  \
    \  var max_min_index = max_index\n    var min_max_flag = true\n    var max_min_flag\
    \ = true\n    while lst.count > 0 {\n        if min_max_flag {\n            result.append(min)\n\
    \            lst.removeAtIndex(min_index)\n            if lst.count > 0 {\n  \
    \              max = lst.max()!\n                max_index = lst.indexOf(max)!\n\
    \                min_max_flag = false\n            }\n        } else {\n     \
    \       result.append(max)\n            lst.removeAtIndex(max_index)\n       \
    \     if lst.count > 0 {\n                min = lst.min()!\n                min_index\
    \ = lst.indexOf(min)!\n                min_max_flag = true\n            }\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpbzhwjz08.swift:11:25: error: value of type '[Int]' has no member\
    \ 'indexOf'\n    var min_index = lst.indexOf(min)!\n                    ~~~ ^~~~~~~\n\
    /tmp/tmpbzhwjz08.swift:12:25: error: value of type '[Int]' has no member 'indexOf'\n\
    \    var max_index = lst.indexOf(max)!\n                    ~~~ ^~~~~~~\n/tmp/tmpbzhwjz08.swift:20:17:\
    \ error: value of type '[Int]' has no member 'removeAtIndex'\n            lst.removeAtIndex(min_index)\n\
    \            ~~~ ^~~~~~~~~~~~~\n/tmp/tmpbzhwjz08.swift:23:33: error: value of\
    \ type '[Int]' has no member 'indexOf'\n                max_index = lst.indexOf(max)!\n\
    \                            ~~~ ^~~~~~~\n/tmp/tmpbzhwjz08.swift:28:17: error:\
    \ value of type '[Int]' has no member 'removeAtIndex'\n            lst.removeAtIndex(max_index)\n\
    \            ~~~ ^~~~~~~~~~~~~\n/tmp/tmpbzhwjz08.swift:31:33: error: value of\
    \ type '[Int]' has no member 'indexOf'\n                min_index = lst.indexOf(min)!\n\
    \                            ~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ lst.count > 0 {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmph6yg_j02/tmph6yg_j02.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b73d6718c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73d640f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b73d640f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b73d640f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b73d640ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmph6yg_j02                        0x0000562c2e5d5737 <unavailable> + 10039

    6    tmph6yg_j02                        0x0000562c2e5d477b <unavailable> + 6011

    7    libc.so.6                          0x00002b73d6904460 __libc_start_main +
    245

    8    tmph6yg_j02                        0x0000562c2e5d4319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        result.append(lst.max()!)\n\
    \        lst.remove(at: lst.index(of: lst.min()!)!)\n        lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp7ik5uc9k/tmp7ik5uc9k.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b07d70e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07d6ddc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b07d6ddc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b07d6ddc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b07d6ddbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp7ik5uc9k                        0x000055c4637937d5 <unavailable> + 10197

    6    tmp7ik5uc9k                        0x000055c46379277b <unavailable> + 6011

    7    libc.so.6                          0x00002b07d72d1460 __libc_start_main +
    245

    8    tmp7ik5uc9k                        0x000055c463792319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ lst.count > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result: [Int] = []\n    var lst = lst\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmparj12jw6/tmparj12jw6.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0525823c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b052551a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b052551a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b052551a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0525519bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmparj12jw6                        0x00005618a0420744 <unavailable> + 10052

    6    tmparj12jw6                        0x00005618a041f77b <unavailable> + 6011

    7    libc.so.6                          0x00002b0525a0f460 __libc_start_main +
    245

    8    tmparj12jw6                        0x00005618a041f319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var sorted = [Int]()\n    while lst.count\
    \ > 0 {\n        sorted.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            sorted.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var remaining = lst\n    while\
    \ remaining.count > 0 {\n        result.append(remaining.min()!)\n        remaining.remove(at:\
    \ remaining.index(of: remaining.min()!)!)\n        if remaining.count > 0 {\n\
    \            result.append(remaining.max()!)\n            remaining.remove(at:\
    \ remaining.index(of: remaining.max()!)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    let sorted = lst.sorted()\n    var result = [Int]()\n\
    \    var i = 0\n    var j = sorted.count - 1\n    while i <= j {\n        result.append(sorted[i])\n\
    \        i += 1\n        if i <= j {\n            result.append(sorted[j])\n \
    \           j -= 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            result.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        result.append(lst.remove(at: lst.index(of: lst.min()!)!))\n     \
    \   result.append(lst.remove(at: lst.index(of: lst.max()!)!))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp04bcgxob/tmp04bcgxob.swift:11: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b3baf7b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3baf4aa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3baf4aa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3baf4aa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3baf4a9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp04bcgxob                        0x00005573711c9651 <unavailable> + 9809

    6    tmp04bcgxob                        0x00005573711c87cb <unavailable> + 6091

    7    libc.so.6                          0x00002b3baf99f460 __libc_start_main +
    245

    8    tmp04bcgxob                        0x00005573711c8369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            result.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpvkm58_fw/tmpvkm58_fw.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f899c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f896bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f896bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f896bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f896bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvkm58_fw                        0x000055eb21f4b73d <unavailable> + 10045

    6    tmpvkm58_fw                        0x000055eb21f4a77b <unavailable> + 6011

    7    libc.so.6                          0x00002b0f89bb4460 __libc_start_main +
    245

    8    tmpvkm58_fw                        0x000055eb21f4a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ lst.count > 0 {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmph6yg_j02/tmph6yg_j02.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b73d6718c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73d640f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b73d640f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b73d640f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b73d640ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmph6yg_j02                        0x0000562c2e5d5737 <unavailable> + 10039

    6    tmph6yg_j02                        0x0000562c2e5d477b <unavailable> + 6011

    7    libc.so.6                          0x00002b73d6904460 __libc_start_main +
    245

    8    tmph6yg_j02                        0x0000562c2e5d4319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while !lst.isEmpty\
    \ {\n        result.append(lst.remove(at: lst.index(of: lst.min()!)!))\n     \
    \   result.append(lst.remove(at: lst.index(of: lst.max()!)!))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp267y1hei/tmp267y1hei.swift:11: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b18daecfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18dabc6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b18dabc6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b18dabc613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b18dabc5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp267y1hei                        0x000055c313b5e64a <unavailable> + 9802

    6    tmp267y1hei                        0x000055c313b5d7cb <unavailable> + 6091

    7    libc.so.6                          0x00002b18db0bb460 __libc_start_main +
    245

    8    tmp267y1hei                        0x000055c313b5d369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        let min = lst.min()!\n        let max = lst.max()!\n        result.append(min)\n\
    \        result.append(max)\n        lst.remove(at: lst.index(of: min)!)\n   \
    \     lst.remove(at: lst.index(of: max)!)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpj1a7q7ru/tmpj1a7q7ru.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b6666a06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66666fd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b66666fd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b66666fd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b66666fcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpj1a7q7ru                        0x000056531b682789 <unavailable> + 10121

    6    tmpj1a7q7ru                        0x000056531b6817cb <unavailable> + 6091

    7    libc.so.6                          0x00002b6666bf2460 __libc_start_main +
    245

    8    tmpj1a7q7ru                        0x000056531b681369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var sorted_list = lst.sorted()\n    var result: [Int]\
    \ = []\n    var i = 0\n    var j = sorted_list.count - 1\n    while i <= j {\n\
    \        result.append(sorted_list[i])\n        i += 1\n        if i <= j {\n\
    \            result.append(sorted_list[j])\n            j -= 1\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var res = [Int]()\n    while !lst.isEmpty\
    \ {\n        res.append(lst.remove(at: lst.index(of: lst.min()!)!))\n        if\
    \ !lst.isEmpty {\n            res.append(lst.remove(at: lst.index(of: lst.max()!)!))\n\
    \        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while lst.count\
    \ > 0 {\n        let min = lst.min()!\n        let max = lst.max()!\n        result.append(min)\n\
    \        result.append(max)\n        lst.remove(at: lst.index(of: min)!)\n   \
    \     lst.remove(at: lst.index(of: max)!)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpmmb5hwxt/tmpmmb5hwxt.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b2098428c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b209811f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b209811f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b209811f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b209811ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpmmb5hwxt                        0x0000556283fce78c <unavailable> + 10124

    6    tmpmmb5hwxt                        0x0000556283fcd7db <unavailable> + 6107

    7    libc.so.6                          0x00002b2098614460 __libc_start_main +
    245

    8    tmpmmb5hwxt                        0x0000556283fcd379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ lst.count > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ lst.count > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while !lst.isEmpty\
    \ {\n        let min = lst.min()!\n        let max = lst.max()!\n        result.append(min)\n\
    \        result.append(max)\n        lst.remove(at: lst.index(of: min)!)\n   \
    \     lst.remove(at: lst.index(of: max)!)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp68jh45e4/tmp68jh45e4.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b5de9ebec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5de9bb5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5de9bb5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5de9bb513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5de9bb4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp68jh45e4                        0x00005633d5bff782 <unavailable> + 10114

    6    tmp68jh45e4                        0x00005633d5bfe7cb <unavailable> + 6091

    7    libc.so.6                          0x00002b5dea0aa460 __libc_start_main +
    245

    8    tmp68jh45e4                        0x00005633d5bfe369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            result.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        let min = lst.min()!\n        let max = lst.max()!\n        result.append(min)\n\
    \        result.append(max)\n        lst.remove(at: lst.index(of: min)!)\n   \
    \     lst.remove(at: lst.index(of: max)!)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpj1a7q7ru/tmpj1a7q7ru.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b6666a06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66666fd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b66666fd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b66666fd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b66666fcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpj1a7q7ru                        0x000056531b682789 <unavailable> + 10121

    6    tmpj1a7q7ru                        0x000056531b6817cb <unavailable> + 6091

    7    libc.so.6                          0x00002b6666bf2460 __libc_start_main +
    245

    8    tmpj1a7q7ru                        0x000056531b681369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpvkm58_fw/tmpvkm58_fw.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f899c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f896bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f896bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f896bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f896bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvkm58_fw                        0x000055eb21f4b73d <unavailable> + 10045

    6    tmpvkm58_fw                        0x000055eb21f4a77b <unavailable> + 6011

    7    libc.so.6                          0x00002b0f89bb4460 __libc_start_main +
    245

    8    tmpvkm58_fw                        0x000055eb21f4a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var res = [Int]()\n    while !lst.isEmpty\
    \ {\n        res.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            res.append(lst.max()!)\n            lst.remove(at:\
    \ lst.index(of: lst.max()!)!)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ lst.count > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while lst.count\
    \ > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        let min = lst.min()!\n        let max = lst.max()!\n        result.append(min)\n\
    \        result.append(max)\n        lst.remove(at: lst.index(of: min)!)\n   \
    \     lst.remove(at: lst.index(of: max)!)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpj1a7q7ru/tmpj1a7q7ru.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b6666a06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66666fd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b66666fd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b66666fd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b66666fcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpj1a7q7ru                        0x000056531b682789 <unavailable> + 10121

    6    tmpj1a7q7ru                        0x000056531b6817cb <unavailable> + 6091

    7    libc.so.6                          0x00002b6666bf2460 __libc_start_main +
    245

    8    tmpj1a7q7ru                        0x000056531b681369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result: [Int] = []\n    var sorted_lst = lst.sorted()\n\
    \    var ascending = true\n    while sorted_lst.count > 0 {\n        if ascending\
    \ {\n            result.append(sorted_lst.removeFirst())\n        } else {\n \
    \           result.append(sorted_lst.removeLast())\n        }\n        ascending\
    \ = !ascending\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            result.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        result.append(lst.max()!)\n\
    \        lst.remove(at: lst.index(of: lst.min()!)!)\n        lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp7ik5uc9k/tmp7ik5uc9k.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b07d70e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07d6ddc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b07d6ddc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b07d6ddc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b07d6ddbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp7ik5uc9k                        0x000055c4637937d5 <unavailable> + 10197

    6    tmp7ik5uc9k                        0x000055c46379277b <unavailable> + 6011

    7    libc.so.6                          0x00002b07d72d1460 __libc_start_main +
    245

    8    tmp7ik5uc9k                        0x000055c463792319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        let min = lst.min()!\n        result.append(min)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        if !lst.isEmpty {\n            let max = lst.max()!\n\
    \            result.append(max)\n            lst.remove(at: lst.index(of: max)!)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        let min = lst.min()!\n        let max = lst.max()!\n        result.append(min)\n\
    \        result.append(max)\n        lst.remove(at: lst.index(of: min)!)\n   \
    \     lst.remove(at: lst.index(of: max)!)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpj1a7q7ru/tmpj1a7q7ru.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b6666a06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66666fd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b66666fd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b66666fd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b66666fcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpj1a7q7ru                        0x000056531b682789 <unavailable> + 10121

    6    tmpj1a7q7ru                        0x000056531b6817cb <unavailable> + 6091

    7    libc.so.6                          0x00002b6666bf2460 __libc_start_main +
    245

    8    tmpj1a7q7ru                        0x000056531b681369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ lst.count > 0 {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmph6yg_j02/tmph6yg_j02.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b73d6718c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73d640f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b73d640f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b73d640f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b73d640ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmph6yg_j02                        0x0000562c2e5d5737 <unavailable> + 10039

    6    tmph6yg_j02                        0x0000562c2e5d477b <unavailable> + 6011

    7    libc.so.6                          0x00002b73d6904460 __libc_start_main +
    245

    8    tmph6yg_j02                        0x0000562c2e5d4319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var res = [Int]()\n    while !lst.isEmpty\
    \ {\n        res.append(lst.remove(at: lst.index(of: lst.min()!)!))\n        if\
    \ !lst.isEmpty {\n            res.append(lst.remove(at: lst.index(of: lst.max()!)!))\n\
    \        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ lst.count > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var sorted = lst.sorted()\n    var result: [Int] = []\n\
    \    var i = 0\n    var j = sorted.count - 1\n    while i <= j {\n        if i\
    \ == j {\n            result.append(sorted[i])\n            break\n        }\n\
    \        result.append(sorted[i])\n        result.append(sorted[j])\n        i\
    \ += 1\n        j -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        let min = lst.min()!\n        let max = lst.max()!\n        result.append(min)\n\
    \        result.append(max)\n        lst.remove(at: lst.index(of: min)!)\n   \
    \     lst.remove(at: lst.index(of: max)!)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpj1a7q7ru/tmpj1a7q7ru.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b6666a06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66666fd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b66666fd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b66666fd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b66666fcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpj1a7q7ru                        0x000056531b682789 <unavailable> + 10121

    6    tmpj1a7q7ru                        0x000056531b6817cb <unavailable> + 6091

    7    libc.so.6                          0x00002b6666bf2460 __libc_start_main +
    245

    8    tmpj1a7q7ru                        0x000056531b681369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        result.append(lst.max()!)\n\
    \        lst.remove(at: lst.index(of: lst.min()!)!)\n        lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp7ik5uc9k/tmp7ik5uc9k.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b07d70e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07d6ddc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b07d6ddc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b07d6ddc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b07d6ddbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp7ik5uc9k                        0x000055c4637937d5 <unavailable> + 10197

    6    tmp7ik5uc9k                        0x000055c46379277b <unavailable> + 6011

    7    libc.so.6                          0x00002b07d72d1460 __libc_start_main +
    245

    8    tmp7ik5uc9k                        0x000055c463792319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            result.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while !lst.isEmpty\
    \ {\n        let min = lst.min()!\n        let max = lst.max()!\n        result.append(min)\n\
    \        result.append(max)\n        lst.remove(at: lst.index(of: min)!)\n   \
    \     lst.remove(at: lst.index(of: max)!)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp68jh45e4/tmp68jh45e4.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b5de9ebec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5de9bb5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5de9bb5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5de9bb513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5de9bb4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp68jh45e4                        0x00005633d5bff782 <unavailable> + 10114

    6    tmp68jh45e4                        0x00005633d5bfe7cb <unavailable> + 6091

    7    libc.so.6                          0x00002b5dea0aa460 __libc_start_main +
    245

    8    tmp68jh45e4                        0x00005633d5bfe369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while !lst.isEmpty\
    \ {\n        let min = lst.min()!\n        let max = lst.max()!\n        result.append(min)\n\
    \        lst.remove(at: lst.index(of: min)!)\n        if !lst.isEmpty {\n    \
    \        result.append(max)\n            lst.remove(at: lst.index(of: max)!)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result = [Int]()\n    while lst.count\
    \ > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpvkm58_fw/tmpvkm58_fw.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f899c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f896bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f896bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f896bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f896bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvkm58_fw                        0x000055eb21f4b73d <unavailable> + 10045

    6    tmpvkm58_fw                        0x000055eb21f4a77b <unavailable> + 6011

    7    libc.so.6                          0x00002b0f89bb4460 __libc_start_main +
    245

    8    tmpvkm58_fw                        0x000055eb21f4a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpvkm58_fw/tmpvkm58_fw.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f899c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f896bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f896bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f896bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f896bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvkm58_fw                        0x000055eb21f4b73d <unavailable> + 10045

    6    tmpvkm58_fw                        0x000055eb21f4a77b <unavailable> + 6011

    7    libc.so.6                          0x00002b0f89bb4460 __libc_start_main +
    245

    8    tmpvkm58_fw                        0x000055eb21f4a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var res = [Int]()\n    while !lst.isEmpty\
    \ {\n        res.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            res.append(lst.max()!)\n            lst.remove(at:\
    \ lst.index(of: lst.max()!)!)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while lst.count\
    \ > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        result.append(min)\n        result.append(max)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpvkm58_fw/tmpvkm58_fw.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f899c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f896bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f896bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f896bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f896bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvkm58_fw                        0x000055eb21f4b73d <unavailable> + 10045

    6    tmpvkm58_fw                        0x000055eb21f4a77b <unavailable> + 6011

    7    libc.so.6                          0x00002b0f89bb4460 __libc_start_main +
    245

    8    tmpvkm58_fw                        0x000055eb21f4a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var lst = lst\n    while lst.count\
    \ > 0 {\n        let min = lst.min()!\n        let max = lst.max()!\n        result.append(min)\n\
    \        result.append(max)\n        lst.remove(at: lst.index(of: min)!)\n   \
    \     lst.remove(at: lst.index(of: max)!)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp_bvo8vf1/tmp_bvo8vf1.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ae00c440c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae00c137561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae00c137286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae00c13713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae00c136bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp_bvo8vf1                        0x00005568d884c793 <unavailable> + 10131

    6    tmp_bvo8vf1                        0x00005568d884b7db <unavailable> + 6107

    7    libc.so.6                          0x00002ae00c62c460 __libc_start_main +
    245

    8    tmp_bvo8vf1                        0x00005568d884b379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst = lst\n    var result: [Int] = []\n    while\
    \ !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028454
