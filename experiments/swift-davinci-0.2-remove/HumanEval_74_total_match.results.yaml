language: swift
name: HumanEval_74_total_match
results:
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for item in lst1\
    \ {\n        total1 += item.count\n    }\n    for item in lst2 {\n        total2\
    \ += item.count\n    }\n    if total1 < total2 {\n        return lst1\n    } else\
    \ {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc6rhi5zi/tmpc6rhi5zi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba261485c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba26117cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba26117c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba26117b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc6rhi5zi                        0x00005559efcdc677 <unavailable> + 9847

    5    libc.so.6                          0x00002ba261671460 __libc_start_main +
    245

    6    tmpc6rhi5zi                        0x00005559efcdb289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var lst1_total = 0\n    var lst2_total = 0\n    for i in\
    \ lst1 {\n        lst1_total += i.count\n    }\n    for i in lst2 {\n        lst2_total\
    \ += i.count\n    }\n    if lst1_total < lst2_total {\n        return lst1\n \
    \   } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmphpkak4l3/tmphpkak4l3.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00fc6a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00fc398b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00fc398988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00fc3977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphpkak4l3                        0x0000558fffc2d677 <unavailable> + 9847

    5    libc.so.6                          0x00002b00fc88d460 __libc_start_main +
    245

    6    tmphpkak4l3                        0x0000558fffc2c289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for item in lst1\
    \ {\n        total1 += item.count\n    }\n    for item in lst2 {\n        total2\
    \ += item.count\n    }\n    if total1 < total2 {\n        return lst1\n    } else\
    \ {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc6rhi5zi/tmpc6rhi5zi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba261485c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba26117cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba26117c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba26117b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc6rhi5zi                        0x00005559efcdc677 <unavailable> + 9847

    5    libc.so.6                          0x00002ba261671460 __libc_start_main +
    245

    6    tmpc6rhi5zi                        0x00005559efcdb289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for item in lst1\
    \ {\n        total1 += item.count\n    }\n    for item in lst2 {\n        total2\
    \ += item.count\n    }\n    if total1 < total2 {\n        return lst1\n    } else\
    \ {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc6rhi5zi/tmpc6rhi5zi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba261485c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba26117cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba26117c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba26117b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc6rhi5zi                        0x00005559efcdc677 <unavailable> + 9847

    5    libc.so.6                          0x00002ba261671460 __libc_start_main +
    245

    6    tmpc6rhi5zi                        0x00005559efcdb289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total_lst1 = 0\n    var total_lst2 = 0\n    for i in\
    \ lst1 {\n        total_lst1 += i.count\n    }\n    for i in lst2 {\n        total_lst2\
    \ += i.count\n    }\n    if total_lst1 < total_lst2 {\n        return lst1\n \
    \   } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpdbl_vvqp/tmpdbl_vvqp.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abed20d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abed1dcdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abed1dcd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abed1dcc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdbl_vvqp                        0x000055d413601677 <unavailable> + 9847

    5    libc.so.6                          0x00002abed22c2460 __libc_start_main +
    245

    6    tmpdbl_vvqp                        0x000055d413600289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    let total1 = lst1.reduce(0) { $0 + $1.count }\n    let total2\
    \ = lst2.reduce(0) { $0 + $1.count }\n    return total1 < total2 ? lst1 : lst2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp8uxwvdvv/tmp8uxwvdvv.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b636d239c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b636cf30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b636cf30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b636cf2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8uxwvdvv                        0x0000563953717577 <unavailable> + 9591

    5    libc.so.6                          0x00002b636d425460 __libc_start_main +
    245

    6    tmp8uxwvdvv                        0x0000563953716189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    let total1 = lst1.reduce(0) { $0 + $1.count }\n    let total2\
    \ = lst2.reduce(0) { $0 + $1.count }\n    return total1 < total2 ? lst1 : lst2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp8uxwvdvv/tmp8uxwvdvv.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b636d239c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b636cf30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b636cf30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b636cf2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8uxwvdvv                        0x0000563953717577 <unavailable> + 9591

    5    libc.so.6                          0x00002b636d425460 __libc_start_main +
    245

    6    tmp8uxwvdvv                        0x0000563953716189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n    for i in lst1 {\n   \
    \     sum1 += i.count\n    }\n    for i in lst2 {\n        sum2 += i.count\n \
    \   }\n    if sum1 < sum2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp1f7zn_h3/tmp1f7zn_h3.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b587bb20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587b817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587b817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587b8167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1f7zn_h3                        0x000055654e312677 <unavailable> + 9847

    5    libc.so.6                          0x00002b587bd0c460 __libc_start_main +
    245

    6    tmp1f7zn_h3                        0x000055654e311289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var lst1_total = 0\n    var lst2_total = 0\n    for i in\
    \ lst1 {\n        lst1_total += i.count\n    }\n    for i in lst2 {\n        lst2_total\
    \ += i.count\n    }\n    if lst1_total < lst2_total {\n        return lst1\n \
    \   } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmphpkak4l3/tmphpkak4l3.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00fc6a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00fc398b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00fc398988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00fc3977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphpkak4l3                        0x0000558fffc2d677 <unavailable> + 9847

    5    libc.so.6                          0x00002b00fc88d460 __libc_start_main +
    245

    6    tmphpkak4l3                        0x0000558fffc2c289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for item in lst1\
    \ {\n        total1 += item.count\n    }\n    for item in lst2 {\n        total2\
    \ += item.count\n    }\n    if total1 < total2 {\n        return lst1\n    } else\
    \ {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc6rhi5zi/tmpc6rhi5zi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba261485c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba26117cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba26117c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba26117b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc6rhi5zi                        0x00005559efcdc677 <unavailable> + 9847

    5    libc.so.6                          0x00002ba261671460 __libc_start_main +
    245

    6    tmpc6rhi5zi                        0x00005559efcdb289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    let total1 = lst1.reduce(0, {$0 + $1.count})\n    let total2\
    \ = lst2.reduce(0, {$0 + $1.count})\n    return total1 < total2 ? lst1 : lst2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpqbvghxtz/tmpqbvghxtz.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fcbc1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fcb913b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fcb913988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fcb9127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqbvghxtz                        0x000055e761df0577 <unavailable> + 9591

    5    libc.so.6                          0x00002b3fcbe08460 __libc_start_main +
    245

    6    tmpqbvghxtz                        0x000055e761def189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n    for i in lst1 {\n   \
    \     sum1 += i.count\n    }\n    for i in lst2 {\n        sum2 += i.count\n \
    \   }\n    if sum1 < sum2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp1f7zn_h3/tmp1f7zn_h3.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b587bb20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b587b817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b587b817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b587b8167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1f7zn_h3                        0x000055654e312677 <unavailable> + 9847

    5    libc.so.6                          0x00002b587bd0c460 __libc_start_main +
    245

    6    tmp1f7zn_h3                        0x000055654e311289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for item in lst1\
    \ {\n        total1 += item.count\n    }\n    for item in lst2 {\n        total2\
    \ += item.count\n    }\n    if total1 < total2 {\n        return lst1\n    } else\
    \ {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc6rhi5zi/tmpc6rhi5zi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba261485c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba26117cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba26117c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba26117b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc6rhi5zi                        0x00005559efcdc677 <unavailable> + 9847

    5    libc.so.6                          0x00002ba261671460 __libc_start_main +
    245

    6    tmpc6rhi5zi                        0x00005559efcdb289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 0
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 > total2 {\n        return lst2\n    } else {\n        return\
    \ lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for item in lst1\
    \ {\n        total1 += item.count\n    }\n    for item in lst2 {\n        total2\
    \ += item.count\n    }\n    if total1 < total2 {\n        return lst1\n    } else\
    \ {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc6rhi5zi/tmpc6rhi5zi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba261485c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba26117cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba26117c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba26117b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc6rhi5zi                        0x00005559efcdc677 <unavailable> + 9847

    5    libc.so.6                          0x00002ba261671460 __libc_start_main +
    245

    6    tmpc6rhi5zi                        0x00005559efcdb289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for j in lst2 {\n        total2 += j.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpgz7krqz8/tmpgz7krqz8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b945ad9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b945aa96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b945aa96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b945aa957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgz7krqz8                        0x0000561059389677 <unavailable> + 9847

    5    libc.so.6                          0x00002b945af8b460 __libc_start_main +
    245

    6    tmpgz7krqz8                        0x0000561059388289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for item in lst1\
    \ {\n        total1 += item.count\n    }\n    for item in lst2 {\n        total2\
    \ += item.count\n    }\n    if total1 < total2 {\n        return lst1\n    } else\
    \ {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc6rhi5zi/tmpc6rhi5zi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba261485c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba26117cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba26117c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba26117b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc6rhi5zi                        0x00005559efcdc677 <unavailable> + 9847

    5    libc.so.6                          0x00002ba261671460 __libc_start_main +
    245

    6    tmpc6rhi5zi                        0x00005559efcdb289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for item in lst1\
    \ {\n        total1 += item.count\n    }\n    for item in lst2 {\n        total2\
    \ += item.count\n    }\n    if total1 < total2 {\n        return lst1\n    } else\
    \ {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc6rhi5zi/tmpc6rhi5zi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba261485c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba26117cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba26117c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba26117b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc6rhi5zi                        0x00005559efcdc677 <unavailable> + 9847

    5    libc.so.6                          0x00002ba261671460 __libc_start_main +
    245

    6    tmpc6rhi5zi                        0x00005559efcdb289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total_lst1 = 0\n    var total_lst2 = 0\n    for i in\
    \ lst1 {\n        total_lst1 += i.count\n    }\n    for i in lst2 {\n        total_lst2\
    \ += i.count\n    }\n    if total_lst1 < total_lst2 {\n        return lst1\n \
    \   } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpdbl_vvqp/tmpdbl_vvqp.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abed20d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abed1dcdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abed1dcd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abed1dcc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdbl_vvqp                        0x000055d413601677 <unavailable> + 9847

    5    libc.so.6                          0x00002abed22c2460 __libc_start_main +
    245

    6    tmpdbl_vvqp                        0x000055d413600289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for item in lst1\
    \ {\n        total1 += item.count\n    }\n    for item in lst2 {\n        total2\
    \ += item.count\n    }\n    if total1 < total2 {\n        return lst1\n    } else\
    \ {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc6rhi5zi/tmpc6rhi5zi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba261485c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba26117cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba26117c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba26117b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc6rhi5zi                        0x00005559efcdc677 <unavailable> + 9847

    5    libc.so.6                          0x00002ba261671460 __libc_start_main +
    245

    6    tmpc6rhi5zi                        0x00005559efcdb289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var lst1_total = 0\n    var lst2_total = 0\n    for i in\
    \ lst1 {\n        lst1_total += i.count\n    }\n    for i in lst2 {\n        lst2_total\
    \ += i.count\n    }\n    if lst1_total < lst2_total {\n        return lst1\n \
    \   } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmphpkak4l3/tmphpkak4l3.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00fc6a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00fc398b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00fc398988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00fc3977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphpkak4l3                        0x0000558fffc2d677 <unavailable> + 9847

    5    libc.so.6                          0x00002b00fc88d460 __libc_start_main +
    245

    6    tmphpkak4l3                        0x0000558fffc2c289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: 0
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 > total2 {\n        return lst2\n    } else {\n        return\
    \ lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str in lst1 {\n\
    \        total1 += str.characters.count\n    }\n    for str in lst2 {\n      \
    \  total2 += str.characters.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp96srcuay.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        total1 += str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp96srcuay.swift:13:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        total2\
    \ += str.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\nfunc total_match(lst1: [String], lst2: [String])\
    \ -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n\
    \        total1 += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n\
    \    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc_fs9dlf/tmpc_fs9dlf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7c81cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7c513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7c513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7c5127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_fs9dlf                        0x000056455a100677 <unavailable> + 9847

    5    libc.so.6                          0x00002aee7ca08460 __libc_start_main +
    245

    6    tmpc_fs9dlf                        0x000056455a0ff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009416
