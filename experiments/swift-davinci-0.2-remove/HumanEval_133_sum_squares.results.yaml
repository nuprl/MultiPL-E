language: swift
name: HumanEval_133_sum_squares
results:
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map{Int(ceil($0))}.map{$0 * $0}.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp4mclluab.swift:7:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.map{$0 * $0}.reduce(0, combine: +)\n                \
    \       ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzsj8_64_.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzsj8_64_.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpd46q8liz.swift:7:22: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +)\n                     ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzsj8_64_.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map{Int(ceil($0))}.map{$0 * $0}.reduce(0, +)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpdzlx28t4.swift:7:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.map{$0 * $0}.reduce(0, +)\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map({Int(ceil($0))}).reduce(0, {$0 + $1 * $1})\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpqj_esi62.swift:7:25: error: cannot find 'ceil' in scope\n    return\
    \ lst.map({Int(ceil($0))}).reduce(0, {$0 + $1 * $1})\n                       \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map{Int(ceil($0))}.map{$0 * $0}.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp4mclluab.swift:7:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.map{$0 * $0}.reduce(0, combine: +)\n                \
    \       ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzsj8_64_.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbpqe4igk.swift:7:22: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, combine: +)\n               \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map{Int(ceil($0))}.map{$0 * $0}.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp4mclluab.swift:7:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.map{$0 * $0}.reduce(0, combine: +)\n                \
    \       ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzsj8_64_.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map({Int(ceil($0))}).reduce(0, combine: {$0 + $1 *\
    \ $1})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp4w0vj0_a.swift:7:25: error: cannot find 'ceil' in scope\n    return\
    \ lst.map({Int(ceil($0))}).reduce(0, combine: {$0 + $1 * $1})\n              \
    \          ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpd46q8liz.swift:7:22: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +)\n                     ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpd46q8liz.swift:7:22: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +)\n                     ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzsj8_64_.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map{Int(ceil($0))}.map{$0 * $0}.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp4mclluab.swift:7:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.map{$0 * $0}.reduce(0, combine: +)\n                \
    \       ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzsj8_64_.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzsj8_64_.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzsj8_64_.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpd46q8liz.swift:7:22: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +)\n                     ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map({Int(ceil($0))}).reduce(0, combine: {$0 + $1 *\
    \ $1})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp4w0vj0_a.swift:7:25: error: cannot find 'ceil' in scope\n    return\
    \ lst.map({Int(ceil($0))}).reduce(0, combine: {$0 + $1 * $1})\n              \
    \          ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzsj8_64_.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map{Int(ceil($0))}.map{$0 * $0}.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp4mclluab.swift:7:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.map{$0 * $0}.reduce(0, combine: +)\n                \
    \       ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpd46q8liz.swift:7:22: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +)\n                     ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzsj8_64_.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzsj8_64_.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbpqe4igk.swift:7:22: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, combine: +)\n               \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzsj8_64_.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzsj8_64_.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzsj8_64_.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbpqe4igk.swift:7:22: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, combine: +)\n               \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map{Int(ceil($0))}.map{$0 * $0}.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp4mclluab.swift:7:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.map{$0 * $0}.reduce(0, combine: +)\n                \
    \       ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpd46q8liz.swift:7:22: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +)\n                     ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzsj8_64_.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzsj8_64_.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzsj8_64_.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzsj8_64_.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzsj8_64_.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzsj8_64_.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map{Int(ceil($0))}.map{$0 * $0}.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp4mclluab.swift:7:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.map{$0 * $0}.reduce(0, combine: +)\n                \
    \       ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzsj8_64_.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzsj8_64_.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map{Int(ceil($0))}.map{$0 * $0}.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp4mclluab.swift:7:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.map{$0 * $0}.reduce(0, combine: +)\n                \
    \       ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzsj8_64_.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: -4
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmp7hy3gyoh/tmp7hy3gyoh.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e311dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e30ed1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e30ed1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e30ed07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7hy3gyoh                        0x000055bfd349a351 <unavailable> + 4945

    5    libc.so.6                          0x00002b6e313c6460 __libc_start_main +
    245

    6    tmp7hy3gyoh                        0x000055bfd3499fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660009708
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map{Int(ceil($0))}.map{$0 * $0}.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp4mclluab.swift:7:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.map{$0 * $0}.reduce(0, combine: +)\n                \
    \       ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbpqe4igk.swift:7:22: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, combine: +)\n               \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzsj8_64_.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbpqe4igk.swift:7:22: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, combine: +)\n               \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map{Int(ceil($0))}.map{$0 * $0}.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp4mclluab.swift:7:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.map{$0 * $0}.reduce(0, combine: +)\n                \
    \       ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzsj8_64_.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpd46q8liz.swift:7:22: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +)\n                     ^~~~\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine:\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphy3se0bf.swift:7:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, combine: +)\n          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009707
