language: swift
name: HumanEval_57_monotonic
results:
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = l[0] < l[1]\n    for i in 1..<l.count-1 {\n     \
    \   if increasing {\n            if l[i] > l[i+1] {\n                return false\n\
    \            }\n        } else {\n            if l[i] < l[i+1] {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = l[0] < l[1]\n    for i in 1..<l.count-1 {\n     \
    \   if increasing {\n            if l[i] > l[i+1] {\n                return false\n\
    \            }\n        } else {\n            if l[i] < l[i+1] {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count <= 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var inc = true\n    var dec = true\n    for i in 1..<l.count {\n \
    \       if l[i] > l[i-1] {\n            dec = false\n        }\n        if l[i]\
    \ < l[i-1] {\n            inc = false\n        }\n    }\n    return inc || dec\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count <= 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count <= 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count <= 1 {\n        return true\n\
    \    }\n    let d = l[1] - l[0]\n    for i in 1..<l.count {\n        if d * (l[i]\
    \ - l[i-1]) <= 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpvuihzs4w/tmpvuihzs4w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8dcab0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8dc7a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8dc7a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8dc7a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvuihzs4w                        0x00005564eb098894 <unavailable> + 6292

    5    libc.so.6                          0x00002ae8dcc9c460 __libc_start_main +
    245

    6    tmpvuihzs4w                        0x00005564eb0981a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = l[0] < l[1]\n    for i in 1..<l.count - 1 {\n   \
    \     if increasing {\n            if l[i] > l[i + 1] {\n                return\
    \ false\n            }\n        } else {\n            if l[i] < l[i + 1] {\n \
    \               return false\n            }\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count <= 1 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = l[0] < l[1]\n    for i in 1..<l.count-1 {\n     \
    \   if increasing && l[i] > l[i+1] {\n            return false\n        }\n  \
    \      if !increasing && l[i] < l[i+1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = l[0] < l[1]\n    for i in 1..<l.count-1 {\n     \
    \   if increasing {\n            if l[i] > l[i+1] {\n                return false\n\
    \            }\n        } else {\n            if l[i] < l[i+1] {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count <= 1 {\n        return true\n\
    \    }\n    var increasing = l[0] < l[1]\n    for i in 1..<l.count-1 {\n     \
    \   if increasing && l[i] > l[i+1] {\n            return false\n        }\n  \
    \      if !increasing && l[i] < l[i+1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count <= 2 {\n        return true\n\
    \    }\n    let diff = l[1] - l[0]\n    for i in 1..<l.count {\n        if (l[i]\
    \ - l[i-1]) * diff < 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = l[0] < l[1]\n    for i in 1..<l.count-1 {\n     \
    \   if increasing {\n            if l[i] > l[i+1] {\n                return false\n\
    \            }\n        } else {\n            if l[i] < l[i+1] {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var last = l[0]\n    var increasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] > last {\n            if !increasing {\n                return\
    \ false\n            }\n        } else if l[i] < last {\n            if increasing\
    \ {\n                increasing = false\n            }\n        } else {\n   \
    \         return false\n        }\n        last = l[i]\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp3n55gxcx/tmp3n55gxcx.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab20e11bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab20de12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab20de12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab20de117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3n55gxcx                        0x000055ab0a39f894 <unavailable> + 6292

    5    libc.so.6                          0x00002ab20e307460 __libc_start_main +
    245

    6    tmp3n55gxcx                        0x000055ab0a39f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count <= 1 {\n        return true\n\
    \    }\n    var increasing = l[0] < l[1]\n    for i in 1..<l.count-1 {\n     \
    \   if increasing {\n            if l[i] > l[i+1] {\n                return false\n\
    \            }\n        } else {\n            if l[i] < l[i+1] {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count <= 1 {\n        return true\n\
    \    }\n    var direction = l[1] - l[0]\n    for i in 1..<l.count {\n        if\
    \ direction == 0 {\n            direction = l[i] - l[i-1]\n            continue\n\
    \        }\n        let newDirection = l[i] - l[i-1]\n        if newDirection\
    \ * direction < 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i-1] {\n            increasing = false\n            break\n        }\n \
    \   }\n    if increasing {\n        return true\n    }\n    var decreasing = true\n\
    \    for i in 1..<l.count {\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n            break\n        }\n    }\n    return decreasing\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    let diff = l[1] - l[0]\n    for i in 1..<l.count {\n        if (l[i]\
    \ - l[i-1]) * diff < 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count <= 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    let first = l[0]\n    let second = l[1]\n    let diff = first - second\n\
    \    for i in 2..<l.count {\n        if diff * (first - l[i]) < 0 {\n        \
    \    return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp1jypzpr7/tmp1jypzpr7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b201ed51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b201ea48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b201ea48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b201ea477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1jypzpr7                        0x000056345404b6ce <unavailable> + 5838

    5    libc.so.6                          0x00002b201ef3d460 __libc_start_main +
    245

    6    tmp1jypzpr7                        0x000056345404b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var inc = true\n    var dec = true\n \
    \   for i in 1..<l.count {\n        if l[i] < l[i-1] {\n            inc = false\n\
    \        }\n        if l[i] > l[i-1] {\n            dec = false\n        }\n \
    \   }\n    return inc || dec\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count <= 1 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count <= 2 {\n        return true\n\
    \    }\n    var increasing = l[1] > l[0]\n    for i in 2..<l.count {\n       \
    \ if increasing && l[i] < l[i-1] {\n            return false\n        }\n    \
    \    if !increasing && l[i] > l[i-1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count <= 2 {\n        return true\n\
    \    }\n    var increasing = l[1] > l[0]\n    for i in 1..<l.count-1 {\n     \
    \   if increasing {\n            if l[i+1] < l[i] {\n                increasing\
    \ = false\n            }\n        } else {\n            if l[i+1] > l[i] {\n \
    \               return false\n            }\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i-1] < l[i] {\n            decreasing = false\n        }\n \
    \       if l[i-1] > l[i] {\n            increasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    let n = l.count\n    if n < 2 {\n    \
    \    return true\n    }\n    var increasing = l[1] > l[0]\n    for i in 1..<n-1\
    \ {\n        if increasing {\n            if l[i+1] < l[i] {\n               \
    \ increasing = false\n            }\n        } else {\n            if l[i+1] >\
    \ l[i] {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = l[0] < l[1]\n    for i in 1..<l.count-1 {\n     \
    \   if increasing {\n            if l[i] > l[i+1] {\n                return false\n\
    \            }\n        } else {\n            if l[i] < l[i+1] {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = l[0] < l[1]\n    for i in 1..<l.count-1 {\n     \
    \   if increasing {\n            if l[i] > l[i+1] {\n                return false\n\
    \            }\n        } else {\n            if l[i] < l[i+1] {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var inc = true\n    var dec = true\n    for i in 1..<l.count {\n \
    \       inc = inc && l[i] >= l[i-1]\n        dec = dec && l[i] <= l[i-1]\n   \
    \ }\n    return inc || dec\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    let first = l[0]\n    let second = l[1]\n    let diff = second - first\n\
    \    for i in 2..<l.count {\n        let next = l[i]\n        let nextDiff = next\
    \ - second\n        if diff * nextDiff < 0 {\n            return false\n     \
    \   }\n        second = next\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpv8sguzzp.swift:16:9: error: cannot assign to value: 'second' is\
    \ a 'let' constant\n        second = next\n        ^~~~~~\n/tmp/tmpv8sguzzp.swift:8:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let second = l[1]\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = l[0] < l[1]\n    for i in 1..<l.count-1 {\n     \
    \   if increasing {\n            if l[i] > l[i+1] {\n                return false\n\
    \            }\n        } else {\n            if l[i] < l[i+1] {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count <= 1 {\n        return true\n\
    \    }\n    if l[0] < l[1] {\n        for i in 1..<l.count-1 {\n            if\
    \ l[i] > l[i+1] {\n                return false\n            }\n        }\n  \
    \  } else {\n        for i in 1..<l.count-1 {\n            if l[i] < l[i+1] {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028639
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count <= 1 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count <= 1 {\n        return true\n\
    \    }\n    var inc = true\n    var dec = true\n    for i in 1..<l.count {\n \
    \       if l[i] < l[i-1] {\n            inc = false\n        }\n        if l[i]\
    \ > l[i-1] {\n            dec = false\n        }\n    }\n    return inc || dec\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028639
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count <= 1 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var inc = true\n    var\
    \ dec = true\n    while i < l.count - 1 {\n        if l[i] > l[i+1] {\n      \
    \      inc = false\n        }\n        if l[i] < l[i+1] {\n            dec = false\n\
    \        }\n        i += 1\n    }\n    return inc || dec\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028639
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var prev = l[0]\n    var increasing =\
    \ true\n    for i in 1..<l.count {\n        if l[i] < prev {\n            increasing\
    \ = false\n            break\n        }\n        prev = l[i]\n    }\n    if increasing\
    \ {\n        return true\n    }\n    prev = l[0]\n    for i in 1..<l.count {\n\
    \        if l[i] > prev {\n            return false\n        }\n        prev =\
    \ l[i]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028639
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count <= 1 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count <= 1 {\n        return true\n\
    \    }\n    var increasing = l[0] < l[1]\n    for i in 1..<l.count-1 {\n     \
    \   if increasing {\n            if l[i] > l[i+1] {\n                return false\n\
    \            }\n        } else {\n            if l[i] < l[i+1] {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = l[0] < l[1]\n    for i in 1..<l.count-1 {\n     \
    \   if increasing && l[i] > l[i+1] {\n            return false\n        }\n  \
    \      if !increasing && l[i] < l[i+1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var inc = true\n    var dec = true\n \
    \   for i in 1..<l.count {\n        if l[i] < l[i-1] {\n            inc = false\n\
    \        }\n        if l[i] > l[i-1] {\n            dec = false\n        }\n \
    \   }\n    return inc || dec\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count <= 1 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n \
    \       if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ isIncreasing = false\n        }\n        if l[i] > l[i-1] {\n            isDecreasing\
    \ = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028639
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<l.count {\n        if l[i] < l[i-1] {\n           \
    \ increasing = false\n        }\n        if l[i] > l[i-1] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028638
