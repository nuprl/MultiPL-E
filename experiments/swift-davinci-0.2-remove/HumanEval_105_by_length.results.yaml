language: swift
name: HumanEval_105_by_length
results:
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i > 0 && i < 10 {\n            switch i {\n  \
    \          case 1:\n                result.append(\"One\")\n            case 2:\n\
    \                result.append(\"Two\")\n            case 3:\n               \
    \ result.append(\"Three\")\n            case 4:\n                result.append(\"\
    Four\")\n            case 5:\n                result.append(\"Five\")\n      \
    \      case 6:\n                result.append(\"Six\")\n            case 7:\n\
    \                result.append(\"Seven\")\n            case 8:\n             \
    \   result.append(\"Eight\")\n            case 9:\n                result.append(\"\
    Nine\")\n            default:\n                break\n            }\n        }\n\
    \    }\n    return result.sorted().reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp1uiyrq_l/tmp1uiyrq_l.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d41c3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d41932b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d41932988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d419317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1uiyrq_l                        0x0000561ddcaaa941 <unavailable> + 6465

    5    libc.so.6                          0x00002b3d41e27460 __libc_start_main +
    245

    6    tmp1uiyrq_l                        0x0000561ddcaaa3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    let dict: [Int: String] = [1: \"One\", 2: \"Two\", 3: \"Three\", 4:\
    \ \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n\
    \    for i in arr {\n        if i > 0 && i < 10 {\n            result.append(dict[i]!)\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp0f6z3mfj/tmp0f6z3mfj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b892407fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8923d76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8923d76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8923d757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0f6z3mfj                        0x000055ad8c4fd9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b892426b460 __libc_start_main +
    245

    6    tmp0f6z3mfj                        0x000055ad8c4fd479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    let map = [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"\
    Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n    for i in arr\
    \ {\n        if i >= 1 && i <= 9 {\n            result.append(map[i]!)\n     \
    \   }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpuibcmfvb/tmpuibcmfvb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc60a01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc606f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc606f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc606f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuibcmfvb                        0x0000562d1c86c9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002abc60bed460 __libc_start_main +
    245

    6    tmpuibcmfvb                        0x0000562d1c86c479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8faq_xnc/tmp8faq_xnc.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af692b42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af692839b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af692839988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6928387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8faq_xnc                        0x00005633f46b38a1 <unavailable> + 6305

    5    libc.so.6                          0x00002af692d2e460 __libc_start_main +
    245

    6    tmp8faq_xnc                        0x00005633f46b3349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map({ String($0) })\n    let mapped2 = mapped.map({\n    \
    \    switch $0 {\n        case \"1\":\n            return \"One\"\n        case\
    \ \"2\":\n            return \"Two\"\n        case \"3\":\n            return\
    \ \"Three\"\n        case \"4\":\n            return \"Four\"\n        case \"\
    5\":\n            return \"Five\"\n        case \"6\":\n            return \"\
    Six\"\n        case \"7\":\n            return \"Seven\"\n        case \"8\":\n\
    \            return \"Eight\"\n        case \"9\":\n            return \"Nine\"\
    \n        default:\n            return \"\"\n        }\n    })\n    return mapped2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let dict = [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\"\
    , 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n    for i in arr {\n \
    \       if i > 0 && i < 10 {\n            result.append(dict[i]!)\n        }\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpm7baqq3h/tmpm7baqq3h.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad773463c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad77315ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad77315a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7731597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm7baqq3h                        0x000055e512f03a31 <unavailable> + 6705

    5    libc.so.6                          0x00002ad77364f460 __libc_start_main +
    245

    6    tmpm7baqq3h                        0x000055e512f034d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map({ String($0) })\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpkg8vn3z4/tmpkg8vn3z4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9df12bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9dee22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9dee22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9dee217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkg8vn3z4                        0x0000563e1aec39d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ae9df317460 __libc_start_main +
    245

    6    tmpkg8vn3z4                        0x0000563e1aec3479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let dict = [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\"\
    , 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n    for i in arr {\n \
    \       if i >= 1 && i <= 9 {\n            result.append(dict[i]!)\n        }\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpwm6r__l1/tmpwm6r__l1.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af58381cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af583513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af583513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5835127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwm6r__l1                        0x0000561ba140ea31 <unavailable> + 6705

    5    libc.so.6                          0x00002af583a08460 __libc_start_main +
    245

    6    tmpwm6r__l1                        0x0000561ba140e4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ words = reversed.map { String($0) }\n    let result = words.map {\n        switch\
    \ $0 {\n        case \"1\": return \"One\"\n        case \"2\": return \"Two\"\
    \n        case \"3\": return \"Three\"\n        case \"4\": return \"Four\"\n\
    \        case \"5\": return \"Five\"\n        case \"6\": return \"Six\"\n   \
    \     case \"7\": return \"Seven\"\n        case \"8\": return \"Eight\"\n   \
    \     case \"9\": return \"Nine\"\n        default: return \"\"\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let one = \"One\"\n    let two = \"Two\"\n    let three = \"Three\"\n   \
    \ let four = \"Four\"\n    let five = \"Five\"\n    let six = \"Six\"\n    let\
    \ seven = \"Seven\"\n    let eight = \"Eight\"\n    let nine = \"Nine\"\n    for\
    \ i in arr {\n        if i == 1 {\n            result.append(one)\n        } else\
    \ if i == 2 {\n            result.append(two)\n        } else if i == 3 {\n  \
    \          result.append(three)\n        } else if i == 4 {\n            result.append(four)\n\
    \        } else if i == 5 {\n            result.append(five)\n        } else if\
    \ i == 6 {\n            result.append(six)\n        } else if i == 7 {\n     \
    \       result.append(seven)\n        } else if i == 8 {\n            result.append(eight)\n\
    \        } else if i == 9 {\n            result.append(nine)\n        }\n    }\n\
    \    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp7n3sniw4/tmp7n3sniw4.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff004b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff001aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff001ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff001ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7n3sniw4                        0x0000555acb2e48a1 <unavailable> + 6305

    5    libc.so.6                          0x00002aff006a3460 __libc_start_main +
    245

    6    tmp7n3sniw4                        0x0000555acb2e4349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort { $0.count < $1.count }\n    result = result.reversed()\n\
    \    for i in 0..<result.count {\n        switch result[i] {\n        case \"\
    1\":\n            result[i] = \"One\"\n        case \"2\":\n            result[i]\
    \ = \"Two\"\n        case \"3\":\n            result[i] = \"Three\"\n        case\
    \ \"4\":\n            result[i] = \"Four\"\n        case \"5\":\n            result[i]\
    \ = \"Five\"\n        case \"6\":\n            result[i] = \"Six\"\n        case\
    \ \"7\":\n            result[i] = \"Seven\"\n        case \"8\":\n           \
    \ result[i] = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\
    \n        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmp81di5304/tmp81di5304.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0daf6d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0daf3cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0daf3cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0daf3ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp81di5304                        0x000056137ab10d11 <unavailable> + 7441

    5    libc.so.6                          0x00002b0daf8c0460 __libc_start_main +
    245

    6    tmp81di5304                        0x000056137ab107b9 <unavailable> + 6073

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            result[i] = \"\"\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for i in arr {\n        if\
    \ numbers.contains(i) {\n            result.append(String(i))\n        }\n   \
    \ }\n    result.sort()\n    result = result.reversed()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            result[i] = \"Error\"\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i > 0 && i < 10 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            result[i] = \"Error\"\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    let dict: [Int: String] = [1: \"One\", 2: \"Two\", 3: \"Three\", 4:\
    \ \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(dict[i]!)\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpi9g0k_un/tmpi9g0k_un.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf974abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf971a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf971a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf971a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi9g0k_un                        0x000055f3379639d1 <unavailable> + 6609

    5    libc.so.6                          0x00002aaf97697460 __libc_start_main +
    245

    6    tmpi9g0k_un                        0x000055f337963479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i > 0 && i < 10 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            switch i {\n \
    \           case 1:\n                result.append(\"One\")\n            case\
    \ 2:\n                result.append(\"Two\")\n            case 3:\n          \
    \      result.append(\"Three\")\n            case 4:\n                result.append(\"\
    Four\")\n            case 5:\n                result.append(\"Five\")\n      \
    \      case 6:\n                result.append(\"Six\")\n            case 7:\n\
    \                result.append(\"Seven\")\n            case 8:\n             \
    \   result.append(\"Eight\")\n            case 9:\n                result.append(\"\
    Nine\")\n            default:\n                break\n            }\n        }\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpt65t3p0a/tmpt65t3p0a.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23464cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23461c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23461c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23461c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt65t3p0a                        0x00005577f53598a1 <unavailable> + 6305

    5    libc.so.6                          0x00002b23466ba460 __libc_start_main +
    245

    6    tmpt65t3p0a                        0x00005577f5359349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let numbers = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = numbers.reversed()\n   \
    \ let names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpu_7jqcj6/tmpu_7jqcj6.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad648f3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad648c31b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad648c31988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad648c307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu_7jqcj6                        0x000055e48c2c09d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ad649126460 __libc_start_main +
    245

    6    tmpu_7jqcj6                        0x000055e48c2c0479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    return\
    \ reversed.map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpysk_u54p/tmpysk_u54p.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aceecb3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aceec833b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aceec833988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aceec8327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpysk_u54p                        0x000056263af7e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002aceecd28460 __libc_start_main +
    245

    6    tmpysk_u54p                        0x000056263af7e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmprb0twv7e/tmprb0twv7e.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845f2e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b845efe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b845efe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b845efdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb0twv7e                        0x0000557a5d0259d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b845f4d5460 __libc_start_main +
    245

    6    tmprb0twv7e                        0x0000557a5d025479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let dict = [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\"\
    , 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n    for i in arr {\n \
    \       if i >= 1 && i <= 9 {\n            result.append(dict[i]!)\n        }\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpwm6r__l1/tmpwm6r__l1.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af58381cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af583513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af583513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5835127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwm6r__l1                        0x0000561ba140ea31 <unavailable> + 6705

    5    libc.so.6                          0x00002af583a08460 __libc_start_main +
    245

    6    tmpwm6r__l1                        0x0000561ba140e4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let dict = [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\"\
    , 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n    for i in arr {\n \
    \       if i >= 1 && i <= 9 {\n            result.append(dict[i]!)\n        }\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpwm6r__l1/tmpwm6r__l1.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af58381cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af583513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af583513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5835127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwm6r__l1                        0x0000561ba140ea31 <unavailable> + 6705

    5    libc.so.6                          0x00002af583a08460 __libc_start_main +
    245

    6    tmpwm6r__l1                        0x0000561ba140e4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let numbers = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\",\
    \ \"Seven\", \"Eight\", \"Nine\"]\n    for i in arr {\n        if i > 0 && i <\
    \ 10 {\n            result.append(numbers[i - 1])\n        }\n    }\n    return\
    \ result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmplzqq3yv9/tmplzqq3yv9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abad06ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abad03c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abad03c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abad03c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplzqq3yv9                        0x000055bff933c8f1 <unavailable> + 6385

    5    libc.so.6                          0x00002abad08b8460 __libc_start_main +
    245

    6    tmplzqq3yv9                        0x000055bff933c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ > 0 && $0 < 10}).sorted()\n    let reversed = sorted.reversed()\n    let mapped\
    \ = reversed.map({String($0)})\n    return mapped\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp49viner1/tmp49viner1.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1dca64ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1dca345b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1dca345988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1dca3447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49viner1                        0x000055d3b8a809d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b1dca83a460 __libc_start_main +
    245

    6    tmp49viner1                        0x000055d3b8a80479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort(by: <)\n    result = result.reversed()\n  \
    \  for i in 0..<result.count {\n        switch result[i] {\n        case \"1\"\
    :\n            result[i] = \"One\"\n        case \"2\":\n            result[i]\
    \ = \"Two\"\n        case \"3\":\n            result[i] = \"Three\"\n        case\
    \ \"4\":\n            result[i] = \"Four\"\n        case \"5\":\n            result[i]\
    \ = \"Five\"\n        case \"6\":\n            result[i] = \"Six\"\n        case\
    \ \"7\":\n            result[i] = \"Seven\"\n        case \"8\":\n           \
    \ result[i] = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\
    \n        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let dict = [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\"\
    , 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n    for i in arr {\n \
    \       if i > 0 && i < 10 {\n            result.append(dict[i]!)\n        }\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpm7baqq3h/tmpm7baqq3h.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad773463c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad77315ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad77315a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7731597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm7baqq3h                        0x000055e512f03a31 <unavailable> + 6705

    5    libc.so.6                          0x00002ad77364f460 __libc_start_main +
    245

    6    tmpm7baqq3h                        0x000055e512f034d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i < 1 || i > 9 {\n            continue\n     \
    \   }\n        switch i {\n        case 1:\n            result.append(\"One\"\
    )\n        case 2:\n            result.append(\"Two\")\n        case 3:\n    \
    \        result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmplzrhc3bq/tmplzrhc3bq.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2113cefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21139e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21139e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21139e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplzrhc3bq                        0x000055ba0cd5a8a1 <unavailable> + 6305

    5    libc.so.6                          0x00002b2113edb460 __libc_start_main +
    245

    6    tmplzrhc3bq                        0x000055ba0cd5a349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let dict = [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\"\
    , 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n    for i in arr {\n \
    \       if i >= 1 && i <= 9 {\n            result.append(dict[i]!)\n        }\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpwm6r__l1/tmpwm6r__l1.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af58381cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af583513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af583513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5835127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwm6r__l1                        0x0000561ba140ea31 <unavailable> + 6705

    5    libc.so.6                          0x00002af583a08460 __libc_start_main +
    245

    6    tmpwm6r__l1                        0x0000561ba140e4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let dict = [1:\"One\", 2:\"Two\", 3:\"Three\", 4:\"Four\", 5:\"Five\", 6:\"\
    Six\", 7:\"Seven\", 8:\"Eight\", 9:\"Nine\"]\n    for i in arr {\n        if dict[i]\
    \ != nil {\n            result.append(dict[i]!)\n        }\n    }\n    result.sort(by:\
    \ {$0.count < $1.count})\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpsoycv11h/tmpsoycv11h.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dd128ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dd0f85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dd0f85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dd0f847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsoycv11h                        0x0000563ef690daf1 <unavailable> + 6897

    5    libc.so.6                          0x00002b3dd147a460 __libc_start_main +
    245

    6    tmpsoycv11h                        0x0000563ef690d599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    let dict: [Int: String] = [1: \"One\", 2: \"Two\", 3: \"Three\", 4:\
    \ \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n\
    \    for i in arr {\n        if dict[i] != nil {\n            result.append(dict[i]!)\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpze3oe6ib/tmpze3oe6ib.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd288dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd285d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd285d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd285d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpze3oe6ib                        0x0000564ee79ae9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002afd28ac6460 __libc_start_main +
    245

    6    tmpze3oe6ib                        0x0000564ee79ae479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    for i in arr {\n        if i >= 1 && i <= 9 {\n            switch\
    \ i {\n            case 1:\n                result.append(\"One\")\n         \
    \   case 2:\n                result.append(\"Two\")\n            case 3:\n   \
    \             result.append(\"Three\")\n            case 4:\n                result.append(\"\
    Four\")\n            case 5:\n                result.append(\"Five\")\n      \
    \      case 6:\n                result.append(\"Six\")\n            case 7:\n\
    \                result.append(\"Seven\")\n            case 8:\n             \
    \   result.append(\"Eight\")\n            case 9:\n                result.append(\"\
    Nine\")\n            default:\n                break\n            }\n        }\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp9522bn2y/tmp9522bn2y.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7bed8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7bea85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7bea85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7bea847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9522bn2y                        0x0000557717521841 <unavailable> + 6209

    5    libc.so.6                          0x00002ad7bef7a460 __libc_start_main +
    245

    6    tmp9522bn2y                        0x00005577175212e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for number in arr {\n\
    \        if numbers.contains(number) {\n            result.append(String(number))\n\
    \        }\n    }\n    result.sort { $0.count < $1.count }\n    result = result.reversed()\n\
    \    for i in 0..<result.count {\n        switch result[i] {\n        case \"\
    1\":\n            result[i] = \"One\"\n        case \"2\":\n            result[i]\
    \ = \"Two\"\n        case \"3\":\n            result[i] = \"Three\"\n        case\
    \ \"4\":\n            result[i] = \"Four\"\n        case \"5\":\n            result[i]\
    \ = \"Five\"\n        case \"6\":\n            result[i] = \"Six\"\n        case\
    \ \"7\":\n            result[i] = \"Seven\"\n        case \"8\":\n           \
    \ result[i] = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\
    \n        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmphux2saoq/tmphux2saoq.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65d217dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65d1e74b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65d1e74988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65d1e737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphux2saoq                        0x000055794bbebd21 <unavailable> + 7457

    5    libc.so.6                          0x00002b65d2369460 __libc_start_main +
    245

    6    tmphux2saoq                        0x000055794bbeb7c9 <unavailable> + 6089

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            switch i {\n \
    \           case 1:\n                result.append(\"One\")\n            case\
    \ 2:\n                result.append(\"Two\")\n            case 3:\n          \
    \      result.append(\"Three\")\n            case 4:\n                result.append(\"\
    Four\")\n            case 5:\n                result.append(\"Five\")\n      \
    \      case 6:\n                result.append(\"Six\")\n            case 7:\n\
    \                result.append(\"Seven\")\n            case 8:\n             \
    \   result.append(\"Eight\")\n            case 9:\n                result.append(\"\
    Nine\")\n            default:\n                break\n            }\n        }\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpt65t3p0a/tmpt65t3p0a.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23464cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23461c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23461c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23461c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt65t3p0a                        0x00005577f53598a1 <unavailable> + 6305

    5    libc.so.6                          0x00002b23466ba460 __libc_start_main +
    245

    6    tmpt65t3p0a                        0x00005577f5359349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let dict = [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\"\
    , 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n    for i in arr {\n \
    \       if i >= 1 && i <= 9 {\n            result.append(dict[i]!)\n        }\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpwm6r__l1/tmpwm6r__l1.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af58381cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af583513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af583513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5835127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwm6r__l1                        0x0000561ba140ea31 <unavailable> + 6705

    5    libc.so.6                          0x00002af583a08460 __libc_start_main +
    245

    6    tmpwm6r__l1                        0x0000561ba140e4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map({ String($0) })\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpkg8vn3z4/tmpkg8vn3z4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9df12bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9dee22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9dee22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9dee217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkg8vn3z4                        0x0000563e1aec39d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ae9df317460 __libc_start_main +
    245

    6    tmpkg8vn3z4                        0x0000563e1aec3479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for i in arr {\n        if\
    \ numbers.contains(i) {\n            result.append(String(i))\n        }\n   \
    \ }\n    result.sort()\n    result = result.reversed()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            print(\"Error\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014029
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { number in\n        switch number {\n        case 1: return\
    \ \"One\"\n        case 2: return \"Two\"\n        case 3: return \"Three\"\n\
    \        case 4: return \"Four\"\n        case 5: return \"Five\"\n        case\
    \ 6: return \"Six\"\n        case 7: return \"Seven\"\n        case 8: return\
    \ \"Eight\"\n        case 9: return \"Nine\"\n        default: return \"\"\n \
    \       }\n    }\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for number in arr {\n    \
    \    if numbers.contains(number) {\n            result.append(String(number))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014029
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map({ String($0) })\n    let replaced = mapped.map({ $0.replacingOccurrences(of:\
    \ \"1\", with: \"One\").replacingOccurrences(of: \"2\", with: \"Two\").replacingOccurrences(of:\
    \ \"3\", with: \"Three\").replacingOccurrences(of: \"4\", with: \"Four\").replacingOccurrences(of:\
    \ \"5\", with: \"Five\").replacingOccurrences(of: \"6\", with: \"Six\").replacingOccurrences(of:\
    \ \"7\", with: \"Seven\").replacingOccurrences(of: \"8\", with: \"Eight\").replacingOccurrences(of:\
    \ \"9\", with: \"Nine\") })\n    return replaced\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyteiwc4w.swift:12:36: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let replaced = mapped.map({ $0.replacingOccurrences(of:\
    \ \"1\", with: \"One\").replacingOccurrences(of: \"2\", with: \"Two\").replacingOccurrences(of:\
    \ \"3\", with: \"Three\").replacingOccurrences(of: \"4\", with: \"Four\").replacingOccurrences(of:\
    \ \"5\", with: \"Five\").replacingOccurrences(of: \"6\", with: \"Six\").replacingOccurrences(of:\
    \ \"7\", with: \"Seven\").replacingOccurrences(of: \"8\", with: \"Eight\").replacingOccurrences(of:\
    \ \"9\", with: \"Nine\") })\n                                ~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    let dict: [Int: String] = [1: \"One\", 2: \"Two\", 3: \"Three\", 4:\
    \ \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n\
    \    for i in arr {\n        if i > 0 && i < 10 {\n            result.append(dict[i]!)\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp0f6z3mfj/tmp0f6z3mfj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b892407fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8923d76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8923d76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8923d757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0f6z3mfj                        0x000055ad8c4fd9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b892426b460 __libc_start_main +
    245

    6    tmp0f6z3mfj                        0x000055ad8c4fd479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let dict = [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\"\
    , 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n    for i in arr {\n \
    \       if i > 0 && i < 10 {\n            result.append(dict[i]!)\n        }\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpm7baqq3h/tmpm7baqq3h.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad773463c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad77315ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad77315a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7731597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm7baqq3h                        0x000055e512f03a31 <unavailable> + 6705

    5    libc.so.6                          0x00002ad77364f460 __libc_start_main +
    245

    6    tmpm7baqq3h                        0x000055e512f034d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let dict = [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\"\
    , 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n    for i in arr {\n \
    \       if i > 0 && i < 10 {\n            result.append(dict[i]!)\n        }\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpm7baqq3h/tmpm7baqq3h.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad773463c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad77315ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad77315a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7731597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm7baqq3h                        0x000055e512f03a31 <unavailable> + 6705

    5    libc.so.6                          0x00002ad77364f460 __libc_start_main +
    245

    6    tmpm7baqq3h                        0x000055e512f034d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var newArr = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            switch i {\n \
    \           case 1:\n                newArr.append(\"One\")\n            case\
    \ 2:\n                newArr.append(\"Two\")\n            case 3:\n          \
    \      newArr.append(\"Three\")\n            case 4:\n                newArr.append(\"\
    Four\")\n            case 5:\n                newArr.append(\"Five\")\n      \
    \      case 6:\n                newArr.append(\"Six\")\n            case 7:\n\
    \                newArr.append(\"Seven\")\n            case 8:\n             \
    \   newArr.append(\"Eight\")\n            case 9:\n                newArr.append(\"\
    Nine\")\n            default:\n                newArr.append(\"\")\n         \
    \   }\n        }\n    }\n    return newArr.reversed()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpazfks2lm/tmpazfks2lm.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0103cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0100c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0100c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0100c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpazfks2lm                        0x000055ddcbbb08a1 <unavailable> + 6305

    5    libc.so.6                          0x00002af0105b7460 __libc_start_main +
    245

    6    tmpazfks2lm                        0x000055ddcbbb0349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted(by: <)\n    let reversed = sorted.reversed()\n\
    \    let mapped = reversed.map({ String($0) })\n    return mapped\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmp9j0v04cl/tmp9j0v04cl.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86a42c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86a3fb7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86a3fb7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86a3fb67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9j0v04cl                        0x000055df28bff9a1 <unavailable> + 6561

    5    libc.so.6                          0x00002b86a44ac460 __libc_start_main +
    245

    6    tmp9j0v04cl                        0x000055df28bff449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let dict = [1:\"One\", 2:\"Two\", 3:\"Three\", 4:\"Four\", 5:\"Five\", 6:\"\
    Six\", 7:\"Seven\", 8:\"Eight\", 9:\"Nine\"]\n    for i in arr {\n        if dict[i]\
    \ != nil {\n            result.append(dict[i]!)\n        }\n    }\n    result.sort(by:\
    \ {$0.count < $1.count})\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpsoycv11h/tmpsoycv11h.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dd128ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dd0f85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dd0f85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dd0f847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsoycv11h                        0x0000563ef690daf1 <unavailable> + 6897

    5    libc.so.6                          0x00002b3dd147a460 __libc_start_main +
    245

    6    tmpsoycv11h                        0x0000563ef690d599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var numbers = [Int]()\n    for i in arr {\n        if i >= 1 && i <= 9 {\n\
    \            numbers.append(i)\n        }\n    }\n    numbers.sort()\n    numbers.reverse()\n\
    \    for i in numbers {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    let dict: [Int: String] = [1: \"One\", 2: \"Two\", 3: \"Three\", 4:\
    \ \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(dict[i]!)\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpi9g0k_un/tmpi9g0k_un.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf974abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf971a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf971a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf971a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi9g0k_un                        0x000055f3379639d1 <unavailable> + 6609

    5    libc.so.6                          0x00002aaf97697460 __libc_start_main +
    245

    6    tmpi9g0k_un                        0x000055f337963479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    let dict: [Int: String] = [1: \"One\", 2: \"Two\", 3: \"Three\", 4:\
    \ \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(dict[i]!)\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpi9g0k_un/tmpi9g0k_un.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf974abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf971a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf971a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf971a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi9g0k_un                        0x000055f3379639d1 <unavailable> + 6609

    5    libc.so.6                          0x00002aaf97697460 __libc_start_main +
    245

    6    tmpi9g0k_un                        0x000055f337963479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmprb0twv7e/tmprb0twv7e.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845f2e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b845efe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b845efe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b845efdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb0twv7e                        0x0000557a5d0259d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b845f4d5460 __libc_start_main +
    245

    6    tmprb0twv7e                        0x0000557a5d025479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmprb0twv7e/tmprb0twv7e.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845f2e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b845efe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b845efe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b845efdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb0twv7e                        0x0000557a5d0259d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b845f4d5460 __libc_start_main +
    245

    6    tmprb0twv7e                        0x0000557a5d025479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var dict = [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\"\
    , 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n    for i in arr {\n \
    \       if i >= 1 && i <= 9 {\n            result.append(dict[i]!)\n        }\n\
    \    }\n    result.reverse()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnc0dvutl/tmpnc0dvutl.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27d7114c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27d6e0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27d6e0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27d6e0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnc0dvutl                        0x0000563fddcacaa1 <unavailable> + 6817

    5    libc.so.6                          0x00002b27d7300460 __libc_start_main +
    245

    6    tmpnc0dvutl                        0x0000563fddcac549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmprb0twv7e/tmprb0twv7e.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845f2e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b845efe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b845efe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b845efdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb0twv7e                        0x0000557a5d0259d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b845f4d5460 __libc_start_main +
    245

    6    tmprb0twv7e                        0x0000557a5d025479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var sorted = arr.filter { $0 >= 1 && $0 <= 9 }.sorted()\n    sorted.reverse()\n\
    \    for i in sorted {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    let dict: [Int: String] = [1: \"One\", 2: \"Two\", 3: \"Three\", 4:\
    \ \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n\
    \    for i in arr {\n        if i > 0 && i < 10 {\n            result.append(dict[i]!)\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp0f6z3mfj/tmp0f6z3mfj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b892407fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8923d76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8923d76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8923d757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0f6z3mfj                        0x000055ad8c4fd9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b892426b460 __libc_start_main +
    245

    6    tmp0f6z3mfj                        0x000055ad8c4fd479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    let dict: [Int: String] = [1: \"One\", 2: \"Two\", 3: \"Three\", 4:\
    \ \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(dict[i]!)\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpi9g0k_un/tmpi9g0k_un.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf974abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf971a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf971a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf971a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi9g0k_un                        0x000055f3379639d1 <unavailable> + 6609

    5    libc.so.6                          0x00002aaf97697460 __libc_start_main +
    245

    6    tmpi9g0k_un                        0x000055f337963479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for i in arr {\n  \
    \      if numbers.contains(i) {\n            result.append(String(i))\n      \
    \  }\n    }\n    result.sort()\n    result = result.reversed()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014029
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    let dict: [Int: String] = [1: \"One\", 2: \"Two\", 3: \"Three\", 4:\
    \ \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(dict[i]!)\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpi9g0k_un/tmpi9g0k_un.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf974abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf971a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf971a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf971a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi9g0k_un                        0x000055f3379639d1 <unavailable> + 6609

    5    libc.so.6                          0x00002aaf97697460 __libc_start_main +
    245

    6    tmpi9g0k_un                        0x000055f337963479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for item in arr {\n        switch item {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            continue\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp1gyy1lys/tmp1gyy1lys.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d00d96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d00a8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d00a8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d00a8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1gyy1lys                        0x0000563fdb4838a1 <unavailable> + 6305

    5    libc.so.6                          0x00002b2d00f82460 __libc_start_main +
    245

    6    tmp1gyy1lys                        0x0000563fdb483349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i == 1 {\n            result.append(\"One\")\n\
    \        } else if i == 2 {\n            result.append(\"Two\")\n        } else\
    \ if i == 3 {\n            result.append(\"Three\")\n        } else if i == 4\
    \ {\n            result.append(\"Four\")\n        } else if i == 5 {\n       \
    \     result.append(\"Five\")\n        } else if i == 6 {\n            result.append(\"\
    Six\")\n        } else if i == 7 {\n            result.append(\"Seven\")\n   \
    \     } else if i == 8 {\n            result.append(\"Eight\")\n        } else\
    \ if i == 9 {\n            result.append(\"Nine\")\n        }\n    }\n    return\
    \ result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp4grdnsxm/tmp4grdnsxm.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07b037cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07b0073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07b0073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07b00727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4grdnsxm                        0x00005571bd7eb8a1 <unavailable> + 6305

    5    libc.so.6                          0x00002b07b0568460 __libc_start_main +
    245

    6    tmp4grdnsxm                        0x00005571bd7eb349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map {\n        switch $0 {\n        case 1: return \"One\"\n\
    \        case 2: return \"Two\"\n        case 3: return \"Three\"\n        case\
    \ 4: return \"Four\"\n        case 5: return \"Five\"\n        case 6: return\
    \ \"Six\"\n        case 7: return \"Seven\"\n        case 8: return \"Eight\"\n\
    \        case 9: return \"Nine\"\n        default: return \"\"\n        }\n  \
    \  }\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmprb0twv7e/tmprb0twv7e.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845f2e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b845efe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b845efe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b845efdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb0twv7e                        0x0000557a5d0259d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b845f4d5460 __libc_start_main +
    245

    6    tmprb0twv7e                        0x0000557a5d025479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    let dict: [Int: String] = [1: \"One\", 2: \"Two\", 3: \"Three\", 4:\
    \ \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n\
    \    for i in arr {\n        if i > 0 && i < 10 {\n            result.append(dict[i]!)\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp0f6z3mfj/tmp0f6z3mfj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b892407fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8923d76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8923d76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8923d757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0f6z3mfj                        0x000055ad8c4fd9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b892426b460 __libc_start_main +
    245

    6    tmp0f6z3mfj                        0x000055ad8c4fd479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let numbers = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\",\
    \ \"Seven\", \"Eight\", \"Nine\"]\n    for i in arr {\n        if i > 0 && i <\
    \ 10 {\n            result.append(numbers[i - 1])\n        }\n    }\n    return\
    \ result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmplzqq3yv9/tmplzqq3yv9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abad06ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abad03c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abad03c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abad03c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplzqq3yv9                        0x000055bff933c8f1 <unavailable> + 6385

    5    libc.so.6                          0x00002abad08b8460 __libc_start_main +
    245

    6    tmplzqq3yv9                        0x000055bff933c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let dict = [1:\"One\", 2:\"Two\", 3:\"Three\", 4:\"Four\", 5:\"Five\", 6:\"\
    Six\", 7:\"Seven\", 8:\"Eight\", 9:\"Nine\"]\n    for i in arr {\n        if i\
    \ > 0 && i < 10 {\n            result.append(dict[i]!)\n        }\n    }\n   \
    \ result.sort(by: {$0.count < $1.count})\n    return result.reversed()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmp4lnn4d9t/tmp4lnn4d9t.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31038adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31035a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31035a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31035a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lnn4d9t                        0x000055947d630af1 <unavailable> + 6897

    5    libc.so.6                          0x00002b3103a99460 __libc_start_main +
    245

    6    tmp4lnn4d9t                        0x000055947d630599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i > 0 && i < 10 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var temp = [Int]()\n    var dict = [1: \"One\", 2: \"Two\", 3: \"Three\"\
    , 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\
    ]\n    for i in arr {\n        if i > 0 && i < 10 {\n            temp.append(i)\n\
    \        }\n    }\n    temp.sort()\n    for i in temp.reversed() {\n        result.append(dict[i]!)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let dict = [1:\"One\", 2:\"Two\", 3:\"Three\", 4:\"Four\", 5:\"Five\", 6:\"\
    Six\", 7:\"Seven\", 8:\"Eight\", 9:\"Nine\"]\n    for i in arr {\n        if i\
    \ >= 1 && i <= 9 {\n            result.append(dict[i]!)\n        }\n    }\n  \
    \  return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpo9pdx4md/tmpo9pdx4md.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5fcc2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5fc923b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5fc923988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5fc9227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9pdx4md                        0x000055c0b3547a31 <unavailable> + 6705

    5    libc.so.6                          0x00002ac5fce18460 __libc_start_main +
    245

    6    tmpo9pdx4md                        0x000055c0b35474d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for i in arr {\n  \
    \      if numbers.contains(i) {\n            result.append(String(i))\n      \
    \  }\n    }\n    result.sort { $0.count < $1.count }\n    result.reverse()\n \
    \   for i in 0..<result.count {\n        switch result[i] {\n        case \"1\"\
    :\n            result[i] = \"One\"\n        case \"2\":\n            result[i]\
    \ = \"Two\"\n        case \"3\":\n            result[i] = \"Three\"\n        case\
    \ \"4\":\n            result[i] = \"Four\"\n        case \"5\":\n            result[i]\
    \ = \"Five\"\n        case \"6\":\n            result[i] = \"Six\"\n        case\
    \ \"7\":\n            result[i] = \"Seven\"\n        case \"8\":\n           \
    \ result[i] = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\
    \n        default:\n            result[i] = \"\"\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpizbrpbzh/tmpizbrpbzh.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55486f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55483efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55483ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55483ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizbrpbzh                        0x000055754f2cad91 <unavailable> + 7569

    5    libc.so.6                          0x00002b55488e4460 __libc_start_main +
    245

    6    tmpizbrpbzh                        0x000055754f2ca839 <unavailable> + 6201

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmprb0twv7e/tmprb0twv7e.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845f2e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b845efe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b845efe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b845efdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb0twv7e                        0x0000557a5d0259d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b845f4d5460 __libc_start_main +
    245

    6    tmprb0twv7e                        0x0000557a5d025479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i > 0 && i < 10 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort(by: {$0.count < $1.count})\n    result.reverse()\n\
    \    for i in 0..<result.count {\n        switch result[i] {\n        case \"\
    1\":\n            result[i] = \"One\"\n        case \"2\":\n            result[i]\
    \ = \"Two\"\n        case \"3\":\n            result[i] = \"Three\"\n        case\
    \ \"4\":\n            result[i] = \"Four\"\n        case \"5\":\n            result[i]\
    \ = \"Five\"\n        case \"6\":\n            result[i] = \"Six\"\n        case\
    \ \"7\":\n            result[i] = \"Seven\"\n        case \"8\":\n           \
    \ result[i] = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\
    \n        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpqln0wsnr/tmpqln0wsnr.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e1dd0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e1da04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e1da04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e1da037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqln0wsnr                        0x00005559238fdd81 <unavailable> + 7553

    5    libc.so.6                          0x00002b4e1def9460 __libc_start_main +
    245

    6    tmpqln0wsnr                        0x00005559238fd829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted().reversed().map {\n        switch $0 {\n    \
    \    case 1: return \"One\"\n        case 2: return \"Two\"\n        case 3: return\
    \ \"Three\"\n        case 4: return \"Four\"\n        case 5: return \"Five\"\n\
    \        case 6: return \"Six\"\n        case 7: return \"Seven\"\n        case\
    \ 8: return \"Eight\"\n        case 9: return \"Nine\"\n        default: return\
    \ \"\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    let dict: [Int: String] = [1: \"One\", 2: \"Two\", 3: \"Three\", 4:\
    \ \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n\
    \    for i in arr {\n        if i > 0 && i < 10 {\n            result.append(dict[i]!)\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp0f6z3mfj/tmp0f6z3mfj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b892407fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8923d76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8923d76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8923d757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0f6z3mfj                        0x000055ad8c4fd9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b892426b460 __libc_start_main +
    245

    6    tmp0f6z3mfj                        0x000055ad8c4fd479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var dict = [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\"\
    , 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n    for i in arr {\n \
    \       if i >= 1 && i <= 9 {\n            result.append(dict[i]!)\n        }\n\
    \    }\n    result.reverse()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnc0dvutl/tmpnc0dvutl.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27d7114c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27d6e0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27d6e0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27d6e0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnc0dvutl                        0x0000563fddcacaa1 <unavailable> + 6817

    5    libc.so.6                          0x00002b27d7300460 __libc_start_main +
    245

    6    tmpnc0dvutl                        0x0000563fddcac549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort(by: {$0.count < $1.count})\n    result = result.reversed()\n\
    \    for i in 0..<result.count {\n        switch result[i] {\n        case \"\
    1\":\n            result[i] = \"One\"\n        case \"2\":\n            result[i]\
    \ = \"Two\"\n        case \"3\":\n            result[i] = \"Three\"\n        case\
    \ \"4\":\n            result[i] = \"Four\"\n        case \"5\":\n            result[i]\
    \ = \"Five\"\n        case \"6\":\n            result[i] = \"Six\"\n        case\
    \ \"7\":\n            result[i] = \"Seven\"\n        case \"8\":\n           \
    \ result[i] = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\
    \n        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmplnfi6acs/tmplnfi6acs.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba96b6ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba96b3c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba96b3c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba96b3c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnfi6acs                        0x000055777903fd11 <unavailable> + 7441

    5    libc.so.6                          0x00002ba96b8b8460 __libc_start_main +
    245

    6    tmplnfi6acs                        0x000055777903f7b9 <unavailable> + 6073

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let dict = [1:\"One\", 2:\"Two\", 3:\"Three\", 4:\"Four\", 5:\"Five\", 6:\"\
    Six\", 7:\"Seven\", 8:\"Eight\", 9:\"Nine\"]\n    for i in arr {\n        if i\
    \ >= 1 && i <= 9 {\n            result.append(dict[i]!)\n        }\n    }\n  \
    \  result.reverse()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpg9q03jgb/tmpg9q03jgb.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b886992fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8869626b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8869626988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88696257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg9q03jgb                        0x0000557eaf4b5aa1 <unavailable> + 6817

    5    libc.so.6                          0x00002b8869b1b460 __libc_start_main +
    245

    6    tmpg9q03jgb                        0x0000557eaf4b5549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            switch i {\n \
    \           case 1:\n                result.append(\"One\")\n            case\
    \ 2:\n                result.append(\"Two\")\n            case 3:\n          \
    \      result.append(\"Three\")\n            case 4:\n                result.append(\"\
    Four\")\n            case 5:\n                result.append(\"Five\")\n      \
    \      case 6:\n                result.append(\"Six\")\n            case 7:\n\
    \                result.append(\"Seven\")\n            case 8:\n             \
    \   result.append(\"Eight\")\n            case 9:\n                result.append(\"\
    Nine\")\n            default:\n                break\n            }\n        }\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpt65t3p0a/tmpt65t3p0a.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23464cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23461c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23461c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23461c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt65t3p0a                        0x00005577f53598a1 <unavailable> + 6305

    5    libc.so.6                          0x00002b23466ba460 __libc_start_main +
    245

    6    tmpt65t3p0a                        0x00005577f5359349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let dict = [1:\"One\", 2:\"Two\", 3:\"Three\", 4:\"Four\", 5:\"Five\", 6:\"\
    Six\", 7:\"Seven\", 8:\"Eight\", 9:\"Nine\"]\n    for i in arr {\n        if i\
    \ > 0 && i < 10 {\n            result.append(dict[i]!)\n        }\n    }\n   \
    \ result.sort(by: {$0.count < $1.count})\n    return result.reversed()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmp4lnn4d9t/tmp4lnn4d9t.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31038adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31035a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31035a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31035a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lnn4d9t                        0x000055947d630af1 <unavailable> + 6897

    5    libc.so.6                          0x00002b3103a99460 __libc_start_main +
    245

    6    tmp4lnn4d9t                        0x000055947d630599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i > 0 && i < 10 {\n            switch i {\n  \
    \          case 1:\n                result.append(\"One\")\n            case 2:\n\
    \                result.append(\"Two\")\n            case 3:\n               \
    \ result.append(\"Three\")\n            case 4:\n                result.append(\"\
    Four\")\n            case 5:\n                result.append(\"Five\")\n      \
    \      case 6:\n                result.append(\"Six\")\n            case 7:\n\
    \                result.append(\"Seven\")\n            case 8:\n             \
    \   result.append(\"Eight\")\n            case 9:\n                result.append(\"\
    Nine\")\n            default:\n                break\n            }\n        }\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp80ls7xz8/tmp80ls7xz8.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb485dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb482d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb482d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb482d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp80ls7xz8                        0x000055ebb5c9b8a1 <unavailable> + 6305

    5    libc.so.6                          0x00002afb487c6460 __libc_start_main +
    245

    6    tmp80ls7xz8                        0x000055ebb5c9b349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    let dict: [Int: String] = [1: \"One\", 2: \"Two\", 3: \"Three\", 4:\
    \ \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n\
    \    for i in arr {\n        if dict[i] != nil {\n            result.append(dict[i]!)\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpze3oe6ib/tmpze3oe6ib.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd288dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd285d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd285d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd285d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpze3oe6ib                        0x0000564ee79ae9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002afd28ac6460 __libc_start_main +
    245

    6    tmpze3oe6ib                        0x0000564ee79ae479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var arr = arr\n    arr.sortInPlace { $0 < $1 }\n    for i in arr {\n    \
    \    if i >= 1 && i <= 9 {\n            switch i {\n            case 1:\n    \
    \            result.append(\"One\")\n            case 2:\n                result.append(\"\
    Two\")\n            case 3:\n                result.append(\"Three\")\n      \
    \      case 4:\n                result.append(\"Four\")\n            case 5:\n\
    \                result.append(\"Five\")\n            case 6:\n              \
    \  result.append(\"Six\")\n            case 7:\n                result.append(\"\
    Seven\")\n            case 8:\n                result.append(\"Eight\")\n    \
    \        case 9:\n                result.append(\"Nine\")\n            default:\n\
    \                break\n            }\n        }\n    }\n    result.reverse()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg297yod1.swift:11:9: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    arr.sortInPlace { $0 < $1 }\n    ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014029
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var temp = [Int]()\n    for i in arr {\n        if i >= 1 && i <= 9 {\n \
    \           temp.append(i)\n        }\n    }\n    temp.sort()\n    temp.reverse()\n\
    \    for i in temp {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var arr = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }\n    arr.sort()\n    arr = arr.reversed()\n    return\
    \ arr.map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpqgwyzcc_/tmpqgwyzcc_.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93b8e93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93b8b8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93b8b8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93b8b897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqgwyzcc_                        0x000055d1c43849e1 <unavailable> + 6625

    5    libc.so.6                          0x00002b93b907f460 __libc_start_main +
    245

    6    tmpqgwyzcc_                        0x000055d1c4384489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            switch i {\n \
    \           case 1:\n                result.append(\"One\")\n            case\
    \ 2:\n                result.append(\"Two\")\n            case 3:\n          \
    \      result.append(\"Three\")\n            case 4:\n                result.append(\"\
    Four\")\n            case 5:\n                result.append(\"Five\")\n      \
    \      case 6:\n                result.append(\"Six\")\n            case 7:\n\
    \                result.append(\"Seven\")\n            case 8:\n             \
    \   result.append(\"Eight\")\n            case 9:\n                result.append(\"\
    Nine\")\n            default:\n                break\n            }\n        }\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpt65t3p0a/tmpt65t3p0a.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23464cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23461c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23461c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23461c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt65t3p0a                        0x00005577f53598a1 <unavailable> + 6305

    5    libc.so.6                          0x00002b23466ba460 __libc_start_main +
    245

    6    tmpt65t3p0a                        0x00005577f5359349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmprb0twv7e/tmprb0twv7e.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845f2e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b845efe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b845efe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b845efdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb0twv7e                        0x0000557a5d0259d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b845f4d5460 __libc_start_main +
    245

    6    tmprb0twv7e                        0x0000557a5d025479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpzl40gbc4/tmpzl40gbc4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d22af9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d227f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d227f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d227ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzl40gbc4                        0x000056401775d9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b7d22ce5460 __libc_start_main +
    245

    6    tmpzl40gbc4                        0x000056401775d479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var arr = arr.filter\
    \ { $0 > 0 && $0 < 10 }\n    arr.sort()\n    arr = arr.reversed()\n    let dict\
    \ = [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\"\
    , 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n    return arr.map { dict[$0]! }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014029
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var temp = [Int]()\n    for i in arr {\n        if i >= 1 && i <= 9 {\n \
    \           temp.append(i)\n        }\n    }\n    temp.sort()\n    temp.reverse()\n\
    \    for i in temp {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    let dict: [Int: String] = [1: \"One\", 2: \"Two\", 3: \"Three\", 4:\
    \ \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(dict[i]!)\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpi9g0k_un/tmpi9g0k_un.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf974abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf971a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf971a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf971a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi9g0k_un                        0x000055f3379639d1 <unavailable> + 6609

    5    libc.so.6                          0x00002aaf97697460 __libc_start_main +
    245

    6    tmpi9g0k_un                        0x000055f337963479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map {\n        switch $0 {\n        case 1: return \"One\"\
    \n        case 2: return \"Two\"\n        case 3: return \"Three\"\n        case\
    \ 4: return \"Four\"\n        case 5: return \"Five\"\n        case 6: return\
    \ \"Six\"\n        case 7: return \"Seven\"\n        case 8: return \"Eight\"\n\
    \        case 9: return \"Nine\"\n        default: return \"\"\n        }\n  \
    \  }\n    return mapped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014029
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i > 0 && i < 10 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            result[i] = \"\"\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            switch i {\n \
    \           case 1:\n                result.append(\"One\")\n            case\
    \ 2:\n                result.append(\"Two\")\n            case 3:\n          \
    \      result.append(\"Three\")\n            case 4:\n                result.append(\"\
    Four\")\n            case 5:\n                result.append(\"Five\")\n      \
    \      case 6:\n                result.append(\"Six\")\n            case 7:\n\
    \                result.append(\"Seven\")\n            case 8:\n             \
    \   result.append(\"Eight\")\n            case 9:\n                result.append(\"\
    Nine\")\n            default:\n                break\n            }\n        }\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpt65t3p0a/tmpt65t3p0a.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23464cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23461c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23461c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23461c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt65t3p0a                        0x00005577f53598a1 <unavailable> + 6305

    5    libc.so.6                          0x00002b23466ba460 __libc_start_main +
    245

    6    tmpt65t3p0a                        0x00005577f5359349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpuidhmakn/tmpuidhmakn.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792acf6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b792a9edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b792a9ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b792a9ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuidhmakn                        0x0000560e4a2a39d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b792aee2460 __libc_start_main +
    245

    6    tmpuidhmakn                        0x0000560e4a2a3479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i > 0 && i < 10 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let dict = [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\"\
    , 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n    for i in arr {\n \
    \       if i >= 1 && i <= 9 {\n            result.append(dict[i]!)\n        }\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpwm6r__l1/tmpwm6r__l1.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af58381cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af583513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af583513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5835127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwm6r__l1                        0x0000561ba140ea31 <unavailable> + 6705

    5    libc.so.6                          0x00002af583a08460 __libc_start_main +
    245

    6    tmpwm6r__l1                        0x0000561ba140e4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ >= 1 && $0 <= 9}).sorted()\n    let reversed = sorted.reversed()\n    let names\
    \ = reversed.map({String($0)})\n    return names\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpfrxbr655/tmpfrxbr655.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ab50b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ab4dafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ab4daf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ab4dae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfrxbr655                        0x000055e1841739d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b4ab52a4460 __libc_start_main +
    245

    6    tmpfrxbr655                        0x000055e184173479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for number in arr {\n    \
    \    if numbers.contains(number) {\n            result.append(String(number))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            result[i] = \"Error\"\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014029
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpuidhmakn/tmpuidhmakn.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792acf6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b792a9edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b792a9ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b792a9ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuidhmakn                        0x0000560e4a2a39d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b792aee2460 __libc_start_main +
    245

    6    tmpuidhmakn                        0x0000560e4a2a3479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { $0.name() }\n    return names\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzp29kq7v.swift:11:35: error: value of type 'ReversedCollection<[Int]>.Element'\
    \ (aka 'Int') has no member 'name'\n    let names = reversed.map { $0.name() }\n\
    \                               ~~ ^~~~\n"
  stdout: ''
  timestamp: 1660014029
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i > 0 && i < 10 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort { $0.count < $1.count }\n    result = result.reversed()\n\
    \    for i in 0..<result.count {\n        switch result[i] {\n        case \"\
    1\":\n            result[i] = \"One\"\n        case \"2\":\n            result[i]\
    \ = \"Two\"\n        case \"3\":\n            result[i] = \"Three\"\n        case\
    \ \"4\":\n            result[i] = \"Four\"\n        case \"5\":\n            result[i]\
    \ = \"Five\"\n        case \"6\":\n            result[i] = \"Six\"\n        case\
    \ \"7\":\n            result[i] = \"Seven\"\n        case \"8\":\n           \
    \ result[i] = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\
    \n        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmp81di5304/tmp81di5304.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0daf6d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0daf3cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0daf3cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0daf3ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp81di5304                        0x000056137ab10d11 <unavailable> + 7441

    5    libc.so.6                          0x00002b0daf8c0460 __libc_start_main +
    245

    6    tmp81di5304                        0x000056137ab107b9 <unavailable> + 6073

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    return\
    \ reversed.map {\n        switch $0 {\n        case 1: return \"One\"\n      \
    \  case 2: return \"Two\"\n        case 3: return \"Three\"\n        case 4: return\
    \ \"Four\"\n        case 5: return \"Five\"\n        case 6: return \"Six\"\n\
    \        case 7: return \"Seven\"\n        case 8: return \"Eight\"\n        case\
    \ 9: return \"Nine\"\n        default: return \"\"\n        }\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmprb0twv7e/tmprb0twv7e.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845f2e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b845efe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b845efe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b845efdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb0twv7e                        0x0000557a5d0259d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b845f4d5460 __libc_start_main +
    245

    6    tmprb0twv7e                        0x0000557a5d025479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort(by: {$0.count < $1.count})\n    result = result.reversed()\n\
    \    for i in 0..<result.count {\n        switch result[i] {\n        case \"\
    1\":\n            result[i] = \"One\"\n        case \"2\":\n            result[i]\
    \ = \"Two\"\n        case \"3\":\n            result[i] = \"Three\"\n        case\
    \ \"4\":\n            result[i] = \"Four\"\n        case \"5\":\n            result[i]\
    \ = \"Five\"\n        case \"6\":\n            result[i] = \"Six\"\n        case\
    \ \"7\":\n            result[i] = \"Seven\"\n        case \"8\":\n           \
    \ result[i] = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\
    \n        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmplnfi6acs/tmplnfi6acs.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba96b6ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba96b3c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba96b3c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba96b3c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnfi6acs                        0x000055777903fd11 <unavailable> + 7441

    5    libc.so.6                          0x00002ba96b8b8460 __libc_start_main +
    245

    6    tmplnfi6acs                        0x000055777903f7b9 <unavailable> + 6073

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    let dict: [Int: String] = [1: \"One\", 2: \"Two\", 3: \"Three\", 4:\
    \ \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n\
    \    for i in arr {\n        if i > 0 && i < 10 {\n            result.append(dict[i]!)\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp0f6z3mfj/tmp0f6z3mfj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b892407fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8923d76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8923d76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8923d757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0f6z3mfj                        0x000055ad8c4fd9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b892426b460 __libc_start_main +
    245

    6    tmp0f6z3mfj                        0x000055ad8c4fd479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    let dict: [Int: String] = [1: \"One\", 2: \"Two\", 3: \"Three\", 4:\
    \ \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(dict[i]!)\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpi9g0k_un/tmpi9g0k_un.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf974abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf971a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf971a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf971a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi9g0k_un                        0x000055f3379639d1 <unavailable> + 6609

    5    libc.so.6                          0x00002aaf97697460 __libc_start_main +
    245

    6    tmpi9g0k_un                        0x000055f337963479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let dict = [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\"\
    , 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n    for i in arr {\n \
    \       if i >= 1 && i <= 9 {\n            result.append(dict[i]!)\n        }\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpwm6r__l1/tmpwm6r__l1.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af58381cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af583513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af583513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5835127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwm6r__l1                        0x0000561ba140ea31 <unavailable> + 6705

    5    libc.so.6                          0x00002af583a08460 __libc_start_main +
    245

    6    tmpwm6r__l1                        0x0000561ba140e4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let numbers = arr.filter\
    \ { $0 > 0 && $0 < 10 }\n    let sorted = numbers.sorted()\n    let reversed =\
    \ sorted.reversed()\n    let names = reversed.map { String($0) }\n    return names\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpa7v5pidz/tmpa7v5pidz.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35f4b7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35f4874b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35f4874988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35f48737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa7v5pidz                        0x000055fd543b09d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b35f4d69460 __libc_start_main +
    245

    6    tmpa7v5pidz                        0x000055fd543b0479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ words = reversed.map { numberToWord(number: $0) }\n    return words\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpygb9zjtj.swift:11:32: error: cannot find 'numberToWord' in scope\n\
    \    let words = reversed.map { numberToWord(number: $0) }\n                 \
    \              ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014029
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i > 0 && i < 10 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    let dict: [Int: String] = [1: \"One\", 2: \"Two\", 3: \"Three\", 4:\
    \ \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n\
    \    for i in arr {\n        if i > 0 && i < 10 {\n            result.append(dict[i]!)\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp0f6z3mfj/tmp0f6z3mfj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b892407fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8923d76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8923d76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8923d757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0f6z3mfj                        0x000055ad8c4fd9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b892426b460 __libc_start_main +
    245

    6    tmp0f6z3mfj                        0x000055ad8c4fd479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var numbers = [Int]()\n    for i in arr {\n        if i >= 1 && i <= 9 {\n\
    \            numbers.append(i)\n        }\n    }\n    numbers.sort()\n    numbers.reverse()\n\
    \    for i in numbers {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let filtered = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }\n    let sorted = filtered.sorted { $0 < $1 }\n    let\
    \ reversed = sorted.reversed()\n    let mapped = reversed.map { String($0) }\n\
    \    return mapped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpg52gegtx/tmpg52gegtx.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf7dbc3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf7d8bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf7d8ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf7d8b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg52gegtx                        0x0000562f6d5f39a1 <unavailable> + 6561

    5    libc.so.6                          0x00002adf7ddaf460 __libc_start_main +
    245

    6    tmpg52gegtx                        0x0000562f6d5f3449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    let dict = [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5:\
    \ \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n    for i in\
    \ arr {\n        if i > 0 && i < 10 {\n            result.append(dict[i]!)\n \
    \       }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp0doha078/tmp0doha078.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2db7c4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2db7942b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2db7942988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2db79417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0doha078                        0x0000555c373849d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b2db7e37460 __libc_start_main +
    245

    6    tmp0doha078                        0x0000555c37384479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted().reversed().map({ String($0) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpfzz3763r/tmpfzz3763r.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf266c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf263bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf263bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf263bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfzz3763r                        0x000055c4e40d69d1 <unavailable> + 6609

    5    libc.so.6                          0x00002abf268b2460 __libc_start_main +
    245

    6    tmpfzz3763r                        0x000055c4e40d6479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map {\n        switch $0 {\n        case 1: return \"One\"\
    \n        case 2: return \"Two\"\n        case 3: return \"Three\"\n        case\
    \ 4: return \"Four\"\n        case 5: return \"Five\"\n        case 6: return\
    \ \"Six\"\n        case 7: return \"Seven\"\n        case 8: return \"Eight\"\n\
    \        case 9: return \"Nine\"\n        default: return \"\"\n        }\n  \
    \  }\n    return mapped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ > 0 && $0 < 10}).sorted()\n    let reversed = sorted.reversed()\n    let mapped\
    \ = reversed.map({String($0)})\n    return mapped\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp49viner1/tmp49viner1.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1dca64ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1dca345b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1dca345988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1dca3447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49viner1                        0x000055d3b8a809d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b1dca83a460 __libc_start_main +
    245

    6    tmp49viner1                        0x000055d3b8a80479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmprb0twv7e/tmprb0twv7e.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845f2e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b845efe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b845efe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b845efdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb0twv7e                        0x0000557a5d0259d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b845f4d5460 __libc_start_main +
    245

    6    tmprb0twv7e                        0x0000557a5d025479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            switch i {\n \
    \           case 1:\n                result.append(\"One\")\n            case\
    \ 2:\n                result.append(\"Two\")\n            case 3:\n          \
    \      result.append(\"Three\")\n            case 4:\n                result.append(\"\
    Four\")\n            case 5:\n                result.append(\"Five\")\n      \
    \      case 6:\n                result.append(\"Six\")\n            case 7:\n\
    \                result.append(\"Seven\")\n            case 8:\n             \
    \   result.append(\"Eight\")\n            case 9:\n                result.append(\"\
    Nine\")\n            default:\n                break\n            }\n        }\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpt65t3p0a/tmpt65t3p0a.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23464cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23461c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23461c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23461c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt65t3p0a                        0x00005577f53598a1 <unavailable> + 6305

    5    libc.so.6                          0x00002b23466ba460 __libc_start_main +
    245

    6    tmpt65t3p0a                        0x00005577f5359349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            result[i] = \"\"\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014030
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for i in arr {\n        if\
    \ numbers.contains(i) {\n            result.append(String(i))\n        }\n   \
    \ }\n    result.sort()\n    result = result.reversed()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014029
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted().reversed().map {\n        switch $0 {\n    \
    \    case 1: return \"One\"\n        case 2: return \"Two\"\n        case 3: return\
    \ \"Three\"\n        case 4: return \"Four\"\n        case 5: return \"Five\"\n\
    \        case 6: return \"Six\"\n        case 7: return \"Seven\"\n        case\
    \ 8: return \"Eight\"\n        case 9: return \"Nine\"\n        default: return\
    \ \"\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    for i in arr {\n        if i < 1 || i > 9 {\n            continue\n\
    \        }\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpxb0681te/tmpxb0681te.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abee22f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abee1fe7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abee1fe7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abee1fe67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxb0681te                        0x0000557571ed2841 <unavailable> + 6209

    5    libc.so.6                          0x00002abee24dc460 __libc_start_main +
    245

    6    tmpxb0681te                        0x0000557571ed22e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014030
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map {\n        switch $0 {\n        case 1: return \"One\"\n\
    \        case 2: return \"Two\"\n        case 3: return \"Three\"\n        case\
    \ 4: return \"Four\"\n        case 5: return \"Five\"\n        case 6: return\
    \ \"Six\"\n        case 7: return \"Seven\"\n        case 8: return \"Eight\"\n\
    \        case 9: return \"Nine\"\n        default: return \"\"\n        }\n  \
    \  }\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i > 0 && i < 10 {\n            switch i {\n  \
    \          case 1:\n                result.append(\"One\")\n            case 2:\n\
    \                result.append(\"Two\")\n            case 3:\n               \
    \ result.append(\"Three\")\n            case 4:\n                result.append(\"\
    Four\")\n            case 5:\n                result.append(\"Five\")\n      \
    \      case 6:\n                result.append(\"Six\")\n            case 7:\n\
    \                result.append(\"Seven\")\n            case 8:\n             \
    \   result.append(\"Eight\")\n            case 9:\n                result.append(\"\
    Nine\")\n            default:\n                break\n            }\n        }\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp80ls7xz8/tmp80ls7xz8.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb485dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb482d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb482d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb482d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp80ls7xz8                        0x000055ebb5c9b8a1 <unavailable> + 6305

    5    libc.so.6                          0x00002afb487c6460 __libc_start_main +
    245

    6    tmp80ls7xz8                        0x000055ebb5c9b349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ >= 1 && $0 <= 9}).sorted()\n    let reversed = sorted.reversed()\n    let names\
    \ = reversed.map({String($0)})\n    return names\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpfrxbr655/tmpfrxbr655.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ab50b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ab4dafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ab4daf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ab4dae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfrxbr655                        0x000055e1841739d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b4ab52a4460 __libc_start_main +
    245

    6    tmpfrxbr655                        0x000055e184173479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8djcu56i/tmp8djcu56i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8djcu56i                        0x0000562df106e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5cba441460 __libc_start_main +
    245

    6    tmp8djcu56i                        0x0000562df106e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    let dict: [Int: String] = [1: \"One\", 2: \"Two\", 3: \"Three\", 4:\
    \ \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n\
    \    for i in arr {\n        if i > 0 && i < 10 {\n            result.append(dict[i]!)\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp0f6z3mfj/tmp0f6z3mfj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b892407fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8923d76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8923d76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8923d757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0f6z3mfj                        0x000055ad8c4fd9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b892426b460 __libc_start_main +
    245

    6    tmp0f6z3mfj                        0x000055ad8c4fd479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let dict = [1:\"One\", 2:\"Two\", 3:\"Three\", 4:\"Four\", 5:\"Five\", 6:\"\
    Six\", 7:\"Seven\", 8:\"Eight\", 9:\"Nine\"]\n    for i in arr {\n        if i\
    \ >= 1 && i <= 9 {\n            result.append(dict[i]!)\n        }\n    }\n  \
    \  return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpo9pdx4md/tmpo9pdx4md.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5fcc2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5fc923b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5fc923988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5fc9227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9pdx4md                        0x000055c0b3547a31 <unavailable> + 6705

    5    libc.so.6                          0x00002ac5fce18460 __libc_start_main +
    245

    6    tmpo9pdx4md                        0x000055c0b35474d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i > 0 && i < 10 {\n            switch i {\n  \
    \          case 1:\n                result.append(\"One\")\n            case 2:\n\
    \                result.append(\"Two\")\n            case 3:\n               \
    \ result.append(\"Three\")\n            case 4:\n                result.append(\"\
    Four\")\n            case 5:\n                result.append(\"Five\")\n      \
    \      case 6:\n                result.append(\"Six\")\n            case 7:\n\
    \                result.append(\"Seven\")\n            case 8:\n             \
    \   result.append(\"Eight\")\n            case 9:\n                result.append(\"\
    Nine\")\n            default:\n                break\n            }\n        }\n\
    \    }\n    return result.sorted(by: {$0.count > $1.count})\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp94pzeaye/tmp94pzeaye.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9f41dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9f3ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9f3ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9f3ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp94pzeaye                        0x0000557654ebc901 <unavailable> + 6401

    5    libc.so.6                          0x00002ac9f43c8460 __libc_start_main +
    245

    6    tmp94pzeaye                        0x0000557654ebc3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660014030
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var temp = [Int]()\n    for i in arr {\n        if i >= 1 && i <= 9 {\n \
    \           temp.append(i)\n        }\n    }\n    temp.sort()\n    temp.reverse()\n\
    \    for i in temp {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            continue\n\
    \        }\n    }\n    return result.sorted().reversed()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp5eiorft6/tmp5eiorft6.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbd1405c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbd10fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbd10fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbd10fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5eiorft6                        0x00005594f32b9941 <unavailable> + 6465

    5    libc.so.6                          0x00002abbd15f1460 __libc_start_main +
    245

    6    tmp5eiorft6                        0x00005594f32b93e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660014030
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let dict = [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\"\
    , 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n    for i in arr {\n \
    \       if i > 0 && i < 10 {\n            result.append(dict[i]!)\n        }\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpm7baqq3h/tmpm7baqq3h.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad773463c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad77315ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad77315a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7731597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm7baqq3h                        0x000055e512f03a31 <unavailable> + 6705

    5    libc.so.6                          0x00002ad77364f460 __libc_start_main +
    245

    6    tmpm7baqq3h                        0x000055e512f034d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmprb0twv7e/tmprb0twv7e.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845f2e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b845efe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b845efe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b845efdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb0twv7e                        0x0000557a5d0259d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b845f4d5460 __libc_start_main +
    245

    6    tmprb0twv7e                        0x0000557a5d025479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let sorted = arr.filter { $0 >= 1 && $0 <= 9 }.sorted()\n    for i in sorted.reversed()\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014030
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ >= 1 && $0 <= 9}).sorted()\n    let reversed = sorted.reversed()\n    let names\
    \ = reversed.map({String($0)})\n    return names\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpfrxbr655/tmpfrxbr655.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ab50b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ab4dafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ab4daf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ab4dae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfrxbr655                        0x000055e1841739d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b4ab52a4460 __libc_start_main +
    245

    6    tmpfrxbr655                        0x000055e184173479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014029
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    let names = [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  \
    \  for number in arr {\n        if numbers.contains(number) {\n            result.append(names[number\
    \ - 1])\n        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpzfktg28r/tmpzfktg28r.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accda4e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accda1dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accda1da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accda1d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzfktg28r                        0x000055c53ed48951 <unavailable> + 6481

    5    libc.so.6                          0x00002accda6cf460 __libc_start_main +
    245

    6    tmpzfktg28r                        0x000055c53ed483f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014030
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014028
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for number in arr {\n    \
    \    if numbers.contains(number) {\n            result.append(String(number))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014029
