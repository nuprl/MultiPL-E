language: swift
name: HumanEval_110_exchange
results:
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpq7bl53uy/tmpq7bl53uy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b569c335c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b569c02cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b569c02c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b569c02b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7bl53uy                        0x000056390852079f <unavailable> + 6047

    5    libc.so.6                          0x00002b569c521460 __libc_start_main +
    245

    6    tmpq7bl53uy                        0x00005639085201f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    var odds = 0\n    for i in lst1 {\n\
    \        if i % 2 == 0 {\n            evens += 1\n        } else {\n         \
    \   odds += 1\n        }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n\
    \            evens += 1\n        } else {\n            odds += 1\n        }\n\
    \    }\n    if odds % 2 == 0 {\n        return \"YES\"\n    } else {\n       \
    \ return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpzcniwqf5/tmpzcniwqf5.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab56a23dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab569f34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab569f34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab569f337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcniwqf5                        0x0000558f16887b17 <unavailable> + 6935

    5    libc.so.6                          0x00002ab56a429460 __libc_start_main +
    245

    6    tmpzcniwqf5                        0x0000558f16887249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even\
    \ = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Even.count == lst2.count {\n  \
    \      return \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return\
    \ \"NO\"\n    }\n    if lst2Odd.count == lst2.count {\n        return \"NO\"\n\
    \    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n       \
    \     for j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n     \
    \               lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n   \
    \                 lst1Even = lst1.filter { $0 % 2 == 0 }\n                   \
    \ lst2Even = lst2.filter { $0 % 2 == 0 }\n                    if lst1Even.count\
    \ == lst1.count {\n                        return \"YES\"\n                  \
    \  }\n                    if lst2Even.count == lst2.count {\n                \
    \        return \"YES\"\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpelwglz69/tmpelwglz69.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab615468c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab61515fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab61515f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab61515e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpelwglz69                        0x0000557413e0f93f <unavailable> + 6463

    5    libc.so.6                          0x00002ab615654460 __libc_start_main +
    245

    6    tmpelwglz69                        0x0000557413e0f399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    var j = 0\n    while i < lst1.count && j\
    \ < lst2.count {\n        if lst1[i] % 2 == 0 {\n            i += 1\n        }\
    \ else if lst2[j] % 2 == 0 {\n            lst1[i] = lst2[j]\n            i +=\
    \ 1\n            j += 1\n        } else {\n            j += 1\n        }\n   \
    \ }\n    return lst1.filter { $0 % 2 != 0 }.isEmpty ? \"YES\" : \"NO\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    while i < lst1.count {\n        if lst1[i]\
    \ % 2 == 0 {\n            i += 1\n        } else {\n            let j = lst2.firstIndex(where:\
    \ { $0 % 2 == 0 }) ?? -1\n            if j == -1 {\n                return \"\
    NO\"\n            }\n            lst1[i] = lst2[j]\n            lst2[j] = lst1[i]\n\
    \        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqoh6x2ah/tmpqoh6x2ah.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada9e33dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada9e034b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada9e034988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada9e0337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqoh6x2ah                        0x0000564961e5c83f <unavailable> + 6207

    5    libc.so.6                          0x00002ada9e529460 __libc_start_main +
    245

    6    tmpqoh6x2ah                        0x0000564961e5c299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even\
    \ = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count\
    \ || lst2Even.count == lst2.count {\n        return \"YES\"\n    }\n    if lst1Odd.count\
    \ == lst1.count || lst2Odd.count == lst2.count {\n        return \"NO\"\n    }\n\
    \    for _ in 0..<lst1.count {\n        if lst1Even.count == lst1.count || lst2Even.count\
    \ == lst2.count {\n            return \"YES\"\n        }\n        if lst1Odd.count\
    \ == lst1.count || lst2Odd.count == lst2.count {\n            return \"NO\"\n\
    \        }\n        lst1Even.append(lst2Odd.removeFirst())\n        lst2Even.append(lst1Odd.removeFirst())\n\
    \    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpepmo44fh/tmpepmo44fh.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b396e681c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b396e378b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b396e378988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b396e3777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpepmo44fh                        0x000056517e45d98f <unavailable> + 6543

    5    libc.so.6                          0x00002b396e86d460 __libc_start_main +
    245

    6    tmpepmo44fh                        0x000056517e45d3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var isExchange = false\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    isExchange = true\n  \
    \                  break\n                }\n            }\n        }\n      \
    \  if !isExchange {\n            return \"NO\"\n        }\n    }\n    return \"\
    YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpia0pfih4/tmpia0pfih4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0813aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0810a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0810a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0810a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpia0pfih4                        0x000055f9f1d1687f <unavailable> + 6271

    5    libc.so.6                          0x00002ab081596460 __libc_start_main +
    245

    6    tmpia0pfih4                        0x000055f9f1d162d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even\
    \ = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Even.count == lst2.count {\n  \
    \      return \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return\
    \ \"NO\"\n    }\n    if lst2Odd.count == lst2.count {\n        return \"NO\"\n\
    \    }\n    if lst1Even.count + lst2Even.count >= lst1.count {\n        return\
    \ \"YES\"\n    }\n    if lst1Odd.count + lst2Odd.count >= lst1.count {\n     \
    \   return \"NO\"\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    var odds = 0\n    for i in lst1 {\n\
    \        if i % 2 == 0 {\n            evens += 1\n        } else {\n         \
    \   odds += 1\n        }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n\
    \            evens += 1\n        } else {\n            odds += 1\n        }\n\
    \    }\n    if odds % 2 == 0 {\n        return \"YES\"\n    } else {\n       \
    \ return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpzcniwqf5/tmpzcniwqf5.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab56a23dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab569f34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab569f34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab569f337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcniwqf5                        0x0000558f16887b17 <unavailable> + 6935

    5    libc.so.6                          0x00002ab56a429460 __libc_start_main +
    245

    6    tmpzcniwqf5                        0x0000558f16887249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var isExchange = false\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    isExchange = true\n  \
    \                  break\n                }\n            }\n        }\n      \
    \  if !isExchange {\n            return \"NO\"\n        }\n    }\n    return \"\
    YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpia0pfih4/tmpia0pfih4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0813aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0810a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0810a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0810a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpia0pfih4                        0x000055f9f1d1687f <unavailable> + 6271

    5    libc.so.6                          0x00002ab081596460 __libc_start_main +
    245

    6    tmpia0pfih4                        0x000055f9f1d162d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even\
    \ = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Even.count == lst2.count {\n  \
    \      return \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return\
    \ \"NO\"\n    }\n    if lst2Odd.count == lst2.count {\n        return \"NO\"\n\
    \    }\n    if lst1Even.count + lst2Even.count >= lst1.count {\n        return\
    \ \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even\
    \ = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Even.count == lst2.count {\n  \
    \      return \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return\
    \ \"NO\"\n    }\n    if lst2Odd.count == lst2.count {\n        return \"NO\"\n\
    \    }\n    if lst1Even.count + lst2Even.count == lst1.count + lst2.count {\n\
    \        return \"YES\"\n    }\n    if lst1Odd.count + lst2Odd.count == lst1.count\
    \ + lst2.count {\n        return \"NO\"\n    }\n    if lst1Even.count + lst2Odd.count\
    \ == lst1.count + lst2.count {\n        return \"YES\"\n    }\n    if lst1Odd.count\
    \ + lst2Even.count == lst1.count + lst2.count {\n        return \"YES\"\n    }\n\
    \    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqlsirt61/tmpqlsirt61.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2971d81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2971a78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2971a78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2971a777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqlsirt61                        0x00005608a8c3f62d <unavailable> + 5677

    5    libc.so.6                          0x00002b2971f6d460 __libc_start_main +
    245

    6    tmpqlsirt61                        0x00005608a8c3f1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    var j = 0\n    while i < lst1.count && j\
    \ < lst2.count {\n        if lst1[i] % 2 == 0 {\n            i += 1\n        }\
    \ else if lst2[j] % 2 == 0 {\n            lst1[i] = lst2[j]\n            i +=\
    \ 1\n            j += 1\n        } else {\n            j += 1\n        }\n   \
    \ }\n    return lst1.contains(where: { $0 % 2 != 0 }) ? \"NO\" : \"YES\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979315
- exit_code: 1
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even\
    \ = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Even.count == lst2.count {\n  \
    \      return \"YES\"\n    }\n    if lst1Even.count == 0 && lst2Even.count ==\
    \ 0 {\n        return \"NO\"\n    }\n    if lst1Odd.count == 0 && lst2Odd.count\
    \ == 0 {\n        return \"NO\"\n    }\n    if lst1Even.count == 0 {\n       \
    \ lst1.append(lst2Even[0])\n        lst2.remove(at: lst2.firstIndex(of: lst2Even[0])!)\n\
    \        return exchange(lst1: lst1, lst2: lst2)\n    }\n    if lst2Even.count\
    \ == 0 {\n        lst2.append(lst1Even[0])\n        lst1.remove(at: lst1.firstIndex(of:\
    \ lst1Even[0])!)\n        return exchange(lst1: lst1, lst2: lst2)\n    }\n   \
    \ if lst1Odd.count == 0 {\n        lst1.append(lst2Odd[0])\n        lst2.remove(at:\
    \ lst2.firstIndex(of: lst2Odd[0])!)\n        return exchange(lst1: lst1, lst2:\
    \ lst2)\n    }\n    if lst2Odd.count == 0 {\n        lst2.append(lst1Odd[0])\n\
    \        lst1.remove(at: lst1.firstIndex(of: lst1Odd[0])!)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: SyntaxError
  stderr: "/tmp/tmpjynulsni.swift:69:62: error: expected '}' at end of brace statement\n\
    assert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")\n            \
    \                                                 ^\n/tmp/tmpjynulsni.swift:11:51:\
    \ note: to match this opening '{'\nfunc exchange(lst1: [Int], lst2: [Int]) ->\
    \ String {\n                                                  ^\n/tmp/tmpjynulsni.swift:51:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpjynulsni.swift:14:9:\
    \ warning: variable 'lst1Even' was never mutated; consider changing to 'let' constant\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    ~~~ ^\n    let\n/tmp/tmpjynulsni.swift:15:9:\
    \ warning: variable 'lst2Even' was never mutated; consider changing to 'let' constant\n\
    \    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    ~~~ ^\n    let\n/tmp/tmpjynulsni.swift:16:9:\
    \ warning: variable 'lst1Odd' was never mutated; consider changing to 'let' constant\n\
    \    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    ~~~ ^\n    let\n/tmp/tmpjynulsni.swift:17:9:\
    \ warning: variable 'lst2Odd' was never mutated; consider changing to 'let' constant\n\
    \    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var isExchange = false\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    isExchange = true\n  \
    \                  break\n                }\n            }\n        }\n      \
    \  if !isExchange {\n            return \"NO\"\n        }\n    }\n    return \"\
    YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpia0pfih4/tmpia0pfih4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0813aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0810a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0810a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0810a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpia0pfih4                        0x000055f9f1d1687f <unavailable> + 6271

    5    libc.so.6                          0x00002ab081596460 __libc_start_main +
    245

    6    tmpia0pfih4                        0x000055f9f1d162d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    while i < lst1.count {\n        if lst1[i]\
    \ % 2 == 0 {\n            i += 1\n        } else {\n            if let j = lst2.firstIndex(where:\
    \ { $0 % 2 == 0 }) {\n                lst1[i] = lst2[j]\n                lst2.remove(at:\
    \ j)\n            } else {\n                return \"NO\"\n            }\n   \
    \     }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979315
- exit_code: 1
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even\
    \ = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n    var lst1EvenCount = lst1Even.count\n\
    \    var lst2EvenCount = lst2Even.count\n    var lst1OddCount = lst1Odd.count\n\
    \    var lst2OddCount = lst2Odd.count\n    var lst1EvenIndex = 0\n    var lst2EvenIndex\
    \ = 0\n    var lst1OddIndex = 0\n    var lst2OddIndex = 0\n    var lst1EvenIndex2\
    \ = 0\n    var lst2EvenIndex2 = 0\n    var lst1OddIndex2 = 0\n    var lst2OddIndex2\
    \ = 0\n    var lst1EvenIndex3 = 0\n    var lst2EvenIndex3 = 0\n    var lst1OddIndex3\
    \ = 0\n    var lst2OddIndex3 = 0\n    var lst1EvenIndex4 = 0\n    var lst2EvenIndex4\
    \ = 0\n    var lst1OddIndex4 = 0\n    var lst2OddIndex4 = 0\n    var lst1EvenIndex5\
    \ = 0\n    var lst2EvenIndex5 = 0\n    var lst1OddIndex5 = 0\n    var lst2OddIndex5\
    \ = 0\n    var lst1EvenIndex6 = 0\n    var lst2EvenIndex6 = 0\n    var lst1OddIndex6\
    \ = 0\n    var lst2OddIndex6 = 0\n    var lst1EvenIndex7 = 0\n    var lst2EvenIndex7\
    \ = 0\n    var lst1OddIndex7 = 0\n    var lst2OddIndex7 = 0\n    var lst1EvenIndex8\
    \ = 0\n    var lst2EvenIndex8 = 0\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: SyntaxError
  stderr: "/tmp/tmp4hy1qdx5.swift:12:9: warning: variable 'lst1' was never mutated;\
    \ consider changing to 'let' constant\n    var lst1 = lst1\n    ~~~ ^\n    let\n\
    /tmp/tmp4hy1qdx5.swift:13:9: warning: variable 'lst2' was never mutated; consider\
    \ changing to 'let' constant\n    var lst2 = lst2\n    ~~~ ^\n    let\n/tmp/tmp4hy1qdx5.swift:14:9:\
    \ warning: variable 'lst1Even' was never mutated; consider changing to 'let' constant\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    ~~~ ^\n    let\n/tmp/tmp4hy1qdx5.swift:15:9:\
    \ warning: variable 'lst2Even' was never mutated; consider changing to 'let' constant\n\
    \    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    ~~~ ^\n    let\n/tmp/tmp4hy1qdx5.swift:16:9:\
    \ warning: variable 'lst1Odd' was never mutated; consider changing to 'let' constant\n\
    \    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    ~~~ ^\n    let\n/tmp/tmp4hy1qdx5.swift:17:9:\
    \ warning: variable 'lst2Odd' was never mutated; consider changing to 'let' constant\n\
    \    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n    ~~~ ^\n    let\n/tmp/tmp4hy1qdx5.swift:18:9:\
    \ warning: initialization of variable 'lst1EvenCount' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var lst1EvenCount = lst1Even.count\n\
    \    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmp4hy1qdx5.swift:19:9: warning: initialization\
    \ of variable 'lst2EvenCount' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var lst2EvenCount = lst2Even.count\n    ~~~~^~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4hy1qdx5.swift:20:9: warning: initialization of variable 'lst1OddCount'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var lst1OddCount = lst1Odd.count\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp4hy1qdx5.swift:21:9:\
    \ warning: initialization of variable 'lst2OddCount' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var lst2OddCount = lst2Odd.count\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp4hy1qdx5.swift:22:9: warning: initialization\
    \ of variable 'lst1EvenIndex' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var lst1Even"
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    for i in 0..<lst1.count {\n        if\
    \ lst1[i] % 2 == 0 {\n            evens += 1\n        }\n    }\n    for i in 0..<lst2.count\
    \ {\n        if lst2[i] % 2 == 0 {\n            evens -= 1\n        }\n    }\n\
    \    if evens == 0 {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp_q7jq803/tmp_q7jq803.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7245e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7242dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7242dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7242db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_q7jq803                        0x000055d959152b57 <unavailable> + 6999

    5    libc.so.6                          0x00002af7247d1460 __libc_start_main +
    245

    6    tmp_q7jq803                        0x000055d959152289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let lst1Odd = lst1.filter\
    \ { $0 % 2 != 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    return\
    \ lst1Odd.count == lst2Even.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpy0nj7gpp/tmpy0nj7gpp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1954f6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1954c64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1954c64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1954c637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy0nj7gpp                        0x0000558a86472f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b1955159460 __libc_start_main +
    245

    6    tmpy0nj7gpp                        0x0000558a864721f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    var odds = 0\n    for i in lst1 {\n\
    \        if i % 2 == 0 {\n            evens += 1\n        } else {\n         \
    \   odds += 1\n        }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n\
    \            evens += 1\n        } else {\n            odds += 1\n        }\n\
    \    }\n    if evens % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n   \
    \ } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmprof8uqfm/tmprof8uqfm.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dce2cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dcdfc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dcdfc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dcdfc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprof8uqfm                        0x00005644f3e16b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b0dce4b7460 __libc_start_main +
    245

    6    tmprof8uqfm                        0x00005644f3e16249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0\
    \ {\n            for j in 0..<lst2.count {\n                if lst2[j] % 2 ==\
    \ 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            return\
    \ \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqw2_rd6x/tmpqw2_rd6x.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add58b63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add5885ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add5885a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add588597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqw2_rd6x                        0x000056449b74087f <unavailable> + 6271

    5    libc.so.6                          0x00002add58d4f460 __libc_start_main +
    245

    6    tmpqw2_rd6x                        0x000056449b7402d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    for i in 0..<lst1.count {\n        if\
    \ lst1[i] % 2 == 0 {\n            evens += 1\n        }\n    }\n    for i in 0..<lst2.count\
    \ {\n        if lst2[i] % 2 == 0 {\n            evens -= 1\n        }\n    }\n\
    \    if evens == 0 {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp_q7jq803/tmp_q7jq803.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7245e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7242dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7242dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7242db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_q7jq803                        0x000055d959152b57 <unavailable> + 6999

    5    libc.so.6                          0x00002af7247d1460 __libc_start_main +
    245

    6    tmp_q7jq803                        0x000055d959152289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    var j = 0\n    while i < lst1.count && j\
    \ < lst2.count {\n        if lst1[i] % 2 == 0 {\n            i += 1\n        }\
    \ else if lst2[j] % 2 == 0 {\n            lst1[i] = lst2[j]\n            i +=\
    \ 1\n            j += 1\n        } else {\n            j += 1\n        }\n   \
    \ }\n    return lst1.allSatisfy({ $0 % 2 == 0 }) ? \"YES\" : \"NO\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even\
    \ = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Even.count == lst2.count {\n  \
    \      return \"YES\"\n    }\n    if lst1Even.count + lst2Even.count >= lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst1Odd.count + lst2Odd.count >= lst2.count\
    \ {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpdt20m90f/tmpdt20m90f.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19769dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19766d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19766d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19766d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdt20m90f                        0x0000561c5967379f <unavailable> + 6047

    5    libc.so.6                          0x00002b1976bc8460 __libc_start_main +
    245

    6    tmpdt20m90f                        0x0000561c596731f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    for i in 0..<lst1.count {\n        if\
    \ lst1[i] % 2 == 0 {\n            evens += 1\n        }\n    }\n    for i in 0..<lst2.count\
    \ {\n        if lst2[i] % 2 == 0 {\n            evens -= 1\n        }\n    }\n\
    \    return evens == 0 ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp3qe40270/tmp3qe40270.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54ac340c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54ac037b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54ac037988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54ac0367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3qe40270                        0x00005571157dab57 <unavailable> + 6999

    5    libc.so.6                          0x00002b54ac52c460 __libc_start_main +
    245

    6    tmp3qe40270                        0x00005571157da289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    while i < lst1.count {\n        if lst1[i]\
    \ % 2 == 0 {\n            i += 1\n        } else {\n            if lst2.contains(where:\
    \ { $0 % 2 == 0 }) {\n                let j = lst2.firstIndex(where: { $0 % 2\
    \ == 0 })!\n                lst1[i] = lst2[j]\n                lst2[j] = lst1[i]\n\
    \                i += 1\n            } else {\n                return \"NO\"\n\
    \            }\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpztvw132g/tmpztvw132g.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f888dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f885d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f885d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f885d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpztvw132g                        0x000056004f36989f <unavailable> + 6303

    5    libc.so.6                          0x00002b8f88ac8460 __libc_start_main +
    245

    6    tmpztvw132g                        0x000056004f3692f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even\
    \ = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Even.count == lst2.count {\n        return\
    \ \"YES\"\n    }\n    if lst1Even.count + lst2Even.count < lst1.count + lst2.count\
    \ {\n        return \"NO\"\n    }\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    lst1Even = lst1.filter { $0 % 2 == 0 }\n    \
    \                lst2Even = lst2.filter { $0 % 2 == 0 }\n                    if\
    \ lst1Even.count == lst1.count {\n                        return \"YES\"\n   \
    \                 }\n                    if lst2Even.count == lst2.count {\n \
    \                       return \"YES\"\n                    }\n              \
    \      if lst1Even.count + lst2Even.count < lst1.count + lst2.count {\n      \
    \                  return \"NO\"\n                    }\n                }\n \
    \           }\n        }\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpzz4h3hih/tmpzz4h3hih.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a9862fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a98326b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a98326988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a983257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzz4h3hih                        0x000056388f38e7cd <unavailable> + 6093

    5    libc.so.6                          0x00002b9a9881b460 __libc_start_main +
    245

    6    tmpzz4h3hih                        0x000056388f38e399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0\
    \ {\n            for j in 0..<lst2.count {\n                if lst2[j] % 2 ==\
    \ 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            return\
    \ \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqw2_rd6x/tmpqw2_rd6x.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add58b63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add5885ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add5885a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add588597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqw2_rd6x                        0x000056449b74087f <unavailable> + 6271

    5    libc.so.6                          0x00002add58d4f460 __libc_start_main +
    245

    6    tmpqw2_rd6x                        0x000056449b7402d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    var odds = 0\n    for i in lst1 {\n\
    \        if i % 2 == 0 {\n            evens += 1\n        } else {\n         \
    \   odds += 1\n        }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n\
    \            evens += 1\n        } else {\n            odds += 1\n        }\n\
    \    }\n    if evens % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n   \
    \ } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmprof8uqfm/tmprof8uqfm.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dce2cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dcdfc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dcdfc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dcdfc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprof8uqfm                        0x00005644f3e16b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b0dce4b7460 __libc_start_main +
    245

    6    tmprof8uqfm                        0x00005644f3e16249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    while i < lst1.count {\n        if lst1[i]\
    \ % 2 == 0 {\n            i += 1\n        } else {\n            var j = 0\n  \
    \          while j < lst2.count {\n                if lst2[j] % 2 != 0 {\n   \
    \                 j += 1\n                } else {\n                    let temp\
    \ = lst1[i]\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = temp\n                    i += 1\n                    break\n            \
    \    }\n            }\n            if j == lst2.count {\n                return\
    \ \"NO\"\n            }\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter\
    \ { $0 % 2 == 0 }\n    let odds = lst1.filter { $0 % 2 != 0 }\n    let odds2 =\
    \ lst2.filter { $0 % 2 != 0 }\n    if odds.count == odds2.count {\n        return\
    \ \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsl4suq68/tmpsl4suq68.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a7e6bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a7e3b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a7e3b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a7e3b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsl4suq68                        0x000055648a719ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002b3a7e8a8460 __libc_start_main +
    245

    6    tmpsl4suq68                        0x000055648a7191f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    for i in 0..<lst1.count {\n        if\
    \ lst1[i] % 2 == 0 {\n            evens += 1\n        }\n    }\n    var odds =\
    \ lst1.count - evens\n    for i in 0..<lst2.count {\n        if lst2[i] % 2 ==\
    \ 0 {\n            odds -= 1\n        } else {\n            evens -= 1\n     \
    \   }\n        if odds < 0 || evens < 0 {\n            return \"NO\"\n       \
    \ }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp69q4qbad/tmp69q4qbad.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51d36cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51d33c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51d33c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51d33c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp69q4qbad                        0x0000562216461026 <unavailable> + 8230

    5    libc.so.6                          0x00002b51d38b7460 __libc_start_main +
    245

    6    tmp69q4qbad                        0x0000562216460289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = [Int]()\n    var odds = [Int]()\n    for i\
    \ in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    for i in lst2 {\n     \
    \   if i % 2 == 0 {\n            evens.append(i)\n        } else {\n         \
    \   odds.append(i)\n        }\n    }\n    if odds.count % 2 == 0 {\n        return\
    \ \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp5cyqu4ws/tmp5cyqu4ws.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7127350c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7127047b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7127047988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71270467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5cyqu4ws                        0x0000564892e96c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b712753c460 __libc_start_main +
    245

    6    tmp5cyqu4ws                        0x0000564892e96349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var isExchange = false\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    isExchange = true\n  \
    \                  break\n                }\n            }\n        }\n      \
    \  if !isExchange {\n            return \"NO\"\n        }\n    }\n    return \"\
    YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpia0pfih4/tmpia0pfih4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0813aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0810a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0810a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0810a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpia0pfih4                        0x000055f9f1d1687f <unavailable> + 6271

    5    libc.so.6                          0x00002ab081596460 __libc_start_main +
    245

    6    tmpia0pfih4                        0x000055f9f1d162d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var result = \"NO\"\n    for i in 0..<lst1.count {\n  \
    \      if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n        \
    \        if lst2[j] % 2 != 0 {\n                    lst1[i] = lst2[j]\n      \
    \              lst2[j] = lst1[i]\n                    result = \"YES\"\n     \
    \               break\n                }\n            }\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpwwnbdtos/tmpwwnbdtos.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d57dbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d57ab4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d57ab4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d57ab37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwnbdtos                        0x00005595e4b3487f <unavailable> + 6271

    5    libc.so.6                          0x00002b4d57fa9460 __libc_start_main +
    245

    6    tmpwwnbdtos                        0x00005595e4b342d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    for i in 0..<lst1.count {\n        if\
    \ lst1[i] % 2 == 0 {\n            evens += 1\n        }\n    }\n    for i in 0..<lst2.count\
    \ {\n        if lst2[i] % 2 == 0 {\n            evens -= 1\n        }\n    }\n\
    \    return evens == 0 ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp3qe40270/tmp3qe40270.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54ac340c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54ac037b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54ac037988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54ac0367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3qe40270                        0x00005571157dab57 <unavailable> + 6999

    5    libc.so.6                          0x00002b54ac52c460 __libc_start_main +
    245

    6    tmp3qe40270                        0x00005571157da289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter\
    \ { $0 % 2 == 0 }\n    let odds = lst1.filter { $0 % 2 != 0 }\n    let odds2 =\
    \ lst2.filter { $0 % 2 != 0 }\n    if odds.count == 0 {\n        return \"YES\"\
    \n    }\n    if odds2.count == 0 {\n        return \"NO\"\n    }\n    return \"\
    YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpohcwrx1d/tmpohcwrx1d.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81d6813c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81d650ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81d650a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81d65097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpohcwrx1d                        0x000055fbe7a3079f <unavailable> + 6047

    5    libc.so.6                          0x00002b81d69ff460 __libc_start_main +
    245

    6    tmpohcwrx1d                        0x000055fbe7a301f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var isExchange = false\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    isExchange = true\n  \
    \                  break\n                }\n            }\n        }\n      \
    \  if !isExchange {\n            return \"NO\"\n        }\n    }\n    return \"\
    YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpia0pfih4/tmpia0pfih4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0813aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0810a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0810a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0810a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpia0pfih4                        0x000055f9f1d1687f <unavailable> + 6271

    5    libc.so.6                          0x00002ab081596460 __libc_start_main +
    245

    6    tmpia0pfih4                        0x000055f9f1d162d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter\
    \ { $0 % 2 == 0 }\n    let odds = lst1.filter { $0 % 2 != 0 }\n    let odds2 =\
    \ lst2.filter { $0 % 2 != 0 }\n    if odds.count == odds2.count {\n        return\
    \ \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsl4suq68/tmpsl4suq68.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a7e6bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a7e3b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a7e3b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a7e3b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsl4suq68                        0x000055648a719ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002b3a7e8a8460 __libc_start_main +
    245

    6    tmpsl4suq68                        0x000055648a7191f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var even = 0\n    var odd = 0\n    for i in lst1 {\n  \
    \      if i % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n     \
    \       even += 1\n        } else {\n            odd += 1\n        }\n    }\n\
    \    if even % 2 == 0 && odd % 2 == 0 {\n        return \"YES\"\n    } else {\n\
    \        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpnkai5_g6/tmpnkai5_g6.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc04e69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc04b60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc04b60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc04b5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnkai5_g6                        0x00005560c26dbb17 <unavailable> + 6935

    5    libc.so.6                          0x00002adc05055460 __libc_start_main +
    245

    6    tmpnkai5_g6                        0x00005560c26db249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    while i < lst1.count {\n        if lst1[i]\
    \ % 2 == 0 {\n            i += 1\n        } else {\n            var j = 0\n  \
    \          while j < lst2.count {\n                if lst2[j] % 2 != 0 {\n   \
    \                 j += 1\n                } else {\n                    lst1[i]\
    \ = lst2[j]\n                    lst2[j] = lst1[i]\n                    break\n\
    \                }\n            }\n            if j == lst2.count {\n        \
    \        return \"NO\"\n            }\n        }\n    }\n    return \"YES\"\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpt66n38aj/tmpt66n38aj.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec3c21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec3918b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec3918988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec39177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt66n38aj                        0x000055935796477f <unavailable> + 6015

    5    libc.so.6                          0x00002b6ec3e0d460 __libc_start_main +
    245

    6    tmpt66n38aj                        0x00005593579641d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    while i < lst1.count {\n        if lst1[i]\
    \ % 2 == 0 {\n            i += 1\n        } else {\n            let j = lst2.firstIndex(where:\
    \ { $0 % 2 == 0 })!\n            lst1[i] = lst2[j]\n            lst2[j] = lst1[i]\n\
    \        }\n    }\n    return lst1.allSatisfy({ $0 % 2 == 0 }) ? \"YES\" : \"\
    NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpodbftoqz/tmpodbftoqz.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc767c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc764beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc764be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc764bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodbftoqz                        0x0000556c05d9689f <unavailable> + 6303

    5    libc.so.6                          0x00002adc769b3460 __libc_start_main +
    245

    6    tmpodbftoqz                        0x0000556c05d962f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] %\
    \ 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    lst1Even = lst1.filter { $0 % 2 == 0 }\n    \
    \                lst2Odd = lst2.filter { $0 % 2 != 0 }\n                    if\
    \ lst1Even.count == lst1.count {\n                        return \"YES\"\n   \
    \                 }\n                }\n            }\n        }\n    }\n    return\
    \ \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpf4c8943i/tmpf4c8943i.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2cfbedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2cf8e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2cf8e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2cf8e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf4c8943i                        0x000055ab6f92693f <unavailable> + 6463

    5    libc.so.6                          0x00002af2cfdd9460 __libc_start_main +
    245

    6    tmpf4c8943i                        0x000055ab6f926399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpq7bl53uy/tmpq7bl53uy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b569c335c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b569c02cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b569c02c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b569c02b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7bl53uy                        0x000056390852079f <unavailable> + 6047

    5    libc.so.6                          0x00002b569c521460 __libc_start_main +
    245

    6    tmpq7bl53uy                        0x00005639085201f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var isExchange = false\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    isExchange = true\n  \
    \                  break\n                }\n            }\n        }\n      \
    \  if !isExchange {\n            return \"NO\"\n        }\n    }\n    return \"\
    YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpia0pfih4/tmpia0pfih4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0813aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0810a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0810a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0810a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpia0pfih4                        0x000055f9f1d1687f <unavailable> + 6271

    5    libc.so.6                          0x00002ab081596460 __libc_start_main +
    245

    6    tmpia0pfih4                        0x000055f9f1d162d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n        return\
    \ \"NO\"\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n\
    \            for j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n\
    \                    lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n\
    \                    lst1Even = lst1.filter { $0 % 2 == 0 }\n                \
    \    lst2Odd = lst2.filter { $0 % 2 != 0 }\n                    if lst1Even.count\
    \ == lst1.count {\n                        return \"YES\"\n                  \
    \  }\n                    if lst2Odd.count == lst2.count {\n                 \
    \       return \"NO\"\n                    }\n                }\n            }\n\
    \        }\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7i68zx1r/tmp7i68zx1r.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b977ce32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b977cb29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b977cb29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b977cb287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7i68zx1r                        0x0000564413a4593f <unavailable> + 6463

    5    libc.so.6                          0x00002b977d01e460 __libc_start_main +
    245

    6    tmp7i68zx1r                        0x0000564413a45399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var even = 0\n    var odd = 0\n    for i in lst1 {\n  \
    \      if i % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n     \
    \       even += 1\n        } else {\n            odd += 1\n        }\n    }\n\
    \    if even % 2 == 0 {\n        return \"YES\"\n    } else {\n        return\
    \ \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpq4txf93s/tmpq4txf93s.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38cd464c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38cd15bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38cd15b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38cd15a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4txf93s                        0x000055991950eb17 <unavailable> + 6935

    5    libc.so.6                          0x00002b38cd650460 __libc_start_main +
    245

    6    tmpq4txf93s                        0x000055991950e249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    while lst1.count > lst1Even.count {\n   \
    \     let index = lst1.firstIndex(of: lst1.first(where: { $0 % 2 != 0 })!)!\n\
    \        lst1.remove(at: index)\n        lst1.insert(lst2Odd.removeFirst(), at:\
    \ index)\n        lst1Even = lst1.filter { $0 % 2 == 0 }\n    }\n    return lst1.count\
    \ == lst1Even.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:623: Fatal error: Can''t remove
    first element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4bbe39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4bbb30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac4bbb30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac4bbb3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac4bbb2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ac4bbb1fff0 RangeReplaceableCollection.removeFirst()
    + 272

    6    tmpd3om4w4b                        0x000055eea853564f <unavailable> + 9807

    7    tmpd3om4w4b                        0x000055eea85347d3 <unavailable> + 6099

    8    libc.so.6                          0x00002ac4bc025460 __libc_start_main +
    245

    9    tmpd3om4w4b                        0x000055eea8534469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpq7bl53uy/tmpq7bl53uy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b569c335c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b569c02cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b569c02c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b569c02b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7bl53uy                        0x000056390852079f <unavailable> + 6047

    5    libc.so.6                          0x00002b569c521460 __libc_start_main +
    245

    6    tmpq7bl53uy                        0x00005639085201f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    while i < lst1.count {\n        if lst1[i]\
    \ % 2 == 0 {\n            i += 1\n        } else {\n            let j = lst2.firstIndex(where:\
    \ { $0 % 2 == 0 })!\n            lst1[i] = lst2[j]\n            lst2[j] = lst1[i]\n\
    \        }\n    }\n    return lst1.allSatisfy({ $0 % 2 == 0 }) ? \"YES\" : \"\
    NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpodbftoqz/tmpodbftoqz.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc767c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc764beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc764be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc764bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodbftoqz                        0x0000556c05d9689f <unavailable> + 6303

    5    libc.so.6                          0x00002adc769b3460 __libc_start_main +
    245

    6    tmpodbftoqz                        0x0000556c05d962f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var isExchange = false\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    isExchange = true\n  \
    \                  break\n                }\n            }\n        }\n      \
    \  if !isExchange {\n            return \"NO\"\n        }\n    }\n    return \"\
    YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpia0pfih4/tmpia0pfih4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0813aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0810a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0810a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0810a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpia0pfih4                        0x000055f9f1d1687f <unavailable> + 6271

    5    libc.so.6                          0x00002ab081596460 __libc_start_main +
    245

    6    tmpia0pfih4                        0x000055f9f1d162d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -1
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    while i < lst1.count {\n        if lst1[i]\
    \ % 2 == 0 {\n            i += 1\n        } else {\n            var j = 0\n  \
    \          while j < lst2.count {\n                if lst2[j] % 2 != 0 {\n   \
    \                 lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n \
    \                   break\n                }\n                j += 1\n       \
    \     }\n            if j == lst2.count {\n                return \"NO\"\n   \
    \         }\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979320
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpq7bl53uy/tmpq7bl53uy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b569c335c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b569c02cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b569c02c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b569c02b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7bl53uy                        0x000056390852079f <unavailable> + 6047

    5    libc.so.6                          0x00002b569c521460 __libc_start_main +
    245

    6    tmpq7bl53uy                        0x00005639085201f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    for _ in 0..<lst1.count {\n        if lst1Even.count\
    \ == lst1.count {\n            return \"YES\"\n        }\n        if let first\
    \ = lst1.first {\n            if first % 2 != 0 {\n                if let last\
    \ = lst2.last {\n                    if last % 2 == 0 {\n                    \
    \    lst1.removeFirst()\n                        lst2.removeLast()\n         \
    \               lst1.append(last)\n                        lst2.append(first)\n\
    \                        lst1Even = lst1.filter { $0 % 2 == 0 }\n            \
    \            lst2Odd = lst2.filter { $0 % 2 != 0 }\n                    } else\
    \ {\n                        lst1.removeFirst()\n                        lst2.removeFirst()\n\
    \                        lst1.append(last)\n                        lst2.append(first)\n\
    \                        lst1Even = lst1.filter { $0 % 2 == 0 }\n            \
    \            lst2Odd = lst2.filter { $0 % 2 != 0 }\n                    }\n  \
    \              }\n            } else {\n                lst1.removeFirst()\n \
    \               lst1Even = lst1.filter { $0 % 2 == 0 }\n            }\n      \
    \  }\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpegkz37li/tmpegkz37li.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5f642c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5f339b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5f339988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5f3387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegkz37li                        0x0000558092d0b9bd <unavailable> + 6589

    5    libc.so.6                          0x00002afc5f82e460 __libc_start_main +
    245

    6    tmpegkz37li                        0x0000558092d0b589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n   \
    \     return \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return\
    \ \"NO\"\n    }\n    if lst2Even.count == lst2.count {\n        return \"NO\"\n\
    \    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp0xwmmx8o/tmp0xwmmx8o.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f003a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f0009fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f0009f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f0009e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xwmmx8o                        0x0000562016dec79f <unavailable> + 6047

    5    libc.so.6                          0x00002b2f00594460 __libc_start_main +
    245

    6    tmp0xwmmx8o                        0x0000562016dec1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    var j = 0\n    while i < lst1.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else {\n       \
    \     while j < lst2.count {\n                if lst2[j] % 2 != 0 {\n        \
    \            j += 1\n                } else {\n                    lst1[i] = lst2[j]\n\
    \                    j += 1\n                    break\n                }\n  \
    \          }\n            if j == lst2.count {\n                return \"NO\"\n\
    \            }\n            i += 1\n        }\n    }\n    return \"YES\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpe0vyipfc/tmpe0vyipfc.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4938acfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49387c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49387c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49387c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe0vyipfc                        0x00005636edc1960d <unavailable> + 5645

    5    libc.so.6                          0x00002b4938cbb460 __libc_start_main +
    245

    6    tmpe0vyipfc                        0x00005636edc191d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = lst1.filter { $0 % 2 == 0 }\n    var odds =\
    \ lst2.filter { $0 % 2 != 0 }\n    if evens.count == lst1.count {\n        return\
    \ \"YES\"\n    }\n    if odds.count == lst2.count {\n        return \"NO\"\n \
    \   }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n        \
    \    for j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n      \
    \              lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n    \
    \                evens = lst1.filter { $0 % 2 == 0 }\n                    if evens.count\
    \ == lst1.count {\n                        return \"YES\"\n                  \
    \  }\n                }\n            }\n        }\n    }\n    return \"NO\"\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp23dp873s/tmp23dp873s.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e445bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e442b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e442b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e442b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp23dp873s                        0x0000560f2471693f <unavailable> + 6463

    5    libc.so.6                          0x00002b3e447a6460 __libc_start_main +
    245

    6    tmp23dp873s                        0x0000560f24716399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    var odds = 0\n    for i in lst1 {\n\
    \        if i % 2 == 0 {\n            evens += 1\n        } else {\n         \
    \   odds += 1\n        }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n\
    \            evens += 1\n        } else {\n            odds += 1\n        }\n\
    \    }\n    if evens % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n   \
    \ } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmprof8uqfm/tmprof8uqfm.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dce2cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dcdfc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dcdfc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dcdfc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprof8uqfm                        0x00005644f3e16b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b0dce4b7460 __libc_start_main +
    245

    6    tmprof8uqfm                        0x00005644f3e16249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n        return\
    \ \"NO\"\n    }\n    for i in 0..<lst1.count {\n        for j in 0..<lst2.count\
    \ {\n            if lst1[i] % 2 != 0 && lst2[j] % 2 == 0 {\n                lst1[i]\
    \ = lst2[j]\n                lst2[j] = lst1[i]\n                lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n                lst2Odd = lst2.filter { $0 % 2 != 0 }\n   \
    \             if lst1Even.count == lst1.count {\n                    return \"\
    YES\"\n                }\n                if lst2Odd.count == lst2.count {\n \
    \                   return \"NO\"\n                }\n            }\n        }\n\
    \    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmppc59_ud7/tmppc59_ud7.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade39713c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade3940ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade3940a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade394097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppc59_ud7                        0x00005622b37ef93f <unavailable> + 6463

    5    libc.so.6                          0x00002ade398ff460 __libc_start_main +
    245

    6    tmppc59_ud7                        0x00005622b37ef399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var isPossible = true\n    while isPossible {\n       \
    \ isPossible = false\n        for i in 0..<lst1.count {\n            if lst1[i]\
    \ % 2 != 0 {\n                for j in 0..<lst2.count {\n                    if\
    \ lst2[j] % 2 == 0 {\n                        lst1[i] = lst2[j]\n            \
    \            lst2[j] = lst1[i]\n                        isPossible = true\n  \
    \                      break\n                    }\n                }\n     \
    \       }\n        }\n    }\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            return \"NO\"\n        }\n    }\n    return \"YES\"\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpxz0352eb/tmpxz0352eb.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ffb70dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ffb404b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ffb404988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ffb4037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxz0352eb                        0x000055e15035187f <unavailable> + 6271

    5    libc.so.6                          0x00002b4ffb8f9460 __libc_start_main +
    245

    6    tmpxz0352eb                        0x000055e1503512d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n   \
    \     return \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return\
    \ \"NO\"\n    }\n    if lst2Even.count == lst2.count {\n        return \"NO\"\n\
    \    }\n    if lst1Even.count + lst2Odd.count == lst1.count {\n        return\
    \ \"YES\"\n    }\n    if lst1Odd.count + lst2Even.count == lst1.count {\n    \
    \    return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpb1a9v468/tmpb1a9v468.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abde7355c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abde704cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abde704c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abde704b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb1a9v468                        0x0000557c43c25ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002abde7541460 __libc_start_main +
    245

    6    tmpb1a9v468                        0x0000557c43c251f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n   \
    \     return \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return\
    \ \"NO\"\n    }\n    if lst2Even.count == lst2.count {\n        return \"NO\"\n\
    \    }\n    if lst1Even.count + lst2Odd.count == lst1.count {\n        return\
    \ \"YES\"\n    }\n    if lst1Odd.count + lst2Even.count == lst1.count {\n    \
    \    return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpb1a9v468/tmpb1a9v468.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abde7355c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abde704cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abde704c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abde704b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb1a9v468                        0x0000557c43c25ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002abde7541460 __libc_start_main +
    245

    6    tmpb1a9v468                        0x0000557c43c251f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -1
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    while i < lst1.count {\n        if lst1[i]\
    \ % 2 == 0 {\n            i += 1\n        } else {\n            var j = 0\n  \
    \          while j < lst2.count {\n                if lst2[j] % 2 != 0 {\n   \
    \                 let temp = lst1[i]\n                    lst1[i] = lst2[j]\n\
    \                    lst2[j] = temp\n                    break\n             \
    \   }\n                j += 1\n            }\n            if j == lst2.count {\n\
    \                return \"NO\"\n            }\n        }\n    }\n    return \"\
    YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979320
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    for i in 0..<lst1.count {\n        if\
    \ lst1[i] % 2 == 0 {\n            evens += 1\n        }\n    }\n    if evens ==\
    \ lst1.count {\n        return \"YES\"\n    }\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    evens += 1\n         \
    \           break\n                }\n            }\n        }\n    }\n    if\
    \ evens == lst1.count {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpld1z48px/tmpld1z48px.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c29b7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c29871b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c29871988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c298707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpld1z48px                        0x000055a87aac987f <unavailable> + 6271

    5    libc.so.6                          0x00002b0c29d66460 __libc_start_main +
    245

    6    tmpld1z48px                        0x000055a87aac92d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    var j = 0\n    while i < lst1.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else {\n       \
    \     while j < lst2.count {\n                if lst2[j] % 2 != 0 {\n        \
    \            lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n      \
    \              i += 1\n                    j += 1\n                    break\n\
    \                }\n                j += 1\n            }\n            if j ==\
    \ lst2.count {\n                return \"NO\"\n            }\n        }\n    }\n\
    \    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpxt2_hrri/tmpxt2_hrri.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40f31c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40f2ebcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40f2ebc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40f2ebb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxt2_hrri                        0x000055685be3c77f <unavailable> + 6015

    5    libc.so.6                          0x00002b40f33b1460 __libc_start_main +
    245

    6    tmpxt2_hrri                        0x000055685be3c1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    for i in 0..<lst1.count {\n        if\
    \ lst1[i] % 2 == 0 {\n            evens += 1\n        }\n    }\n    for i in 0..<lst2.count\
    \ {\n        if lst2[i] % 2 == 0 {\n            evens -= 1\n        }\n    }\n\
    \    if evens == 0 {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp_q7jq803/tmp_q7jq803.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7245e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7242dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7242dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7242db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_q7jq803                        0x000055d959152b57 <unavailable> + 6999

    5    libc.so.6                          0x00002af7247d1460 __libc_start_main +
    245

    6    tmp_q7jq803                        0x000055d959152289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    for i in 0..<lst1.count {\n        if\
    \ lst1[i] % 2 == 0 {\n            evens += 1\n        }\n    }\n    if evens ==\
    \ lst1.count {\n        return \"YES\"\n    }\n    var odds = 0\n    for i in\
    \ 0..<lst2.count {\n        if lst2[i] % 2 != 0 {\n            odds += 1\n   \
    \     }\n    }\n    if odds == lst2.count {\n        return \"NO\"\n    }\n  \
    \  for i in 0..<lst1.count {\n        for j in 0..<lst2.count {\n            if\
    \ lst1[i] % 2 != 0 && lst2[j] % 2 == 0 {\n                let temp = lst1[i]\n\
    \                lst1[i] = lst2[j]\n                lst2[j] = temp\n         \
    \       evens += 1\n                odds -= 1\n                if evens == lst1.count\
    \ {\n                    return \"YES\"\n                }\n                if\
    \ odds == lst2.count {\n                    return \"NO\"\n                }\n\
    \            }\n        }\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n        return\
    \ \"NO\"\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n\
    \            for j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n\
    \                    lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n\
    \                    lst1Even = lst1.filter { $0 % 2 == 0 }\n                \
    \    lst2Odd = lst2.filter { $0 % 2 != 0 }\n                    if lst1Even.count\
    \ == lst1.count {\n                        return \"YES\"\n                  \
    \  }\n                    if lst2Odd.count == lst2.count {\n                 \
    \       return \"NO\"\n                    }\n                }\n            }\n\
    \        }\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7i68zx1r/tmp7i68zx1r.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b977ce32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b977cb29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b977cb29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b977cb287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7i68zx1r                        0x0000564413a4593f <unavailable> + 6463

    5    libc.so.6                          0x00002b977d01e460 __libc_start_main +
    245

    6    tmp7i68zx1r                        0x0000564413a45399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    while i < lst1.count {\n        if lst1[i]\
    \ % 2 == 0 {\n            i += 1\n        } else {\n            let j = lst2.firstIndex(where:\
    \ { $0 % 2 == 0 })!\n            lst1[i] = lst2[j]\n            lst2[j] = lst1[i]\n\
    \        }\n    }\n    return lst1.allSatisfy({ $0 % 2 == 0 }) ? \"YES\" : \"\
    NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpodbftoqz/tmpodbftoqz.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc767c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc764beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc764be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc764bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodbftoqz                        0x0000556c05d9689f <unavailable> + 6303

    5    libc.so.6                          0x00002adc769b3460 __libc_start_main +
    245

    6    tmpodbftoqz                        0x0000556c05d962f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0\
    \ {\n            for j in 0..<lst2.count {\n                if lst2[j] % 2 ==\
    \ 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            return\
    \ \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqw2_rd6x/tmpqw2_rd6x.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add58b63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add5885ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add5885a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add588597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqw2_rd6x                        0x000056449b74087f <unavailable> + 6271

    5    libc.so.6                          0x00002add58d4f460 __libc_start_main +
    245

    6    tmpqw2_rd6x                        0x000056449b7402d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Odd = [Int]()\n    var lst2Even = [Int]()\n   \
    \ for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            lst1Odd.append(lst1[i])\n\
    \        }\n    }\n    for i in 0..<lst2.count {\n        if lst2[i] % 2 == 0\
    \ {\n            lst2Even.append(lst2[i])\n        }\n    }\n    if lst1Odd.count\
    \ == lst2Even.count {\n        return \"YES\"\n    } else {\n        return \"\
    NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpzsdvmpkf/tmpzsdvmpkf.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4477faac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4477ca1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4477ca1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4477ca07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzsdvmpkf                        0x000055a03bcd10c6 <unavailable> + 8390

    5    libc.so.6                          0x00002b4478196460 __libc_start_main +
    245

    6    tmpzsdvmpkf                        0x000055a03bcd0329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    for i in 0..<lst1.count {\n        for j in 0..<lst2.count\
    \ {\n            if lst1[i] % 2 != 0 && lst2[j] % 2 == 0 {\n                lst1[i]\
    \ = lst2[j]\n                lst2[j] = lst1[i]\n                lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n                lst2Odd = lst2.filter { $0 % 2 != 0 }\n   \
    \             if lst1Even.count == lst1.count {\n                    return \"\
    YES\"\n                }\n            }\n        }\n    }\n    return \"NO\"\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp16kampuw/tmp16kampuw.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae00e59cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae00e293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae00e293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae00e2927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16kampuw                        0x0000558f40ad893f <unavailable> + 6463

    5    libc.so.6                          0x00002ae00e788460 __libc_start_main +
    245

    6    tmp16kampuw                        0x0000558f40ad8399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = [Int]()\n    var odds = [Int]()\n    for i\
    \ in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    for i in lst2 {\n     \
    \   if i % 2 == 0 {\n            evens.append(i)\n        } else {\n         \
    \   odds.append(i)\n        }\n    }\n    if odds.count == 0 {\n        return\
    \ \"YES\"\n    } else if evens.count == 0 {\n        return \"NO\"\n    } else\
    \ {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp6c8bpupq/tmp6c8bpupq.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51a69ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51a66d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51a66d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51a66d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6c8bpupq                        0x000056034c8168ef <unavailable> + 6383

    5    libc.so.6                          0x00002b51a6bc9460 __libc_start_main +
    245

    6    tmp6c8bpupq                        0x000056034c816349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpq7bl53uy/tmpq7bl53uy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b569c335c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b569c02cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b569c02c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b569c02b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7bl53uy                        0x000056390852079f <unavailable> + 6047

    5    libc.so.6                          0x00002b569c521460 __libc_start_main +
    245

    6    tmpq7bl53uy                        0x00005639085201f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    for i in 0..<lst1.count {\n        for j in 0..<lst2.count\
    \ {\n            if lst1[i] % 2 != 0 && lst2[j] % 2 == 0 {\n                lst1Even.append(lst2[j])\n\
    \                lst2Odd.append(lst1[i])\n                lst1Even = lst1Even.filter\
    \ { $0 % 2 == 0 }\n                lst2Odd = lst2Odd.filter { $0 % 2 != 0 }\n\
    \                if lst1Even.count == lst1.count {\n                    return\
    \ \"YES\"\n                }\n            }\n        }\n    }\n    return \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpliq1jii0/tmpliq1jii0.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99bce74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99bcb6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99bcb6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99bcb6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpliq1jii0                        0x00005556fc56c93f <unavailable> + 6463

    5    libc.so.6                          0x00002b99bd060460 __libc_start_main +
    245

    6    tmpliq1jii0                        0x00005556fc56c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var isExchange = false\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    isExchange = true\n  \
    \                  break\n                }\n            }\n        }\n      \
    \  if !isExchange {\n            return \"NO\"\n        }\n    }\n    return \"\
    YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpia0pfih4/tmpia0pfih4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0813aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0810a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0810a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0810a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpia0pfih4                        0x000055f9f1d1687f <unavailable> + 6271

    5    libc.so.6                          0x00002ab081596460 __libc_start_main +
    245

    6    tmpia0pfih4                        0x000055f9f1d162d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var evens = lst1.filter\
    \ { $0 % 2 == 0 }\n    var odds = lst2.filter { $0 % 2 != 0 }\n    if evens.count\
    \ == lst1.count {\n        return \"YES\"\n    }\n    if odds.count == lst2.count\
    \ {\n        return \"NO\"\n    }\n    evens.append(contentsOf: odds)\n    return\
    \ evens.count == lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpy1rhu4_q/tmpy1rhu4_q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe51122c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe50e19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe50e19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe50e187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy1rhu4_q                        0x000055c710828b47 <unavailable> + 6983

    5    libc.so.6                          0x00002abe5130e460 __libc_start_main +
    245

    6    tmpy1rhu4_q                        0x000055c710828279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n   \
    \     return \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return\
    \ \"NO\"\n    }\n    if lst2Even.count == lst2.count {\n        return \"NO\"\n\
    \    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp0xwmmx8o/tmp0xwmmx8o.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f003a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f0009fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f0009f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f0009e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xwmmx8o                        0x0000562016dec79f <unavailable> + 6047

    5    libc.so.6                          0x00002b2f00594460 __libc_start_main +
    245

    6    tmp0xwmmx8o                        0x0000562016dec1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpq7bl53uy/tmpq7bl53uy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b569c335c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b569c02cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b569c02c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b569c02b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7bl53uy                        0x000056390852079f <unavailable> + 6047

    5    libc.so.6                          0x00002b569c521460 __libc_start_main +
    245

    6    tmpq7bl53uy                        0x00005639085201f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    var odds = 0\n    for i in lst1 {\n\
    \        if i % 2 == 0 {\n            evens += 1\n        } else {\n         \
    \   odds += 1\n        }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n\
    \            evens += 1\n        } else {\n            odds += 1\n        }\n\
    \    }\n    if evens % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n   \
    \ } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmprof8uqfm/tmprof8uqfm.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dce2cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dcdfc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dcdfc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dcdfc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprof8uqfm                        0x00005644f3e16b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b0dce4b7460 __libc_start_main +
    245

    6    tmprof8uqfm                        0x00005644f3e16249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] %\
    \ 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    lst1Even = lst1.filter { $0 % 2 == 0 }\n    \
    \                lst2Odd = lst2.filter { $0 % 2 != 0 }\n                    if\
    \ lst1Even.count == lst1.count {\n                        return \"YES\"\n   \
    \                 }\n                }\n            }\n        }\n    }\n    return\
    \ \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpf4c8943i/tmpf4c8943i.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2cfbedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2cf8e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2cf8e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2cf8e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf4c8943i                        0x000055ab6f92693f <unavailable> + 6463

    5    libc.so.6                          0x00002af2cfdd9460 __libc_start_main +
    245

    6    tmpf4c8943i                        0x000055ab6f926399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    var j = 0\n    while i < lst1.count && j\
    \ < lst2.count {\n        if lst1[i] % 2 == 0 {\n            i += 1\n        }\
    \ else if lst2[j] % 2 == 0 {\n            lst1[i] = lst2[j]\n            i +=\
    \ 1\n            j += 1\n        } else {\n            j += 1\n        }\n   \
    \ }\n    return lst1.contains(where: { $0 % 2 != 0 }) ? \"NO\" : \"YES\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var isExchange = false\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    isExchange = true\n  \
    \                  break\n                }\n            }\n        }\n      \
    \  if !isExchange {\n            return \"NO\"\n        }\n    }\n    return \"\
    YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpia0pfih4/tmpia0pfih4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0813aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0810a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0810a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0810a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpia0pfih4                        0x000055f9f1d1687f <unavailable> + 6271

    5    libc.so.6                          0x00002ab081596460 __libc_start_main +
    245

    6    tmpia0pfih4                        0x000055f9f1d162d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n        return\
    \ \"NO\"\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n\
    \            for j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n\
    \                    lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n\
    \                    lst1Even = lst1.filter { $0 % 2 == 0 }\n                \
    \    lst2Odd = lst2.filter { $0 % 2 != 0 }\n                    if lst1Even.count\
    \ == lst1.count {\n                        return \"YES\"\n                  \
    \  }\n                    if lst2Odd.count == lst2.count {\n                 \
    \       return \"NO\"\n                    }\n                }\n            }\n\
    \        }\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7i68zx1r/tmp7i68zx1r.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b977ce32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b977cb29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b977cb29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b977cb287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7i68zx1r                        0x0000564413a4593f <unavailable> + 6463

    5    libc.so.6                          0x00002b977d01e460 __libc_start_main +
    245

    6    tmp7i68zx1r                        0x0000564413a45399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    var odds = 0\n    for i in lst1 {\n\
    \        if i % 2 == 0 {\n            evens += 1\n        } else {\n         \
    \   odds += 1\n        }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n\
    \            evens += 1\n        } else {\n            odds += 1\n        }\n\
    \    }\n    if odds % 2 == 0 {\n        return \"YES\"\n    } else {\n       \
    \ return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpzcniwqf5/tmpzcniwqf5.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab56a23dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab569f34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab569f34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab569f337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcniwqf5                        0x0000558f16887b17 <unavailable> + 6935

    5    libc.so.6                          0x00002ab56a429460 __libc_start_main +
    245

    6    tmpzcniwqf5                        0x0000558f16887249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n   \
    \     return \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return\
    \ \"NO\"\n    }\n    if lst2Even.count == lst2.count {\n        return \"NO\"\n\
    \    }\n    if lst1Odd.count == lst1.count - 1 && lst2Even.count == lst2.count\
    \ - 1 {\n        return \"YES\"\n    }\n    if lst1Even.count == lst1.count -\
    \ 1 && lst2Odd.count == lst2.count - 1 {\n        return \"YES\"\n    }\n    return\
    \ \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpbow6y9zp/tmpbow6y9zp.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ab6054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ab5d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ab5d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ab5d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbow6y9zp                        0x0000556b87e2962d <unavailable> + 5677

    5    libc.so.6                          0x00002b5ab6240460 __libc_start_main +
    245

    6    tmpbow6y9zp                        0x0000556b87e291f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count\
    \ + lst2Odd.count >= lst1.count {\n        return \"YES\"\n    }\n    return \"\
    NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpx59vyzq5/tmpx59vyzq5.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad93feb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad93fba7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad93fba7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad93fba67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx59vyzq5                        0x000055eddc97a79f <unavailable> + 6047

    5    libc.so.6                          0x00002ad94009c460 __libc_start_main +
    245

    6    tmpx59vyzq5                        0x000055eddc97a1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = [Int]()\n    var odds = [Int]()\n    for i\
    \ in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    for i in lst2 {\n     \
    \   if i % 2 == 0 {\n            evens.append(i)\n        } else {\n         \
    \   odds.append(i)\n        }\n    }\n    if odds.count == 0 {\n        return\
    \ \"YES\"\n    } else if evens.count == 0 {\n        return \"NO\"\n    } else\
    \ {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp6c8bpupq/tmp6c8bpupq.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51a69ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51a66d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51a66d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51a66d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6c8bpupq                        0x000056034c8168ef <unavailable> + 6383

    5    libc.so.6                          0x00002b51a6bc9460 __libc_start_main +
    245

    6    tmp6c8bpupq                        0x000056034c816349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n   \
    \     return \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return\
    \ \"NO\"\n    }\n    if lst2Even.count == lst2.count {\n        return \"NO\"\n\
    \    }\n    if lst1Even.count + lst2Odd.count == lst1.count {\n        return\
    \ \"YES\"\n    }\n    if lst1Odd.count + lst2Even.count == lst1.count {\n    \
    \    return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpb1a9v468/tmpb1a9v468.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abde7355c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abde704cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abde704c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abde704b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb1a9v468                        0x0000557c43c25ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002abde7541460 __libc_start_main +
    245

    6    tmpb1a9v468                        0x0000557c43c251f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    var j = 0\n    while i < lst1.count && j\
    \ < lst2.count {\n        if lst1[i] % 2 == 0 {\n            i += 1\n        }\
    \ else if lst2[j] % 2 == 0 {\n            lst1[i] = lst2[j]\n            i +=\
    \ 1\n            j += 1\n        } else {\n            j += 1\n        }\n   \
    \ }\n    return lst1.contains(where: { $0 % 2 != 0 }) ? \"NO\" : \"YES\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpq7bl53uy/tmpq7bl53uy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b569c335c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b569c02cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b569c02c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b569c02b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7bl53uy                        0x000056390852079f <unavailable> + 6047

    5    libc.so.6                          0x00002b569c521460 __libc_start_main +
    245

    6    tmpq7bl53uy                        0x00005639085201f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    while i < lst1.count {\n        if lst1[i]\
    \ % 2 == 0 {\n            i += 1\n        } else {\n            for j in 0..<lst2.count\
    \ {\n                if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n\
    \                    lst2[j] = lst1[i]\n                    break\n          \
    \      }\n            }\n            if lst1[i] % 2 != 0 {\n                return\
    \ \"NO\"\n            }\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpwx09lf5r/tmpwx09lf5r.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78eff06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78efbfdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78efbfd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78efbfc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwx09lf5r                        0x000056504a65487f <unavailable> + 6271

    5    libc.so.6                          0x00002b78f00f2460 __libc_start_main +
    245

    6    tmpwx09lf5r                        0x000056504a6542d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    var odds = 0\n    for i in lst1 {\n\
    \        if i % 2 == 0 {\n            evens += 1\n        } else {\n         \
    \   odds += 1\n        }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n\
    \            evens += 1\n        } else {\n            odds += 1\n        }\n\
    \    }\n    if odds % 2 == 0 {\n        return \"YES\"\n    } else {\n       \
    \ return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpzcniwqf5/tmpzcniwqf5.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab56a23dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab569f34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab569f34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab569f337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcniwqf5                        0x0000558f16887b17 <unavailable> + 6935

    5    libc.so.6                          0x00002ab56a429460 __libc_start_main +
    245

    6    tmpzcniwqf5                        0x0000558f16887249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    var j = 0\n    while i < lst1.count && j\
    \ < lst2.count {\n        if lst1[i] % 2 == 0 {\n            i += 1\n        }\
    \ else if lst2[j] % 2 == 0 {\n            lst1[i] = lst2[j]\n            i +=\
    \ 1\n            j += 1\n        } else {\n            j += 1\n        }\n   \
    \ }\n    return lst1.allSatisfy { $0 % 2 == 0 } ? \"YES\" : \"NO\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    for i in 0..<lst1.count {\n        if\
    \ lst1[i] % 2 == 0 {\n            evens += 1\n        }\n    }\n    for i in 0..<lst2.count\
    \ {\n        if lst2[i] % 2 == 0 {\n            evens -= 1\n        }\n    }\n\
    \    return evens == 0 ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp3qe40270/tmp3qe40270.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54ac340c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54ac037b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54ac037988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54ac0367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3qe40270                        0x00005571157dab57 <unavailable> + 6999

    5    libc.so.6                          0x00002b54ac52c460 __libc_start_main +
    245

    6    tmp3qe40270                        0x00005571157da289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpq7bl53uy/tmpq7bl53uy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b569c335c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b569c02cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b569c02c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b569c02b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7bl53uy                        0x000056390852079f <unavailable> + 6047

    5    libc.so.6                          0x00002b569c521460 __libc_start_main +
    245

    6    tmpq7bl53uy                        0x00005639085201f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = [Int]()\n    var odds = [Int]()\n    for i\
    \ in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    for i in lst2 {\n     \
    \   if i % 2 == 0 {\n            evens.append(i)\n        } else {\n         \
    \   odds.append(i)\n        }\n    }\n    if odds.count % 2 == 0 {\n        return\
    \ \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp5cyqu4ws/tmp5cyqu4ws.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7127350c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7127047b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7127047988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71270467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5cyqu4ws                        0x0000564892e96c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b712753c460 __libc_start_main +
    245

    6    tmp5cyqu4ws                        0x0000564892e96349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n   \
    \     return \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return\
    \ \"NO\"\n    }\n    if lst2Even.count == lst2.count {\n        return \"NO\"\n\
    \    }\n    if lst1Odd.count == lst1.count - 1 && lst2Even.count == lst2.count\
    \ - 1 {\n        return \"YES\"\n    }\n    if lst1Even.count == lst1.count -\
    \ 1 && lst2Odd.count == lst2.count - 1 {\n        return \"YES\"\n    }\n    return\
    \ \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpbow6y9zp/tmpbow6y9zp.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ab6054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ab5d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ab5d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ab5d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbow6y9zp                        0x0000556b87e2962d <unavailable> + 5677

    5    libc.so.6                          0x00002b5ab6240460 __libc_start_main +
    245

    6    tmpbow6y9zp                        0x0000556b87e291f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpq7bl53uy/tmpq7bl53uy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b569c335c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b569c02cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b569c02c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b569c02b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7bl53uy                        0x000056390852079f <unavailable> + 6047

    5    libc.so.6                          0x00002b569c521460 __libc_start_main +
    245

    6    tmpq7bl53uy                        0x00005639085201f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evenCount = 0\n    for i in 0..<lst1.count {\n    \
    \    if lst1[i] % 2 == 0 {\n            evenCount += 1\n        }\n    }\n   \
    \ if evenCount == lst1.count {\n        return \"YES\"\n    }\n    for i in 0..<lst1.count\
    \ {\n        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n  \
    \              if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n\
    \                    lst2[j] = lst1[i]\n                    evenCount += 1\n \
    \                   break\n                }\n            }\n        }\n    }\n\
    \    if evenCount == lst1.count {\n        return \"YES\"\n    }\n    return \"\
    NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqn0jlmf8/tmpqn0jlmf8.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2c9000c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2c8cf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2c8cf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2c8cf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqn0jlmf8                        0x00005570ea47787f <unavailable> + 6271

    5    libc.so.6                          0x00002af2c91ec460 __libc_start_main +
    245

    6    tmpqn0jlmf8                        0x00005570ea4772d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    for i in 0..<lst1.count {\n        if\
    \ lst1[i] % 2 == 0 {\n            evens += 1\n        }\n    }\n    for i in 0..<lst2.count\
    \ {\n        if lst2[i] % 2 == 0 {\n            evens -= 1\n        }\n    }\n\
    \    if evens > 0 {\n        return \"NO\"\n    }\n    return \"YES\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp9vwmqk_j/tmp9vwmqk_j.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30df168c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30dee5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30dee5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30dee5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9vwmqk_j                        0x000055aea030cce3 <unavailable> + 7395

    5    libc.so.6                          0x00002b30df354460 __libc_start_main +
    245

    6    tmp9vwmqk_j                        0x000055aea030c289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n        return\
    \ \"NO\"\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n\
    \            for j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n\
    \                    lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n\
    \                    lst1Even = lst1.filter { $0 % 2 == 0 }\n                \
    \    lst2Odd = lst2.filter { $0 % 2 != 0 }\n                    if lst1Even.count\
    \ == lst1.count {\n                        return \"YES\"\n                  \
    \  }\n                    if lst2Odd.count == lst2.count {\n                 \
    \       return \"NO\"\n                    }\n                }\n            }\n\
    \        }\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7i68zx1r/tmp7i68zx1r.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b977ce32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b977cb29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b977cb29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b977cb287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7i68zx1r                        0x0000564413a4593f <unavailable> + 6463

    5    libc.so.6                          0x00002b977d01e460 __libc_start_main +
    245

    6    tmp7i68zx1r                        0x0000564413a45399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    while i < lst1.count {\n        if lst1[i]\
    \ % 2 == 0 {\n            i += 1\n        } else {\n            lst1.remove(at:\
    \ i)\n            lst2.append(lst2.removeFirst())\n        }\n    }\n    return\
    \ lst1.count == 0 ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpb9a5w9uq/tmpb9a5w9uq.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17e7c15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17e790cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17e790c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17e790b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb9a5w9uq                        0x000055aa68a2270d <unavailable> + 5901

    5    libc.so.6                          0x00002b17e7e01460 __libc_start_main +
    245

    6    tmpb9a5w9uq                        0x000055aa68a222d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpq7bl53uy/tmpq7bl53uy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b569c335c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b569c02cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b569c02c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b569c02b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7bl53uy                        0x000056390852079f <unavailable> + 6047

    5    libc.so.6                          0x00002b569c521460 __libc_start_main +
    245

    6    tmpq7bl53uy                        0x00005639085201f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpq7bl53uy/tmpq7bl53uy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b569c335c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b569c02cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b569c02c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b569c02b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7bl53uy                        0x000056390852079f <unavailable> + 6047

    5    libc.so.6                          0x00002b569c521460 __libc_start_main +
    245

    6    tmpq7bl53uy                        0x00005639085201f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count\
    \ == lst1.count {\n        return \"YES\"\n    } else if lst1Even.count + lst2Odd.count\
    \ >= lst1.count {\n        return \"YES\"\n    } else {\n        return \"NO\"\
    \n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp17knijtl/tmp17knijtl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7a4fd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7a4ccbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7a4ccb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7a4cca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17knijtl                        0x0000558beab8c79f <unavailable> + 6047

    5    libc.so.6                          0x00002ad7a51c0460 __libc_start_main +
    245

    6    tmp17knijtl                        0x0000558beab8c1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    var odds = 0\n    for i in lst1 {\n\
    \        if i % 2 == 0 {\n            evens += 1\n        } else {\n         \
    \   odds += 1\n        }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n\
    \            evens += 1\n        } else {\n            odds += 1\n        }\n\
    \    }\n    if odds % 2 == 0 {\n        return \"YES\"\n    } else {\n       \
    \ return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpzcniwqf5/tmpzcniwqf5.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab56a23dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab569f34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab569f34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab569f337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcniwqf5                        0x0000558f16887b17 <unavailable> + 6935

    5    libc.so.6                          0x00002ab56a429460 __libc_start_main +
    245

    6    tmpzcniwqf5                        0x0000558f16887249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n        return\
    \ \"NO\"\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n\
    \            for j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n\
    \                    lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n\
    \                    lst1Even = lst1.filter { $0 % 2 == 0 }\n                \
    \    lst2Odd = lst2.filter { $0 % 2 != 0 }\n                    if lst1Even.count\
    \ == lst1.count {\n                        return \"YES\"\n                  \
    \  }\n                    if lst2Odd.count == lst2.count {\n                 \
    \       return \"NO\"\n                    }\n                }\n            }\n\
    \        }\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7i68zx1r/tmp7i68zx1r.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b977ce32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b977cb29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b977cb29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b977cb287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7i68zx1r                        0x0000564413a4593f <unavailable> + 6463

    5    libc.so.6                          0x00002b977d01e460 __libc_start_main +
    245

    6    tmp7i68zx1r                        0x0000564413a45399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n        return\
    \ \"NO\"\n    }\n    for i in 0..<lst1.count {\n        for j in 0..<lst2.count\
    \ {\n            if lst1[i] % 2 != 0 && lst2[j] % 2 == 0 {\n                lst1[i]\
    \ = lst2[j]\n                lst2[j] = lst1[i]\n                lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n                lst2Odd = lst2.filter { $0 % 2 != 0 }\n   \
    \             if lst1Even.count == lst1.count {\n                    return \"\
    YES\"\n                }\n                if lst2Odd.count == lst2.count {\n \
    \                   return \"NO\"\n                }\n            }\n        }\n\
    \    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmppc59_ud7/tmppc59_ud7.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade39713c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade3940ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade3940a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade394097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppc59_ud7                        0x00005622b37ef93f <unavailable> + 6463

    5    libc.so.6                          0x00002ade398ff460 __libc_start_main +
    245

    6    tmppc59_ud7                        0x00005622b37ef399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n   \
    \     return \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return\
    \ \"NO\"\n    }\n    if lst2Even.count == lst2.count {\n        return \"NO\"\n\
    \    }\n    if lst1Even.count + lst2Odd.count >= lst1.count {\n        return\
    \ \"YES\"\n    }\n    if lst1Odd.count + lst2Even.count >= lst1.count {\n    \
    \    return \"NO\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpe0zos15g/tmpe0zos15g.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adeda2acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aded9fa3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aded9fa3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aded9fa27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe0zos15g                        0x0000555ed88eb79f <unavailable> + 6047

    5    libc.so.6                          0x00002adeda498460 __libc_start_main +
    245

    6    tmpe0zos15g                        0x0000555ed88eb1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n        return\
    \ \"NO\"\n    }\n    while lst1Even.count != lst1.count {\n        let even =\
    \ lst1Even.removeFirst()\n        let odd = lst2Odd.removeFirst()\n        lst1.removeAll\
    \ { $0 == even }\n        lst2.removeAll { $0 == odd }\n        lst1.append(odd)\n\
    \        lst2.append(even)\n        lst1Even = lst1.filter { $0 % 2 == 0 }\n \
    \       lst2Odd = lst2.filter { $0 % 2 != 0 }\n    }\n    return \"YES\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:623: Fatal error: Can''t remove
    first element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f72212c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f71f09561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f71f09286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f71f0913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f71f08bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b0f71ef8ff0 RangeReplaceableCollection.removeFirst()
    + 272

    6    tmp2g821ebb                        0x0000562db0421581 <unavailable> + 9601

    7    tmp2g821ebb                        0x0000562db0420713 <unavailable> + 5907

    8    libc.so.6                          0x00002b0f723fe460 __libc_start_main +
    245

    9    tmp2g821ebb                        0x0000562db04203a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n   \
    \     return \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return\
    \ \"NO\"\n    }\n    if lst2Even.count == lst2.count {\n        return \"NO\"\n\
    \    }\n    if lst1Odd.count == lst1.count - 1 && lst2Even.count == lst2.count\
    \ - 1 {\n        return \"YES\"\n    }\n    if lst1Even.count == lst1.count -\
    \ 1 && lst2Odd.count == lst2.count - 1 {\n        return \"YES\"\n    }\n    return\
    \ \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpbow6y9zp/tmpbow6y9zp.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ab6054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ab5d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ab5d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ab5d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbow6y9zp                        0x0000556b87e2962d <unavailable> + 5677

    5    libc.so.6                          0x00002b5ab6240460 __libc_start_main +
    245

    6    tmpbow6y9zp                        0x0000556b87e291f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n   \
    \     return \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return\
    \ \"NO\"\n    }\n    if lst2Even.count == lst2.count {\n        return \"NO\"\n\
    \    }\n    if lst1Even.count + lst2Odd.count == lst1.count {\n        return\
    \ \"YES\"\n    }\n    if lst1Odd.count + lst2Even.count == lst1.count {\n    \
    \    return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpb1a9v468/tmpb1a9v468.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abde7355c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abde704cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abde704c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abde704b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb1a9v468                        0x0000557c43c25ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002abde7541460 __libc_start_main +
    245

    6    tmpb1a9v468                        0x0000557c43c251f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n   \
    \     return \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return\
    \ \"NO\"\n    }\n    if lst2Even.count == lst2.count {\n        return \"NO\"\n\
    \    }\n    lst1 = lst1Even + lst2Even\n    lst2 = lst1Odd + lst2Odd\n    lst1Even\
    \ = lst1.filter { $0 % 2 == 0 }\n    lst2Odd = lst2.filter { $0 % 2 != 0 }\n \
    \   lst1Odd = lst1.filter { $0 % 2 != 0 }\n    lst2Even = lst2.filter { $0 % 2\
    \ == 0 }\n    if lst1Even.count == lst1.count {\n        return \"YES\"\n    }\n\
    \    if lst2Odd.count == lst2.count {\n        return \"YES\"\n    }\n    if lst1Odd.count\
    \ == lst1.count {\n        return \"NO\"\n    }\n    if lst2Even.count == lst2.count\
    \ {\n        return \"NO\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp88_rah_x/tmp88_rah_x.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6fa7fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6fa4f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6fa4f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6fa4f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp88_rah_x                        0x000055949687b7ff <unavailable> + 6143

    5    libc.so.6                          0x00002ac6fa9e9460 __libc_start_main +
    245

    6    tmp88_rah_x                        0x000055949687b259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n        return\
    \ \"NO\"\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n\
    \            for j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n\
    \                    lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n\
    \                    lst1Even = lst1.filter { $0 % 2 == 0 }\n                \
    \    lst2Odd = lst2.filter { $0 % 2 != 0 }\n                    if lst1Even.count\
    \ == lst1.count {\n                        return \"YES\"\n                  \
    \  }\n                    if lst2Odd.count == lst2.count {\n                 \
    \       return \"NO\"\n                    }\n                }\n            }\n\
    \        }\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7i68zx1r/tmp7i68zx1r.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b977ce32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b977cb29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b977cb29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b977cb287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7i68zx1r                        0x0000564413a4593f <unavailable> + 6463

    5    libc.so.6                          0x00002b977d01e460 __libc_start_main +
    245

    6    tmp7i68zx1r                        0x0000564413a45399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    while i < lst1.count {\n        if lst1[i]\
    \ % 2 == 0 {\n            i += 1\n        } else {\n            var j = 0\n  \
    \          while j < lst2.count {\n                if lst2[j] % 2 != 0 {\n   \
    \                 j += 1\n                } else {\n                    let temp\
    \ = lst1[i]\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = temp\n                    break\n                }\n            }\n      \
    \      if j == lst2.count {\n                return \"NO\"\n            }\n  \
    \      }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0\
    \ {\n            for j in 0..<lst2.count {\n                if lst2[j] % 2 ==\
    \ 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            return\
    \ \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqw2_rd6x/tmpqw2_rd6x.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add58b63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add5885ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add5885a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add588597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqw2_rd6x                        0x000056449b74087f <unavailable> + 6271

    5    libc.so.6                          0x00002add58d4f460 __libc_start_main +
    245

    6    tmpqw2_rd6x                        0x000056449b7402d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpq7bl53uy/tmpq7bl53uy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b569c335c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b569c02cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b569c02c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b569c02b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7bl53uy                        0x000056390852079f <unavailable> + 6047

    5    libc.so.6                          0x00002b569c521460 __libc_start_main +
    245

    6    tmpq7bl53uy                        0x00005639085201f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n        return\
    \ \"NO\"\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n\
    \            for j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n\
    \                    let temp = lst1[i]\n                    lst1[i] = lst2[j]\n\
    \                    lst2[j] = temp\n                    lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n                    lst2Odd = lst2.filter { $0 % 2 != 0 }\n\
    \                    if lst1Even.count == lst1.count {\n                     \
    \   return \"YES\"\n                    }\n                    if lst2Odd.count\
    \ == lst2.count {\n                        return \"NO\"\n                   \
    \ }\n                }\n            }\n        }\n    }\n    return \"NO\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979316
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n        return\
    \ \"NO\"\n    }\n    while lst1Even.count < lst1.count {\n        let odd = lst1.filter\
    \ { $0 % 2 != 0 }\n        let even = lst2.filter { $0 % 2 == 0 }\n        if\
    \ odd.count == 0 || even.count == 0 {\n            return \"NO\"\n        }\n\
    \        let oddElement = odd[0]\n        let evenElement = even[0]\n        lst1.remove(at:\
    \ lst1.firstIndex(of: oddElement)!)\n        lst2.remove(at: lst2.firstIndex(of:\
    \ evenElement)!)\n        lst1.append(evenElement)\n        lst2.append(oddElement)\n\
    \        lst1Even = lst1.filter { $0 % 2 == 0 }\n        lst2Odd = lst2.filter\
    \ { $0 % 2 != 0 }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979316
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    var j = 0\n    while i < lst1.count && j\
    \ < lst2.count {\n        if lst1[i] % 2 == 0 {\n            i += 1\n        }\
    \ else if lst2[j] % 2 == 0 {\n            lst1[i] = lst2[j]\n            i +=\
    \ 1\n            j += 1\n        } else {\n            j += 1\n        }\n   \
    \ }\n    return lst1.allSatisfy { $0 % 2 == 0 } ? \"YES\" : \"NO\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979316
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    var j = 0\n    while i < lst1.count && j\
    \ < lst2.count {\n        if lst1[i] % 2 == 0 {\n            i += 1\n        }\
    \ else if lst2[j] % 2 == 0 {\n            lst1[i] = lst2[j]\n            i +=\
    \ 1\n            j += 1\n        } else {\n            j += 1\n        }\n   \
    \ }\n    return lst1.filter { $0 % 2 != 0 }.isEmpty ? \"YES\" : \"NO\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n   \
    \     return \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return\
    \ \"NO\"\n    }\n    if lst2Even.count == lst2.count {\n        return \"NO\"\n\
    \    }\n    if lst1Odd.count > lst2Even.count {\n        return \"NO\"\n    }\n\
    \    if lst2Odd.count > lst1Even.count {\n        return \"NO\"\n    }\n    return\
    \ \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp535aaci4/tmp535aaci4.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa4b2d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa4afccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa4afcc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa4afcb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp535aaci4                        0x0000559a6ac8dac7 <unavailable> + 6855

    5    libc.so.6                          0x00002baa4b4c1460 __libc_start_main +
    245

    6    tmp535aaci4                        0x0000559a6ac8d1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = [Int]()\n    var odds = [Int]()\n    for i\
    \ in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    for i in lst2 {\n     \
    \   if i % 2 == 0 {\n            evens.append(i)\n        } else {\n         \
    \   odds.append(i)\n        }\n    }\n    if odds.count == 0 {\n        return\
    \ \"YES\"\n    } else if evens.count == 0 {\n        return \"NO\"\n    } else\
    \ {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp6c8bpupq/tmp6c8bpupq.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51a69ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51a66d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51a66d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51a66d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6c8bpupq                        0x000056034c8168ef <unavailable> + 6383

    5    libc.so.6                          0x00002b51a6bc9460 __libc_start_main +
    245

    6    tmp6c8bpupq                        0x000056034c816349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpq7bl53uy/tmpq7bl53uy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b569c335c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b569c02cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b569c02c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b569c02b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7bl53uy                        0x000056390852079f <unavailable> + 6047

    5    libc.so.6                          0x00002b569c521460 __libc_start_main +
    245

    6    tmpq7bl53uy                        0x00005639085201f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var result = \"NO\"\n    for i in 0..<lst1.count {\n  \
    \      if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n        \
    \        if lst2[j] % 2 != 0 {\n                    lst1[i] = lst2[j]\n      \
    \              lst2[j] = lst1[i]\n                    result = \"YES\"\n     \
    \               break\n                }\n            }\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpwwnbdtos/tmpwwnbdtos.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d57dbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d57ab4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d57ab4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d57ab37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwnbdtos                        0x00005595e4b3487f <unavailable> + 6271

    5    libc.so.6                          0x00002b4d57fa9460 __libc_start_main +
    245

    6    tmpwwnbdtos                        0x00005595e4b342d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    var j = 0\n    while i < lst1.count && j\
    \ < lst2.count {\n        if lst1[i] % 2 == 0 {\n            i += 1\n        }\
    \ else if lst2[j] % 2 == 0 {\n            lst1[i] = lst2[j]\n            i +=\
    \ 1\n            j += 1\n        } else {\n            j += 1\n        }\n   \
    \ }\n    return lst1.reduce(true, { $0 && $1 % 2 == 0 }) ? \"YES\" : \"NO\"\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    var odds = 0\n    for i in lst1 {\n\
    \        if i % 2 == 0 {\n            evens += 1\n        } else {\n         \
    \   odds += 1\n        }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n\
    \            evens += 1\n        } else {\n            odds += 1\n        }\n\
    \    }\n    if evens % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n   \
    \ } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmprof8uqfm/tmprof8uqfm.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dce2cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dcdfc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dcdfc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dcdfc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprof8uqfm                        0x00005644f3e16b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b0dce4b7460 __libc_start_main +
    245

    6    tmprof8uqfm                        0x00005644f3e16249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n   \
    \     return \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return\
    \ \"NO\"\n    }\n    if lst2Even.count == lst2.count {\n        return \"NO\"\n\
    \    }\n    if lst1Even.count + lst2Odd.count == lst1.count {\n        return\
    \ \"YES\"\n    }\n    if lst1Odd.count + lst2Even.count == lst1.count {\n    \
    \    return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpb1a9v468/tmpb1a9v468.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abde7355c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abde704cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abde704c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abde704b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb1a9v468                        0x0000557c43c25ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002abde7541460 __libc_start_main +
    245

    6    tmpb1a9v468                        0x0000557c43c251f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    var odds = 0\n    for i in lst1 {\n\
    \        if i % 2 == 0 {\n            evens += 1\n        } else {\n         \
    \   odds += 1\n        }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n\
    \            evens += 1\n        } else {\n            odds += 1\n        }\n\
    \    }\n    if odds % 2 == 0 {\n        return \"YES\"\n    } else {\n       \
    \ return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpzcniwqf5/tmpzcniwqf5.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab56a23dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab569f34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab569f34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab569f337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcniwqf5                        0x0000558f16887b17 <unavailable> + 6935

    5    libc.so.6                          0x00002ab56a429460 __libc_start_main +
    245

    6    tmpzcniwqf5                        0x0000558f16887249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter\
    \ { $0 % 2 == 0 }\n    let odds = lst1.filter { $0 % 2 != 0 }\n    let odds2 =\
    \ lst2.filter { $0 % 2 != 0 }\n    return odds.count == odds2.count ? \"YES\"\
    \ : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpwa_u9n72/tmpwa_u9n72.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7c435cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7c4053b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7c4053988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7c40527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwa_u9n72                        0x0000556fec4e2ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002af7c4548460 __libc_start_main +
    245

    6    tmpwa_u9n72                        0x0000556fec4e21f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n        return\
    \ \"NO\"\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n\
    \            for j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n\
    \                    lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n\
    \                    lst1Even = lst1.filter { $0 % 2 == 0 }\n                \
    \    lst2Odd = lst2.filter { $0 % 2 != 0 }\n                    if lst1Even.count\
    \ == lst1.count {\n                        return \"YES\"\n                  \
    \  }\n                    if lst2Odd.count == lst2.count {\n                 \
    \       return \"NO\"\n                    }\n                }\n            }\n\
    \        }\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7i68zx1r/tmp7i68zx1r.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b977ce32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b977cb29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b977cb29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b977cb287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7i68zx1r                        0x0000564413a4593f <unavailable> + 6463

    5    libc.so.6                          0x00002b977d01e460 __libc_start_main +
    245

    6    tmp7i68zx1r                        0x0000564413a45399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] %\
    \ 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    lst1Even = lst1.filter { $0 % 2 == 0 }\n    \
    \                lst2Odd = lst2.filter { $0 % 2 != 0 }\n                    if\
    \ lst1Even.count == lst1.count {\n                        return \"YES\"\n   \
    \                 }\n                }\n            }\n        }\n    }\n    return\
    \ \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpf4c8943i/tmpf4c8943i.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2cfbedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2cf8e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2cf8e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2cf8e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf4c8943i                        0x000055ab6f92693f <unavailable> + 6463

    5    libc.so.6                          0x00002af2cfdd9460 __libc_start_main +
    245

    6    tmpf4c8943i                        0x000055ab6f926399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n        return\
    \ \"NO\"\n    }\n    var i = 0\n    while i < lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            let index = lst2.firstIndex(of: lst1[i])!\n        \
    \    lst1[i] = lst2[index]\n            lst2[index] = lst1[i]\n            lst1Even\
    \ = lst1.filter { $0 % 2 == 0 }\n            lst2Odd = lst2.filter { $0 % 2 !=\
    \ 0 }\n            if lst1Even.count == lst1.count {\n                return \"\
    YES\"\n            }\n            if lst2Odd.count == lst2.count {\n         \
    \       return \"NO\"\n            }\n        }\n        i += 1\n    }\n    return\
    \ \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpu7l4kf0v/tmpu7l4kf0v.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab301864c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab30155bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab30155b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab30155a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7l4kf0v                        0x0000557de812678d <unavailable> + 6029

    5    libc.so.6                          0x00002ab301a50460 __libc_start_main +
    245

    6    tmpu7l4kf0v                        0x0000557de8126359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    while i < lst1.count {\n        if lst1[i]\
    \ % 2 == 0 {\n            i += 1\n        } else {\n            let j = lst2.firstIndex(where:\
    \ { $0 % 2 == 0 }) ?? -1\n            if j == -1 {\n                return \"\
    NO\"\n            }\n            lst1[i] = lst2[j]\n            lst2[j] = lst1[i]\n\
    \        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqoh6x2ah/tmpqoh6x2ah.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada9e33dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada9e034b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada9e034988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada9e0337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqoh6x2ah                        0x0000564961e5c83f <unavailable> + 6207

    5    libc.so.6                          0x00002ada9e529460 __libc_start_main +
    245

    6    tmpqoh6x2ah                        0x0000564961e5c299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -1
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    var j = 0\n    while i < lst1.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else {\n       \
    \     while j < lst2.count {\n                if lst2[j] % 2 != 0 {\n        \
    \            j += 1\n                } else {\n                    lst1[i] = lst2[j]\n\
    \                    lst2[j] = lst1[i]\n                    i += 1\n         \
    \           j += 1\n                    break\n                }\n           \
    \ }\n        }\n    }\n    return lst1.filter { $0 % 2 != 0 }.isEmpty ? \"YES\"\
    \ : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979321
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpq7bl53uy/tmpq7bl53uy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b569c335c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b569c02cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b569c02c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b569c02b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7bl53uy                        0x000056390852079f <unavailable> + 6047

    5    libc.so.6                          0x00002b569c521460 __libc_start_main +
    245

    6    tmpq7bl53uy                        0x00005639085201f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n   \
    \     return \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return\
    \ \"NO\"\n    }\n    if lst2Even.count == lst2.count {\n        return \"NO\"\n\
    \    }\n    if lst1Even.count + lst2Odd.count == lst1.count {\n        return\
    \ \"YES\"\n    }\n    if lst1Odd.count + lst2Even.count == lst1.count {\n    \
    \    return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpb1a9v468/tmpb1a9v468.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abde7355c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abde704cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abde704c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abde704b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb1a9v468                        0x0000557c43c25ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002abde7541460 __libc_start_main +
    245

    6    tmpb1a9v468                        0x0000557c43c251f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    var j = 0\n    while i < lst1.count && j\
    \ < lst2.count {\n        if lst1[i] % 2 == 0 {\n            i += 1\n        }\
    \ else if lst2[j] % 2 == 0 {\n            lst1[i] = lst2[j]\n            i +=\
    \ 1\n            j += 1\n        } else {\n            j += 1\n        }\n   \
    \ }\n    return lst1.filter { $0 % 2 != 0 }.isEmpty ? \"YES\" : \"NO\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Odd.count == 0 {\n        return \"\
    YES\"\n    }\n    if lst2Odd.count == 0 {\n        return \"NO\"\n    }\n    for\
    \ i in 0..<lst1Odd.count {\n        let index = lst2Odd.firstIndex(of: lst1Odd[i])\n\
    \        if index != nil {\n            lst1Odd.remove(at: i)\n            lst2Odd.remove(at:\
    \ index!)\n        }\n    }\n    if lst1Odd.count == 0 {\n        return \"YES\"\
    \n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002add4f536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add4f22d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002add4f22d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002add4f22d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002add4f22cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002add4f02ce83 <unavailable> + 188035

    6    tmpga_vld_q                        0x000055f3b2879698 <unavailable> + 9880

    7    tmpga_vld_q                        0x000055f3b28787c3 <unavailable> + 6083

    8    libc.so.6                          0x00002add4f722460 __libc_start_main +
    245

    9    tmpga_vld_q                        0x000055f3b2878459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    for i in 0..<lst1.count {\n        if\
    \ lst1[i] % 2 == 0 {\n            evens += 1\n        }\n    }\n    for i in 0..<lst2.count\
    \ {\n        if lst2[i] % 2 == 0 {\n            evens -= 1\n        }\n    }\n\
    \    if evens == 0 {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp_q7jq803/tmp_q7jq803.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7245e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7242dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7242dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7242db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_q7jq803                        0x000055d959152b57 <unavailable> + 6999

    5    libc.so.6                          0x00002af7247d1460 __libc_start_main +
    245

    6    tmp_q7jq803                        0x000055d959152289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    var j = 0\n    while i < lst1.count && j\
    \ < lst2.count {\n        if lst1[i] % 2 == 0 {\n            i += 1\n        }\
    \ else if lst2[j] % 2 == 0 {\n            lst1[i] = lst2[j]\n            i +=\
    \ 1\n            j += 1\n        } else {\n            j += 1\n        }\n   \
    \ }\n    return lst1.contains(where: { $0 % 2 != 0 }) ? \"NO\" : \"YES\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    for i in 0..<lst1.count {\n        if\
    \ lst1[i] % 2 == 0 {\n            evens += 1\n        }\n    }\n    for i in 0..<lst2.count\
    \ {\n        if lst2[i] % 2 == 0 {\n            evens -= 1\n        }\n    }\n\
    \    if evens == 0 {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp_q7jq803/tmp_q7jq803.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7245e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7242dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7242dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7242db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_q7jq803                        0x000055d959152b57 <unavailable> + 6999

    5    libc.so.6                          0x00002af7247d1460 __libc_start_main +
    245

    6    tmp_q7jq803                        0x000055d959152289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpq7bl53uy/tmpq7bl53uy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b569c335c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b569c02cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b569c02c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b569c02b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7bl53uy                        0x000056390852079f <unavailable> + 6047

    5    libc.so.6                          0x00002b569c521460 __libc_start_main +
    245

    6    tmpq7bl53uy                        0x00005639085201f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    var j = 0\n    while i < lst1.count && j\
    \ < lst2.count {\n        if lst1[i] % 2 == 0 {\n            i += 1\n        }\
    \ else if lst2[j] % 2 == 0 {\n            lst1[i] = lst2[j]\n            i +=\
    \ 1\n            j += 1\n        } else {\n            j += 1\n        }\n   \
    \ }\n    return lst1.filter { $0 % 2 != 0 }.isEmpty ? \"YES\" : \"NO\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even\
    \ = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Even.count == lst2.count {\n  \
    \      return \"YES\"\n    }\n    if lst1Even.count == 0 && lst2Even.count ==\
    \ 0 {\n        return \"NO\"\n    }\n    if lst1Even.count > 0 && lst2Even.count\
    \ > 0 {\n        return \"YES\"\n    }\n    if lst1Even.count > 0 {\n        lst1Odd.append(contentsOf:\
    \ lst2Even)\n        lst2Even.removeAll()\n        lst2Even = lst1Odd.filter {\
    \ $0 % 2 == 0 }\n        if lst2Even.count > 0 {\n            return \"YES\"\n\
    \        }\n    }\n    if lst2Even.count > 0 {\n        lst2Odd.append(contentsOf:\
    \ lst1Even)\n        lst1Even.removeAll()\n        lst1Even = lst2Odd.filter {\
    \ $0 % 2 == 0 }\n        if lst1Even.count > 0 {\n            return \"YES\"\n\
    \        }\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmphbjbeewk/tmphbjbeewk.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d50358c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d5004fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d5004f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d5004e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbjbeewk                        0x000055a8bcaf08ff <unavailable> + 6399

    5    libc.so.6                          0x00002b8d50544460 __libc_start_main +
    245

    6    tmphbjbeewk                        0x000055a8bcaf0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter\
    \ { $0 % 2 == 0 }\n    let odds = lst1.filter { $0 % 2 != 0 }\n    let odds2 =\
    \ lst2.filter { $0 % 2 != 0 }\n    if odds.count == odds2.count {\n        return\
    \ \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsl4suq68/tmpsl4suq68.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a7e6bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a7e3b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a7e3b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a7e3b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsl4suq68                        0x000055648a719ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002b3a7e8a8460 __libc_start_main +
    245

    6    tmpsl4suq68                        0x000055648a7191f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpq7bl53uy/tmpq7bl53uy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b569c335c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b569c02cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b569c02c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b569c02b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7bl53uy                        0x000056390852079f <unavailable> + 6047

    5    libc.so.6                          0x00002b569c521460 __libc_start_main +
    245

    6    tmpq7bl53uy                        0x00005639085201f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even\
    \ = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Even.count == lst2.count {\n  \
    \      return \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return\
    \ \"NO\"\n    }\n    if lst2Odd.count == lst2.count {\n        return \"NO\"\n\
    \    }\n    if lst1Even.count + lst2Even.count >= lst1.count {\n        return\
    \ \"YES\"\n    }\n    if lst1Odd.count + lst2Odd.count >= lst1.count {\n     \
    \   return \"NO\"\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let lst1Odd = lst1.filter\
    \ { $0 % 2 != 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    return\
    \ lst1Odd.count == lst2Even.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpy0nj7gpp/tmpy0nj7gpp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1954f6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1954c64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1954c64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1954c637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy0nj7gpp                        0x0000558a86472f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b1955159460 __libc_start_main +
    245

    6    tmpy0nj7gpp                        0x0000558a864721f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even\
    \ = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Even.count == lst2.count {\n  \
    \      return \"YES\"\n    }\n    if lst1Even.count == 0 {\n        return \"\
    NO\"\n    }\n    if lst2Even.count == 0 {\n        return \"NO\"\n    }\n    if\
    \ lst1Odd.count == lst1.count {\n        return \"NO\"\n    }\n    if lst2Odd.count\
    \ == lst2.count {\n        return \"NO\"\n    }\n    if lst1Even.count > lst2Even.count\
    \ {\n        return \"NO\"\n    }\n    if lst2Even.count > lst1Even.count {\n\
    \        return \"NO\"\n    }\n    if lst1Odd.count > lst2Odd.count {\n      \
    \  return \"NO\"\n    }\n    if lst2Odd.count > lst1Odd.count {\n        return\
    \ \"NO\"\n    }\n    if lst1Even.count == lst2Even.count && lst1Odd.count == lst2Odd.count\
    \ {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    for i in 0..<lst1.count {\n        if\
    \ lst1[i] % 2 == 0 {\n            evens += 1\n        }\n    }\n    if evens ==\
    \ lst1.count {\n        return \"YES\"\n    }\n    var odds = 0\n    for i in\
    \ 0..<lst2.count {\n        if lst2[i] % 2 != 0 {\n            odds += 1\n   \
    \     }\n    }\n    if odds == lst2.count {\n        return \"NO\"\n    }\n  \
    \  for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for j\
    \ in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n               \
    \     lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n             \
    \       break\n                }\n            }\n        }\n    }\n    evens =\
    \ 0\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 == 0 {\n          \
    \  evens += 1\n        }\n    }\n    if evens == lst1.count {\n        return\
    \ \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpy2jlxv7f/tmpy2jlxv7f.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ebb17fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ebae76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ebae76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ebae757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy2jlxv7f                        0x0000559bd7b4987f <unavailable> + 6271

    5    libc.so.6                          0x00002b8ebb36b460 __libc_start_main +
    245

    6    tmpy2jlxv7f                        0x0000559bd7b492d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    var j = 0\n    while i < lst1.count && j\
    \ < lst2.count {\n        if lst1[i] % 2 == 0 {\n            i += 1\n        }\
    \ else if lst2[j] % 2 == 0 {\n            lst1[i] = lst2[j]\n            i +=\
    \ 1\n            j += 1\n        } else {\n            j += 1\n        }\n   \
    \ }\n    return lst1.contains(where: { $0 % 2 != 0 }) ? \"NO\" : \"YES\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = [Int]()\n    var odds = [Int]()\n    for i\
    \ in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    for i in lst2 {\n     \
    \   if i % 2 == 0 {\n            evens.append(i)\n        } else {\n         \
    \   odds.append(i)\n        }\n    }\n    if odds.count == 0 {\n        return\
    \ \"YES\"\n    } else if evens.count == 0 {\n        return \"NO\"\n    } else\
    \ {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp6c8bpupq/tmp6c8bpupq.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51a69ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51a66d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51a66d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51a66d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6c8bpupq                        0x000056034c8168ef <unavailable> + 6383

    5    libc.so.6                          0x00002b51a6bc9460 __libc_start_main +
    245

    6    tmp6c8bpupq                        0x000056034c816349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    var odds = 0\n    for i in lst1 {\n\
    \        if i % 2 == 0 {\n            evens += 1\n        } else {\n         \
    \   odds += 1\n        }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n\
    \            evens += 1\n        } else {\n            odds += 1\n        }\n\
    \    }\n    if odds == 0 {\n        return \"YES\"\n    } else if evens == 0 {\n\
    \        return \"NO\"\n    } else {\n        return \"YES\"\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpn3f39fac/tmpn3f39fac.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf7c293c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf7bf8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf7bf8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf7bf897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn3f39fac                        0x000055b5e57687ef <unavailable> + 6127

    5    libc.so.6                          0x00002adf7c47f460 __libc_start_main +
    245

    6    tmpn3f39fac                        0x000055b5e5768249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even\
    \ = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Even.count == lst2.count {\n  \
    \      return \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return\
    \ \"NO\"\n    }\n    if lst2Odd.count == lst2.count {\n        return \"NO\"\n\
    \    }\n    if lst1Even.count + lst2Even.count >= lst1.count {\n        return\
    \ \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpq7bl53uy/tmpq7bl53uy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b569c335c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b569c02cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b569c02c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b569c02b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7bl53uy                        0x000056390852079f <unavailable> + 6047

    5    libc.so.6                          0x00002b569c521460 __libc_start_main +
    245

    6    tmpq7bl53uy                        0x00005639085201f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    var odds = 0\n    for i in lst1 {\n\
    \        if i % 2 == 0 {\n            evens += 1\n        } else {\n         \
    \   odds += 1\n        }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n\
    \            evens += 1\n        } else {\n            odds += 1\n        }\n\
    \    }\n    if odds % 2 == 0 {\n        return \"YES\"\n    } else {\n       \
    \ return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpzcniwqf5/tmpzcniwqf5.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab56a23dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab569f34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab569f34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab569f337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcniwqf5                        0x0000558f16887b17 <unavailable> + 6935

    5    libc.so.6                          0x00002ab56a429460 __libc_start_main +
    245

    6    tmpzcniwqf5                        0x0000558f16887249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even\
    \ = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Even.count == lst2.count {\n        return\
    \ \"YES\"\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n\
    \            for j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n\
    \                    lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n\
    \                    lst1Even = lst1.filter { $0 % 2 == 0 }\n                \
    \    lst2Even = lst2.filter { $0 % 2 == 0 }\n                    if lst1Even.count\
    \ == lst1.count {\n                        return \"YES\"\n                  \
    \  }\n                    if lst2Even.count == lst2.count {\n                \
    \        return \"YES\"\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsy6u3abl/tmpsy6u3abl.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b319732ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3197021b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3197021988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31970207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsy6u3abl                        0x000056327c91d93f <unavailable> + 6463

    5    libc.so.6                          0x00002b3197516460 __libc_start_main +
    245

    6    tmpsy6u3abl                        0x000056327c91d399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    var j = 0\n    while i < lst1.count && j\
    \ < lst2.count {\n        if lst1[i] % 2 == 0 {\n            i += 1\n        }\
    \ else if lst2[j] % 2 == 0 {\n            lst1[i] = lst2[j]\n            i +=\
    \ 1\n            j += 1\n        } else {\n            j += 1\n        }\n   \
    \ }\n    return lst1.contains(where: { $0 % 2 != 0 }) ? \"NO\" : \"YES\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    var odds = 0\n    for i in lst1 {\n\
    \        if i % 2 == 0 {\n            evens += 1\n        } else {\n         \
    \   odds += 1\n        }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n\
    \            evens += 1\n        } else {\n            odds += 1\n        }\n\
    \    }\n    if odds == 0 {\n        return \"YES\"\n    } else if evens == 0 {\n\
    \        return \"NO\"\n    } else {\n        return \"YES\"\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpn3f39fac/tmpn3f39fac.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf7c293c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf7bf8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf7bf8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf7bf897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn3f39fac                        0x000055b5e57687ef <unavailable> + 6127

    5    libc.so.6                          0x00002adf7c47f460 __libc_start_main +
    245

    6    tmpn3f39fac                        0x000055b5e5768249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var isExchange = false\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    isExchange = true\n  \
    \                  break\n                }\n            }\n        }\n      \
    \  if !isExchange {\n            return \"NO\"\n        }\n    }\n    return \"\
    YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpia0pfih4/tmpia0pfih4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0813aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0810a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0810a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0810a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpia0pfih4                        0x000055f9f1d1687f <unavailable> + 6271

    5    libc.so.6                          0x00002ab081596460 __libc_start_main +
    245

    6    tmpia0pfih4                        0x000055f9f1d162d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    while i < lst1.count {\n        if lst1[i]\
    \ % 2 == 0 {\n            i += 1\n        } else {\n            var j = 0\n  \
    \          while j < lst2.count {\n                if lst2[j] % 2 != 0 {\n   \
    \                 j += 1\n                } else {\n                    lst1[i]\
    \ = lst2[j]\n                    lst2[j] = lst1[i]\n                    i += 1\n\
    \                    break\n                }\n            }\n            if j\
    \ == lst2.count {\n                return \"NO\"\n            }\n        }\n \
    \   }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpilfzw9_r/tmpilfzw9_r.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba89ad4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba89aa42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba89aa42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba89aa417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpilfzw9_r                        0x000055ecbf49b77f <unavailable> + 6015

    5    libc.so.6                          0x00002ba89af37460 __libc_start_main +
    245

    6    tmpilfzw9_r                        0x000055ecbf49b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    for i in 0..<lst1.count {\n        if\
    \ lst1[i] % 2 == 0 {\n            evens += 1\n        }\n    }\n    for i in 0..<lst2.count\
    \ {\n        if lst2[i] % 2 == 0 {\n            evens -= 1\n        }\n    }\n\
    \    if evens == 0 {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp_q7jq803/tmp_q7jq803.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7245e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7242dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7242dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7242db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_q7jq803                        0x000055d959152b57 <unavailable> + 6999

    5    libc.so.6                          0x00002af7247d1460 __libc_start_main +
    245

    6    tmp_q7jq803                        0x000055d959152289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpq7bl53uy/tmpq7bl53uy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b569c335c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b569c02cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b569c02c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b569c02b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7bl53uy                        0x000056390852079f <unavailable> + 6047

    5    libc.so.6                          0x00002b569c521460 __libc_start_main +
    245

    6    tmpq7bl53uy                        0x00005639085201f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even\
    \ = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Even.count == lst2.count {\n  \
    \      return \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return\
    \ \"NO\"\n    }\n    if lst2Odd.count == lst2.count {\n        return \"NO\"\n\
    \    }\n    if lst1Even.count + lst2Even.count >= lst1.count {\n        return\
    \ \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0\
    \ {\n            for j in 0..<lst2.count {\n                if lst2[j] % 2 ==\
    \ 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    return lst1.filter({ $0 % 2 != 0 }).count == 0 ? \"YES\" : \"NO\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpyr32rkz8/tmpyr32rkz8.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59a000ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b599fd01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b599fd01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b599fd007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyr32rkz8                        0x000055790ff1e93f <unavailable> + 6463

    5    libc.so.6                          0x00002b59a01f6460 __libc_start_main +
    245

    6    tmpyr32rkz8                        0x000055790ff1e399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even\
    \ = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Even.count == lst2.count {\n        return\
    \ \"YES\"\n    }\n    if lst1Even.count + lst2Even.count >= lst1.count {\n   \
    \     return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var isExchange = false\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    isExchange = true\n  \
    \                  break\n                }\n            }\n        }\n      \
    \  if !isExchange {\n            return \"NO\"\n        }\n    }\n    return \"\
    YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpia0pfih4/tmpia0pfih4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0813aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0810a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0810a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0810a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpia0pfih4                        0x000055f9f1d1687f <unavailable> + 6271

    5    libc.so.6                          0x00002ab081596460 __libc_start_main +
    245

    6    tmpia0pfih4                        0x000055f9f1d162d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    for i in 0..<lst1.count {\n        if\
    \ lst1[i] % 2 == 0 {\n            evens += 1\n        }\n    }\n    if evens ==\
    \ lst1.count {\n        return \"YES\"\n    }\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    evens += 1\n         \
    \           break\n                }\n            }\n        }\n    }\n    if\
    \ evens == lst1.count {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpld1z48px/tmpld1z48px.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c29b7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c29871b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c29871988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c298707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpld1z48px                        0x000055a87aac987f <unavailable> + 6271

    5    libc.so.6                          0x00002b0c29d66460 __libc_start_main +
    245

    6    tmpld1z48px                        0x000055a87aac92d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n        return\
    \ \"NO\"\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n\
    \            for j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n\
    \                    lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n\
    \                    lst1Even = lst1.filter { $0 % 2 == 0 }\n                \
    \    lst2Odd = lst2.filter { $0 % 2 != 0 }\n                    if lst1Even.count\
    \ == lst1.count {\n                        return \"YES\"\n                  \
    \  }\n                    if lst2Odd.count == lst2.count {\n                 \
    \       return \"NO\"\n                    }\n                }\n            }\n\
    \        }\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7i68zx1r/tmp7i68zx1r.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b977ce32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b977cb29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b977cb29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b977cb287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7i68zx1r                        0x0000564413a4593f <unavailable> + 6463

    5    libc.so.6                          0x00002b977d01e460 __libc_start_main +
    245

    6    tmp7i68zx1r                        0x0000564413a45399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -1
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    while i < lst1.count {\n        if lst1[i]\
    \ % 2 == 0 {\n            i += 1\n        } else {\n            var j = 0\n  \
    \          while j < lst2.count {\n                if lst2[j] % 2 != 0 {\n   \
    \                 lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n \
    \                   break\n                }\n                j += 1\n       \
    \     }\n            if j == lst2.count {\n                return \"NO\"\n   \
    \         }\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979320
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var evens = 0\n    var\
    \ odds = 0\n    for num in lst1 {\n        if num % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    for num\
    \ in lst2 {\n        if num % 2 == 0 {\n            odds += 1\n        } else\
    \ {\n            evens += 1\n        }\n    }\n    return evens == odds ? \"YES\"\
    \ : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpem0__w96/tmpem0__w96.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af79414dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af793e44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af793e44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af793e437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpem0__w96                        0x000055723589eb17 <unavailable> + 6935

    5    libc.so.6                          0x00002af794339460 __libc_start_main +
    245

    6    tmpem0__w96                        0x000055723589e249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var isExchange = false\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    isExchange = true\n  \
    \                  break\n                }\n            }\n        }\n      \
    \  if !isExchange {\n            return \"NO\"\n        }\n    }\n    return \"\
    YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpia0pfih4/tmpia0pfih4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0813aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0810a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0810a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0810a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpia0pfih4                        0x000055f9f1d1687f <unavailable> + 6271

    5    libc.so.6                          0x00002ab081596460 __libc_start_main +
    245

    6    tmpia0pfih4                        0x000055f9f1d162d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    var j = 0\n    while i < lst1.count && j\
    \ < lst2.count {\n        if lst1[i] % 2 == 0 {\n            i += 1\n        }\
    \ else if lst2[j] % 2 == 0 {\n            lst1[i] = lst2[j]\n            i +=\
    \ 1\n            j += 1\n        } else {\n            j += 1\n        }\n   \
    \ }\n    return lst1.filter { $0 % 2 != 0 }.isEmpty ? \"YES\" : \"NO\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = [Int]()\n    var odds = [Int]()\n    for num\
    \ in lst1 {\n        if num % 2 == 0 {\n            evens.append(num)\n      \
    \  } else {\n            odds.append(num)\n        }\n    }\n    for num in lst2\
    \ {\n        if num % 2 == 0 {\n            evens.append(num)\n        } else\
    \ {\n            odds.append(num)\n        }\n    }\n    if odds.count == 0 {\n\
    \        return \"YES\"\n    } else if evens.count == 0 {\n        return \"NO\"\
    \n    } else {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpjvm469vd/tmpjvm469vd.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad148d29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad148a20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad148a20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad148a1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjvm469vd                        0x000056123af8c8ef <unavailable> + 6383

    5    libc.so.6                          0x00002ad148f15460 __libc_start_main +
    245

    6    tmpjvm469vd                        0x000056123af8c349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    while i < lst1.count {\n        if lst1[i]\
    \ % 2 == 0 {\n            i += 1\n        } else {\n            var j = 0\n  \
    \          while j < lst2.count {\n                if lst2[j] % 2 != 0 {\n   \
    \                 j += 1\n                } else {\n                    lst1[i]\
    \ = lst2[j]\n                    lst2[j] = lst1[i]\n                    break\n\
    \                }\n            }\n            if j == lst2.count {\n        \
    \        return \"NO\"\n            }\n        }\n    }\n    return \"YES\"\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpt66n38aj/tmpt66n38aj.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec3c21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec3918b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec3918988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec39177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt66n38aj                        0x000055935796477f <unavailable> + 6015

    5    libc.so.6                          0x00002b6ec3e0d460 __libc_start_main +
    245

    6    tmpt66n38aj                        0x00005593579641d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    while i < lst1.count {\n        if lst1[i]\
    \ % 2 == 0 {\n            i += 1\n        } else {\n            if let j = lst2.firstIndex(where:\
    \ { $0 % 2 == 0 }) {\n                lst1[i] = lst2[j]\n                lst2.remove(at:\
    \ j)\n            } else {\n                return \"NO\"\n            }\n   \
    \     }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var result = \"NO\"\n    for i in 0..<lst1.count {\n  \
    \      if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n        \
    \        if lst2[j] % 2 != 0 {\n                    lst1[i] = lst2[j]\n      \
    \              lst2[j] = lst1[i]\n                    result = \"YES\"\n     \
    \               break\n                }\n            }\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpwwnbdtos/tmpwwnbdtos.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d57dbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d57ab4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d57ab4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d57ab37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwnbdtos                        0x00005595e4b3487f <unavailable> + 6271

    5    libc.so.6                          0x00002b4d57fa9460 __libc_start_main +
    245

    6    tmpwwnbdtos                        0x00005595e4b342d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    var odds = 0\n    for i in lst1 {\n\
    \        if i % 2 == 0 {\n            evens += 1\n        } else {\n         \
    \   odds += 1\n        }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n\
    \            evens += 1\n        } else {\n            odds += 1\n        }\n\
    \    }\n    if evens % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n   \
    \ } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmprof8uqfm/tmprof8uqfm.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dce2cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dcdfc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dcdfc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dcdfc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprof8uqfm                        0x00005644f3e16b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b0dce4b7460 __libc_start_main +
    245

    6    tmprof8uqfm                        0x00005644f3e16249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -1
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    while i < lst1.count {\n        if lst1[i]\
    \ % 2 == 0 {\n            i += 1\n        } else {\n            var j = 0\n  \
    \          while j < lst2.count {\n                if lst2[j] % 2 != 0 {\n   \
    \                 lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n \
    \                   break\n                }\n                j += 1\n       \
    \     }\n            if j == lst2.count {\n                return \"NO\"\n   \
    \         }\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979320
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n\
    \    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n   \
    \     return \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return\
    \ \"NO\"\n    }\n    if lst2Even.count == lst2.count {\n        return \"NO\"\n\
    \    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n       \
    \     for j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n     \
    \               let temp = lst1[i]\n                    lst1[i] = lst2[j]\n  \
    \                  lst2[j] = temp\n                    break\n               \
    \ }\n            }\n        }\n    }\n    lst1Even = lst1.filter { $0 % 2 == 0\
    \ }\n    if lst1Even.count == lst1.count {\n        return \"YES\"\n    }\n  \
    \  return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp557u8pif/tmp557u8pif.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7c13d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7c10d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7c10d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7c10cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp557u8pif                        0x0000558fdeb4ec67 <unavailable> + 7271

    5    libc.so.6                          0x00002ac7c15c5460 __libc_start_main +
    245

    6    tmp557u8pif                        0x0000558fdeb4e399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n        return\
    \ \"NO\"\n    }\n    for i in 0..<lst1.count {\n        for j in 0..<lst2.count\
    \ {\n            if lst1[i] % 2 != 0 && lst2[j] % 2 == 0 {\n                lst1[i]\
    \ = lst2[j]\n                lst2[j] = lst1[i]\n                lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n                lst2Odd = lst2.filter { $0 % 2 != 0 }\n   \
    \             if lst1Even.count == lst1.count {\n                    return \"\
    YES\"\n                }\n                if lst2Odd.count == lst2.count {\n \
    \                   return \"NO\"\n                }\n            }\n        }\n\
    \    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmppc59_ud7/tmppc59_ud7.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade39713c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade3940ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade3940a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade394097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppc59_ud7                        0x00005622b37ef93f <unavailable> + 6463

    5    libc.so.6                          0x00002ade398ff460 __libc_start_main +
    245

    6    tmppc59_ud7                        0x00005622b37ef399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = [Int]()\n    var odds = [Int]()\n    for i\
    \ in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    for i in lst2 {\n     \
    \   if i % 2 == 0 {\n            evens.append(i)\n        } else {\n         \
    \   odds.append(i)\n        }\n    }\n    if odds.count == 0 {\n        return\
    \ \"YES\"\n    } else if evens.count == 0 {\n        return \"NO\"\n    } else\
    \ {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp6c8bpupq/tmp6c8bpupq.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51a69ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51a66d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51a66d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51a66d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6c8bpupq                        0x000056034c8168ef <unavailable> + 6383

    5    libc.so.6                          0x00002b51a6bc9460 __libc_start_main +
    245

    6    tmp6c8bpupq                        0x000056034c816349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    var odds = 0\n    for i in lst1 {\n\
    \        if i % 2 == 0 {\n            evens += 1\n        } else {\n         \
    \   odds += 1\n        }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n\
    \            evens += 1\n        } else {\n            odds += 1\n        }\n\
    \    }\n    if odds % 2 == 0 {\n        return \"YES\"\n    } else {\n       \
    \ return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpzcniwqf5/tmpzcniwqf5.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab56a23dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab569f34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab569f34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab569f337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcniwqf5                        0x0000558f16887b17 <unavailable> + 6935

    5    libc.so.6                          0x00002ab56a429460 __libc_start_main +
    245

    6    tmpzcniwqf5                        0x0000558f16887249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    for i in 0..<lst1.count {\n        if\
    \ lst1[i] % 2 == 0 {\n            evens += 1\n        }\n    }\n    for i in 0..<lst2.count\
    \ {\n        if lst2[i] % 2 == 0 {\n            evens -= 1\n        }\n    }\n\
    \    return evens == 0 ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp3qe40270/tmp3qe40270.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54ac340c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54ac037b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54ac037988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54ac0367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3qe40270                        0x00005571157dab57 <unavailable> + 6999

    5    libc.so.6                          0x00002b54ac52c460 __libc_start_main +
    245

    6    tmp3qe40270                        0x00005571157da289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    var odds = 0\n    for i in lst1 {\n\
    \        if i % 2 == 0 {\n            evens += 1\n        } else {\n         \
    \   odds += 1\n        }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n\
    \            evens += 1\n        } else {\n            odds += 1\n        }\n\
    \    }\n    if evens % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n   \
    \ } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmprof8uqfm/tmprof8uqfm.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dce2cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dcdfc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dcdfc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dcdfc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprof8uqfm                        0x00005644f3e16b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b0dce4b7460 __libc_start_main +
    245

    6    tmprof8uqfm                        0x00005644f3e16249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = [Int]()\n    var odds = [Int]()\n    for i\
    \ in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    for i in lst2 {\n     \
    \   if i % 2 == 0 {\n            evens.append(i)\n        } else {\n         \
    \   odds.append(i)\n        }\n    }\n    if odds.count % 2 == 0 {\n        return\
    \ \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp5cyqu4ws/tmp5cyqu4ws.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7127350c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7127047b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7127047988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71270467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5cyqu4ws                        0x0000564892e96c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b712753c460 __libc_start_main +
    245

    6    tmp5cyqu4ws                        0x0000564892e96349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var isExchange = false\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    isExchange = true\n  \
    \                  break\n                }\n            }\n        }\n      \
    \  if !isExchange {\n            return \"NO\"\n        }\n    }\n    return \"\
    YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpia0pfih4/tmpia0pfih4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0813aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0810a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0810a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0810a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpia0pfih4                        0x000055f9f1d1687f <unavailable> + 6271

    5    libc.so.6                          0x00002ab081596460 __libc_start_main +
    245

    6    tmpia0pfih4                        0x000055f9f1d162d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    for i in 0..<lst1.count {\n        if\
    \ lst1[i] % 2 == 0 {\n            evens += 1\n        }\n    }\n    for i in 0..<lst2.count\
    \ {\n        if lst2[i] % 2 == 0 {\n            evens -= 1\n        }\n    }\n\
    \    return evens == 0 ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp3qe40270/tmp3qe40270.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54ac340c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54ac037b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54ac037988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54ac0367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3qe40270                        0x00005571157dab57 <unavailable> + 6999

    5    libc.so.6                          0x00002b54ac52c460 __libc_start_main +
    245

    6    tmp3qe40270                        0x00005571157da289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n        return\
    \ \"NO\"\n    }\n    for i in 0..<lst1.count {\n        for j in 0..<lst2.count\
    \ {\n            if lst1[i] % 2 != 0 && lst2[j] % 2 == 0 {\n                lst1[i]\
    \ = lst2[j]\n                lst2[j] = lst1[i]\n                lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n                lst2Odd = lst2.filter { $0 % 2 != 0 }\n   \
    \             if lst1Even.count == lst1.count {\n                    return \"\
    YES\"\n                }\n                if lst2Odd.count == lst2.count {\n \
    \                   return \"NO\"\n                }\n            }\n        }\n\
    \    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmppc59_ud7/tmppc59_ud7.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade39713c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade3940ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade3940a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade394097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppc59_ud7                        0x00005622b37ef93f <unavailable> + 6463

    5    libc.so.6                          0x00002ade398ff460 __libc_start_main +
    245

    6    tmppc59_ud7                        0x00005622b37ef399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n        return\
    \ \"NO\"\n    }\n    var i = 0\n    while i < lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            var j = 0\n            while j < lst2.count {\n    \
    \            if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n  \
    \                  lst2[j] = lst1[i]\n                    lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n                    lst2Odd = lst2.filter { $0 % 2 != 0 }\n\
    \                    if lst1Even.count == lst1.count {\n                     \
    \   return \"YES\"\n                    }\n                    if lst2Odd.count\
    \ == lst2.count {\n                        return \"NO\"\n                   \
    \ }\n                }\n                j += 1\n            }\n        }\n   \
    \     i += 1\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpvhjvd7gm/tmpvhjvd7gm.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6aefddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6aecd4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6aecd4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6aecd37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvhjvd7gm                        0x000056122d34284f <unavailable> + 6223

    5    libc.so.6                          0x00002ad6af1c9460 __libc_start_main +
    245

    6    tmpvhjvd7gm                        0x000056122d3422a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979316
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    let lst1Odd = lst1.filter\
    \ { $0 % 2 != 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    return\
    \ lst1Odd.count == lst2Even.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpy0nj7gpp/tmpy0nj7gpp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1954f6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1954c64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1954c64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1954c637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy0nj7gpp                        0x0000558a86472f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b1955159460 __libc_start_main +
    245

    6    tmpy0nj7gpp                        0x0000558a864721f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -1
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var i = 0\n    var j = 0\n    while i < lst1.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else {\n       \
    \     while j < lst2.count {\n                if lst2[j] % 2 != 0 {\n        \
    \            j += 1\n                } else {\n                    lst1[i] = lst2[j]\n\
    \                    lst2[j] = lst1[i]\n                    i += 1\n         \
    \           j += 1\n                    break\n                }\n           \
    \ }\n        }\n    }\n    return lst1.filter { $0 % 2 != 0 }.isEmpty ? \"YES\"\
    \ : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979321
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var even = 0\n    var odd = 0\n    for i in lst1 {\n  \
    \      if i % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n     \
    \       even += 1\n        } else {\n            odd += 1\n        }\n    }\n\
    \    if even % 2 == 0 && odd % 2 == 0 {\n        return \"YES\"\n    } else {\n\
    \        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpnkai5_g6/tmpnkai5_g6.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc04e69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc04b60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc04b60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc04b5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnkai5_g6                        0x00005560c26dbb17 <unavailable> + 6935

    5    libc.so.6                          0x00002adc05055460 __libc_start_main +
    245

    6    tmpnkai5_g6                        0x00005560c26db249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var isExchange = false\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    isExchange = true\n  \
    \                  break\n                }\n            }\n        }\n      \
    \  if !isExchange {\n            return \"NO\"\n        }\n    }\n    return \"\
    YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpia0pfih4/tmpia0pfih4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0813aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0810a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0810a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0810a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpia0pfih4                        0x000055f9f1d1687f <unavailable> + 6271

    5    libc.so.6                          0x00002ab081596460 __libc_start_main +
    245

    6    tmpia0pfih4                        0x000055f9f1d162d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var result = \"NO\"\n    for i in 0..<lst1.count {\n  \
    \      if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n        \
    \        if lst2[j] % 2 != 0 {\n                    lst1[i] = lst2[j]\n      \
    \              lst2[j] = lst1[i]\n                    result = \"YES\"\n     \
    \               break\n                }\n            }\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpwwnbdtos/tmpwwnbdtos.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d57dbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d57ab4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d57ab4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d57ab37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwnbdtos                        0x00005595e4b3487f <unavailable> + 6271

    5    libc.so.6                          0x00002b4d57fa9460 __libc_start_main +
    245

    6    tmpwwnbdtos                        0x00005595e4b342d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n        return\
    \ \"NO\"\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n\
    \            for j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n\
    \                    lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n\
    \                    lst1Even = lst1.filter { $0 % 2 == 0 }\n                \
    \    lst2Odd = lst2.filter { $0 % 2 != 0 }\n                    if lst1Even.count\
    \ == lst1.count {\n                        return \"YES\"\n                  \
    \  }\n                    if lst2Odd.count == lst2.count {\n                 \
    \       return \"NO\"\n                    }\n                }\n            }\n\
    \        }\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7i68zx1r/tmp7i68zx1r.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b977ce32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b977cb29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b977cb29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b977cb287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7i68zx1r                        0x0000564413a4593f <unavailable> + 6463

    5    libc.so.6                          0x00002b977d01e460 __libc_start_main +
    245

    6    tmp7i68zx1r                        0x0000564413a45399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var evens = 0\n    for i in 0..<lst1.count {\n        if\
    \ lst1[i] % 2 == 0 {\n            evens += 1\n        }\n    }\n    if evens ==\
    \ lst1.count {\n        return \"YES\"\n    }\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    evens += 1\n         \
    \           break\n                }\n            }\n        }\n    }\n    if\
    \ evens == lst1.count {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpld1z48px/tmpld1z48px.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c29b7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c29871b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c29871988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c298707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpld1z48px                        0x000055a87aac987f <unavailable> + 6271

    5    libc.so.6                          0x00002b0c29d66460 __libc_start_main +
    245

    6    tmpld1z48px                        0x000055a87aac92d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979315
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n   \
    \ var lst2 = lst2\n    var lst1Odd = [Int]()\n    var lst2Even = [Int]()\n   \
    \ for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            lst1Odd.append(lst1[i])\n\
    \        }\n    }\n    for i in 0..<lst2.count {\n        if lst2[i] % 2 == 0\
    \ {\n            lst2Even.append(lst2[i])\n        }\n    }\n    if lst1Odd.count\
    \ == lst2Even.count {\n        return \"YES\"\n    } else {\n        return \"\
    NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpzsdvmpkf/tmpzsdvmpkf.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4477faac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4477ca1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4477ca1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4477ca07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzsdvmpkf                        0x000055a03bcd10c6 <unavailable> + 8390

    5    libc.so.6                          0x00002b4478196460 __libc_start_main +
    245

    6    tmpzsdvmpkf                        0x000055a03bcd0329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659979316
