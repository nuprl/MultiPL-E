name: HumanEval_62_derivative
language: swift
prompt: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x +\
  \ xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
  func derivative(xs: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4,\
  \ 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
  \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
  assert(derivative(xs: [1]) == [] as [Int])"
completions: ["    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", '    return xs.enumerated().map { (i, x)
    in i * x }.dropFirst()', "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var xs = xs\n    xs.removeFirst()\n    for i in\
    \ 0..<xs.count {\n        xs[i] *= i + 1\n    }\n    return xs", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var xs\
    \ = xs\n    xs.removeFirst()\n    for i in 0..<xs.count {\n        xs[i] *= i\
    \ + 1\n    }\n    return xs", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for (i, x) in xs.enumerated()\
    \ {\n        if i == 0 {\n            continue\n        }\n        result.append(i\
    \ * x)\n    }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", '    return xs.enumerated().map { (i, x) in i * x }.dropFirst()',
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    return xs.enumerated().map { (i, x)\
    \ in\n        if i == 0 {\n            return 0\n        } else {\n          \
    \  return i * x\n        }\n    }", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", '    return zip(xs, 1...).map { $0.0 * $0.1 }', " \
    \   var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    let n = xs.count\n    var ys = [Int](count: n - 1, repeatedValue: 0)\n    for\
    \ i in 1..<n {\n        ys[i - 1] = xs[i] * i\n    }\n    return ys", "    var\
    \ dxs = [Int]()\n    for i in 1..<xs.count {\n        dxs.append(i * xs[i])\n\
    \    }\n    return dxs", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result"]
stop_tokens:
- "\n}"
