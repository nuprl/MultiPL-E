language: swift
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt11pnt73.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt11pnt73.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(x:\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgtavl8ub.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !is_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwoonrmb_.swift:9:13: error: cannot find 'is_even_digit' in scope\n\
    \        if !is_even_digit(i) {\n            ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpzoggeq45.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for number in x {\n        if !has_even_digit(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpuwocwrtf.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(number) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 0
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        var hasEven\
    \ = false\n        var num = i\n        while num > 0 {\n            if num %\
    \ 2 == 0 {\n                hasEven = true\n                break\n          \
    \  }\n            num /= 10\n        }\n        if !hasEven {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt11pnt73.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !is_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwoonrmb_.swift:9:13: error: cannot find 'is_even_digit' in scope\n\
    \        if !is_even_digit(i) {\n            ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !i.has_even_digit()\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp6dl8hea2.swift:9:15: error: value of type 'Int' has no member 'has_even_digit'\n\
    \        if !i.has_even_digit() {\n            ~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.description.filter({$0.isEven}).count\
    \ == 0 {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpr8sh8wyu.swift:9:37: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isEven'\n        if i.description.filter({$0.isEven}).count\
    \ == 0 {\n                                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for num in x {\n        if !has_even_digit(num:\
    \ num) {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp72mt_026.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.description.filter({$0.isEven}).count\
    \ == 0 {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpr8sh8wyu.swift:9:37: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isEven'\n        if i.description.filter({$0.isEven}).count\
    \ == 0 {\n                                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp81fwuv0_.swift:7:26: error: value of type 'Int' has no member 'digits'\n\
    \    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n        \
    \              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 0
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    return x.filter {\n        $0.description.filter {\n       \
    \     $0.isNumber && $0.wholeNumberValue! % 2 == 1\n        }.count == $0.description.count\n\
    \    }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978493
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !i.description.contains(\"\
    2\") && !i.description.contains(\"4\") && !i.description.contains(\"6\") && !i.description.contains(\"\
    8\") {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpnz3oyp_f/tmpnz3oyp_f.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e4182dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e41524b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e41524988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e415237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnz3oyp_f                        0x0000563b7089e9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002b3e41a19460 __libc_start_main +
    245

    6    tmpnz3oyp_f                        0x0000563b7089e4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !contains_even_digit(x:\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpelvcbji_.swift:9:13: error: cannot find 'contains_even_digit' in\
    \ scope\n        if !contains_even_digit(x: i) {\n            ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt11pnt73.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.digits.filter({\
    \ $0 % 2 == 0 }).count == 0 {\n            result.append(i)\n        }\n    }\n\
    \    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgtweh5fv.swift:9:14: error: value of type 'Int' has no member 'digits'\n\
    \        if i.digits.filter({ $0 % 2 == 0 }).count == 0 {\n           ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.description.contains(\"\
    2\") || i.description.contains(\"4\") || i.description.contains(\"6\") || i.description.contains(\"\
    8\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpn25bkq5i/tmpn25bkq5i.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab66a593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab66a28ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab66a28a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab66a2897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn25bkq5i                        0x00005595f872b9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002ab66a77f460 __libc_start_main +
    245

    6    tmpn25bkq5i                        0x00005595f872b4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt11pnt73.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !i.has_even_digit()\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp6dl8hea2.swift:9:15: error: value of type 'Int' has no member 'has_even_digit'\n\
    \        if !i.has_even_digit() {\n            ~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if num.description.contains(\"\
    2\") || num.description.contains(\"4\") || num.description.contains(\"6\") ||\
    \ num.description.contains(\"8\") {\n            continue\n        } else {\n\
    \            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp0iopr54b/tmp0iopr54b.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad14cd89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad14ca80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad14ca80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad14ca7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0iopr54b                        0x000055b9565d99e4 <unavailable> + 6628

    5    libc.so.6                          0x00002ad14cf75460 __libc_start_main +
    245

    6    tmp0iopr54b                        0x000055b9565d94d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.digits.filter({$0\
    \ % 2 == 0}).count == 0 {\n            result.append(i)\n        }\n    }\n  \
    \  return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpxikwy5gl.swift:9:14: error: value of type 'Int' has no member 'digits'\n\
    \        if i.digits.filter({$0 % 2 == 0}).count == 0 {\n           ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt11pnt73.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if num.has_even_digit()\
    \ {\n            continue\n        }\n        result.append(num)\n    }\n    return\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmprct6ke3r.swift:9:16: error: value of type 'Int' has no member 'has_even_digit'\n\
    \        if num.has_even_digit() {\n           ~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.digits.filter({\
    \ $0 % 2 == 0 }).count == 0 {\n            result.append(i)\n        }\n    }\n\
    \    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgtweh5fv.swift:9:14: error: value of type 'Int' has no member 'digits'\n\
    \        if i.digits.filter({ $0 % 2 == 0 }).count == 0 {\n           ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for i in x {\n        if is_unique_digits(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpepyqhhud.swift:9:12: error: cannot find 'is_unique_digits' in scope\n\
    \        if is_unique_digits(i) {\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !i.description.contains(\"\
    2\") && !i.description.contains(\"4\") && !i.description.contains(\"6\") && !i.description.contains(\"\
    8\") {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpnz3oyp_f/tmpnz3oyp_f.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e4182dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e41524b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e41524988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e415237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnz3oyp_f                        0x0000563b7089e9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002b3e41a19460 __libc_start_main +
    245

    6    tmpnz3oyp_f                        0x0000563b7089e4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659978493
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.description.contains(\"\
    2\") || i.description.contains(\"4\") || i.description.contains(\"6\") || i.description.contains(\"\
    8\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpn25bkq5i/tmpn25bkq5i.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab66a593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab66a28ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab66a28a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab66a2897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn25bkq5i                        0x00005595f872b9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002ab66a77f460 __libc_start_main +
    245

    6    tmpn25bkq5i                        0x00005595f872b4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for i in x {\n        if !has_even_digit(x:\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpui_6haba.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.description.contains(\"\
    2\") || i.description.contains(\"4\") || i.description.contains(\"6\") || i.description.contains(\"\
    8\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpn25bkq5i/tmpn25bkq5i.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab66a593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab66a28ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab66a28a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab66a2897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn25bkq5i                        0x00005595f872b9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002ab66a77f460 __libc_start_main +
    245

    6    tmpn25bkq5i                        0x00005595f872b4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.description.contains(\"\
    2\") || i.description.contains(\"4\") || i.description.contains(\"6\") || i.description.contains(\"\
    8\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpn25bkq5i/tmpn25bkq5i.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab66a593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab66a28ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab66a28a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab66a2897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn25bkq5i                        0x00005595f872b9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002ab66a77f460 __libc_start_main +
    245

    6    tmpn25bkq5i                        0x00005595f872b4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if num.digits.filter({$0\
    \ % 2 == 0}).count == 0 {\n            result.append(num)\n        }\n    }\n\
    \    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwlj1xb2o.swift:9:16: error: value of type 'Int' has no member 'digits'\n\
    \        if num.digits.filter({$0 % 2 == 0}).count == 0 {\n           ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 0
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.description.filter({$0.isNumber\
    \ && $0.wholeNumberValue! % 2 == 1}).count == i.description.count {\n        \
    \    result.append(i)\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(x:\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgtavl8ub.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 0
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        var hasEven\
    \ = false\n        var num = i\n        while num > 0 {\n            if num %\
    \ 2 == 0 {\n                hasEven = true\n                break\n          \
    \  }\n            num /= 10\n        }\n        if !hasEven {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.digits.filter({\
    \ $0 % 2 == 0 }).count == 0 {\n            result.append(i)\n        }\n    }\n\
    \    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgtweh5fv.swift:9:14: error: value of type 'Int' has no member 'digits'\n\
    \        if i.digits.filter({ $0 % 2 == 0 }).count == 0 {\n           ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpzoggeq45.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt11pnt73.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.description.rangeOfCharacter(from:\
    \ CharacterSet(charactersIn: \"02468\")) == nil {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqdpuhvbw.swift:9:49: error: cannot find 'CharacterSet' in scope\n\
    \        if i.description.rangeOfCharacter(from: CharacterSet(charactersIn: \"\
    02468\")) == nil {\n                                                ^~~~~~~~~~~~\n\
    /tmp/tmpqdpuhvbw.swift:9:26: error: value of type 'String' has no member 'rangeOfCharacter'\n\
    \        if i.description.rangeOfCharacter(from: CharacterSet(charactersIn: \"\
    02468\")) == nil {\n           ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp81fwuv0_.swift:7:26: error: value of type 'Int' has no member 'digits'\n\
    \    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n        \
    \              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt11pnt73.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    return x.filter { $0.digits.filter { $0 % 2 == 0 }.isEmpty }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp2xgic01e.swift:7:26: error: value of type 'Int' has no member 'digits'\n\
    \    return x.filter { $0.digits.filter { $0 % 2 == 0 }.isEmpty }.sorted()\n \
    \                     ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt11pnt73.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp81fwuv0_.swift:7:26: error: value of type 'Int' has no member 'digits'\n\
    \    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n        \
    \              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.has_even_digit()\
    \ {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmprkn5h60o.swift:9:14: error: value of type 'Int' has no member 'has_even_digit'\n\
    \        if i.has_even_digit() {\n           ~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt11pnt73.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp81fwuv0_.swift:7:26: error: value of type 'Int' has no member 'digits'\n\
    \    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n        \
    \              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt11pnt73.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt11pnt73.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.has_even_digit()\
    \ {\n            continue\n        }\n        result.append(i)\n    }\n    return\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpvyqh5_vy.swift:9:14: error: value of type 'Int' has no member 'has_even_digit'\n\
    \        if i.has_even_digit() {\n           ~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for num in x {\n        if num.digits.filter({\
    \ $0 % 2 == 0 }).count == 0 {\n            result.append(num)\n        }\n   \
    \ }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppv58m134.swift:9:16: error: value of type 'Int' has no member 'digits'\n\
    \        if num.digits.filter({ $0 % 2 == 0 }).count == 0 {\n           ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt11pnt73.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if num.description.rangeOfCharacter(from:\
    \ CharacterSet(charactersIn: \"02468\")) == nil {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpdwrnbu4f.swift:9:51: error: cannot find 'CharacterSet' in scope\n\
    \        if num.description.rangeOfCharacter(from: CharacterSet(charactersIn:\
    \ \"02468\")) == nil {\n                                                  ^~~~~~~~~~~~\n\
    /tmp/tmpdwrnbu4f.swift:9:28: error: value of type 'String' has no member 'rangeOfCharacter'\n\
    \        if num.description.rangeOfCharacter(from: CharacterSet(charactersIn:\
    \ \"02468\")) == nil {\n           ~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt11pnt73.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt11pnt73.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if num.digits.filter({$0\
    \ % 2 == 0}).count == 0 {\n            result.append(num)\n        }\n    }\n\
    \    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwlj1xb2o.swift:9:16: error: value of type 'Int' has no member 'digits'\n\
    \        if num.digits.filter({$0 % 2 == 0}).count == 0 {\n           ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp81fwuv0_.swift:7:26: error: value of type 'Int' has no member 'digits'\n\
    \    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n        \
    \              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.description.rangeOfCharacter(from:\
    \ CharacterSet(charactersIn: \"02468\")) == nil {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqdpuhvbw.swift:9:49: error: cannot find 'CharacterSet' in scope\n\
    \        if i.description.rangeOfCharacter(from: CharacterSet(charactersIn: \"\
    02468\")) == nil {\n                                                ^~~~~~~~~~~~\n\
    /tmp/tmpqdpuhvbw.swift:9:26: error: value of type 'String' has no member 'rangeOfCharacter'\n\
    \        if i.description.rangeOfCharacter(from: CharacterSet(charactersIn: \"\
    02468\")) == nil {\n           ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.description.contains(\"\
    2\") || i.description.contains(\"4\") || i.description.contains(\"6\") || i.description.contains(\"\
    8\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpn25bkq5i/tmpn25bkq5i.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab66a593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab66a28ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab66a28a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab66a2897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn25bkq5i                        0x00005595f872b9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002ab66a77f460 __libc_start_main +
    245

    6    tmpn25bkq5i                        0x00005595f872b4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if num.has_even_digit()\
    \ {\n            continue\n        }\n        result.append(num)\n    }\n    return\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmprct6ke3r.swift:9:16: error: value of type 'Int' has no member 'has_even_digit'\n\
    \        if num.has_even_digit() {\n           ~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt11pnt73.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.has_even_digit()\
    \ {\n            continue\n        }\n        result.append(i)\n    }\n    return\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpvyqh5_vy.swift:9:14: error: value of type 'Int' has no member 'has_even_digit'\n\
    \        if i.has_even_digit() {\n           ~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.description.contains(\"\
    2\") || i.description.contains(\"4\") || i.description.contains(\"6\") || i.description.contains(\"\
    8\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpn25bkq5i/tmpn25bkq5i.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab66a593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab66a28ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab66a28a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab66a2897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn25bkq5i                        0x00005595f872b9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002ab66a77f460 __libc_start_main +
    245

    6    tmpn25bkq5i                        0x00005595f872b4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !i.hasEvenDigit()\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp2adl9xyk.swift:9:15: error: value of type 'Int' has no member 'hasEvenDigit'\n\
    \        if !i.hasEvenDigit() {\n            ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp81fwuv0_.swift:7:26: error: value of type 'Int' has no member 'digits'\n\
    \    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n        \
    \              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 0
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        var isEven =\
    \ false\n        var num = i\n        while num > 0 {\n            if num % 2\
    \ == 0 {\n                isEven = true\n                break\n            }\n\
    \            num /= 10\n        }\n        if !isEven {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978493
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.description.contains(\"\
    2\") || i.description.contains(\"4\") || i.description.contains(\"6\") || i.description.contains(\"\
    8\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpn25bkq5i/tmpn25bkq5i.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab66a593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab66a28ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab66a28a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab66a2897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn25bkq5i                        0x00005595f872b9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002ab66a77f460 __libc_start_main +
    245

    6    tmpn25bkq5i                        0x00005595f872b4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt11pnt73.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if num.description.contains(\"\
    2\") || num.description.contains(\"4\") || num.description.contains(\"6\") ||\
    \ num.description.contains(\"8\") {\n            continue\n        } else {\n\
    \            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp0iopr54b/tmp0iopr54b.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad14cd89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad14ca80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad14ca80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad14ca7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0iopr54b                        0x000055b9565d99e4 <unavailable> + 6628

    5    libc.so.6                          0x00002ad14cf75460 __libc_start_main +
    245

    6    tmp0iopr54b                        0x000055b9565d94d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.description.contains(\"\
    2\") || i.description.contains(\"4\") || i.description.contains(\"6\") || i.description.contains(\"\
    8\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpn25bkq5i/tmpn25bkq5i.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab66a593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab66a28ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab66a28a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab66a2897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn25bkq5i                        0x00005595f872b9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002ab66a77f460 __libc_start_main +
    245

    6    tmpn25bkq5i                        0x00005595f872b4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.description.contains(\"\
    2\") || i.description.contains(\"4\") || i.description.contains(\"6\") || i.description.contains(\"\
    8\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpn25bkq5i/tmpn25bkq5i.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab66a593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab66a28ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab66a28a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab66a2897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn25bkq5i                        0x00005595f872b9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002ab66a77f460 __libc_start_main +
    245

    6    tmpn25bkq5i                        0x00005595f872b4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.digits.filter({$0\
    \ % 2 == 0}).count == 0 {\n            result.append(i)\n        }\n    }\n  \
    \  return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpxikwy5gl.swift:9:14: error: value of type 'Int' has no member 'digits'\n\
    \        if i.digits.filter({$0 % 2 == 0}).count == 0 {\n           ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.description.contains(\"\
    2\") || i.description.contains(\"4\") || i.description.contains(\"6\") || i.description.contains(\"\
    8\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpn25bkq5i/tmpn25bkq5i.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab66a593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab66a28ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab66a28a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab66a2897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn25bkq5i                        0x00005595f872b9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002ab66a77f460 __libc_start_main +
    245

    6    tmpn25bkq5i                        0x00005595f872b4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.description.rangeOfCharacter(from:\
    \ CharacterSet(charactersIn: \"02468\")) == nil {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqdpuhvbw.swift:9:49: error: cannot find 'CharacterSet' in scope\n\
    \        if i.description.rangeOfCharacter(from: CharacterSet(charactersIn: \"\
    02468\")) == nil {\n                                                ^~~~~~~~~~~~\n\
    /tmp/tmpqdpuhvbw.swift:9:26: error: value of type 'String' has no member 'rangeOfCharacter'\n\
    \        if i.description.rangeOfCharacter(from: CharacterSet(charactersIn: \"\
    02468\")) == nil {\n           ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpzoggeq45.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp81fwuv0_.swift:7:26: error: value of type 'Int' has no member 'digits'\n\
    \    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n        \
    \              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for i in x {\n        if !contains_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpx4kmyxf3.swift:9:13: error: cannot find 'contains_even_digit' in\
    \ scope\n        if !contains_even_digit(i) {\n            ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpzoggeq45.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for i in x {\n        if i.description.contains(\"\
    2\") || i.description.contains(\"4\") || i.description.contains(\"6\") || i.description.contains(\"\
    8\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp117wtcqa/tmp117wtcqa.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bb569cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bb5393b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bb5393988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bb53927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp117wtcqa                        0x000055fb0df37984 <unavailable> + 6532

    5    libc.so.6                          0x00002b0bb5888460 __libc_start_main +
    245

    6    tmp117wtcqa                        0x000055fb0df37479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt11pnt73.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 0
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.description.filter({$0.isNumber\
    \ && $0.wholeNumberValue! % 2 == 1}).count == i.description.count {\n        \
    \    result.append(i)\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt11pnt73.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt11pnt73.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(x:\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgtavl8ub.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt11pnt73.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(x:\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgtavl8ub.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if num.digits.filter({\
    \ $0 % 2 == 0 }).count == 0 {\n            result.append(num)\n        }\n   \
    \ }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpz04kfdsv.swift:9:16: error: value of type 'Int' has no member 'digits'\n\
    \        if num.digits.filter({ $0 % 2 == 0 }).count == 0 {\n           ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if num.hasEvenDigit()\
    \ {\n            continue\n        }\n        result.append(num)\n    }\n    return\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpn96t2wf_.swift:9:16: error: value of type 'Int' has no member 'hasEvenDigit'\n\
    \        if num.hasEvenDigit() {\n           ~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.description.contains(\"\
    2\") || i.description.contains(\"4\") || i.description.contains(\"6\") || i.description.contains(\"\
    8\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpn25bkq5i/tmpn25bkq5i.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab66a593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab66a28ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab66a28a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab66a2897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn25bkq5i                        0x00005595f872b9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002ab66a77f460 __libc_start_main +
    245

    6    tmpn25bkq5i                        0x00005595f872b4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if has_even_digit(num:\
    \ num) {\n            result.append(num)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmprylgx8_c.swift:9:12: error: cannot find 'has_even_digit' in scope\n\
    \        if has_even_digit(num: num) {\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt11pnt73.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp81fwuv0_.swift:7:26: error: value of type 'Int' has no member 'digits'\n\
    \    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n        \
    \              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.has_even_digit()\
    \ {\n            continue\n        }\n        result.append(i)\n    }\n    return\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpvyqh5_vy.swift:9:14: error: value of type 'Int' has no member 'has_even_digit'\n\
    \        if i.has_even_digit() {\n           ~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.has_even_digit()\
    \ {\n            continue\n        }\n        result.append(i)\n    }\n    return\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpvyqh5_vy.swift:9:14: error: value of type 'Int' has no member 'has_even_digit'\n\
    \        if i.has_even_digit() {\n           ~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt11pnt73.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !i.description.contains(\"\
    2\") && !i.description.contains(\"4\") && !i.description.contains(\"6\") && !i.description.contains(\"\
    8\") {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpnz3oyp_f/tmpnz3oyp_f.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e4182dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e41524b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e41524988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e415237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnz3oyp_f                        0x0000563b7089e9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002b3e41a19460 __libc_start_main +
    245

    6    tmpnz3oyp_f                        0x0000563b7089e4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.has_even_digit()\
    \ {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmprkn5h60o.swift:9:14: error: value of type 'Int' has no member 'has_even_digit'\n\
    \        if i.has_even_digit() {\n           ~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt11pnt73.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if is_unique_digits(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpzxlvucxx.swift:9:12: error: cannot find 'is_unique_digits' in scope\n\
    \        if is_unique_digits(i) {\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt11pnt73.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.description.contains(\"\
    2\") || i.description.contains(\"4\") || i.description.contains(\"6\") || i.description.contains(\"\
    8\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpn25bkq5i/tmpn25bkq5i.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab66a593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab66a28ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab66a28a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab66a2897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn25bkq5i                        0x00005595f872b9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002ab66a77f460 __libc_start_main +
    245

    6    tmpn25bkq5i                        0x00005595f872b4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659978493
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !i.description.contains(\"\
    2\") && !i.description.contains(\"4\") && !i.description.contains(\"6\") && !i.description.contains(\"\
    8\") {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpnz3oyp_f/tmpnz3oyp_f.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e4182dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e41524b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e41524988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e415237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnz3oyp_f                        0x0000563b7089e9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002b3e41a19460 __libc_start_main +
    245

    6    tmpnz3oyp_f                        0x0000563b7089e4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp81fwuv0_.swift:7:26: error: value of type 'Int' has no member 'digits'\n\
    \    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n        \
    \              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt11pnt73.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpzoggeq45.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !is_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwoonrmb_.swift:9:13: error: cannot find 'is_even_digit' in scope\n\
    \        if !is_even_digit(i) {\n            ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for num in x {\n        if !has_even_digit(num:\
    \ num) {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp72mt_026.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(x:\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgtavl8ub.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if i.description.contains(\"\
    2\") || i.description.contains(\"4\") || i.description.contains(\"6\") || i.description.contains(\"\
    8\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpn25bkq5i/tmpn25bkq5i.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab66a593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab66a28ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab66a28a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab66a2897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn25bkq5i                        0x00005595f872b9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002ab66a77f460 __libc_start_main +
    245

    6    tmpn25bkq5i                        0x00005595f872b4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(n:\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpf_toyy4a.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(n: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\nfunc unique_digits(x: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppnh_em2z.swift:9:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
