language: swift
name: HumanEval_149_sorted_list_sum
results:
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_lst:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   new_lst.append(i)\n        }\n    }\n    return new_lst.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpagl3d8rg/tmpagl3d8rg.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b842a02ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8429d21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8429d21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8429d207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpagl3d8rg                        0x0000556dfdb5c5fb <unavailable> + 9723

    5    libc.so.6                          0x00002b842a216460 __libc_start_main +
    245

    6    tmpagl3d8rg                        0x0000556dfdb5b419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter({$0.count\
    \ % 2 == 0}).sorted(by: {$0.count < $1.count})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpgnqq4lx0/tmpgnqq4lx0.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe39fe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe39cd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe39cd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe39cd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgnqq4lx0                        0x000056110b8b1dbf <unavailable> + 7615

    5    libc.so.6                          0x00002afe3a1cc460 __libc_start_main +
    245

    6    tmpgnqq4lx0                        0x000056110b8b12e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for item in lst {\n        if item.count % 2 == 0 {\n    \
    \        result.append(item)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp6kgw67sg/tmp6kgw67sg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b090e3ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b090e0e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b090e0e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b090e0e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6kgw67sg                        0x000056302ad5c6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b090e5d8460 __libc_start_main +
    245

    6    tmp6kgw67sg                        0x000056302ad5b4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var lst_sorted: [String] = []\n    var lst_sorted_2: [String] = []\n    var\
    \ lst_sorted_3: [String] = []\n    var lst_sorted_4: [String] = []\n    var lst_sorted_5:\
    \ [String] = []\n    var lst_sorted_6: [String] = []\n    var lst_sorted_7: [String]\
    \ = []\n    var lst_sorted_8: [String] = []\n    var lst_sorted_9: [String] =\
    \ []\n    var lst_sorted_10: [String] = []\n    var lst_sorted_11: [String] =\
    \ []\n    var lst_sorted_12: [String] = []\n    var lst_sorted_13: [String] =\
    \ []\n    var lst_sorted_14: [String] = []\n    var lst_sorted_15: [String] =\
    \ []\n    var lst_sorted_16: [String] = []\n    var lst_sorted_17: [String] =\
    \ []\n    var lst_sorted_18: [String] = []\n    var lst_sorted_19: [String] =\
    \ []\n    var lst_sorted_20: [String] = []\n    var lst_sorted_21: [String] =\
    \ []\n    var lst_sorted_22: [String] = []\n    var lst_sorted_23: [String] =\
    \ []\n    var lst_sorted_24: [String] = []\n    var lst_sorted_25: [String] =\
    \ []\n    var lst_sorted_26: [String] = []\n    var lst_sorted_27: [String] =\
    \ []\n    var lst_sorted_28: [String] = []\n    var lst_sorted_29: [String] =\
    \ []\n    var lst_sorted_30: [String] = []\n    var lst_sorted_31: [String] =\
    \ []\n    var lst_sorted_32\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmphmhbotkk.swift:46:9: error: type annotation missing in pattern\n\
    \    var lst_sorted_32\n        ^\n"
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for item in lst {\n        if item.count % 2 == 0 {\n   \
    \         result.append(item)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpf_9pwtqb/tmpf_9pwtqb.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b272cef7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b272cbeeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b272cbee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b272cbed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf_9pwtqb                        0x0000555bf781f67b <unavailable> + 9851

    5    libc.so.6                          0x00002b272d0e3460 __libc_start_main +
    245

    6    tmpf_9pwtqb                        0x0000555bf781e499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_lst:\
    \ [String] = []\n    for item in lst {\n        if item.count % 2 == 0 {\n   \
    \         new_lst.append(item)\n        }\n    }\n    new_lst.sort()\n    return\
    \ new_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpe5afnxl7/tmpe5afnxl7.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ff9b9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ff9896b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ff9896988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ff98957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe5afnxl7                        0x00005588127e367b <unavailable> + 9851

    5    libc.so.6                          0x00002b7ff9d8b460 __libc_start_main +
    245

    6    tmpe5afnxl7                        0x00005588127e2499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    for i in lst {\n        if i.count % 2 != 0 {\n            lst.removeAll(where:\
    \ { $0 == i })\n        }\n    }\n    lst.sort(by: { $0.count < $1.count })\n\
    \    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpekx9kj_5/tmpekx9kj_5.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49f8561c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49f8258b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49f8258988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49f82577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekx9kj_5                        0x000055d291dc7fbf <unavailable> + 8127

    5    libc.so.6                          0x00002b49f874d460 __libc_start_main +
    245

    6    tmpekx9kj_5                        0x000055d291dc74e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_list:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   new_list.append(i)\n        }\n    }\n    new_list.sort()\n    return new_list\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpk45h6dmg/tmpk45h6dmg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15ae822c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15ae519b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15ae519988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15ae5187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk45h6dmg                        0x000056225aeba67b <unavailable> + 9851

    5    libc.so.6                          0x00002b15aea0e460 __libc_start_main +
    245

    6    tmpk45h6dmg                        0x000056225aeb9499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    for i in 0..<lst.count {\n        if lst[i].count % 2 != 0 {\n          \
    \  lst.remove(at: i)\n        }\n    }\n    return lst.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b35d53fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35d50f3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b35d50f3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b35d50f313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b35d50f2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b35d4ef4fc3 <unavailable> + 188355

    6    tmponazrp5b                        0x0000556e80e607b5 <unavailable> + 10165

    7    tmponazrp5b                        0x0000556e80e5f7cd <unavailable> + 6093

    8    libc.so.6                          0x00002b35d55e8460 __libc_start_main +
    245

    9    tmponazrp5b                        0x0000556e80e5f449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp_ellzt5j/tmp_ellzt5j.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf284ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf281d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf281d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf281d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ellzt5j                        0x000055b74225d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002aaf286c9460 __libc_start_main +
    245

    6    tmp_ellzt5j                        0x000055b74225c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    return lst.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpsu1mp0ye/tmpsu1mp0ye.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b837d845c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b837d53cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b837d53c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b837d53b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsu1mp0ye                        0x0000556fd439a53b <unavailable> + 9531

    5    libc.so.6                          0x00002b837da31460 __libc_start_main +
    245

    6    tmpsu1mp0ye                        0x0000556fd4399359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_lst\
    \ = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n          \
    \  new_lst.append(i)\n        }\n    }\n    new_lst.sort()\n    return new_lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpgsouqz_n/tmpgsouqz_n.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04ed077c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04ecd6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04ecd6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04ecd6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgsouqz_n                        0x000056358eb966cb <unavailable> + 9931

    5    libc.so.6                          0x00002b04ed263460 __libc_start_main +
    245

    6    tmpgsouqz_n                        0x000056358eb954e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for item in lst {\n        if item.count % 2 == 0 {\n   \
    \         result.append(item)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpf_9pwtqb/tmpf_9pwtqb.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b272cef7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b272cbeeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b272cbee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b272cbed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf_9pwtqb                        0x0000555bf781f67b <unavailable> + 9851

    5    libc.so.6                          0x00002b272d0e3460 __libc_start_main +
    245

    6    tmpf_9pwtqb                        0x0000555bf781e499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n          \
    \  result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt0t56a0q/tmpt0t56a0q.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acaf44bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acaf41b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acaf41b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acaf41b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt0t56a0q                        0x00005579264406cb <unavailable> + 9931

    5    libc.so.6                          0x00002acaf46a9460 __libc_start_main +
    245

    6    tmpt0t56a0q                        0x000055792643f4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n          \
    \  result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt0t56a0q/tmpt0t56a0q.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acaf44bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acaf41b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acaf41b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acaf41b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt0t56a0q                        0x00005579264406cb <unavailable> + 9931

    5    libc.so.6                          0x00002acaf46a9460 __libc_start_main +
    245

    6    tmpt0t56a0q                        0x000055792643f4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    for i in 0..<lst.count {\n        if lst[i].count % 2 != 0 {\n          \
    \  lst.remove(at: i)\n        }\n    }\n    return lst.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b35d53fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35d50f3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b35d50f3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b35d50f313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b35d50f2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b35d4ef4fc3 <unavailable> + 188355

    6    tmponazrp5b                        0x0000556e80e607b5 <unavailable> + 10165

    7    tmponazrp5b                        0x0000556e80e5f7cd <unavailable> + 6093

    8    libc.so.6                          0x00002b35d55e8460 __libc_start_main +
    245

    9    tmponazrp5b                        0x0000556e80e5f449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n          \
    \  result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt0t56a0q/tmpt0t56a0q.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acaf44bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acaf41b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acaf41b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acaf41b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt0t56a0q                        0x00005579264406cb <unavailable> + 9931

    5    libc.so.6                          0x00002acaf46a9460 __libc_start_main +
    245

    6    tmpt0t56a0q                        0x000055792643f4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: 0
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst_sorted\
    \ = lst.sorted {\n        if $0.count == $1.count {\n            return $0 < $1\n\
    \        }\n        return $0.count < $1.count\n    }\n    lst_sorted = lst_sorted.filter\
    \ { $0.count % 2 == 0 }\n    return lst_sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n    \
    \        result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpilched18/tmpilched18.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7a4920c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7a4617b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7a4617988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7a46167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpilched18                        0x000055c75e7746cb <unavailable> + 9931

    5    libc.so.6                          0x00002ba7a4b0c460 __libc_start_main +
    245

    6    tmpilched18                        0x000055c75e7734e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n    \
    \        result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpilched18/tmpilched18.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7a4920c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7a4617b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7a4617988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7a46167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpilched18                        0x000055c75e7746cb <unavailable> + 9931

    5    libc.so.6                          0x00002ba7a4b0c460 __libc_start_main +
    245

    6    tmpilched18                        0x000055c75e7734e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort { $0.count < $1.count\
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpf1w676je/tmpf1w676je.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b068c43bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b068c132b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b068c132988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b068c1317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf1w676je                        0x0000556126179ebf <unavailable> + 7871

    5    libc.so.6                          0x00002b068c627460 __libc_start_main +
    245

    6    tmpf1w676je                        0x00005561261793e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: 0
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let lst = lst.filter\
    \ { $0.count % 2 == 0 }\n    return lst.sorted {\n        if $0.count == $1.count\
    \ {\n            return $0 < $1\n        }\n        return $0.count < $1.count\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    return lst.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpsu1mp0ye/tmpsu1mp0ye.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b837d845c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b837d53cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b837d53c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b837d53b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsu1mp0ye                        0x0000556fd439a53b <unavailable> + 9531

    5    libc.so.6                          0x00002b837da31460 __libc_start_main +
    245

    6    tmpsu1mp0ye                        0x0000556fd4399359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_lst\
    \ = lst\n    var i = 0\n    while i < new_lst.count {\n        if new_lst[i].count\
    \ % 2 == 1 {\n            new_lst.remove(at: i)\n        } else {\n          \
    \  i += 1\n        }\n    }\n    new_lst.sort()\n    return new_lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp0u3bk9ph/tmp0u3bk9ph.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad37dcb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad37d9adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad37d9ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad37d9ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0u3bk9ph                        0x0000556076b655bb <unavailable> + 9659

    5    libc.so.6                          0x00002ad37dea2460 __libc_start_main +
    245

    6    tmp0u3bk9ph                        0x0000556076b643d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for item in lst {\n        if item.count % 2 == 0 {\n   \
    \         result.append(item)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpf_9pwtqb/tmpf_9pwtqb.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b272cef7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b272cbeeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b272cbee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b272cbed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf_9pwtqb                        0x0000555bf781f67b <unavailable> + 9851

    5    libc.so.6                          0x00002b272d0e3460 __libc_start_main +
    245

    6    tmpf_9pwtqb                        0x0000555bf781e499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for word in lst {\n        if word.count % 2 == 0 {\n   \
    \         result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp5hyurhoa/tmp5hyurhoa.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1c9d97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1c9a8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1c9a8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1c9a8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hyurhoa                        0x000055f9a9a5167b <unavailable> + 9851

    5    libc.so.6                          0x00002ab1c9f83460 __libc_start_main +
    245

    6    tmp5hyurhoa                        0x000055f9a9a50499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for item in lst {\n        if item.count % 2 == 0 {\n    \
    \        result.append(item)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp6kgw67sg/tmp6kgw67sg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b090e3ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b090e0e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b090e0e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b090e0e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6kgw67sg                        0x000056302ad5c6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b090e5d8460 __libc_start_main +
    245

    6    tmp6kgw67sg                        0x000056302ad5b4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpqlqn3fvg/tmpqlqn3fvg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1500185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14ffe7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14ffe7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14ffe7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqlqn3fvg                        0x0000559438fae67b <unavailable> + 9851

    5    libc.so.6                          0x00002b1500371460 __libc_start_main +
    245

    6    tmpqlqn3fvg                        0x0000559438fad499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for str in lst {\n        if str.count % 2 == 0 {\n      \
    \      result.append(str)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpzb7k_vak/tmpzb7k_vak.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b98540c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b98237b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b98237988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b982367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzb7k_vak                        0x000055e21d4196cb <unavailable> + 9931

    5    libc.so.6                          0x00002b6b9872c460 __libc_start_main +
    245

    6    tmpzb7k_vak                        0x000055e21d4184e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp_ellzt5j/tmp_ellzt5j.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf284ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf281d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf281d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf281d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ellzt5j                        0x000055b74225d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002aaf286c9460 __libc_start_main +
    245

    6    tmp_ellzt5j                        0x000055b74225c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_lst\
    \ = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n          \
    \  new_lst.append(i)\n        }\n    }\n    return new_lst.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp29eek9fo/tmp29eek9fo.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0a8d5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0a8a52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0a8a52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0a8a517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp29eek9fo                        0x0000561f185cf64b <unavailable> + 9803

    5    libc.so.6                          0x00002af0a8f47460 __libc_start_main +
    245

    6    tmp29eek9fo                        0x0000561f185ce469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n          \
    \  result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt0t56a0q/tmpt0t56a0q.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acaf44bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acaf41b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acaf41b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acaf41b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt0t56a0q                        0x00005579264406cb <unavailable> + 9931

    5    libc.so.6                          0x00002acaf46a9460 __libc_start_main +
    245

    6    tmpt0t56a0q                        0x000055792643f4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for word in lst {\n        if word.count % 2 == 0 {\n   \
    \         result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp5hyurhoa/tmp5hyurhoa.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1c9d97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1c9a8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1c9a8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1c9a8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hyurhoa                        0x000055f9a9a5167b <unavailable> + 9851

    5    libc.so.6                          0x00002ab1c9f83460 __libc_start_main +
    245

    6    tmp5hyurhoa                        0x000055f9a9a50499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_list:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   new_list.append(i)\n        }\n    }\n    new_list.sort()\n    return new_list\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpk45h6dmg/tmpk45h6dmg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15ae822c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15ae519b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15ae519988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15ae5187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk45h6dmg                        0x000056225aeba67b <unavailable> + 9851

    5    libc.so.6                          0x00002b15aea0e460 __libc_start_main +
    245

    6    tmpk45h6dmg                        0x000056225aeb9499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort(by: { $0.count < $1.count\
    \ })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpr8xh8pxi/tmpr8xh8pxi.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba163003c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba162cfab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba162cfa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba162cf97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr8xh8pxi                        0x000055fb47a21ebf <unavailable> + 7871

    5    libc.so.6                          0x00002ba1631ef460 __libc_start_main +
    245

    6    tmpr8xh8pxi                        0x000055fb47a213e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp2035wxyk/tmp2035wxyk.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1054c6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1054962b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1054962988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10549617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2035wxyk                        0x000055d86945a5fb <unavailable> + 9723

    5    libc.so.6                          0x00002b1054e57460 __libc_start_main +
    245

    6    tmp2035wxyk                        0x000055d869459419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for word in lst {\n        if word.count % 2 == 0 {\n   \
    \         result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp5hyurhoa/tmp5hyurhoa.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1c9d97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1c9a8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1c9a8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1c9a8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hyurhoa                        0x000055f9a9a5167b <unavailable> + 9851

    5    libc.so.6                          0x00002ab1c9f83460 __libc_start_main +
    245

    6    tmp5hyurhoa                        0x000055f9a9a50499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    return lst.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpsu1mp0ye/tmpsu1mp0ye.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b837d845c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b837d53cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b837d53c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b837d53b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsu1mp0ye                        0x0000556fd439a53b <unavailable> + 9531

    5    libc.so.6                          0x00002b837da31460 __libc_start_main +
    245

    6    tmpsu1mp0ye                        0x0000556fd4399359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n    \
    \        result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpilched18/tmpilched18.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7a4920c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7a4617b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7a4617988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7a46167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpilched18                        0x000055c75e7746cb <unavailable> + 9931

    5    libc.so.6                          0x00002ba7a4b0c460 __libc_start_main +
    245

    6    tmpilched18                        0x000055c75e7734e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n    \
    \        result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpilched18/tmpilched18.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7a4920c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7a4617b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7a4617988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7a46167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpilched18                        0x000055c75e7746cb <unavailable> + 9931

    5    libc.so.6                          0x00002ba7a4b0c460 __libc_start_main +
    245

    6    tmpilched18                        0x000055c75e7734e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for item in lst {\n        if item.count % 2 == 0 {\n    \
    \        result.append(item)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp6kgw67sg/tmp6kgw67sg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b090e3ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b090e0e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b090e0e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b090e0e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6kgw67sg                        0x000056302ad5c6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b090e5d8460 __libc_start_main +
    245

    6    tmp6kgw67sg                        0x000056302ad5b4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for item in lst {\n        if item.count % 2 == 0 {\n   \
    \         result.append(item)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpf_9pwtqb/tmpf_9pwtqb.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b272cef7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b272cbeeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b272cbee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b272cbed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf_9pwtqb                        0x0000555bf781f67b <unavailable> + 9851

    5    libc.so.6                          0x00002b272d0e3460 __libc_start_main +
    245

    6    tmpf_9pwtqb                        0x0000555bf781e499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for item in lst {\n        if item.count % 2 == 0 {\n   \
    \         result.append(item)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpf_9pwtqb/tmpf_9pwtqb.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b272cef7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b272cbeeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b272cbee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b272cbed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf_9pwtqb                        0x0000555bf781f67b <unavailable> + 9851

    5    libc.so.6                          0x00002b272d0e3460 __libc_start_main +
    245

    6    tmpf_9pwtqb                        0x0000555bf781e499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for item in lst {\n        if item.count % 2 == 0 {\n    \
    \        result.append(item)\n        }\n    }\n    result.sort(by: { $0.count\
    \ < $1.count })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpmd6mhvli/tmpmd6mhvli.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf9902dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf98d24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf98d24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf98d237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmd6mhvli                        0x000055badfc12f1f <unavailable> + 7967

    5    libc.so.6                          0x00002abf99219460 __libc_start_main +
    245

    6    tmpmd6mhvli                        0x000055badfc12449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpqlqn3fvg/tmpqlqn3fvg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1500185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14ffe7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14ffe7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14ffe7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqlqn3fvg                        0x0000559438fae67b <unavailable> + 9851

    5    libc.so.6                          0x00002b1500371460 __libc_start_main +
    245

    6    tmpqlqn3fvg                        0x0000559438fad499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    var lst = lst\n    for i in 0..<lst.count {\n        if lst[i].count\
    \ % 2 == 0 {\n            result.append(lst[i])\n        }\n    }\n    result.sort()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpss40xp5t/tmpss40xp5t.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e72e2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e72b21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e72b21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e72b207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpss40xp5t                        0x0000559b82bd46ab <unavailable> + 9899

    5    libc.so.6                          0x00002b5e73016460 __libc_start_main +
    245

    6    tmpss40xp5t                        0x0000559b82bd34c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    lst.sort(by: {$0.count < $1.count})\n    var i = 0\n    while i < lst.count\
    \ {\n        if lst[i].count % 2 == 1 {\n            lst.remove(at: i)\n     \
    \   } else {\n            i += 1\n        }\n    }\n    return lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp4abkoyqm/tmp4abkoyqm.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2222530c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2222227b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2222227988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22222267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4abkoyqm                        0x0000558a9b2fcdff <unavailable> + 7679

    5    libc.so.6                          0x00002b222271c460 __libc_start_main +
    245

    6    tmp4abkoyqm                        0x0000558a9b2fc329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    return lst.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpsu1mp0ye/tmpsu1mp0ye.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b837d845c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b837d53cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b837d53c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b837d53b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsu1mp0ye                        0x0000556fd439a53b <unavailable> + 9531

    5    libc.so.6                          0x00002b837da31460 __libc_start_main +
    245

    6    tmpsu1mp0ye                        0x0000556fd4399359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_list:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   new_list.append(i)\n        }\n    }\n    return new_list.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp87wyg5po/tmp87wyg5po.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb0ce7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb0cb76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb0cb76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb0cb757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87wyg5po                        0x000055eb879eb5fb <unavailable> + 9723

    5    libc.so.6                          0x00002acb0d06b460 __libc_start_main +
    245

    6    tmp87wyg5po                        0x000055eb879ea419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let lst = lst.filter\
    \ { $0.count % 2 == 0 }\n    return lst.sorted { $0.count < $1.count }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpgtintjbr/tmpgtintjbr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45da951c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45da648b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45da648988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45da6477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtintjbr                        0x000055c940c36dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b45dab3d460 __libc_start_main +
    245

    6    tmpgtintjbr                        0x000055c940c362e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for item in lst {\n        if item.count % 2 == 0 {\n   \
    \         result.append(item)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpf_9pwtqb/tmpf_9pwtqb.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b272cef7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b272cbeeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b272cbee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b272cbed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf_9pwtqb                        0x0000555bf781f67b <unavailable> + 9851

    5    libc.so.6                          0x00002b272d0e3460 __libc_start_main +
    245

    6    tmpf_9pwtqb                        0x0000555bf781e499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_list\
    \ = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n          \
    \  new_list.append(i)\n        }\n    }\n    new_list.sort()\n    return new_list\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpmlq7_rv9/tmpmlq7_rv9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6806500c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68061f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68061f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68061f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmlq7_rv9                        0x00005589ffe446cb <unavailable> + 9931

    5    libc.so.6                          0x00002b68066ec460 __libc_start_main +
    245

    6    tmpmlq7_rv9                        0x00005589ffe434e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    return lst.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpsu1mp0ye/tmpsu1mp0ye.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b837d845c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b837d53cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b837d53c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b837d53b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsu1mp0ye                        0x0000556fd439a53b <unavailable> + 9531

    5    libc.so.6                          0x00002b837da31460 __libc_start_main +
    245

    6    tmpsu1mp0ye                        0x0000556fd4399359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var result: [String] = []\n    for i in 0..<lst.count {\n        if lst[i].count\
    \ % 2 == 0 {\n            result.append(lst[i])\n        }\n    }\n    result.sort()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpnbi8igev/tmpnbi8igev.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f8fbb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f8f8acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f8f8ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f8f8ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnbi8igev                        0x0000556fc08ec6ab <unavailable> + 9899

    5    libc.so.6                          0x00002b6f8fda1460 __libc_start_main +
    245

    6    tmpnbi8igev                        0x0000556fc08eb4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbors_h3l/tmpbors_h3l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e56a92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e56789b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e56789988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e567887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbors_h3l                        0x00005594d1ab3dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b9e56c7e460 __libc_start_main +
    245

    6    tmpbors_h3l                        0x00005594d1ab32e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_lst:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   new_lst.append(i)\n        }\n    }\n    new_lst.sort()\n    return new_lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp4t3pkqjo/tmp4t3pkqjo.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabfff89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabffc80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabffc80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabffc7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4t3pkqjo                        0x0000564cd4ac367b <unavailable> + 9851

    5    libc.so.6                          0x00002aac00175460 __libc_start_main +
    245

    6    tmp4t3pkqjo                        0x0000564cd4ac2499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let sorted_list\
    \ = lst.sorted { (a, b) -> Bool in\n        if a.count == b.count {\n        \
    \    return a < b\n        }\n        return a.count < b.count\n    }\n    return\
    \ sorted_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpwqk3522t/tmpwqk3522t.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85f35a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85f32a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85f32a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85f329f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwqk3522t                        0x000055d78aaa5666 <unavailable> + 5734

    5    libc.so.6                          0x00002b85f3795460 __libc_start_main +
    245

    6    tmpwqk3522t                        0x000055d78aaa51e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    for i in 0..<lst.count {\n        for j in i+1..<lst.count {\n          \
    \  if lst[i].count > lst[j].count {\n                let tmp = lst[i]\n      \
    \          lst[i] = lst[j]\n                lst[j] = tmp\n            }\n    \
    \    }\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpqh35ll57/tmpqh35ll57.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba193474c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba19316bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba19316b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba19316a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqh35ll57                        0x000055f695b58826 <unavailable> + 6182

    5    libc.so.6                          0x00002ba193660460 __libc_start_main +
    245

    6    tmpqh35ll57                        0x000055f695b583a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n          \
    \  result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt0t56a0q/tmpt0t56a0q.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acaf44bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acaf41b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acaf41b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acaf41b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt0t56a0q                        0x00005579264406cb <unavailable> + 9931

    5    libc.so.6                          0x00002acaf46a9460 __libc_start_main +
    245

    6    tmpt0t56a0q                        0x000055792643f4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: 0
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted {\n        if $0.count == $1.count {\n        \
    \    return $0 < $1\n        }\n        return $0.count < $1.count\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpqlqn3fvg/tmpqlqn3fvg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1500185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14ffe7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14ffe7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14ffe7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqlqn3fvg                        0x0000559438fae67b <unavailable> + 9851

    5    libc.so.6                          0x00002b1500371460 __libc_start_main +
    245

    6    tmpqlqn3fvg                        0x0000559438fad499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    return lst.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpsu1mp0ye/tmpsu1mp0ye.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b837d845c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b837d53cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b837d53c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b837d53b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsu1mp0ye                        0x0000556fd439a53b <unavailable> + 9531

    5    libc.so.6                          0x00002b837da31460 __libc_start_main +
    245

    6    tmpsu1mp0ye                        0x0000556fd4399359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for word in lst {\n        if word.count % 2 == 0 {\n   \
    \         result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp5hyurhoa/tmp5hyurhoa.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1c9d97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1c9a8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1c9a8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1c9a8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hyurhoa                        0x000055f9a9a5167b <unavailable> + 9851

    5    libc.so.6                          0x00002ab1c9f83460 __libc_start_main +
    245

    6    tmp5hyurhoa                        0x000055f9a9a50499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for item in lst {\n        if item.count % 2 == 0 {\n    \
    \        result.append(item)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp6kgw67sg/tmp6kgw67sg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b090e3ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b090e0e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b090e0e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b090e0e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6kgw67sg                        0x000056302ad5c6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b090e5d8460 __libc_start_main +
    245

    6    tmp6kgw67sg                        0x000056302ad5b4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst_sorted\
    \ = lst.sorted { $0.count < $1.count }\n    var lst_sorted_2 = lst_sorted.sorted\
    \ { $0 < $1 }\n    return lst_sorted_2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp9q3r7gc9/tmp9q3r7gc9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83a87fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83a84f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83a84f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83a84f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9q3r7gc9                        0x000055ef820a9666 <unavailable> + 5734

    5    libc.so.6                          0x00002b83a89e9460 __libc_start_main +
    245

    6    tmp9q3r7gc9                        0x000055ef820a91e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for item in lst {\n        if item.count % 2 == 0 {\n    \
    \        result.append(item)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp6kgw67sg/tmp6kgw67sg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b090e3ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b090e0e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b090e0e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b090e0e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6kgw67sg                        0x000056302ad5c6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b090e5d8460 __libc_start_main +
    245

    6    tmp6kgw67sg                        0x000056302ad5b4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for item in lst {\n        if item.count % 2 == 0 {\n    \
    \        result.append(item)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp6kgw67sg/tmp6kgw67sg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b090e3ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b090e0e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b090e0e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b090e0e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6kgw67sg                        0x000056302ad5c6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b090e5d8460 __libc_start_main +
    245

    6    tmp6kgw67sg                        0x000056302ad5b4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_lst\
    \ = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n          \
    \  new_lst.append(i)\n        }\n    }\n    new_lst.sort()\n    return new_lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpgsouqz_n/tmpgsouqz_n.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04ed077c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04ecd6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04ecd6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04ecd6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgsouqz_n                        0x000056358eb966cb <unavailable> + 9931

    5    libc.so.6                          0x00002b04ed263460 __libc_start_main +
    245

    6    tmpgsouqz_n                        0x000056358eb954e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpqlqn3fvg/tmpqlqn3fvg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1500185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14ffe7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14ffe7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14ffe7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqlqn3fvg                        0x0000559438fae67b <unavailable> + 9851

    5    libc.so.6                          0x00002b1500371460 __libc_start_main +
    245

    6    tmpqlqn3fvg                        0x0000559438fad499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_list\
    \ = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n          \
    \  new_list.append(i)\n        }\n    }\n    new_list.sort()\n    return new_list\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpmlq7_rv9/tmpmlq7_rv9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6806500c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68061f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68061f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68061f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmlq7_rv9                        0x00005589ffe446cb <unavailable> + 9931

    5    libc.so.6                          0x00002b68066ec460 __libc_start_main +
    245

    6    tmpmlq7_rv9                        0x00005589ffe434e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    return lst.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpsu1mp0ye/tmpsu1mp0ye.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b837d845c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b837d53cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b837d53c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b837d53b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsu1mp0ye                        0x0000556fd439a53b <unavailable> + 9531

    5    libc.so.6                          0x00002b837da31460 __libc_start_main +
    245

    6    tmpsu1mp0ye                        0x0000556fd4399359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpqlqn3fvg/tmpqlqn3fvg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1500185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14ffe7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14ffe7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14ffe7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqlqn3fvg                        0x0000559438fae67b <unavailable> + 9851

    5    libc.so.6                          0x00002b1500371460 __libc_start_main +
    245

    6    tmpqlqn3fvg                        0x0000559438fad499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    for i in 0..<lst.count {\n        for j in 0..<lst.count {\n            if\
    \ lst[i].count < lst[j].count {\n                let temp = lst[i]\n         \
    \       lst[i] = lst[j]\n                lst[j] = temp\n            }\n      \
    \  }\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmplmcj0_cw/tmplmcj0_cw.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad6ef1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad6ec14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad6ec14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad6ec137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplmcj0_cw                        0x000055ff25b12826 <unavailable> + 6182

    5    libc.so.6                          0x00002aad6f109460 __libc_start_main +
    245

    6    tmplmcj0_cw                        0x000055ff25b123a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpqlqn3fvg/tmpqlqn3fvg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1500185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14ffe7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14ffe7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14ffe7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqlqn3fvg                        0x0000559438fae67b <unavailable> + 9851

    5    libc.so.6                          0x00002b1500371460 __libc_start_main +
    245

    6    tmpqlqn3fvg                        0x0000559438fad499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpqlqn3fvg/tmpqlqn3fvg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1500185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14ffe7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14ffe7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14ffe7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqlqn3fvg                        0x0000559438fae67b <unavailable> + 9851

    5    libc.so.6                          0x00002b1500371460 __libc_start_main +
    245

    6    tmpqlqn3fvg                        0x0000559438fad499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbors_h3l/tmpbors_h3l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e56a92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e56789b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e56789988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e567887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbors_h3l                        0x00005594d1ab3dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b9e56c7e460 __libc_start_main +
    245

    6    tmpbors_h3l                        0x00005594d1ab32e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for item in lst {\n        if item.count % 2 == 0 {\n    \
    \        result.append(item)\n        }\n    }\n    result.sort(by: {$0.count\
    \ < $1.count})\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt4o2ezdv/tmpt4o2ezdv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3cffde2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3cffad9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3cffad9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3cffad87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt4o2ezdv                        0x000056244bf0cf1f <unavailable> + 7967

    5    libc.so.6                          0x00002b3cfffce460 __libc_start_main +
    245

    6    tmpt4o2ezdv                        0x000056244bf0c449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_lst\
    \ = lst\n    var i = 0\n    while i < new_lst.count {\n        if new_lst[i].count\
    \ % 2 == 1 {\n            new_lst.remove(at: i)\n        } else {\n          \
    \  i += 1\n        }\n    }\n    new_lst.sort()\n    return new_lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp0u3bk9ph/tmp0u3bk9ph.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad37dcb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad37d9adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad37d9ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad37d9ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0u3bk9ph                        0x0000556076b655bb <unavailable> + 9659

    5    libc.so.6                          0x00002ad37dea2460 __libc_start_main +
    245

    6    tmp0u3bk9ph                        0x0000556076b643d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    return lst.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpsu1mp0ye/tmpsu1mp0ye.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b837d845c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b837d53cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b837d53c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b837d53b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsu1mp0ye                        0x0000556fd439a53b <unavailable> + 9531

    5    libc.so.6                          0x00002b837da31460 __libc_start_main +
    245

    6    tmpsu1mp0ye                        0x0000556fd4399359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let sorted_lst\
    \ = lst.sorted(by: { $0.count < $1.count })\n    return sorted_lst.filter({ $0.count\
    \ % 2 == 0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpem1mvcin/tmpem1mvcin.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2dbe5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d2d8dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d2d8dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d2d8db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpem1mvcin                        0x0000564d17d74dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b5d2ddd1460 __libc_start_main +
    245

    6    tmpem1mvcin                        0x0000564d17d742e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort(by: { $0.count < $1.count })\n    return lst\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpc6fiyf90/tmpc6fiyf90.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba89cf0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba89cc04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba89cc04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba89cc037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc6fiyf90                        0x000055644d60edff <unavailable> + 7679

    5    libc.so.6                          0x00002ba89d0f9460 __libc_start_main +
    245

    6    tmpc6fiyf90                        0x000055644d60e329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    lst.sort { (a, b) -> Bool in\n        if a.count == b.count {\n         \
    \   return a < b\n        }\n        return a.count < b.count\n    }\n    return\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpsfeq5h52/tmpsfeq5h52.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f5f6c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f5f3bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f5f3bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f5f3bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsfeq5h52                        0x00005647649da676 <unavailable> + 5750

    5    libc.so.6                          0x00002b0f5f8b2460 __libc_start_main +
    245

    6    tmpsfeq5h52                        0x00005647649da1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpqlqn3fvg/tmpqlqn3fvg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1500185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14ffe7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14ffe7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14ffe7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqlqn3fvg                        0x0000559438fae67b <unavailable> + 9851

    5    libc.so.6                          0x00002b1500371460 __libc_start_main +
    245

    6    tmpqlqn3fvg                        0x0000559438fad499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for item in lst {\n        if item.count % 2 == 0 {\n    \
    \        result.append(item)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp6kgw67sg/tmp6kgw67sg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b090e3ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b090e0e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b090e0e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b090e0e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6kgw67sg                        0x000056302ad5c6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b090e5d8460 __libc_start_main +
    245

    6    tmp6kgw67sg                        0x000056302ad5b4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpqlqn3fvg/tmpqlqn3fvg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1500185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14ffe7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14ffe7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14ffe7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqlqn3fvg                        0x0000559438fae67b <unavailable> + 9851

    5    libc.so.6                          0x00002b1500371460 __libc_start_main +
    245

    6    tmpqlqn3fvg                        0x0000559438fad499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for item in lst {\n        if item.count % 2 == 0 {\n   \
    \         result.append(item)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpf_9pwtqb/tmpf_9pwtqb.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b272cef7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b272cbeeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b272cbee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b272cbed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf_9pwtqb                        0x0000555bf781f67b <unavailable> + 9851

    5    libc.so.6                          0x00002b272d0e3460 __libc_start_main +
    245

    6    tmpf_9pwtqb                        0x0000555bf781e499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpqlqn3fvg/tmpqlqn3fvg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1500185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14ffe7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14ffe7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14ffe7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqlqn3fvg                        0x0000559438fae67b <unavailable> + 9851

    5    libc.so.6                          0x00002b1500371460 __libc_start_main +
    245

    6    tmpqlqn3fvg                        0x0000559438fad499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_lst\
    \ = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n          \
    \  new_lst.append(i)\n        }\n    }\n    new_lst.sort()\n    return new_lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpgsouqz_n/tmpgsouqz_n.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04ed077c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04ecd6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04ecd6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04ecd6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgsouqz_n                        0x000056358eb966cb <unavailable> + 9931

    5    libc.so.6                          0x00002b04ed263460 __libc_start_main +
    245

    6    tmpgsouqz_n                        0x000056358eb954e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for item in lst {\n        if item.count % 2 == 0 {\n   \
    \         result.append(item)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpf_9pwtqb/tmpf_9pwtqb.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b272cef7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b272cbeeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b272cbee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b272cbed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf_9pwtqb                        0x0000555bf781f67b <unavailable> + 9851

    5    libc.so.6                          0x00002b272d0e3460 __libc_start_main +
    245

    6    tmpf_9pwtqb                        0x0000555bf781e499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n          \
    \  result.append(i)\n        }\n    }\n    result.sort(by: {$0.count < $1.count})\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpd_1rpbd3/tmpd_1rpbd3.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac617692c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac617389b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac617389988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6173887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_1rpbd3                        0x0000561f15b88f1f <unavailable> + 7967

    5    libc.so.6                          0x00002ac61787e460 __libc_start_main +
    245

    6    tmpd_1rpbd3                        0x0000561f15b88449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp_ellzt5j/tmp_ellzt5j.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf284ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf281d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf281d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf281d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ellzt5j                        0x000055b74225d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002aaf286c9460 __libc_start_main +
    245

    6    tmp_ellzt5j                        0x000055b74225c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_list\
    \ = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n          \
    \  new_list.append(i)\n        }\n    }\n    new_list.sort()\n    return new_list\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpmlq7_rv9/tmpmlq7_rv9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6806500c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68061f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68061f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68061f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmlq7_rv9                        0x00005589ffe446cb <unavailable> + 9931

    5    libc.so.6                          0x00002b68066ec460 __libc_start_main +
    245

    6    tmpmlq7_rv9                        0x00005589ffe434e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    var lst = lst\n    lst.sort { $0.count < $1.count }\n   \
    \ for i in 0..<lst.count {\n        if lst[i].count % 2 == 0 {\n            result.append(lst[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpxjp2z2a7/tmpxjp2z2a7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7be67cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7be373b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7be373988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7be3727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjp2z2a7                        0x000055b624bb8eff <unavailable> + 7935

    5    libc.so.6                          0x00002ad7be868460 __libc_start_main +
    245

    6    tmpxjp2z2a7                        0x000055b624bb8429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpqlqn3fvg/tmpqlqn3fvg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1500185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14ffe7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14ffe7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14ffe7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqlqn3fvg                        0x0000559438fae67b <unavailable> + 9851

    5    libc.so.6                          0x00002b1500371460 __libc_start_main +
    245

    6    tmpqlqn3fvg                        0x0000559438fad499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for item in lst {\n        if item.count % 2 == 0 {\n    \
    \        result.append(item)\n        }\n    }\n    result.sort(by: {$0.count\
    \ < $1.count})\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt4o2ezdv/tmpt4o2ezdv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3cffde2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3cffad9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3cffad9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3cffad87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt4o2ezdv                        0x000056244bf0cf1f <unavailable> + 7967

    5    libc.so.6                          0x00002b3cfffce460 __libc_start_main +
    245

    6    tmpt4o2ezdv                        0x000056244bf0c449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for item in lst {\n        if item.count % 2 == 0 {\n   \
    \         result.append(item)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpf_9pwtqb/tmpf_9pwtqb.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b272cef7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b272cbeeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b272cbee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b272cbed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf_9pwtqb                        0x0000555bf781f67b <unavailable> + 9851

    5    libc.so.6                          0x00002b272d0e3460 __libc_start_main +
    245

    6    tmpf_9pwtqb                        0x0000555bf781e499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpqlqn3fvg/tmpqlqn3fvg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1500185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14ffe7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14ffe7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14ffe7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqlqn3fvg                        0x0000559438fae67b <unavailable> + 9851

    5    libc.so.6                          0x00002b1500371460 __libc_start_main +
    245

    6    tmpqlqn3fvg                        0x0000559438fad499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    return lst.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpsu1mp0ye/tmpsu1mp0ye.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b837d845c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b837d53cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b837d53c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b837d53b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsu1mp0ye                        0x0000556fd439a53b <unavailable> + 9531

    5    libc.so.6                          0x00002b837da31460 __libc_start_main +
    245

    6    tmpsu1mp0ye                        0x0000556fd4399359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for item in lst {\n        if item.count % 2 == 0 {\n   \
    \         result.append(item)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpf_9pwtqb/tmpf_9pwtqb.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b272cef7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b272cbeeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b272cbee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b272cbed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf_9pwtqb                        0x0000555bf781f67b <unavailable> + 9851

    5    libc.so.6                          0x00002b272d0e3460 __libc_start_main +
    245

    6    tmpf_9pwtqb                        0x0000555bf781e499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var lst_sorted = [String]()\n    var lst_sorted_2 = [String]()\n    var lst_sorted_3\
    \ = [String]()\n    for i in 0..<lst.count {\n        if lst[i].count % 2 == 0\
    \ {\n            lst_sorted.append(lst[i])\n        }\n    }\n    lst_sorted.sort()\n\
    \    for i in 0..<lst_sorted.count {\n        for j in 0..<lst_sorted.count {\n\
    \            if lst_sorted[i].count == lst_sorted[j].count {\n               \
    \ lst_sorted_2.append(lst_sorted[i])\n            }\n        }\n    }\n    lst_sorted_2.sort()\n\
    \    for i in 0..<lst_sorted_2.count {\n        if lst_sorted_2[i] != lst_sorted_2[i+1]\
    \ {\n            lst_sorted_3.append(lst_sorted_2[i])\n        }\n    }\n    return\
    \ lst_sorted_3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac075693c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac07538a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac07538a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac07538a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac075389bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac075189fc3 <unavailable> + 188355

    6    tmp0l6c_2eu                        0x000055601a5fc119 <unavailable> + 12569

    7    tmp0l6c_2eu                        0x000055601a5fa8fd <unavailable> + 6397

    8    libc.so.6                          0x00002ac07587f460 __libc_start_main +
    245

    9    tmp0l6c_2eu                        0x000055601a5fa579 <unavailable> + 5497

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for word in lst {\n        if word.count % 2 == 0 {\n   \
    \         result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp5hyurhoa/tmp5hyurhoa.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1c9d97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1c9a8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1c9a8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1c9a8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hyurhoa                        0x000055f9a9a5167b <unavailable> + 9851

    5    libc.so.6                          0x00002ab1c9f83460 __libc_start_main +
    245

    6    tmp5hyurhoa                        0x000055f9a9a50499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for word in lst {\n        if word.count % 2 == 0 {\n   \
    \         result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp5hyurhoa/tmp5hyurhoa.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1c9d97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1c9a8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1c9a8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1c9a8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hyurhoa                        0x000055f9a9a5167b <unavailable> + 9851

    5    libc.so.6                          0x00002ab1c9f83460 __libc_start_main +
    245

    6    tmp5hyurhoa                        0x000055f9a9a50499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp_ellzt5j/tmp_ellzt5j.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf284ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf281d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf281d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf281d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ellzt5j                        0x000055b74225d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002aaf286c9460 __libc_start_main +
    245

    6    tmp_ellzt5j                        0x000055b74225c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var lst_sorted: [String] = []\n    var lst_sorted_final: [String] = []\n\
    \    var lst_sorted_final_final: [String] = []\n    var lst_sorted_final_final_final:\
    \ [String] = []\n    var lst_sorted_final_final_final_final: [String] = []\n \
    \   var lst_sorted_final_final_final_final_final: [String] = []\n    var lst_sorted_final_final_final_final_final_final:\
    \ [String] = []\n    var lst_sorted_final_final_final_final_final_final_final:\
    \ [String] = []\n    var lst_sorted_final_final_final_final_final_final_final_final:\
    \ [String] = []\n    var lst_sorted_final_final_final_final_final_final_final_final_final:\
    \ [String] = []\n    var lst_sorted_final_final_final_final_final_final_final_final_final_final:\
    \ [String] = []\n    var lst_sorted_final_final_final_final_final_final_final_final_final_final_final:\
    \ [String] = []\n    var lst_sorted_final_final_final_final_final_final_final_final_final_final_final_final:\
    \ [String] = []\n    var lst_sorted_final_final_final_final_final_final_final_final_final_final_final_final_final:\
    \ [String] = []\n    var lst_sorted_final_final_final_final_final_final_final_final_final_final_final_final_final_final:\
    \ [String] = []\n    var lst_sorted_final_final_final_final_final_final_final_final_final_final_final_final_final_final_final:\
    \ [String] = []\n    var lst_sorted_final_final_final_final_final_final_final_final_final_final_final_final_final_final_final_final\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpel5ahwoj.swift:31:9: error: type annotation missing in pattern\n\
    \    var lst_sorted_final_final_final_final_final_final_final_final_final_final_final_final_final_final_final_final\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for item in lst {\n        if item.count % 2 == 0 {\n    \
    \        result.append(item)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp6kgw67sg/tmp6kgw67sg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b090e3ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b090e0e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b090e0e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b090e0e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6kgw67sg                        0x000056302ad5c6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b090e5d8460 __libc_start_main +
    245

    6    tmp6kgw67sg                        0x000056302ad5b4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for item in lst {\n        if item.count % 2 == 0 {\n   \
    \         result.append(item)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpf_9pwtqb/tmpf_9pwtqb.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b272cef7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b272cbeeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b272cbee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b272cbed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf_9pwtqb                        0x0000555bf781f67b <unavailable> + 9851

    5    libc.so.6                          0x00002b272d0e3460 __libc_start_main +
    245

    6    tmpf_9pwtqb                        0x0000555bf781e499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n          \
    \  result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt0t56a0q/tmpt0t56a0q.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acaf44bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acaf41b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acaf41b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acaf41b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt0t56a0q                        0x00005579264406cb <unavailable> + 9931

    5    libc.so.6                          0x00002acaf46a9460 __libc_start_main +
    245

    6    tmpt0t56a0q                        0x000055792643f4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst_new\
    \ = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n          \
    \  lst_new.append(i)\n        }\n    }\n    return lst_new.sorted(by: {$0.count\
    \ < $1.count})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpfcbrb9me/tmpfcbrb9me.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf2008ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1fd81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1fd81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1fd807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcbrb9me                        0x000055e158e72f0f <unavailable> + 7951

    5    libc.so.6                          0x00002adf20276460 __libc_start_main +
    245

    6    tmpfcbrb9me                        0x000055e158e72439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    return lst.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpsu1mp0ye/tmpsu1mp0ye.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b837d845c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b837d53cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b837d53c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b837d53b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsu1mp0ye                        0x0000556fd439a53b <unavailable> + 9531

    5    libc.so.6                          0x00002b837da31460 __libc_start_main +
    245

    6    tmpsu1mp0ye                        0x0000556fd4399359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n          \
    \  result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt0t56a0q/tmpt0t56a0q.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acaf44bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acaf41b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acaf41b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acaf41b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt0t56a0q                        0x00005579264406cb <unavailable> + 9931

    5    libc.so.6                          0x00002acaf46a9460 __libc_start_main +
    245

    6    tmpt0t56a0q                        0x000055792643f4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let lst = lst.filter\
    \ { $0.count % 2 == 0 }\n    return lst.sorted { $0.count < $1.count }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpgtintjbr/tmpgtintjbr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45da951c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45da648b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45da648988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45da6477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtintjbr                        0x000055c940c36dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b45dab3d460 __libc_start_main +
    245

    6    tmpgtintjbr                        0x000055c940c362e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    lst.sort(by: { $0.count < $1.count })\n    return lst\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbaqnrw8v/tmpbaqnrw8v.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77f4b81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77f4878b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77f4878988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77f48777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbaqnrw8v                        0x000055f2cf9cc616 <unavailable> + 5654

    5    libc.so.6                          0x00002b77f4d6d460 __libc_start_main +
    245

    6    tmpbaqnrw8v                        0x000055f2cf9cc199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp0x56ojxj/tmp0x56ojxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39342e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3933fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3933fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3933fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x56ojxj                        0x00005579d55b45bb <unavailable> + 9659

    5    libc.so.6                          0x00002b39344d5460 __libc_start_main +
    245

    6    tmp0x56ojxj                        0x00005579d55b33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    var sorted_lst = lst.sorted()\n    for i in sorted_lst {\n\
    \        if i.count % 2 == 0 {\n            result.append(i)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpva72zhtj/tmpva72zhtj.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa42aa2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa42799b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa42799988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa427987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpva72zhtj                        0x000055f1eca895fb <unavailable> + 9723

    5    libc.so.6                          0x00002afa42c8e460 __libc_start_main +
    245

    6    tmpva72zhtj                        0x000055f1eca88419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    return lst.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpsu1mp0ye/tmpsu1mp0ye.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b837d845c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b837d53cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b837d53c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b837d53b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsu1mp0ye                        0x0000556fd439a53b <unavailable> + 9531

    5    libc.so.6                          0x00002b837da31460 __libc_start_main +
    245

    6    tmpsu1mp0ye                        0x0000556fd4399359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpqlqn3fvg/tmpqlqn3fvg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1500185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14ffe7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14ffe7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14ffe7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqlqn3fvg                        0x0000559438fae67b <unavailable> + 9851

    5    libc.so.6                          0x00002b1500371460 __libc_start_main +
    245

    6    tmpqlqn3fvg                        0x0000559438fad499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp_ellzt5j/tmp_ellzt5j.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf284ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf281d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf281d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf281d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ellzt5j                        0x000055b74225d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002aaf286c9460 __libc_start_main +
    245

    6    tmp_ellzt5j                        0x000055b74225c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_list\
    \ = [String]()\n    for item in lst {\n        if item.count % 2 == 0 {\n    \
    \        new_list.append(item)\n        }\n    }\n    return new_list.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpp2a4logb/tmpp2a4logb.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b936f17bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b936ee72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b936ee72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b936ee717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp2a4logb                        0x000055f7ca56364b <unavailable> + 9803

    5    libc.so.6                          0x00002b936f367460 __libc_start_main +
    245

    6    tmpp2a4logb                        0x000055f7ca562469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    for i in 0..<lst.count {\n        for j in i+1..<lst.count {\n          \
    \  if lst[i].count > lst[j].count {\n                let temp = lst[i]\n     \
    \           lst[i] = lst[j]\n                lst[j] = temp\n            }\n  \
    \      }\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp7xr9dcnz/tmp7xr9dcnz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3afed67c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3afea5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3afea5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3afea5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7xr9dcnz                        0x000055a044fc7826 <unavailable> + 6182

    5    libc.so.6                          0x00002b3afef53460 __libc_start_main +
    245

    6    tmp7xr9dcnz                        0x000055a044fc73a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpqlqn3fvg/tmpqlqn3fvg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1500185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14ffe7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14ffe7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14ffe7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqlqn3fvg                        0x0000559438fae67b <unavailable> + 9851

    5    libc.so.6                          0x00002b1500371460 __libc_start_main +
    245

    6    tmpqlqn3fvg                        0x0000559438fad499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_lst\
    \ = lst\n    for i in 0..<new_lst.count {\n        if new_lst[i].count % 2 !=\
    \ 0 {\n            new_lst.remove(at: i)\n        }\n    }\n    new_lst.sort()\n\
    \    return new_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac567d28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac567a1f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac567a1f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac567a1f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac567a1ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac56781efc3 <unavailable> + 188355

    6    tmprma02ggd                        0x00005579339af82c <unavailable> + 10284

    7    tmprma02ggd                        0x00005579339ae84d <unavailable> + 6221

    8    libc.so.6                          0x00002ac567f14460 __libc_start_main +
    245

    9    tmprma02ggd                        0x00005579339ae4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n    \
    \        result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpilched18/tmpilched18.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7a4920c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7a4617b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7a4617988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7a46167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpilched18                        0x000055c75e7746cb <unavailable> + 9931

    5    libc.so.6                          0x00002ba7a4b0c460 __libc_start_main +
    245

    6    tmpilched18                        0x000055c75e7734e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpqlqn3fvg/tmpqlqn3fvg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1500185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14ffe7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14ffe7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14ffe7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqlqn3fvg                        0x0000559438fae67b <unavailable> + 9851

    5    libc.so.6                          0x00002b1500371460 __libc_start_main +
    245

    6    tmpqlqn3fvg                        0x0000559438fad499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for word in lst {\n        if word.count % 2 == 0 {\n   \
    \         result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp5hyurhoa/tmp5hyurhoa.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1c9d97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1c9a8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1c9a8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1c9a8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hyurhoa                        0x000055f9a9a5167b <unavailable> + 9851

    5    libc.so.6                          0x00002ab1c9f83460 __libc_start_main +
    245

    6    tmp5hyurhoa                        0x000055f9a9a50499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n          \
    \  result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt0t56a0q/tmpt0t56a0q.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acaf44bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acaf41b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acaf41b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acaf41b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt0t56a0q                        0x00005579264406cb <unavailable> + 9931

    5    libc.so.6                          0x00002acaf46a9460 __libc_start_main +
    245

    6    tmpt0t56a0q                        0x000055792643f4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_list:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   new_list.append(i)\n        }\n    }\n    new_list.sort()\n    return new_list\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpk45h6dmg/tmpk45h6dmg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15ae822c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15ae519b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15ae519988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15ae5187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk45h6dmg                        0x000056225aeba67b <unavailable> + 9851

    5    libc.so.6                          0x00002b15aea0e460 __libc_start_main +
    245

    6    tmpk45h6dmg                        0x000056225aeb9499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp_ellzt5j/tmp_ellzt5j.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf284ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf281d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf281d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf281d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ellzt5j                        0x000055b74225d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002aaf286c9460 __libc_start_main +
    245

    6    tmp_ellzt5j                        0x000055b74225c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpqlqn3fvg/tmpqlqn3fvg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1500185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14ffe7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14ffe7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14ffe7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqlqn3fvg                        0x0000559438fae67b <unavailable> + 9851

    5    libc.so.6                          0x00002b1500371460 __libc_start_main +
    245

    6    tmpqlqn3fvg                        0x0000559438fad499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter{$0.count\
    \ % 2 == 0}.sorted{$0.count < $1.count}\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpx7tubkcq/tmpx7tubkcq.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f7527cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f74f73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f74f73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f74f727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7tubkcq                        0x00005579654c0dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b1f75468460 __libc_start_main +
    245

    6    tmpx7tubkcq                        0x00005579654c02e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort(by: { $0.count < $1.count })\n    return lst\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpc6fiyf90/tmpc6fiyf90.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba89cf0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba89cc04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba89cc04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba89cc037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc6fiyf90                        0x000055644d60edff <unavailable> + 7679

    5    libc.so.6                          0x00002ba89d0f9460 __libc_start_main +
    245

    6    tmpc6fiyf90                        0x000055644d60e329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for item in lst {\n        if item.count % 2 == 0 {\n   \
    \         result.append(item)\n        }\n    }\n    result.sort(by: { $0.count\
    \ < $1.count })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmptbyivliu/tmptbyivliu.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65ac2fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65abff1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65abff1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65abff07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptbyivliu                        0x000056434af45ebf <unavailable> + 7871

    5    libc.so.6                          0x00002b65ac4e6460 __libc_start_main +
    245

    6    tmptbyivliu                        0x000056434af453e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_lst:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   new_lst.append(i)\n        }\n    }\n    new_lst.sort()\n    return new_lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp4t3pkqjo/tmp4t3pkqjo.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabfff89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabffc80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabffc80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabffc7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4t3pkqjo                        0x0000564cd4ac367b <unavailable> + 9851

    5    libc.so.6                          0x00002aac00175460 __libc_start_main +
    245

    6    tmp4t3pkqjo                        0x0000564cd4ac2499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst_sorted\
    \ = lst.sorted { $0.count < $1.count }\n    lst_sorted = lst_sorted.filter { $0.count\
    \ % 2 == 0 }\n    return lst_sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpuea8aaw5/tmpuea8aaw5.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b308dc04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b308d8fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b308d8fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b308d8fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuea8aaw5                        0x000055fb1a5fbdbf <unavailable> + 7615

    5    libc.so.6                          0x00002b308ddf0460 __libc_start_main +
    245

    6    tmpuea8aaw5                        0x000055fb1a5fb2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    for i in 0..<lst.count {\n        if lst[i].count % 2 != 0 {\n          \
    \  lst.remove(at: i)\n        }\n    }\n    lst.sort()\n    return lst\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7cc9b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7cc6ad561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac7cc6ad286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac7cc6ad13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac7cc6acbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac7cc4acfc3 <unavailable> + 188355

    6    tmpaejqsr40                        0x0000556b2a45c82c <unavailable> + 10284

    7    tmpaejqsr40                        0x0000556b2a45b84d <unavailable> + 6221

    8    libc.so.6                          0x00002ac7ccba2460 __libc_start_main +
    245

    9    tmpaejqsr40                        0x0000556b2a45b4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    return lst.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpsu1mp0ye/tmpsu1mp0ye.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b837d845c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b837d53cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b837d53c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b837d53b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsu1mp0ye                        0x0000556fd439a53b <unavailable> + 9531

    5    libc.so.6                          0x00002b837da31460 __libc_start_main +
    245

    6    tmpsu1mp0ye                        0x0000556fd4399359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for item in lst {\n        if item.count % 2 == 0 {\n   \
    \         result.append(item)\n        }\n    }\n    result.sort(by: {$0.count\
    \ < $1.count})\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpddcl5qjz/tmpddcl5qjz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b031b349c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b031b040b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b031b040988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b031b03f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpddcl5qjz                        0x0000556b513baebf <unavailable> + 7871

    5    libc.so.6                          0x00002b031b535460 __libc_start_main +
    245

    6    tmpddcl5qjz                        0x0000556b513ba3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979796
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_lst\
    \ = lst\n    var i = 0\n    while i < new_lst.count {\n        if new_lst[i].count\
    \ % 2 == 1 {\n            new_lst.remove(at: i)\n        } else {\n          \
    \  i += 1\n        }\n    }\n    new_lst.sort()\n    return new_lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp0u3bk9ph/tmp0u3bk9ph.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad37dcb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad37d9adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad37d9ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad37d9ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0u3bk9ph                        0x0000556076b655bb <unavailable> + 9659

    5    libc.so.6                          0x00002ad37dea2460 __libc_start_main +
    245

    6    tmp0u3bk9ph                        0x0000556076b643d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979795
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n          \
    \  result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt0t56a0q/tmpt0t56a0q.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acaf44bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acaf41b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acaf41b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acaf41b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt0t56a0q                        0x00005579264406cb <unavailable> + 9931

    5    libc.so.6                          0x00002acaf46a9460 __libc_start_main +
    245

    6    tmpt0t56a0q                        0x000055792643f4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979795
