language: swift
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        let char = word[index]\n        if vowels.contains(char) {\n        \
    \    result = char\n            break\n        }\n        index -= 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmplziblqdr.swift:13:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        let char\
    \ = word[index]\n                   ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmplziblqdr.swift:14:28: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   if vowels.contains(char) {\n                           ^\n/tmp/tmplziblqdr.swift:15:22:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  result = char\n                     ^~~~\n"
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var index = word.count - 1\n    var\
    \ vowelIndex = -1\n    var consonantIndex = -1\n    while index >= 0 {\n     \
    \   let char = word[word.index(word.startIndex, offsetBy: index)]\n        if\
    \ vowels.contains(String(char)) {\n            vowelIndex = index\n        }\n\
    \        if consonants.contains(String(char)) {\n            consonantIndex =\
    \ index\n        }\n        if vowelIndex != -1 && consonantIndex != -1 {\n  \
    \          if vowelIndex - consonantIndex == 1 {\n                result = String(char)\n\
    \            }\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp0kxufamu/tmp0kxufamu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23a6eb9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23a6bb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23a6bb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23a6baf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0kxufamu                        0x000055660fcb5697 <unavailable> + 5783

    5    libc.so.6                          0x00002b23a70a5460 __libc_start_main +
    245

    6    tmp0kxufamu                        0x000055660fcb52d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        let char = String(word[word.index(word.startIndex, offsetBy: index)])\n\
    \        if vowels.contains(char) {\n            result = char\n            break\n\
    \        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp886d6_73/tmp886d6_73.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f96065c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f95d5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f95d5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f95d5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp886d6_73                        0x000055dda672b8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b0f96251460 __libc_start_main +
    245

    6    tmp886d6_73                        0x000055dda672b2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp338t3ynr/tmp338t3ynr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71dd032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71dcd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71dcd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71dcd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp338t3ynr                        0x00005575e0a8d7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b71dd21e460 __libc_start_main +
    245

    6    tmp338t3ynr                        0x00005575e0a8d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var index = word.count - 1\n    var\
    \ vowel_index = -1\n    var consonant_index = -1\n    while index >= 0 {\n   \
    \     let char = word[word.index(word.startIndex, offsetBy: index)]\n        if\
    \ vowels.contains(String(char)) {\n            vowel_index = index\n        }\n\
    \        if consonants.contains(String(char)) {\n            consonant_index =\
    \ index\n        }\n        if vowel_index != -1 && consonant_index != -1 {\n\
    \            result = String(char)\n            break\n        }\n        index\
    \ -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp0z493c13/tmp0z493c13.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6635f08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6635bffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6635bff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6635bfe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0z493c13                        0x000055b427e7c8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b66360f4460 __libc_start_main +
    245

    6    tmp0z493c13                        0x000055b427e7c2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        let char = String(word[word.index(word.startIndex, offsetBy: index)])\n\
    \        if vowels.contains(char) {\n            result = char\n            break\n\
    \        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp886d6_73/tmp886d6_73.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f96065c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f95d5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f95d5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f95d5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp886d6_73                        0x000055dda672b8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b0f96251460 __libc_start_main +
    245

    6    tmp886d6_73                        0x000055dda672b2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        if vowels.contains(String(word[word.index(word.startIndex, offsetBy:\
    \ index)])) {\n            result = String(word[word.index(word.startIndex, offsetBy:\
    \ index)])\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpdeido85y/tmpdeido85y.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2841678c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b284136fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b284136f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b284136e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdeido85y                        0x000055d55f1fa8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b2841864460 __libc_start_main +
    245

    6    tmpdeido85y                        0x000055d55f1fa2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        let char = word[word.index(word.startIndex, offsetBy: index)]\n     \
    \   if vowels.contains(String(char)) {\n            result = String(char)\n  \
    \          break\n        }\n        index -= 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6brdywxg/tmp6brdywxg.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aacd13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacd10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aacd10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aacd10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6brdywxg                        0x0000558ed44558a3 <unavailable> + 6307

    5    libc.so.6                          0x00002aacd15e7460 __libc_start_main +
    245

    6    tmp6brdywxg                        0x0000558ed44552d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    while index >= 0\
    \ {\n        let char = word[index]\n        if vowels.contains(char) {\n    \
    \        result = String(char)\n            break\n        }\n        index -=\
    \ 1\n    }\n    index = word.count - 1\n    while index >= 0 {\n        let char\
    \ = word[index]\n        if consonants.contains(char) {\n            break\n \
    \       }\n        index -= 1\n    }\n    index -= 1\n    while index >= 0 {\n\
    \        let char = word[index]\n        if vowels.contains(char) {\n        \
    \    result = String(char)\n            break\n        }\n        index -= 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp5j_b2_cf.swift:14:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        let char\
    \ = word[index]\n                   ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp5j_b2_cf.swift:23:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        let char = word[index]\n                   ^~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp5j_b2_cf.swift:31:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        let char = word[index]\n              \
    \     ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n"
  stdout: ''
  timestamp: 1660013510
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var last_consonant = \"\"\n    var last_vowel = \"\"\n    for char in word.characters\
    \ {\n        if vowels.containsString(String(char)) {\n            last_vowel\
    \ = String(char)\n        } else {\n            last_consonant = String(char)\n\
    \        }\n        if last_consonant != \"\" && last_vowel != \"\" {\n      \
    \      result = last_vowel\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp64lc1he9.swift:13:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp64lc1he9.swift:14:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var last_consonant = \"\"\n    for char in word.reversed() {\n        if vowels.contains(char)\
    \ {\n            if last_consonant.isEmpty {\n                continue\n     \
    \       }\n            result = String(char)\n            break\n        }\n \
    \       last_consonant = String(char)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpq7rfvmmy/tmpq7rfvmmy.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b738484bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7384542b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7384542988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73845417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7rfvmmy                        0x0000559655367903 <unavailable> + 6403

    5    libc.so.6                          0x00002b7384a37460 __libc_start_main +
    245

    6    tmpq7rfvmmy                        0x0000559655367339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var last_consonant = \"\"\n    for char in word.reversed() {\n        if vowels.contains(char)\
    \ {\n            if last_consonant != \"\" {\n                result = String(char)\n\
    \                break\n            }\n        } else {\n            last_consonant\
    \ = String(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp_3wuiez0/tmp_3wuiez0.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e926a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e9239db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e9239d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e9239c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_3wuiez0                        0x0000557bdbe098b3 <unavailable> + 6323

    5    libc.so.6                          0x00002b4e92892460 __libc_start_main +
    245

    6    tmp_3wuiez0                        0x0000557bdbe092e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    var prev = \"\"\n\
    \    while index >= 0 {\n        let char = word[index]\n        if vowels.contains(char)\
    \ {\n            if prev != \"\" {\n                result = char\n          \
    \      break\n            }\n        } else {\n            prev = char\n     \
    \   }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmptqyo4gg3.swift:14:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        let char\
    \ = word[index]\n                   ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmptqyo4gg3.swift:15:28: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   if vowels.contains(char) {\n                           ^\n/tmp/tmptqyo4gg3.swift:17:26:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \      result = char\n                         ^~~~\n/tmp/tmptqyo4gg3.swift:21:20:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  prev = char\n                   ^~~~\n"
  stdout: ''
  timestamp: 1660013510
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var last_vowel_index = -1\n    for (index, char) in\
    \ word.characters.enumerated() {\n        if vowels.contains(String(char)) {\n\
    \            last_vowel_index = index\n        } else {\n            if last_vowel_index\
    \ != -1 {\n                result = String(word[word.index(word.startIndex, offsetBy:\
    \ last_vowel_index)])\n                break\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpczqy3ron.swift:12:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var prev_char = \"\"\n    for char in word.reversed()\
    \ {\n        if vowels.contains(String(char)) {\n            if prev_char != \"\
    \" && !vowels.contains(prev_char) {\n                result = String(char)\n \
    \               break\n            }\n        }\n        prev_char = String(char)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpqxsp7863/tmpqxsp7863.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ee0b9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ee0893b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ee0893988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ee08927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqxsp7863                        0x000055dc8fde6983 <unavailable> + 6531

    5    libc.so.6                          0x00002b2ee0d88460 __libc_start_main +
    245

    6    tmpqxsp7863                        0x000055dc8fde63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    var last_vowel_index\
    \ = -1\n    var last_consonant_index = -1\n    while index >= 0 {\n        let\
    \ char = word[index]\n        if vowels.contains(char) {\n            last_vowel_index\
    \ = index\n        } else {\n            last_consonant_index = index\n      \
    \  }\n        if last_vowel_index != -1 && last_consonant_index != -1 {\n    \
    \        result = String(word[last_vowel_index])\n            break\n        }\n\
    \        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp06f471hr.swift:15:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        let char\
    \ = word[index]\n                   ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp06f471hr.swift:16:28: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   if vowels.contains(char) {\n                           ^\n/tmp/tmp06f471hr.swift:22:29:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            result = String(word[last_vowel_index])\n\
    \                            ^~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    while index >= 0\
    \ {\n        let char = word[word.index(word.startIndex, offsetBy: index)]\n \
    \       if vowels.contains(char) {\n            result = String(char)\n      \
    \      break\n        }\n        index -= 1\n    }\n    index = word.count - 1\n\
    \    while index >= 0 {\n        let char = word[word.index(word.startIndex, offsetBy:\
    \ index)]\n        if consonants.contains(char) {\n            break\n       \
    \ }\n        index -= 1\n    }\n    if index > 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if consonants.contains(char) {\n            return\
    \ result\n        }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpm0ar4khk/tmpm0ar4khk.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11a4cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11a49ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11a49cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11a49cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm0ar4khk                        0x0000561cf72ac7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b11a4ec1460 __libc_start_main +
    245

    6    tmpm0ar4khk                        0x0000561cf72ac219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var vowel_index = -1\n    var consonant_index\
    \ = -1\n    for (index, char) in word.characters.enumerated() {\n        if vowels.contains(String(char))\
    \ {\n            vowel_index = index\n        }\n        if consonants.contains(String(char))\
    \ {\n            consonant_index = index\n        }\n        if vowel_index !=\
    \ -1 && consonant_index != -1 && vowel_index > consonant_index {\n           \
    \ result = String(char)\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp47ilqgzi.swift:14:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp338t3ynr/tmp338t3ynr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71dd032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71dcd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71dcd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71dcd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp338t3ynr                        0x00005575e0a8d7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b71dd21e460 __libc_start_main +
    245

    6    tmp338t3ynr                        0x00005575e0a8d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var word = word.lowercased()\n   \
    \ var index = 0\n    var index_of_vowel = 0\n    var index_of_consonant = 0\n\
    \    var index_of_closest_vowel = 0\n    var index_of_closest_consonant = 0\n\
    \    var distance = 0\n    var distance_of_closest_vowel = 0\n    for letter in\
    \ word {\n        if vowels.contains(String(letter)) {\n            index_of_vowel\
    \ = index\n            for letter in word[index..<word.count] {\n            \
    \    if consonants.contains(String(letter)) {\n                    index_of_consonant\
    \ = index\n                    distance = index_of_consonant - index_of_vowel\n\
    \                    if distance_of_closest_vowel == 0 {\n                   \
    \     distance_of_closest_vowel = distance\n                        index_of_closest_vowel\
    \ = index_of_vowel\n                        index_of_closest_consonant = index_of_consonant\n\
    \                    } else if distance < distance_of_closest_vowel {\n      \
    \                  distance_of_closest_vowel = distance\n                    \
    \    index_of_closest_vowel = index_of_vowel\n                        index_of_closest_consonant\
    \ = index_of_consonant\n                    }\n                }\n           \
    \     index += 1\n            }\n        }\n        index += 1\n    }\n    if\
    \ distance_of_closest_vowel == 0 {\n        return result\n    } else {\n    \
    \    for letter in word[index_of_closest_vowel...index_of_closest_conson\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpk4d9e6d4.swift:46:1: error: expected ']' in expression list\n}\n\
    ^\n/tmp/tmpk4d9e6d4.swift:45:27: note: to match this opening '['\n        for\
    \ letter in word[index_of_closest_vowel...index_of_closest_conson\n          \
    \                ^\n/tmp/tmpk4d9e6d4.swift:45:76: error: expected '{' to start\
    \ the body of for-each loop\n        for letter in word[index_of_closest_vowel...index_of_closest_conson\n\
    \                                                                           ^\n\
    /tmp/tmpk4d9e6d4.swift:73:48: error: expected '}' at end of brace statement\n\
    assert(get_closest_vowel(word: \"Above\") == \"o\")\n                        \
    \                       ^\n/tmp/tmpk4d9e6d4.swift:8:48: note: to match this opening\
    \ '{'\nfunc get_closest_vowel(word: String) -> String {\n                    \
    \                           ^\n/tmp/tmpk4d9e6d4.swift:23:27: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n            for letter in word[index..<word.count] {\n     \
    \                     ^~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript<R>(bounds:\
    \ R) -> String where R : RangeExpression, R.Bound == Int { get }\n           ^\n\
    /tmp/tmpk4d9e6d4.swift:45:53: error: cannot find 'index_of_closest_conson' in\
    \ scope\n        for letter in word[index_of_closest_vowel...index_of_closest_conson\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpk4d9e6d4.swift:49:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp338t3ynr/tmp338t3ynr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71dd032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71dcd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71dcd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71dcd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp338t3ynr                        0x00005575e0a8d7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b71dd21e460 __libc_start_main +
    245

    6    tmp338t3ynr                        0x00005575e0a8d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp338t3ynr/tmp338t3ynr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71dd032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71dcd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71dcd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71dcd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp338t3ynr                        0x00005575e0a8d7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b71dd21e460 __libc_start_main +
    245

    6    tmp338t3ynr                        0x00005575e0a8d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closest_vowel = \"\"\n    var closest_vowel_index = word.count\n   \
    \ for (index, char) in word.enumerated() {\n        if vowels.contains(char) {\n\
    \            if index > 0 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]) {\n                if index < word.count - 1 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]) {\n                    if index < closest_vowel_index\
    \ {\n                        closest_vowel = String(char)\n                  \
    \      closest_vowel_index = index\n                    }\n                }\n\
    \            }\n        }\n    }\n    return closest_vowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpt16tdhjc/tmpt16tdhjc.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bb6203c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bb5efab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bb5efa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bb5ef97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt16tdhjc                        0x000055d16d45f7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b5bb63ef460 __libc_start_main +
    245

    6    tmpt16tdhjc                        0x000055d16d45f429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[index]\n\
    \        if vowels.contains(char) {\n            result = String(char)\n     \
    \       break\n        }\n        index -= 1\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp2_3bruim.swift:13:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        let char\
    \ = word[index]\n                   ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var i = word.count - 1\n    while i >= 0 {\n    \
    \    let index = word.index(word.startIndex, offsetBy: i)\n        let char =\
    \ String(word[index])\n        if vowels.contains(char) {\n            result\
    \ = char\n            break\n        }\n        i -= 1\n    }\n    if result ==\
    \ \"\" {\n        return result\n    }\n    i -= 1\n    while i >= 0 {\n     \
    \   let index = word.index(word.startIndex, offsetBy: i)\n        let char = String(word[index])\n\
    \        if consonants.contains(char) {\n            return result\n        }\n\
    \        i -= 1\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6k3k9v1v/tmp6k3k9v1v.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58f0b8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58f0882b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58f0882988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58f08817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6k3k9v1v                        0x000055cf70ecb9db <unavailable> + 6619

    5    libc.so.6                          0x00002b58f0d77460 __libc_start_main +
    245

    6    tmp6k3k9v1v                        0x000055cf70ecb1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = 0\n    var last_consonant = 0\n    var\
    \ last_vowel = 0\n    var distance = 0\n    var last_distance = 0\n    for char\
    \ in word.characters {\n        if vowels.containsString(String(char)) {\n   \
    \         last_vowel = index\n            if last_consonant != 0 {\n         \
    \       distance = last_vowel - last_consonant\n                if last_distance\
    \ == 0 || distance < last_distance {\n                    last_distance = distance\n\
    \                    result = String(char)\n                }\n            }\n\
    \        } else if consonants.containsString(String(char)) {\n            last_consonant\
    \ = index\n        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpy1elg77z.swift:17:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpy1elg77z.swift:18:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpy1elg77z.swift:27:30: error: value\
    \ of type 'String' has no member 'containsString'\n        } else if consonants.containsString(String(char))\
    \ {\n                  ~~~~~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013510
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var index = 0\n    var right_index\
    \ = 0\n    var left_index = 0\n    var right_distance = 0\n    var left_distance\
    \ = 0\n    var distance = 0\n    var right_flag = false\n    var left_flag = false\n\
    \    var right_vowel = \"\"\n    var left_vowel = \"\"\n    for char in word.characters\
    \ {\n        if vowels.contains(String(char)) {\n            if right_flag {\n\
    \                right_vowel = String(char)\n                right_distance =\
    \ index - right_index\n                right_flag = false\n            }\n   \
    \         if left_flag {\n                left_vowel = String(char)\n        \
    \        left_distance = left_index - index\n                left_flag = false\n\
    \            }\n        }\n        if consonants.contains(String(char)) {\n  \
    \          if !right_flag {\n                right_index = index\n           \
    \     right_flag = true\n            }\n            if !left_flag {\n        \
    \        left_index = index\n                left_flag = true\n            }\n\
    \        }\n        index += 1\n    }\n    if right_distance == 0 && left_distance\
    \ == 0 {\n        return \"\"\n    }\n    if right_distance == 0 {\n        return\
    \ left_vowel\n    }\n    if left_distance == 0 {\n        return right_vowel\n\
    \    }\n    if right_distance < left_distance {\n        return right_vowel\n\
    \    }\n    if left_distance < right_distance {\n        return left_vowel\n \
    \   }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpp77jx43r.swift:22:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpp77jx43r.swift:11:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = \"\"\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmpp77jx43r.swift:17:9: warning: initialization of variable 'distance'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var distance = 0\n    ~~~~^~~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        let letter = word[word.index(word.startIndex, offsetBy: index)]\n   \
    \     if vowels.contains(String(letter)) {\n            result = String(letter)\n\
    \            break\n        }\n        index -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpplwb1itm/tmpplwb1itm.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83303c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83300bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83300bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83300ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpplwb1itm                        0x00005591844ca8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b83305b0460 __libc_start_main +
    245

    6    tmpplwb1itm                        0x00005591844ca2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var prev = \"\"\n    var next = \"\"\n    for char\
    \ in word.characters {\n        if vowels.containsString(String(char)) {\n   \
    \         if consonants.containsString(prev) && consonants.containsString(next)\
    \ {\n                result = String(char)\n                break\n          \
    \  }\n        }\n        prev = String(char)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpnccf7h5f.swift:14:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpnccf7h5f.swift:15:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpnccf7h5f.swift:16:27: error: value\
    \ of type 'String' has no member 'containsString'\n            if consonants.containsString(prev)\
    \ && consonants.containsString(next) {\n               ~~~~~~~~~~ ^~~~~~~~~~~~~~\n\
    /tmp/tmpnccf7h5f.swift:16:62: error: value of type 'String' has no member 'containsString'\n\
    \            if consonants.containsString(prev) && consonants.containsString(next)\
    \ {\n                                                  ~~~~~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013510
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var count = 0\n    for char in word.characters.reversed()\
    \ {\n        if vowels.contains(String(char)) {\n            if count == 1 {\n\
    \                result = String(char)\n                break\n            }\n\
    \        } else {\n            count += 1\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmptkemfs_k.swift:12:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    var vowel_index =\
    \ -1\n    var consonant_index = -1\n    while index >= 0 {\n        let char =\
    \ word[word.index(word.startIndex, offsetBy: index)]\n        if vowels.contains(char)\
    \ {\n            vowel_index = index\n        } else if consonants.contains(char)\
    \ {\n            consonant_index = index\n        }\n        if vowel_index !=\
    \ -1 && consonant_index != -1 {\n            result = String(char)\n         \
    \   break\n        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpf0vchkrf/tmpf0vchkrf.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb06f6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb06c62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb06c62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb06c617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf0vchkrf                        0x000055ffedce77e3 <unavailable> + 6115

    5    libc.so.6                          0x00002adb07157460 __libc_start_main +
    245

    6    tmpf0vchkrf                        0x000055ffedce7219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let chars = Array(word)\n    var result = \"\"\n    var index = chars.count\
    \ - 1\n    while index >= 0 {\n        if vowels.contains(String(chars[index]))\
    \ {\n            result = String(chars[index])\n            break\n        }\n\
    \        index -= 1\n    }\n    if result == \"\" {\n        return result\n \
    \   }\n    index -= 1\n    while index >= 0 {\n        if vowels.contains(String(chars[index]))\
    \ {\n            break\n        }\n        index -= 1\n    }\n    if index < 0\
    \ {\n        return result\n    }\n    if chars.count - index - 1 < index + 1\
    \ {\n        return result\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpbgflzd0s/tmpbgflzd0s.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea5497dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea54674b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea54674988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea546737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbgflzd0s                        0x0000556203edd6c7 <unavailable> + 5831

    5    libc.so.6                          0x00002aea54b69460 __libc_start_main +
    245

    6    tmpbgflzd0s                        0x0000556203edd309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var last_vowel = \"\"\n\
    \    var last_consonant = \"\"\n    var last_vowel_index = 0\n    var last_consonant_index\
    \ = 0\n    for (index, char) in word.characters.enumerated() {\n        if vowels.contains(String(char))\
    \ {\n            last_vowel = String(char)\n            last_vowel_index = index\n\
    \        } else {\n            last_consonant = String(char)\n            last_consonant_index\
    \ = index\n        }\n        if last_vowel_index > last_consonant_index {\n \
    \           return last_vowel\n        }\n    }\n    return \"\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp6_5xc7yx.swift:14:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp6_5xc7yx.swift:11:9: warning: variable 'last_consonant'\
    \ was written to, but never read\n    var last_consonant = \"\"\n        ^\n"
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    while index >= 0\
    \ {\n        let char = word[word.index(word.startIndex, offsetBy: index)]\n \
    \       if vowels.contains(char) {\n            result = String(char)\n      \
    \      break\n        }\n        index -= 1\n    }\n    if result.isEmpty {\n\
    \        return result\n    }\n    index -= 1\n    while index >= 0 {\n      \
    \  let char = word[word.index(word.startIndex, offsetBy: index)]\n        if consonants.contains(char)\
    \ {\n            break\n        }\n        index -= 1\n    }\n    if index < 0\
    \ {\n        return \"\"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpyj8aj9ht/tmpyj8aj9ht.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0ddb9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0dd894b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0dd894988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0dd8937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyj8aj9ht                        0x0000562b5bf02a6b <unavailable> + 6763

    5    libc.so.6                          0x00002ab0ddd89460 __libc_start_main +
    245

    6    tmpyj8aj9ht                        0x0000562b5bf02269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp338t3ynr/tmp338t3ynr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71dd032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71dcd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71dcd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71dcd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp338t3ynr                        0x00005575e0a8d7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b71dd21e460 __libc_start_main +
    245

    6    tmp338t3ynr                        0x00005575e0a8d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var closestVowel = \"\"\
    \n    var closestDistance = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(char) {\n            var distance = 0\n      \
    \      var isConsonant = false\n            for i in (index + 1)..<word.count\
    \ {\n                let nextChar = word[word.index(word.startIndex, offsetBy:\
    \ i)]\n                if vowels.contains(nextChar) {\n                    break\n\
    \                }\n                distance += 1\n                isConsonant\
    \ = true\n            }\n            if isConsonant && distance < closestDistance\
    \ {\n                closestDistance = distance\n                closestVowel\
    \ = String(char)\n            }\n        }\n    }\n    return closestVowel\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpgzczdvxu/tmpgzczdvxu.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cf1035c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cf0d2cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cf0d2c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cf0d2b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgzczdvxu                        0x0000562b457e7977 <unavailable> + 6519

    5    libc.so.6                          0x00002b6cf1221460 __libc_start_main +
    245

    6    tmpgzczdvxu                        0x0000562b457e75b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp338t3ynr/tmp338t3ynr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71dd032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71dcd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71dcd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71dcd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp338t3ynr                        0x00005575e0a8d7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b71dd21e460 __libc_start_main +
    245

    6    tmp338t3ynr                        0x00005575e0a8d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let chars = Array(word)\n    var result = \"\"\n    var index = chars.count\
    \ - 1\n    while index >= 0 {\n        if vowels.contains(String(chars[index]))\
    \ {\n            result = String(chars[index])\n            break\n        }\n\
    \        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpntt997kn/tmpntt997kn.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af289396c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af28908db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af28908d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af28908c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpntt997kn                        0x000055ba9ce748d3 <unavailable> + 6355

    5    libc.so.6                          0x00002af289582460 __libc_start_main +
    245

    6    tmpntt997kn                        0x000055ba9ce74309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        let char = String(word[word.index(word.startIndex, offsetBy: index)])\n\
    \        if vowels.contains(char) {\n            result = char\n            break\n\
    \        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp886d6_73/tmp886d6_73.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f96065c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f95d5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f95d5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f95d5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp886d6_73                        0x000055dda672b8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b0f96251460 __libc_start_main +
    245

    6    tmp886d6_73                        0x000055dda672b2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var result = \"\"\n    let vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var vowel_index = -1\n    var consonant_index\
    \ = -1\n    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            vowel_index = i\n        }\n        if consonants.contains(char)\
    \ {\n            consonant_index = i\n        }\n        if vowel_index != -1\
    \ && consonant_index != -1 && vowel_index > consonant_index {\n            result\
    \ = String(word[index])\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp7ijxlwz4/tmp7ijxlwz4.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01f35edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01f32e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01f32e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01f32e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ijxlwz4                        0x00005575ce3eb827 <unavailable> + 6183

    5    libc.so.6                          0x00002b01f37d9460 __libc_start_main +
    245

    6    tmp7ijxlwz4                        0x00005575ce3eb469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp338t3ynr/tmp338t3ynr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71dd032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71dcd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71dcd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71dcd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp338t3ynr                        0x00005575e0a8d7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b71dd21e460 __libc_start_main +
    245

    6    tmp338t3ynr                        0x00005575e0a8d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    var found = false\n\
    \    while index >= 0 {\n        let char = word[word.index(word.startIndex, offsetBy:\
    \ index)]\n        if vowels.contains(String(char)) {\n            result = String(char)\n\
    \            found = true\n        } else if found {\n            break\n    \
    \    }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp__vzccqr/tmp__vzccqr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b515b6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b515b3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b515b3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b515b3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__vzccqr                        0x0000558076ae48a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b515b8a6460 __libc_start_main +
    245

    6    tmp__vzccqr                        0x0000558076ae42d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var index = 0\n    for char in word.characters.reversed()\
    \ {\n        if vowels.contains(String(char)) {\n            result = String(char)\n\
    \            break\n        }\n        if consonants.contains(String(char)) {\n\
    \            break\n        }\n        index += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp68qx_afs.swift:13:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var last_vowel_index = -1\n    for (index, char) in\
    \ word.enumerated() {\n        if vowels.contains(String(char)) {\n          \
    \  last_vowel_index = index\n        } else {\n            if last_vowel_index\
    \ != -1 {\n                result = String(word[word.index(word.startIndex, offsetBy:\
    \ last_vowel_index)])\n                break\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp764pz556/tmp764pz556.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47eee88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47eeb7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47eeb7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47eeb7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp764pz556                        0x000055c89c3518a7 <unavailable> + 6311

    5    libc.so.6                          0x00002b47ef074460 __libc_start_main +
    245

    6    tmp764pz556                        0x000055c89c3514e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var distance = 0\n    for (i, char) in word.characters.enumerated()\
    \ {\n        if consonants.contains(char) {\n            for (j, vowel) in vowels.characters.enumerated()\
    \ {\n                if word.characters.contains(vowel) {\n                  \
    \  if distance == 0 {\n                        distance = word.characters.distance(from:\
    \ word.characters.index(of: vowel)!, to: word.characters.index(of: char)!)\n \
    \                       result = String(vowel)\n                    } else {\n\
    \                        let temp = word.characters.distance(from: word.characters.index(of:\
    \ vowel)!, to: word.characters.index(of: char)!)\n                        if temp\
    \ < distance {\n                            distance = temp\n                \
    \            result = String(vowel)\n                        }\n             \
    \       }\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp97390rab.swift:13:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (i, char) in word.characters.enumerated() {\n \
    \                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp97390rab.swift:15:38: error: 'characters' is unavailable:\
    \ Please use String directly\n            for (j, vowel) in vowels.characters.enumerated()\
    \ {\n                                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp97390rab.swift:16:25: error: 'characters'\
    \ is unavailable: Please use String directly\n                if word.characters.contains(vowel)\
    \ {\n                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp97390rab.swift:18:41: error: 'characters' is unavailable:\
    \ Please use String directly\n                        distance = word.characters.distance(from:\
    \ word.characters.index(of: vowel)!, to: word.characters.index(of: char)!)\n \
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp97390rab.swift:18:72: error: 'characters' is unavailable:\
    \ Please use String directly\n                        distance = word.characters.distance(from:\
    \ word.characters.index(of: vowel)!, to: word.characters.index(of: char)!)\n \
    \                                                                      ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp97390rab.swift:18:83:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \                distance = word.characters.distance(from: word.characters.index(of:\
    \ vowel)!, to: word.characters.index(of: char)!)\n         "
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var index = word.count\
    \ - 1\n    var last_vowel = \"\"\n    var last_consonant = \"\"\n    while index\
    \ >= 0 {\n        let char = word[word.index(word.startIndex, offsetBy: index)]\n\
    \        if vowels.contains(char) {\n            last_vowel = String(char)\n \
    \       } else {\n            last_consonant = String(char)\n            break\n\
    \        }\n        index -= 1\n    }\n    if last_vowel == \"\" || last_consonant\
    \ == \"\" {\n        return \"\"\n    }\n    index = word.count - 1\n    while\
    \ index >= 0 {\n        let char = word[word.index(word.startIndex, offsetBy:\
    \ index)]\n        if vowels.contains(char) {\n            if String(char) ==\
    \ last_vowel {\n                return \"\"\n            }\n            return\
    \ String(char)\n        }\n        index -= 1\n    }\n    return \"\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmphhbzh5b1/tmphhbzh5b1.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad19c69bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad19c392b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad19c392988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad19c3917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphhbzh5b1                        0x000055fa1421f5d7 <unavailable> + 5591

    5    libc.so.6                          0x00002ad19c887460 __libc_start_main +
    245

    6    tmphhbzh5b1                        0x000055fa1421f219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp338t3ynr/tmp338t3ynr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71dd032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71dcd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71dcd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71dcd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp338t3ynr                        0x00005575e0a8d7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b71dd21e460 __libc_start_main +
    245

    6    tmp338t3ynr                        0x00005575e0a8d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var index = 0\n    var vowel_index\
    \ = 0\n    var consonant_index = 0\n    var vowel_found = false\n    var consonant_found\
    \ = false\n    for char in word.characters {\n        if vowels.contains(String(char))\
    \ {\n            vowel_found = true\n            vowel_index = index\n       \
    \ }\n        if consonants.contains(String(char)) {\n            consonant_found\
    \ = true\n            consonant_index = index\n        }\n        if vowel_found\
    \ && consonant_found {\n            if vowel_index > consonant_index {\n     \
    \           result = String(char)\n            }\n            vowel_found = false\n\
    \            consonant_found = false\n        }\n        index += 1\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpch1dofcm.swift:17:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var index = 0\n    var found = false\n\
    \    while index < word.count {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(String(char)) {\n            if\
    \ index > 0 {\n                let prevChar = word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]\n                if consonants.contains(String(prevChar))\
    \ {\n                    found = true\n                    result = String(char)\n\
    \                    break\n                }\n            }\n        }\n    \
    \    index += 1\n    }\n    if !found {\n        index = word.count - 1\n    \
    \    while index >= 0 {\n            let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n            if vowels.contains(String(char)) {\n        \
    \        if index < word.count - 1 {\n                    let nextChar = word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]\n                    if consonants.contains(String(nextChar))\
    \ {\n                        found = true\n                        result = String(char)\n\
    \                        break\n                    }\n                }\n   \
    \         }\n            index -= 1\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpx_pkdgym/tmpx_pkdgym.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ae9f16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ae9c0db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ae9c0d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ae9c0c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx_pkdgym                        0x0000564ad1600697 <unavailable> + 5783

    5    libc.so.6                          0x00002b6aea102460 __libc_start_main +
    245

    6    tmpx_pkdgym                        0x0000564ad16002d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp338t3ynr/tmp338t3ynr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71dd032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71dcd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71dcd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71dcd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp338t3ynr                        0x00005575e0a8d7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b71dd21e460 __libc_start_main +
    245

    6    tmp338t3ynr                        0x00005575e0a8d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let chars = Array(word)\n    var vowel = \"\"\n    for i in (0..<chars.count).reversed()\
    \ {\n        if vowels.contains(String(chars[i])) {\n            vowel = String(chars[i])\n\
    \            break\n        }\n    }\n    return vowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpiajkpsc4/tmpiajkpsc4.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ee9724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ee941bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ee941b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ee941a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiajkpsc4                        0x000055ecf762fc23 <unavailable> + 7203

    5    libc.so.6                          0x00002b9ee9910460 __libc_start_main +
    245

    6    tmpiajkpsc4                        0x000055ecf762f659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        let char = word[word.index(word.startIndex, offsetBy: index)]\n     \
    \   if vowels.contains(String(char)) {\n            result = String(char)\n  \
    \          break\n        }\n        index -= 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpetdmyjnl/tmpetdmyjnl.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcdb1a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcdae9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcdae9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcdae9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpetdmyjnl                        0x00005647b4f298a3 <unavailable> + 6307

    5    libc.so.6                          0x00002afcdb392460 __libc_start_main +
    245

    6    tmpetdmyjnl                        0x00005647b4f292d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var last_consonant = \"\"\n    for char in word.reversed() {\n        if vowels.contains(char)\
    \ {\n            if last_consonant != \"\" {\n                result = String(char)\n\
    \                break\n            }\n        } else {\n            last_consonant\
    \ = String(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp_3wuiez0/tmp_3wuiez0.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e926a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e9239db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e9239d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e9239c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_3wuiez0                        0x0000557bdbe098b3 <unavailable> + 6323

    5    libc.so.6                          0x00002b4e92892460 __libc_start_main +
    245

    6    tmp_3wuiez0                        0x0000557bdbe092e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var index = word.count - 1\n    var\
    \ found = false\n    while index >= 0 {\n        let char = String(word[word.index(word.startIndex,\
    \ offsetBy: index)])\n        if !found && vowels.contains(char) {\n         \
    \   result = char\n            found = true\n        } else if found && consonants.contains(char)\
    \ {\n            break\n        }\n        index -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpk90hcros/tmpk90hcros.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1de4cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1de1c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1de1c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1de1c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk90hcros                        0x000055fe3e1d98a3 <unavailable> + 6307

    5    libc.so.6                          0x00002ac1de6b6460 __libc_start_main +
    245

    6    tmpk90hcros                        0x000055fe3e1d92d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = 0\n    var last_consonant = 0\n    var\
    \ last_vowel = 0\n    for letter in word.lowercased() {\n        if vowels.contains(letter)\
    \ {\n            last_vowel = index\n        }\n        if consonants.contains(letter)\
    \ {\n            last_consonant = index\n        }\n        if last_consonant\
    \ < last_vowel {\n            result = String(word[word.index(word.startIndex,\
    \ offsetBy: last_vowel)])\n        }\n        index += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp4d_4aw5p/tmp4d_4aw5p.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3a0589c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3a0280b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3a0280988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3a027f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4d_4aw5p                        0x000055814fad4893 <unavailable> + 6291

    5    libc.so.6                          0x00002ab3a0775460 __libc_start_main +
    245

    6    tmp4d_4aw5p                        0x000055814fad42c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = 0\n    var prev_index = 0\n    var prev_char\
    \ = \"\"\n    for char in word.characters {\n        if vowels.containsString(String(char))\
    \ {\n            if consonants.containsString(prev_char) {\n                if\
    \ index - prev_index < word.characters.count - index {\n                    result\
    \ = String(char)\n                }\n            }\n        } else {\n       \
    \     prev_char = String(char)\n            prev_index = index\n        }\n  \
    \      index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpbpsln685.swift:15:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpbpsln685.swift:16:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpbpsln685.swift:17:27: error: value\
    \ of type 'String' has no member 'containsString'\n            if consonants.containsString(prev_char)\
    \ {\n               ~~~~~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpbpsln685.swift:18:46: error:\
    \ 'characters' is unavailable: Please use String directly\n                if\
    \ index - prev_index < word.characters.count - index {\n                     \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var prev_char = \"\"\n    var curr_char = \"\"\n \
    \   var next_char = \"\"\n    for char in word.characters {\n        prev_char\
    \ = curr_char\n        curr_char = next_char\n        next_char = String(char)\n\
    \        if vowels.contains(curr_char) && !vowels.contains(prev_char) && !vowels.contains(next_char)\
    \ {\n            result = curr_char\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpf4bzhwwe.swift:14:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var last_consonant = -1\n    for (i, c) in word.characters.enumerated() {\n\
    \        if vowels.contains(String(c)) {\n            if last_consonant != -1\
    \ {\n                result = String(c)\n                break\n            }\n\
    \        } else {\n            last_consonant = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp2wlrhhek.swift:12:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (i, c) in word.characters.enumerated() {\n    \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var last_vowel = -1\n    for (i, c) in word.characters.enumerated().reversed()\
    \ {\n        if vowels.contains(String(c)) {\n            last_vowel = i\n   \
    \     } else if last_vowel > -1 {\n            result = String(word[word.index(word.startIndex,\
    \ offsetBy: last_vowel)])\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpfi71lzah.swift:12:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (i, c) in word.characters.enumerated().reversed()\
    \ {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var vowel = \"\"\n    var\
    \ index = word.count - 1\n    while index >= 0 {\n        if vowels.contains(word[index])\
    \ {\n            vowel = word[index]\n            break\n        }\n        index\
    \ -= 1\n    }\n    return vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ynfuept.swift:13:28: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if vowels.contains(word[index])\
    \ {\n                           ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp2ynfuept.swift:14:25: error: cannot\
    \ assign value of type 'Character' to type 'String'\n            vowel = word[index]\n\
    \                    ~~~~^~~~~~~\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var i = word.count - 1\n    while i >= 0 {\n     \
    \   let index = word.index(word.startIndex, offsetBy: i)\n        let char = String(word[index])\n\
    \        if vowels.contains(char) {\n            result = char\n            break\n\
    \        }\n        i -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpk5s2v24o/tmpk5s2v24o.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5e21f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5e1eebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5e1eeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5e1eea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk5s2v24o                        0x00005648e9cf68a3 <unavailable> + 6307

    5    libc.so.6                          0x00002ae5e23e0460 __libc_start_main +
    245

    6    tmpk5s2v24o                        0x00005648e9cf62d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    while index >= 0\
    \ {\n        let char = word[word.index(word.startIndex, offsetBy: index)]\n \
    \       if vowels.contains(char) {\n            result = String(char)\n      \
    \      break\n        }\n        index -= 1\n    }\n    index = word.count - 1\n\
    \    while index >= 0 {\n        let char = word[word.index(word.startIndex, offsetBy:\
    \ index)]\n        if consonants.contains(char) {\n            break\n       \
    \ }\n        index -= 1\n    }\n    if index > 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if consonants.contains(char) {\n            return\
    \ result\n        }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpm0ar4khk/tmpm0ar4khk.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11a4cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11a49ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11a49cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11a49cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm0ar4khk                        0x0000561cf72ac7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b11a4ec1460 __libc_start_main +
    245

    6    tmpm0ar4khk                        0x0000561cf72ac219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var last_vowel_index = -1\n    for (index, char) in\
    \ word.characters.enumerated() {\n        if vowels.contains(String(char)) {\n\
    \            last_vowel_index = index\n        } else {\n            if last_vowel_index\
    \ != -1 {\n                result = String(word[word.index(word.startIndex, offsetBy:\
    \ last_vowel_index)])\n                break\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpczqy3ron.swift:12:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let chars = Array(word)\n    var result = \"\"\n    var min_distance = Int.max\n\
    \    for i in 0..<chars.count {\n        if vowels.contains(String(chars[i]))\
    \ {\n            var left = i - 1\n            var right = i + 1\n           \
    \ while left >= 0 && right < chars.count {\n                if vowels.contains(String(chars[left]))\
    \ {\n                    left -= 1\n                } else if vowels.contains(String(chars[right]))\
    \ {\n                    right += 1\n                } else {\n              \
    \      break\n                }\n            }\n            if left >= 0 && right\
    \ < chars.count {\n                let distance = right - left - 1\n         \
    \       if distance < min_distance {\n                    min_distance = distance\n\
    \                    result = String(chars[i])\n                }\n          \
    \  }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpv3u4r8zk/tmpv3u4r8zk.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32729e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32726deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32726de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32726dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv3u4r8zk                        0x00005643a9ffd847 <unavailable> + 6215

    5    libc.so.6                          0x00002b3272bd3460 __libc_start_main +
    245

    6    tmpv3u4r8zk                        0x00005643a9ffd489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var last_consonant = \"\"\n    for char in word.characters.reversed() {\n  \
    \      if vowels.contains(char) {\n            if last_consonant != \"\" {\n \
    \               result = String(char)\n                break\n            }\n\
    \        } else {\n            last_consonant = String(char)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp444goj10.swift:12:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    var last_vowel_index\
    \ = -1\n    var last_consonant_index = -1\n    while index >= 0 {\n        let\
    \ char = word[word.index(word.startIndex, offsetBy: index)]\n        if vowels.contains(char)\
    \ {\n            last_vowel_index = index\n        } else if consonants.contains(char)\
    \ {\n            last_consonant_index = index\n        }\n        if last_vowel_index\
    \ != -1 && last_consonant_index != -1 {\n            result = String(word[word.index(word.startIndex,\
    \ offsetBy: last_vowel_index)])\n            break\n        }\n        index -=\
    \ 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpf69drilb/tmpf69drilb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af84ccf8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af84c9efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af84c9ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af84c9ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf69drilb                        0x0000558ef89557e3 <unavailable> + 6115

    5    libc.so.6                          0x00002af84cee4460 __libc_start_main +
    245

    6    tmpf69drilb                        0x0000558ef8955219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let chars = Array(word)\n    var result = \"\"\n    var minDistance = Int.max\n\
    \    for i in 0..<chars.count {\n        if vowels.contains(String(chars[i]))\
    \ {\n            var left = i - 1\n            var right = i + 1\n           \
    \ while left >= 0 && right < chars.count {\n                if vowels.contains(String(chars[left]))\
    \ {\n                    left -= 1\n                } else if vowels.contains(String(chars[right]))\
    \ {\n                    right += 1\n                } else {\n              \
    \      break\n                }\n            }\n            if left >= 0 && right\
    \ < chars.count {\n                let distance = right - left - 1\n         \
    \       if distance < minDistance {\n                    minDistance = distance\n\
    \                    result = String(chars[i])\n                }\n          \
    \  }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpnhjgd1pc/tmpnhjgd1pc.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba48bf59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba48bc50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba48bc50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba48bc4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnhjgd1pc                        0x000055bcac0ee847 <unavailable> + 6215

    5    libc.so.6                          0x00002ba48c145460 __libc_start_main +
    245

    6    tmpnhjgd1pc                        0x000055bcac0ee489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var word = word.lowercased()\n    for i in (0..<word.count).reversed()\
    \ {\n        let index = word.index(word.startIndex, offsetBy: i)\n        let\
    \ char = String(word[index])\n        if vowels.contains(char) {\n           \
    \ result = char\n            break\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpw9jluyg9/tmpw9jluyg9.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab501e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab4fedbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab4fedb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab4feda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw9jluyg9                        0x000055d2ce156c63 <unavailable> + 7267

    5    libc.so.6                          0x00002aab503d0460 __libc_start_main +
    245

    6    tmpw9jluyg9                        0x000055d2ce156699 <unavailable> + 5785

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestVowelIndex = 0\n\
    \    var currentVowelIndex = 0\n    var currentConsonantIndex = 0\n    var currentConsonantIndex2\
    \ = 0\n    var currentVowel = \"\"\n    var currentConsonant = \"\"\n    var currentConsonant2\
    \ = \"\"\n    var currentIndex = 0\n    var currentIndex2 = 0\n    var currentIndex3\
    \ = 0\n    var currentIndex4 = 0\n    var currentIndex5 = 0\n    var currentIndex6\
    \ = 0\n    var currentIndex7 = 0\n    var currentIndex8 = 0\n    var currentIndex9\
    \ = 0\n    var currentIndex10 = 0\n    var currentIndex11 = 0\n    var currentIndex12\
    \ = 0\n    var currentIndex13 = 0\n    var currentIndex14 = 0\n    var currentIndex15\
    \ = 0\n    var currentIndex16 = 0\n    var currentIndex17 = 0\n    var currentIndex18\
    \ = 0\n    var currentIndex19 = 0\n    var currentIndex20 = 0\n    var currentIndex21\
    \ = 0\n    var currentIndex22 = 0\n    var currentIndex23 = 0\n    var currentIndex24\
    \ = 0\n    var currentIndex25 = 0\n    var currentIndex26 = 0\n    var currentIndex27\
    \ = 0\n    var currentIndex28 = 0\n    var currentIndex29 = 0\n    var currentIndex30\
    \ = 0\n    var currentIndex31 = 0\n    var currentIndex32 = 0\n    var currentIndex33\
    \ = 0\n    var currentIndex34 = 0\n    var currentIndex35 = 0\n    var currentIndex36\
    \ = 0\n    var currentIndex37 = 0\n    var currentIndex38 = 0\n    var currentIndex39\
    \ = 0\n    var currentIndex40 = 0\n    var currentIndex41 = 0\n    var currentIndex42\
    \ = 0\n    var currentIndex43 = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpca8u0mjv.swift:9:9: warning: initialization of immutable value\
    \ 'vowels' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    ~~~~^~~~~~\n \
    \   _\n/tmp/tmpca8u0mjv.swift:10:9: warning: initialization of immutable value\
    \ 'consonants' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"y\", \"z\"]\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpca8u0mjv.swift:11:9: warning:\
    \ initialization of variable 'closestVowel' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var closestVowel = \"\"\n    ~~~~^~~~~~~~~~~~\n\
    \    _\n/tmp/tmpca8u0mjv.swift:12:9: warning: initialization of variable 'closestVowelIndex'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var closestVowelIndex = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpca8u0mjv.swift:13:9:\
    \ warning: initialization of variable 'currentVowelIndex' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var currentVowelIndex =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpca8u0mjv.swift:14:9: warning: initialization\
    \ of variable 'currentConsonantIndex' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var currentConsonantIndex = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpca8u0mjv.swift:15:9: warning: initialization of variable 'currentConsonantIndex2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var currentConsonantIndex2 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpca8u0mjv.swift:16:9:\
    \ warning: initialization of variable 'currentVowel' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var currentVowel = \"\"\
    \n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpca8u0mjv.swift:17:9: warning: initialization\
    \ of variable 'currentConsonant' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var currentConsonant = \"\"\n    ~~~~^~~~~~~"
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    while index >= 0\
    \ {\n        let char = word[word.index(word.startIndex, offsetBy: index)]\n \
    \       if vowels.contains(char) {\n            result = String(char)\n      \
    \      break\n        }\n        index -= 1\n    }\n    index = word.count - 1\n\
    \    while index >= 0 {\n        let char = word[word.index(word.startIndex, offsetBy:\
    \ index)]\n        if consonants.contains(char) {\n            break\n       \
    \ }\n        index -= 1\n    }\n    if index > 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]\n        if vowels.contains(char) {\n            result\
    \ = String(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpncpi2wqg/tmpncpi2wqg.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b06680c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b06377b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b06377988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b063767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpncpi2wqg                        0x000055a501c447e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b4b0686c460 __libc_start_main +
    245

    6    tmpncpi2wqg                        0x000055a501c44219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var index = 0\n    var vowelIndex\
    \ = 0\n    var vowelFound = false\n    var consonantFound = false\n    var vowelDistance\
    \ = 0\n    var closestVowelDistance = 0\n    var closestVowelIndex = 0\n    var\
    \ closestVowel = \"\"\n    var wordArray = Array(word)\n    var wordLength = wordArray.count\n\
    \    while index < wordLength {\n        if vowels.contains(String(wordArray[index]))\
    \ {\n            vowelFound = true\n            vowelIndex = index\n        }\n\
    \        if consonants.contains(String(wordArray[index])) {\n            consonantFound\
    \ = true\n        }\n        if vowelFound && consonantFound {\n            vowelDistance\
    \ = index - vowelIndex\n            if vowelDistance > closestVowelDistance {\n\
    \                closestVowelDistance = vowelDistance\n                closestVowelIndex\
    \ = vowelIndex\n                closestVowel = String(wordArray[vowelIndex])\n\
    \            }\n            vowelFound = false\n            consonantFound = false\n\
    \        }\n        index += 1\n    }\n    if closestVowelDistance > 0 {\n   \
    \     result = closestVowel\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpw0_4gx9y/tmpw0_4gx9y.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57dda45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57dd73cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57dd73c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57dd73b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw0_4gx9y                        0x000055ae676fd6c7 <unavailable> + 5831

    5    libc.so.6                          0x00002b57ddc31460 __libc_start_main +
    245

    6    tmpw0_4gx9y                        0x000055ae676fd309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        let char = word[word.index(word.startIndex, offsetBy: index)]\n     \
    \   if vowels.contains(String(char)) {\n            result = String(char)\n  \
    \          break\n        }\n        index -= 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpetdmyjnl/tmpetdmyjnl.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcdb1a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcdae9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcdae9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcdae9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpetdmyjnl                        0x00005647b4f298a3 <unavailable> + 6307

    5    libc.so.6                          0x00002afcdb392460 __libc_start_main +
    245

    6    tmpetdmyjnl                        0x00005647b4f292d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var count = 0\n    for char in word.characters.reversed()\
    \ {\n        if vowels.contains(String(char)) {\n            result = String(char)\n\
    \            break\n        }\n        if consonants.contains(String(char)) {\n\
    \            count += 1\n        }\n        if count == 2 {\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpyuv4x36t.swift:13:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var vowel_index = -1\n    var consonant_index = -1\n\
    \    for (index, char) in word.characters.enumerated() {\n        if vowels.contains(String(char))\
    \ {\n            vowel_index = index\n        }\n        if consonants.contains(String(char))\
    \ {\n            consonant_index = index\n        }\n        if vowel_index >\
    \ -1 && consonant_index > -1 && vowel_index < consonant_index {\n            result\
    \ = String(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp6mbh84n_.swift:14:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        let char = String(word[word.index(word.startIndex, offsetBy: index)])\n\
    \        if vowels.contains(char) {\n            result = char\n            break\n\
    \        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp886d6_73/tmp886d6_73.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f96065c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f95d5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f95d5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f95d5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp886d6_73                        0x000055dda672b8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b0f96251460 __libc_start_main +
    245

    6    tmp886d6_73                        0x000055dda672b2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = 0\n    var is_consonant = false\n   \
    \ for char in word.characters.reversed() {\n        if vowels.contains(char) {\n\
    \            if is_consonant {\n                result = String(char)\n      \
    \          break\n            }\n        } else if consonants.contains(char) {\n\
    \            is_consonant = true\n        }\n        index += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmppn7i8hir.swift:14:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        if vowels.contains(String(word[word.index(word.startIndex, offsetBy:\
    \ index)])) {\n            result = String(word[word.index(word.startIndex, offsetBy:\
    \ index)])\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpdeido85y/tmpdeido85y.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2841678c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b284136fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b284136f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b284136e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdeido85y                        0x000055d55f1fa8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b2841864460 __libc_start_main +
    245

    6    tmpdeido85y                        0x000055d55f1fa2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestVowelIndex = word.count\n\
    \    for (index, char) in word.enumerated() {\n        if vowels.contains(String(char))\
    \ {\n            if index > 0 && consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)])) {\n                if index < word.count - 1 && consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)])) {\n                    if index < closestVowelIndex\
    \ {\n                        closestVowel = String(char)\n                   \
    \     closestVowelIndex = index\n                    }\n                }\n  \
    \          }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpbdw61p5c/tmpbdw61p5c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73b31adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73b2ea4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73b2ea4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73b2ea37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdw61p5c                        0x00005578f25408f7 <unavailable> + 6391

    5    libc.so.6                          0x00002b73b3399460 __libc_start_main +
    245

    6    tmpbdw61p5c                        0x00005578f2540539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp338t3ynr/tmp338t3ynr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71dd032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71dcd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71dcd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71dcd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp338t3ynr                        0x00005575e0a8d7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b71dd21e460 __libc_start_main +
    245

    6    tmp338t3ynr                        0x00005575e0a8d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        let char = String(word[word.index(word.startIndex, offsetBy: index)])\n\
    \        if vowels.contains(char) {\n            result = char\n            break\n\
    \        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp886d6_73/tmp886d6_73.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f96065c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f95d5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f95d5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f95d5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp886d6_73                        0x000055dda672b8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b0f96251460 __libc_start_main +
    245

    6    tmp886d6_73                        0x000055dda672b2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var last_vowel = \"\"\n    var last_consonant = \"\"\n    for c in word.characters\
    \ {\n        if vowels.containsString(String(c)) {\n            last_vowel = String(c)\n\
    \        } else {\n            last_consonant = String(c)\n        }\n       \
    \ if last_vowel != \"\" && last_consonant != \"\" {\n            result = last_vowel\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp7bcpppf4.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7bcpppf4.swift:14:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(c))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closest_vowel = \"\"\n    var closest_vowel_index = 0\n\
    \    var closest_consonant_index = 0\n    var closest_consonant_index_2 = 0\n\
    \    var closest_vowel_distance = 0\n    var closest_consonant_distance = 0\n\
    \    var closest_consonant_distance_2 = 0\n    var vowel_index = 0\n    var consonant_index\
    \ = 0\n    var consonant_index_2 = 0\n    var vowel_distance = 0\n    var consonant_distance\
    \ = 0\n    var consonant_distance_2 = 0\n    for i in 0..<word.count {\n     \
    \   let index = word.index(word.startIndex, offsetBy: i)\n        let char = String(word[index])\n\
    \        if vowels.contains(char) {\n            vowel_index = i\n           \
    \ vowel_distance = word.count - i\n            if vowel_distance > closest_vowel_distance\
    \ {\n                closest_vowel_distance = vowel_distance\n               \
    \ closest_vowel_index = vowel_index\n            }\n        }\n        if consonants.contains(char)\
    \ {\n            consonant_index = i\n            consonant_distance = word.count\
    \ - i\n            if consonant_distance > closest_consonant_distance {\n    \
    \            closest_consonant_distance = consonant_distance\n               \
    \ closest_consonant_index = consonant_index\n            }\n        }\n    }\n\
    \    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if consonants.contains(char)\
    \ {\n            consonant_index_2 = i\n            consonant_distance_2 = word.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpppl8vda0.swift:77:48: error: expected '}' at end of brace statement\n\
    assert(get_closest_vowel(word: \"Above\") == \"o\")\n                        \
    \                       ^\n/tmp/tmpppl8vda0.swift:44:29: note: to match this opening\
    \ '{'\n    for i in 0..<word.count {\n                            ^\n/tmp/tmpppl8vda0.swift:77:48:\
    \ error: expected '}' at end of brace statement\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")\n                                               ^\n/tmp/tmpppl8vda0.swift:8:48:\
    \ note: to match this opening '{'\nfunc get_closest_vowel(word: String) -> String\
    \ {\n                                               ^\n/tmp/tmpppl8vda0.swift:53:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpppl8vda0.swift:11:9:\
    \ warning: initialization of variable 'closest_vowel' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var closest_vowel = \"\"\
    \n    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpppl8vda0.swift:12:9: warning: variable\
    \ 'closest_vowel_index' was written to, but never read\n    var closest_vowel_index\
    \ = 0\n        ^\n/tmp/tmpppl8vda0.swift:13:9: warning: variable 'closest_consonant_index'\
    \ was written to, but never read\n    var closest_consonant_index = 0\n      \
    \  ^\n/tmp/tmpppl8vda0.swift:14:9: warning: initialization of variable 'closest_consonant_index_2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var closest_consonant_index_2 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n   \
    \ _\n/tmp/tmpppl8vda0.swift:17:9: warning: initialization of variable 'closest_consonant_distance_2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var closest_consonant_distance_2 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpppl8vda0.swift:20:9: warning: variable 'consonant_index_2' was\
    \ written to, but never read\n    var consonant_index_2 = 0\n        ^\n/tmp/tmpppl8vda0.swift:23:9:\
    \ warning: variable 'consonant_distance_2' was written to, but never read\n  \
    \  var consona"
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var index = 0\n    var is_vowel =\
    \ false\n    var is_consonant = false\n    for i in (0..<word.count).reversed()\
    \ {\n        let char = String(word[word.index(word.startIndex, offsetBy: i)])\n\
    \        if vowels.contains(char) {\n            is_vowel = true\n           \
    \ index = i\n        }\n        if consonants.contains(char) && is_vowel {\n \
    \           is_consonant = true\n            break\n        }\n    }\n    if is_vowel\
    \ && is_consonant {\n        result = String(word[word.index(word.startIndex,\
    \ offsetBy: index)])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp1nc_jm5e/tmp1nc_jm5e.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03e2c2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03e2925b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03e2925988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03e29247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1nc_jm5e                        0x000055e61f650e3b <unavailable> + 7739

    5    libc.so.6                          0x00002b03e2e1a460 __libc_start_main +
    245

    6    tmp1nc_jm5e                        0x000055e61f650639 <unavailable> + 5689

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var index = 0\n    for char in word.characters.reversed()\
    \ {\n        if vowels.contains(String(char)) {\n            result = String(char)\n\
    \            break\n        }\n        index += 1\n    }\n    if index == word.characters.count\
    \ {\n        return \"\"\n    }\n    for char in word.characters.reversed() {\n\
    \        if consonants.contains(String(char)) {\n            break\n        }\n\
    \        index += 1\n    }\n    if index == word.characters.count {\n        return\
    \ \"\"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp8gj0v3bh.swift:13:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp8gj0v3bh.swift:20:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    if index == word.characters.count {\n             \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp8gj0v3bh.swift:23:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in word.characters.reversed() {\n                     ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp8gj0v3bh.swift:29:22: error: 'characters'\
    \ is unavailable: Please use String directly\n    if index == word.characters.count\
    \ {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        let char = word[word.index(word.startIndex, offsetBy: index)]\n     \
    \   if vowels.contains(String(char)) {\n            result = String(char)\n  \
    \          break\n        }\n        index -= 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6brdywxg/tmp6brdywxg.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aacd13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacd10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aacd10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aacd10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6brdywxg                        0x0000558ed44558a3 <unavailable> + 6307

    5    libc.so.6                          0x00002aacd15e7460 __libc_start_main +
    245

    6    tmp6brdywxg                        0x0000558ed44552d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var index = 0\n    var index_vowel\
    \ = 0\n    var index_consonant = 0\n    var distance = 0\n    var distance_min\
    \ = 0\n    var distance_min_index = 0\n    var distance_min_index_vowel = 0\n\
    \    var distance_min_index_consonant = 0\n    for letter in word {\n        if\
    \ vowels.contains(String(letter)) {\n            index_vowel = index\n       \
    \ }\n        if consonants.contains(String(letter)) {\n            index_consonant\
    \ = index\n        }\n        if index_vowel > index_consonant {\n           \
    \ distance = index_vowel - index_consonant\n            if distance_min == 0 {\n\
    \                distance_min = distance\n                distance_min_index =\
    \ index\n                distance_min_index_vowel = index_vowel\n            \
    \    distance_min_index_consonant = index_consonant\n            }\n         \
    \   if distance < distance_min {\n                distance_min = distance\n  \
    \              distance_min_index = index\n                distance_min_index_vowel\
    \ = index_vowel\n                distance_min_index_consonant = index_consonant\n\
    \            }\n        }\n        index += 1\n    }\n    if distance_min_index_vowel\
    \ > distance_min_index_consonant {\n        result = String(word[word.index(word.startIndex,\
    \ offsetBy: distance_min_index_vowel)])\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpwocf66iq/tmpwocf66iq.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0a8a5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0a8753b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0a8753988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0a87527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwocf66iq                        0x000056414a21f707 <unavailable> + 5895

    5    libc.so.6                          0x00002ab0a8c48460 __libc_start_main +
    245

    6    tmpwocf66iq                        0x000056414a21f349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var index = 0\n    var is_consonant\
    \ = false\n    var is_vowel = false\n    var is_first_vowel = false\n    var is_first_consonant\
    \ = false\n    var is_second_vowel = false\n    var is_second_consonant = false\n\
    \    var is_third_vowel = false\n    var is_third_consonant = false\n    var is_fourth_vowel\
    \ = false\n    var is_fourth_consonant = false\n    var is_fifth_vowel = false\n\
    \    var is_fifth_consonant = false\n    var is_sixth_vowel = false\n    var is_sixth_consonant\
    \ = false\n    var is_seventh_vowel = false\n    var is_seventh_consonant = false\n\
    \    var is_eighth_vowel = false\n    var is_eighth_consonant = false\n    var\
    \ is_ninth_vowel = false\n    var is_ninth_consonant = false\n    var is_tenth_vowel\
    \ = false\n    var is_tenth_consonant = false\n    var is_eleventh_vowel = false\n\
    \    var is_eleventh_consonant = false\n    var is_twelfth_vowel = false\n   \
    \ var is_twelfth_consonant = false\n    var is_thirteenth_vowel = false\n    var\
    \ is_thirteenth_consonant = false\n    var is_fourteenth_vowel = false\n    var\
    \ is_fourteenth_consonant = false\n    var is_fifteenth_vowel = false\n    var\
    \ is_fifteenth_consonant = false\n    var is_sixteenth_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpnoscqnrv.swift:45:9: error: type annotation missing in pattern\n\
    \    var is_sixteenth_\n        ^\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        let char = String(word[word.index(word.startIndex, offsetBy: index)])\n\
    \        if vowels.contains(char) {\n            result = char\n            break\n\
    \        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp886d6_73/tmp886d6_73.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f96065c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f95d5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f95d5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f95d5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp886d6_73                        0x000055dda672b8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b0f96251460 __libc_start_main +
    245

    6    tmp886d6_73                        0x000055dda672b2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var prev_char = \" \"\n    for char in word.reversed() {\n        if vowels.contains(char)\
    \ {\n            if prev_char != \" \" && !vowels.contains(prev_char) {\n    \
    \            result = String(char)\n                break\n            }\n   \
    \     }\n        prev_char = String(char)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp2eynizo0/tmp2eynizo0.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b299fe86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b299fb7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b299fb7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b299fb7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2eynizo0                        0x000055ebc59be953 <unavailable> + 6483

    5    libc.so.6                          0x00002b29a0072460 __libc_start_main +
    245

    6    tmp2eynizo0                        0x000055ebc59be389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var result = \"\"\n    let vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var index = word.count - 1\n    var\
    \ vowel_index = -1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(String(char)) {\n            vowel_index\
    \ = index\n        }\n        if consonants.contains(String(char)) && vowel_index\
    \ != -1 {\n            result = String(word[word.index(word.startIndex, offsetBy:\
    \ vowel_index)])\n            break\n        }\n        index -= 1\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp4m7ahsp4/tmp4m7ahsp4.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4dee4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4deb44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4deb44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4deb437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4m7ahsp4                        0x000055cdd8c91adb <unavailable> + 6875

    5    libc.so.6                          0x00002ad4df039460 __libc_start_main +
    245

    6    tmp4m7ahsp4                        0x000055cdd8c912d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = 0\n    for char in word.characters.reversed()\
    \ {\n        if vowels.contains(char) {\n            if index > 0 && consonants.contains(word[word.index(word.endIndex,\
    \ offsetBy: -index - 1)]) {\n                result = String(char)\n         \
    \       break\n            }\n        }\n        index += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpwxcwnxuc.swift:13:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp338t3ynr/tmp338t3ynr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71dd032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71dcd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71dcd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71dcd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp338t3ynr                        0x00005575e0a8d7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b71dd21e460 __libc_start_main +
    245

    6    tmp338t3ynr                        0x00005575e0a8d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var vowel_index = -1\n    var consonant_index\
    \ = -1\n    var i = word.count - 1\n    while i >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: i)]\n        if vowels.contains(String(char)) {\n            vowel_index\
    \ = i\n        }\n        if consonants.contains(String(char)) {\n           \
    \ consonant_index = i\n        }\n        if vowel_index != -1 && consonant_index\
    \ != -1 {\n            if vowel_index > consonant_index {\n                result\
    \ = String(char)\n                break\n            }\n        }\n        i -=\
    \ 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpmxlailhl/tmpmxlailhl.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46448b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46445acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46445ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46445ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmxlailhl                        0x000055fe873bb697 <unavailable> + 5783

    5    libc.so.6                          0x00002b4644aa1460 __libc_start_main +
    245

    6    tmpmxlailhl                        0x000055fe873bb2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[index]\n\
    \        if vowels.contains(char) {\n            result = String(char)\n     \
    \       break\n        }\n        index -= 1\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp2_3bruim.swift:13:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        let char\
    \ = word[index]\n                   ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013510
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ for (index, char) in word.characters.enumerated() {\n        if vowels.contains(char)\
    \ {\n            if index > 0 && index < word.characters.count - 1 {\n       \
    \         let left = word[word.index(word.startIndex, offsetBy: index - 1)]\n\
    \                let right = word[word.index(word.startIndex, offsetBy: index\
    \ + 1)]\n                if !vowels.contains(left) && !vowels.contains(right)\
    \ {\n                    result = String(char)\n                    break\n  \
    \              }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpjeekz_wr.swift:11:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpjeekz_wr.swift:13:42: error: 'characters' is unavailable:\
    \ Please use String directly\n            if index > 0 && index < word.characters.count\
    \ - 1 {\n                                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    for (index, char) in word.characters.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            if index > 0 && index\
    \ < word.characters.count - 1 {\n                let prevChar = word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]\n                let nextChar = word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]\n                if !vowels.contains(String(prevChar))\
    \ && !vowels.contains(String(nextChar)) {\n                    result = String(char)\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpz0ed484y.swift:11:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpz0ed484y.swift:13:42: error: 'characters' is unavailable:\
    \ Please use String directly\n            if index > 0 && index < word.characters.count\
    \ - 1 {\n                                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let chars = Array(word)\n    var result = \"\"\n    for i in (0..<chars.count).reversed()\
    \ {\n        if vowels.contains(String(chars[i])) {\n            result = String(chars[i])\n\
    \            if i + 1 < chars.count && !vowels.contains(String(chars[i + 1]))\
    \ {\n                break\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpoiae5zyd/tmpoiae5zyd.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f04dcdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f04ac4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f04ac4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f04ac37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoiae5zyd                        0x000055f426a52c23 <unavailable> + 7203

    5    libc.so.6                          0x00002b3f04fb9460 __libc_start_main +
    245

    6    tmpoiae5zyd                        0x000055f426a52659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ for (i, char) in word.characters.enumerated() {\n        if vowels.contains(char)\
    \ {\n            if i > 0 && !vowels.contains(word[word.index(word.startIndex,\
    \ offsetBy: i - 1)]) {\n                if i < word.characters.count - 1 && !vowels.contains(word[word.index(word.startIndex,\
    \ offsetBy: i + 1)]) {\n                    result = String(char)\n          \
    \      }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp35iu51m9.swift:11:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (i, char) in word.characters.enumerated() {\n \
    \                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp35iu51m9.swift:14:29: error: 'characters' is unavailable:\
    \ Please use String directly\n                if i < word.characters.count - 1\
    \ && !vowels.contains(word[word.index(word.startIndex, offsetBy: i + 1)]) {\n\
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var word_array = Array(word)\n    for i in 0..<word_array.count\
    \ {\n        if vowels.contains(String(word_array[i])) {\n            if i ==\
    \ 0 {\n                continue\n            } else if i == word_array.count -\
    \ 1 {\n                break\n            } else if vowels.contains(String(word_array[i-1]))\
    \ {\n                continue\n            } else if vowels.contains(String(word_array[i+1]))\
    \ {\n                continue\n            } else {\n                result =\
    \ String(word_array[i])\n                break\n            }\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp14tu0lpp/tmp14tu0lpp.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b372c826c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b372c51db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b372c51d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b372c51c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp14tu0lpp                        0x000055fa6c2c6847 <unavailable> + 6215

    5    libc.so.6                          0x00002b372ca12460 __libc_start_main +
    245

    6    tmp14tu0lpp                        0x000055fa6c2c6489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var closest_vowel = \"\"\
    \n    var closest_distance = Int.max\n    for (i, char) in word.characters.enumerated()\
    \ {\n        if vowels.contains(char) {\n            var distance = 0\n      \
    \      for j in (i + 1)..<word.characters.count {\n                if vowels.contains(word[j])\
    \ {\n                    distance = j - i\n                    break\n       \
    \         }\n            }\n            if distance < closest_distance {\n   \
    \             closest_distance = distance\n                closest_vowel = String(char)\n\
    \            }\n        }\n    }\n    return closest_vowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpn26sc3rd.swift:12:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (i, char) in word.characters.enumerated() {\n \
    \                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpn26sc3rd.swift:15:37: error: 'characters' is unavailable:\
    \ Please use String directly\n            for j in (i + 1)..<word.characters.count\
    \ {\n                                    ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpn26sc3rd.swift:16:36: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if vowels.contains(word[j]) {\n                             \
    \      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        let char = String(word[word.index(word.startIndex, offsetBy: index)])\n\
    \        if vowels.contains(char) {\n            result = char\n            break\n\
    \        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp886d6_73/tmp886d6_73.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f96065c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f95d5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f95d5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f95d5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp886d6_73                        0x000055dda672b8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b0f96251460 __libc_start_main +
    245

    6    tmp886d6_73                        0x000055dda672b2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var last_consonant = \"\"\n    var last_vowel = \"\"\n    for char in word.characters\
    \ {\n        if vowels.containsString(String(char)) {\n            last_vowel\
    \ = String(char)\n        } else {\n            last_consonant = String(char)\n\
    \        }\n        if last_consonant != \"\" && last_vowel != \"\" {\n      \
    \      result = last_vowel\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp64lc1he9.swift:13:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp64lc1he9.swift:14:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013510
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var closestVowel = \"\"\
    \n    var closestDistance = Int.max\n    for (index, char) in word.characters.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            var distance = 0\n\
    \            for i in index..<word.characters.count {\n                if vowels.contains(String(word[i]))\
    \ {\n                    break\n                }\n                distance +=\
    \ 1\n            }\n            if distance < closestDistance {\n            \
    \    closestDistance = distance\n                closestVowel = String(char)\n\
    \            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpd6ge1dbj.swift:12:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd6ge1dbj.swift:15:35: error: 'characters' is unavailable:\
    \ Please use String directly\n            for i in index..<word.characters.count\
    \ {\n                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd6ge1dbj.swift:16:43: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if vowels.contains(String(word[i])) {\n                              \
    \            ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp338t3ynr/tmp338t3ynr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71dd032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71dcd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71dcd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71dcd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp338t3ynr                        0x00005575e0a8d7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b71dd21e460 __libc_start_main +
    245

    6    tmp338t3ynr                        0x00005575e0a8d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let chars = Array(word)\n    var result = \"\"\n    var index = chars.count\
    \ - 1\n    while index >= 0 {\n        if vowels.contains(String(chars[index]))\
    \ {\n            result = String(chars[index])\n            break\n        }\n\
    \        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpntt997kn/tmpntt997kn.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af289396c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af28908db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af28908d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af28908c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpntt997kn                        0x000055ba9ce748d3 <unavailable> + 6355

    5    libc.so.6                          0x00002af289582460 __libc_start_main +
    245

    6    tmpntt997kn                        0x000055ba9ce74309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var last_vowel_index = -1\n    for (index, char) in\
    \ word.enumerated() {\n        if vowels.contains(String(char)) {\n          \
    \  last_vowel_index = index\n        } else {\n            if last_vowel_index\
    \ != -1 {\n                result = String(word[word.index(word.startIndex, offsetBy:\
    \ last_vowel_index)])\n                break\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp764pz556/tmp764pz556.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47eee88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47eeb7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47eeb7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47eeb7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp764pz556                        0x000055c89c3518a7 <unavailable> + 6311

    5    libc.so.6                          0x00002b47ef074460 __libc_start_main +
    245

    6    tmp764pz556                        0x000055c89c3514e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp338t3ynr/tmp338t3ynr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71dd032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71dcd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71dcd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71dcd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp338t3ynr                        0x00005575e0a8d7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b71dd21e460 __libc_start_main +
    245

    6    tmp338t3ynr                        0x00005575e0a8d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var last_vowel = \"\"\n    for char in word.characters.reversed()\
    \ {\n        if vowels.contains(String(char)) {\n            last_vowel = String(char)\n\
    \            break\n        }\n    }\n    for char in word.characters.reversed()\
    \ {\n        if vowels.contains(String(char)) {\n            result = String(char)\n\
    \        } else {\n            if result != \"\" {\n                break\n  \
    \          }\n        }\n    }\n    if result == \"\" {\n        return last_vowel\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp3vigwpei.swift:12:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3vigwpei.swift:18:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let chars = Array(word)\n    var result = \"\"\n    for i in (0..<chars.count).reversed()\
    \ {\n        if vowels.contains(String(chars[i])) {\n            if i == chars.count\
    \ - 1 {\n                continue\n            }\n            if !vowels.contains(String(chars[i\
    \ + 1])) {\n                result = String(chars[i])\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpiue_0spu/tmpiue_0spu.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbdbac7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbdb7beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbdb7be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbdb7bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiue_0spu                        0x00005624f40acc23 <unavailable> + 7203

    5    libc.so.6                          0x00002abbdbcb3460 __libc_start_main +
    245

    6    tmpiue_0spu                        0x00005624f40ac659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closest_vowel = \"\"\n    var closest_vowel_index = word.count\n   \
    \ for (index, char) in word.enumerated() {\n        if vowels.contains(char) {\n\
    \            if consonants.contains(word[word.index(word.startIndex, offsetBy:\
    \ index - 1)]) && consonants.contains(word[word.index(word.startIndex, offsetBy:\
    \ index + 1)]) {\n                if index < closest_vowel_index {\n         \
    \           closest_vowel = String(char)\n                    closest_vowel_index\
    \ = index\n                }\n            }\n        }\n    }\n    return closest_vowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpym7zpeag/tmpym7zpeag.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34e3e87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34e3b7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34e3b7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34e3b7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpym7zpeag                        0x00005562509947e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b34e4073460 __libc_start_main +
    245

    6    tmpym7zpeag                        0x0000556250994429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var vowel_index = -1\n    var consonant_index\
    \ = -1\n    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            vowel_index = i\n        }\n        if consonants.contains(char)\
    \ {\n            consonant_index = i\n        }\n        if vowel_index != -1\
    \ && consonant_index != -1 && vowel_index > consonant_index {\n            result\
    \ = String(word[index])\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpber9ozmb/tmpber9ozmb.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b372d7afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b372d4a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b372d4a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b372d4a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpber9ozmb                        0x000055eb5b72b827 <unavailable> + 6183

    5    libc.so.6                          0x00002b372d99b460 __libc_start_main +
    245

    6    tmpber9ozmb                        0x000055eb5b72b469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var result = \"\"\n    let vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var index = word.count - 1\n    var\
    \ vowel_index = -1\n    var consonant_index = -1\n    while index >= 0 {\n   \
    \     let char = word[word.index(word.startIndex, offsetBy: index)]\n        if\
    \ vowels.contains(String(char)) {\n            vowel_index = index\n        }\n\
    \        if consonants.contains(String(char)) {\n            consonant_index =\
    \ index\n        }\n        if vowel_index != -1 && consonant_index != -1 {\n\
    \            if vowel_index > consonant_index {\n                result = String(char)\n\
    \                break\n            }\n        }\n        index -= 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmptl715jgj/tmptl715jgj.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b112fd8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b112fa83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b112fa83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b112fa827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptl715jgj                        0x000055b07c7e4697 <unavailable> + 5783

    5    libc.so.6                          0x00002b112ff78460 __libc_start_main +
    245

    6    tmptl715jgj                        0x000055b07c7e42d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closest_vowel = \"\"\n    var closest_vowel_index = 0\n    var closest_consonant_index\
    \ = 0\n    var closest_consonant = \"\"\n    var index = 0\n    for letter in\
    \ word.characters {\n        if vowels.containsString(String(letter)) {\n    \
    \        if closest_vowel_index == 0 {\n                closest_vowel = String(letter)\n\
    \                closest_vowel_index = index\n            }\n            else\
    \ if index > closest_vowel_index && index < closest_consonant_index {\n      \
    \          closest_vowel = String(letter)\n                closest_vowel_index\
    \ = index\n            }\n        }\n        else if consonants.containsString(String(letter))\
    \ {\n            if closest_consonant_index == 0 {\n                closest_consonant\
    \ = String(letter)\n                closest_consonant_index = index\n        \
    \    }\n            else if index > closest_vowel_index && index < closest_consonant_index\
    \ {\n                closest_consonant = String(letter)\n                closest_consonant_index\
    \ = index\n            }\n        }\n        index += 1\n    }\n    return closest_vowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpv4r5r2f6.swift:16:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in word.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpv4r5r2f6.swift:17:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(letter))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpv4r5r2f6.swift:27:28: error: value\
    \ of type 'String' has no member 'containsString'\n        else if consonants.containsString(String(letter))\
    \ {\n                ~~~~~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp338t3ynr/tmp338t3ynr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71dd032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71dcd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71dcd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71dcd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp338t3ynr                        0x00005575e0a8d7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b71dd21e460 __libc_start_main +
    245

    6    tmp338t3ynr                        0x00005575e0a8d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = 0\n    let word = word.lowercased()\n    for char in word.reversed()\
    \ {\n        if vowels.contains(char) {\n            result = String(char)\n \
    \           break\n        }\n        index += 1\n    }\n    if index == word.count\
    \ {\n        return \"\"\n    }\n    for char in word.reversed() {\n        if\
    \ !vowels.contains(char) {\n            break\n        }\n        index += 1\n\
    \    }\n    return String(word.suffix(index))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpdemlk3cz/tmpdemlk3cz.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0602a9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0602793b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0602793988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06027927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdemlk3cz                        0x000055c9afe5c7f7 <unavailable> + 6135

    5    libc.so.6                          0x00002b0602c88460 __libc_start_main +
    245

    6    tmpdemlk3cz                        0x000055c9afe5c439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var i = word.count - 1\n    while i >= 0 {\n     \
    \   let index = word.index(word.startIndex, offsetBy: i)\n        let char = String(word[index])\n\
    \        if vowels.contains(char) {\n            result = char\n            break\n\
    \        }\n        i -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmphc81r5uk/tmphc81r5uk.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b551ac1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b551a911b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b551a911988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b551a9107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphc81r5uk                        0x00005609d00f08a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b551ae06460 __libc_start_main +
    245

    6    tmphc81r5uk                        0x00005609d00f02d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ for (index, char) in word.characters.enumerated() {\n        if vowels.contains(char)\
    \ {\n            if index > 0 && index < word.characters.count - 1 {\n       \
    \         if !vowels.contains(word[word.index(word.startIndex, offsetBy: index\
    \ - 1)]) && !vowels.contains(word[word.index(word.startIndex, offsetBy: index\
    \ + 1)]) {\n                    result = String(char)\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpudr5wun9.swift:11:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpudr5wun9.swift:13:42: error: 'characters' is unavailable:\
    \ Please use String directly\n            if index > 0 && index < word.characters.count\
    \ - 1 {\n                                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp338t3ynr/tmp338t3ynr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71dd032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71dcd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71dcd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71dcd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp338t3ynr                        0x00005575e0a8d7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b71dd21e460 __libc_start_main +
    245

    6    tmp338t3ynr                        0x00005575e0a8d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let chars = Array(word)\n    for i in (0..<chars.count).reversed() {\n  \
    \      if vowels.contains(String(chars[i])) {\n            if i == chars.count\
    \ - 1 {\n                return \"\"\n            }\n            if !vowels.contains(String(chars[i\
    \ + 1])) {\n                return String(chars[i])\n            }\n        }\n\
    \    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpaw2l1dzc/tmpaw2l1dzc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee919c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee610b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee610988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee60f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaw2l1dzc                        0x000055fee176bc23 <unavailable> + 7203

    5    libc.so.6                          0x00002b9ceeb05460 __libc_start_main +
    245

    6    tmpaw2l1dzc                        0x000055fee176b659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    var last_vowel_index = -1\n    while index >=\
    \ 0 {\n        let char = word[word.index(word.startIndex, offsetBy: index)]\n\
    \        if vowels.contains(char) {\n            last_vowel_index = index\n  \
    \      } else {\n            if last_vowel_index != -1 {\n                result\
    \ = String(word[word.index(word.startIndex, offsetBy: last_vowel_index)])\n  \
    \              break\n            }\n        }\n        index -= 1\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp78gndwat/tmp78gndwat.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0beda72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bed769b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bed769988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bed7687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp78gndwat                        0x0000556ea8834a1b <unavailable> + 6683

    5    libc.so.6                          0x00002b0bedc5e460 __libc_start_main +
    245

    6    tmp78gndwat                        0x0000556ea8834219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var i = word.count - 1\n    while i >= 0 {\n    \
    \    let index = word.index(word.startIndex, offsetBy: i)\n        let char =\
    \ String(word[index])\n        if vowels.contains(char) {\n            result\
    \ = char\n            break\n        }\n        i -= 1\n    }\n    if result ==\
    \ \"\" {\n        return result\n    }\n    i -= 1\n    while i >= 0 {\n     \
    \   let index = word.index(word.startIndex, offsetBy: i)\n        let char = String(word[index])\n\
    \        if consonants.contains(char) {\n            return result\n        }\n\
    \        i -= 1\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6k3k9v1v/tmp6k3k9v1v.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58f0b8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58f0882b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58f0882988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58f08817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6k3k9v1v                        0x000055cf70ecb9db <unavailable> + 6619

    5    libc.so.6                          0x00002b58f0d77460 __libc_start_main +
    245

    6    tmp6k3k9v1v                        0x000055cf70ecb1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var i = word.count - 1\n    while i >= 0 {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = word[index]\n        if vowels.contains(char)\
    \ {\n            result = String(char)\n            break\n        }\n       \
    \ i -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpilovc9mu/tmpilovc9mu.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2cb26ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2caf61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2caf61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2caf607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpilovc9mu                        0x00005624781e07e3 <unavailable> + 6115

    5    libc.so.6                          0x00002ba2cb456460 __libc_start_main +
    245

    6    tmpilovc9mu                        0x00005624781e0219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp338t3ynr/tmp338t3ynr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71dd032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71dcd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71dcd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71dcd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp338t3ynr                        0x00005575e0a8d7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b71dd21e460 __libc_start_main +
    245

    6    tmp338t3ynr                        0x00005575e0a8d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var last_consonant_index = 0\n    var last_vowel_index = 0\n    for (index,\
    \ char) in word.characters.enumerated() {\n        if vowels.contains(char) {\n\
    \            last_vowel_index = index\n        } else {\n            last_consonant_index\
    \ = index\n        }\n        if last_vowel_index > last_consonant_index {\n \
    \           result = String(char)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpcmmt3aa7.swift:13:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    var last_consonant\
    \ = false\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if consonants.contains(char) {\n            if last_consonant\
    \ {\n                return result\n            }\n            last_consonant\
    \ = true\n        } else if vowels.contains(char) {\n            result = String(char)\n\
    \            last_consonant = false\n        }\n        index -= 1\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp2z3_xtx2/tmp2z3_xtx2.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8508289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8507f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8507f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8507f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2z3_xtx2                        0x00005580082845d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b8508475460 __libc_start_main +
    245

    6    tmp2z3_xtx2                        0x0000558008284219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var index = word.count - 1\n    var result = \"\"\n    while index >= 0 {\n\
    \        let char = word[word.index(word.startIndex, offsetBy: index)]\n     \
    \   if vowels.contains(String(char)) {\n            result = String(char)\n  \
    \          break\n        }\n        index -= 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpzuvo2lsf/tmpzuvo2lsf.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adebbedbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adebbbd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adebbbd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adebbbd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzuvo2lsf                        0x00005633ab7a18a3 <unavailable> + 6307

    5    libc.so.6                          0x00002adebc0c7460 __libc_start_main +
    245

    6    tmpzuvo2lsf                        0x00005633ab7a12d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    var found = false\n\
    \    while index >= 0 {\n        let char = String(word[word.index(word.startIndex,\
    \ offsetBy: index)])\n        if vowels.contains(char) {\n            if found\
    \ {\n                result = char\n                break\n            }\n   \
    \     } else {\n            found = true\n        }\n        index -= 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp8k71fsyj/tmp8k71fsyj.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba139ec0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba139bb7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba139bb7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba139bb67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8k71fsyj                        0x00005601517548a3 <unavailable> + 6307

    5    libc.so.6                          0x00002ba13a0ac460 __libc_start_main +
    245

    6    tmp8k71fsyj                        0x00005601517542d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var vowel_index = 0\n    var consonant_index = 0\n\
    \    var vowel_found = false\n    var consonant_found = false\n    for i in 0..<word.count\
    \ {\n        let index = word.index(word.startIndex, offsetBy: i)\n        let\
    \ char = word[index]\n        if vowels.contains(char) {\n            vowel_found\
    \ = true\n            vowel_index = i\n        }\n        if consonants.contains(char)\
    \ {\n            consonant_found = true\n            consonant_index = i\n   \
    \     }\n        if vowel_found && consonant_found {\n            result = String(char)\n\
    \            break\n        }\n    }\n    if vowel_index < consonant_index {\n\
    \        return result\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp5fl0w3r5/tmp5fl0w3r5.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa4d507c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa4d1feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa4d1fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa4d1fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5fl0w3r5                        0x000055f24449b757 <unavailable> + 5975

    5    libc.so.6                          0x00002baa4d6f3460 __libc_start_main +
    245

    6    tmp5fl0w3r5                        0x000055f24449b399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    for i in (0..<word.count).reversed() {\n        let\
    \ index = word.index(word.startIndex, offsetBy: i)\n        let char = String(word[index])\n\
    \        if vowels.contains(char) {\n            if i == word.count - 1 {\n  \
    \              break\n            }\n            let nextIndex = word.index(word.startIndex,\
    \ offsetBy: i + 1)\n            let nextChar = String(word[nextIndex])\n     \
    \       if consonants.contains(nextChar) {\n                result = char\n  \
    \              break\n            }\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp9mmws6wu/tmp9mmws6wu.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac75724ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac756f41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac756f41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac756f407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9mmws6wu                        0x000055de0e83cb03 <unavailable> + 6915

    5    libc.so.6                          0x00002ac757436460 __libc_start_main +
    245

    6    tmp9mmws6wu                        0x000055de0e83c539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    var found_consonant\
    \ = false\n    while index >= 0 {\n        let char = String(word[word.index(word.startIndex,\
    \ offsetBy: index)])\n        if vowels.contains(char) {\n            if found_consonant\
    \ {\n                result = char\n                break\n            }\n   \
    \     } else {\n            found_consonant = true\n        }\n        index -=\
    \ 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpjl90smyj/tmpjl90smyj.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac224314c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22400bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22400b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22400a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjl90smyj                        0x000055c10c9b18a3 <unavailable> + 6307

    5    libc.so.6                          0x00002ac224500460 __libc_start_main +
    245

    6    tmpjl90smyj                        0x000055c10c9b12d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var result = \"\"\n    var vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"]\n    var consonants = [\"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var wordArray = Array(word)\n    for\
    \ i in stride(from: wordArray.count - 1, through: 0, by: -1) {\n        if vowels.contains(String(wordArray[i]))\
    \ {\n            if i == wordArray.count - 1 {\n                continue\n   \
    \         }\n            if consonants.contains(String(wordArray[i + 1])) {\n\
    \                result = String(wordArray[i])\n                break\n      \
    \      }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpg76w_uvl/tmpg76w_uvl.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59c4410c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59c4107b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59c4107988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59c41067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg76w_uvl                        0x0000557ed187daf3 <unavailable> + 6899

    5    libc.so.6                          0x00002b59c45fc460 __libc_start_main +
    245

    6    tmpg76w_uvl                        0x0000557ed187d529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660013512
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = 0\n    var found = false\n    for char\
    \ in word.characters.reversed() {\n        if vowels.contains(char) {\n      \
    \      if index > 0 && consonants.contains(word[word.index(word.endIndex, offsetBy:\
    \ -index)]) {\n                result = String(char)\n                found =\
    \ true\n                break\n            }\n        }\n        index += 1\n\
    \    }\n    if !found {\n        result = \"\"\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp13zomtxj.swift:14:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var last_consonant = -1\n    for (i, c) in word.characters.enumerated() {\n\
    \        if vowels.contains(String(c)) {\n            if last_consonant != -1\
    \ {\n                if result == \"\" || i - last_consonant < result.characters.count\
    \ {\n                    result = String(word[word.index(word.startIndex, offsetBy:\
    \ last_consonant + 1)..<word.index(word.startIndex, offsetBy: i)])\n         \
    \       }\n            }\n        } else {\n            last_consonant = i\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmptcmd0f04.swift:12:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (i, c) in word.characters.enumerated() {\n    \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmptcmd0f04.swift:15:64: error: 'characters' is unavailable: Please\
    \ use String directly\n                if result == \"\" || i - last_consonant\
    \ < result.characters.count {\n                                              \
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var last_vowel = \"\"\n    var last_consonant = \"\
    \"\n    for char in word.characters {\n        if vowels.contains(String(char))\
    \ {\n            last_vowel = String(char)\n        } else {\n            last_consonant\
    \ = String(char)\n        }\n        if last_vowel != \"\" && last_consonant !=\
    \ \"\" {\n            result = last_vowel\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmprxq5z_nb.swift:13:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = 0\n    var found = false\n    for char in word.characters.reversed()\
    \ {\n        if vowels.contains(char) {\n            result = String(char)\n \
    \           found = true\n            break\n        }\n        index += 1\n \
    \   }\n    if found {\n        for char in word.characters.reversed() {\n    \
    \        if !vowels.contains(char) {\n                if index == 0 {\n      \
    \              return result\n                }\n                index -= 1\n\
    \            } else {\n                result = \"\"\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpi5y19eho.swift:13:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpi5y19eho.swift:22:26: error: 'characters' is unavailable: Please\
    \ use String directly\n        for char in word.characters.reversed() {\n    \
    \                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpi5y19eho.swift:9:9: warning: variable 'vowels' was never mutated;\
    \ consider changing to 'let' constant\n    var vowels = \"aeiou\"\n    ~~~ ^\n\
    \    let\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    while index >= 0\
    \ {\n        let char = word[word.index(word.startIndex, offsetBy: index)]\n \
    \       if vowels.contains(char) {\n            result = String(char)\n      \
    \      break\n        }\n        index -= 1\n    }\n    index = word.count - 1\n\
    \    while index >= 0 {\n        let char = word[word.index(word.startIndex, offsetBy:\
    \ index)]\n        if consonants.contains(char) {\n            break\n       \
    \ }\n        index -= 1\n    }\n    if index < 0 {\n        return \"\"\n    }\n\
    \    var index2 = index - 1\n    while index2 >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index2)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index2 -= 1\n    }\n   \
    \ if index2 < 0 {\n        return \"\"\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpna7z3fa1/tmpna7z3fa1.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad652172c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad651e69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad651e69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad651e687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpna7z3fa1                        0x0000555cb42337e3 <unavailable> + 6115

    5    libc.so.6                          0x00002ad65235e460 __libc_start_main +
    245

    6    tmpna7z3fa1                        0x0000555cb4233219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013512
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var prev = \"\"\n    var next = \"\"\n    for c in word.characters.reversed()\
    \ {\n        if vowels.contains(String(c)) {\n            if prev != \"\" && next\
    \ != \"\" {\n                return String(c)\n            }\n        } else {\n\
    \            if prev == \"\" {\n                prev = String(c)\n           \
    \ } else {\n                next = String(c)\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmplsfpjxy3.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in word.characters.reversed() {\n           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmplsfpjxy3.swift:10:9:\
    \ warning: variable 'result' was never mutated; consider changing to 'let' constant\n\
    \    var result = \"\"\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        let char = String(word[word.index(word.startIndex, offsetBy: index)])\n\
    \        if vowels.contains(char) {\n            result = char\n            break\n\
    \        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp886d6_73/tmp886d6_73.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f96065c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f95d5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f95d5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f95d5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp886d6_73                        0x000055dda672b8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b0f96251460 __libc_start_main +
    245

    6    tmp886d6_73                        0x000055dda672b2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closest_vowel = \"\"\n    var vowel_index = 0\n    var consonant_index\
    \ = 0\n    var vowel_found = false\n    for i in (0..<word.count).reversed() {\n\
    \        let char = word[word.index(word.startIndex, offsetBy: i)]\n        if\
    \ vowels.contains(char) {\n            vowel_index = i\n            vowel_found\
    \ = true\n        }\n        if consonants.contains(char) && vowel_found {\n \
    \           consonant_index = i\n            break\n        }\n    }\n    if vowel_found\
    \ && vowel_index > consonant_index {\n        closest_vowel = String(word[word.index(word.startIndex,\
    \ offsetBy: vowel_index)])\n    }\n    return closest_vowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp2_iq14na/tmp2_iq14na.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0084b33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b008482ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b008482a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00848297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2_iq14na                        0x000056065ce4cd6b <unavailable> + 7531

    5    libc.so.6                          0x00002b0084d1f460 __libc_start_main +
    245

    6    tmp2_iq14na                        0x000056065ce4c569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660013512
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var last_vowel = \"\"\n    for char in word.characters.reversed()\
    \ {\n        if vowels.contains(String(char)) {\n            last_vowel = String(char)\n\
    \            break\n        }\n    }\n    for char in word.characters.reversed()\
    \ {\n        if vowels.contains(String(char)) {\n            result = String(char)\n\
    \        } else {\n            if result != \"\" {\n                break\n  \
    \          }\n        }\n    }\n    if result == \"\" {\n        return last_vowel\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp3vigwpei.swift:12:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3vigwpei.swift:18:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var last_consonant_index = -1\n    for (index, char) in word.enumerated() {\n\
    \        if vowels.contains(char) {\n            if index > last_consonant_index\
    \ + 1 {\n                result = String(char)\n                break\n      \
    \      }\n        } else {\n            last_consonant_index = index\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpxweftrch/tmpxweftrch.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ca7393c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ca708ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ca708a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ca70897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxweftrch                        0x0000559375bce677 <unavailable> + 5751

    5    libc.so.6                          0x00002b7ca757f460 __libc_start_main +
    245

    6    tmpxweftrch                        0x0000559375bce2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013512
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        let char = String(word[word.index(word.startIndex, offsetBy: index)])\n\
    \        if vowels.contains(char) {\n            result = char\n            break\n\
    \        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp886d6_73/tmp886d6_73.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f96065c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f95d5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f95d5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f95d5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp886d6_73                        0x000055dda672b8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b0f96251460 __libc_start_main +
    245

    6    tmp886d6_73                        0x000055dda672b2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp338t3ynr/tmp338t3ynr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71dd032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71dcd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71dcd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71dcd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp338t3ynr                        0x00005575e0a8d7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b71dd21e460 __libc_start_main +
    245

    6    tmp338t3ynr                        0x00005575e0a8d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var last_vowel_index = -1\n    for (index, char) in word.characters.enumerated()\
    \ {\n        if vowels.contains(char) {\n            last_vowel_index = index\n\
    \        } else if last_vowel_index != -1 {\n            let next_char = word.characters[word.index(word.startIndex,\
    \ offsetBy: index + 1)]\n            if vowels.contains(next_char) {\n       \
    \         result = String(char)\n                break\n            }\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpa1bqzrmw.swift:12:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpa1bqzrmw.swift:16:34: error: 'characters' is unavailable:\
    \ Please use String directly\n            let next_char = word.characters[word.index(word.startIndex,\
    \ offsetBy: index + 1)]\n                                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013512
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var word = word.lowercased()\n    var result = \"\"\n    var count = 0\n\
    \    for char in word.characters.reversed() {\n        if vowels.contains(String(char))\
    \ {\n            result = String(char)\n            break\n        }\n       \
    \ count += 1\n    }\n    if count == word.characters.count {\n        return \"\
    \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp9_szvoyq.swift:13:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp9_szvoyq.swift:20:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    if count == word.characters.count {\n             \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp9_szvoyq.swift:9:9:\
    \ warning: variable 'vowels' was never mutated; consider changing to 'let' constant\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    ~~~ ^\n    let\n/tmp/tmp9_szvoyq.swift:10:9:\
    \ warning: variable 'word' was never mutated; consider changing to 'let' constant\n\
    \    var word = word.lowercased()\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660013512
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var closest_vowel = \"\"\n    var closest_vowel_index = 0\n    var closest_vowel_distance\
    \ = 0\n    var distance = 0\n    for (index, char) in word.characters.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            distance = word.characters.count\
    \ - index\n            if distance > closest_vowel_distance {\n              \
    \  closest_vowel_distance = distance\n                closest_vowel_index = index\n\
    \                closest_vowel = String(char)\n            }\n        }\n    }\n\
    \    return closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp3mpu44va.swift:14:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3mpu44va.swift:16:29: error: 'characters' is unavailable:\
    \ Please use String directly\n            distance = word.characters.count - index\n\
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3mpu44va.swift:11:9: warning: variable 'closest_vowel_index'\
    \ was written to, but never read\n    var closest_vowel_index = 0\n        ^\n"
  stdout: ''
  timestamp: 1660013512
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        let char = String(word[word.index(word.startIndex, offsetBy: index)])\n\
    \        if vowels.contains(char) {\n            result = char\n            break\n\
    \        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp886d6_73/tmp886d6_73.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f96065c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f95d5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f95d5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f95d5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp886d6_73                        0x000055dda672b8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b0f96251460 __libc_start_main +
    245

    6    tmp886d6_73                        0x000055dda672b2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var last_vowel_index = -1\n    var\
    \ last_consonant_index = -1\n    for i in 0..<word.count {\n        let index\
    \ = word.index(word.startIndex, offsetBy: i)\n        let char = String(word[index])\n\
    \        if vowels.contains(char) {\n            last_vowel_index = i\n      \
    \  } else if consonants.contains(char) {\n            last_consonant_index = i\n\
    \        }\n        if last_vowel_index > -1 && last_consonant_index > -1 && last_vowel_index\
    \ > last_consonant_index {\n            result = String(word[word.index(word.startIndex,\
    \ offsetBy: last_vowel_index)])\n            break\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpgndui5kx/tmpgndui5kx.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b410d9a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b410d69ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b410d69a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b410d6997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgndui5kx                        0x000055e13fd60827 <unavailable> + 6183

    5    libc.so.6                          0x00002b410db8f460 __libc_start_main +
    245

    6    tmpgndui5kx                        0x000055e13fd60469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013512
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp338t3ynr/tmp338t3ynr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71dd032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71dcd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71dcd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71dcd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp338t3ynr                        0x00005575e0a8d7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b71dd21e460 __libc_start_main +
    245

    6    tmp338t3ynr                        0x00005575e0a8d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        let char = word[word.index(word.startIndex, offsetBy: index)]\n     \
    \   if vowels.contains(String(char)) {\n            result = String(char)\n  \
    \          break\n        }\n        index -= 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6brdywxg/tmp6brdywxg.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aacd13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacd10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aacd10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aacd10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6brdywxg                        0x0000558ed44558a3 <unavailable> + 6307

    5    libc.so.6                          0x00002aacd15e7460 __libc_start_main +
    245

    6    tmp6brdywxg                        0x0000558ed44552d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        let char = String(word[word.index(word.startIndex, offsetBy: index)])\n\
    \        if vowels.contains(char) {\n            result = char\n            break\n\
    \        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp886d6_73/tmp886d6_73.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f96065c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f95d5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f95d5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f95d5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp886d6_73                        0x000055dda672b8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b0f96251460 __libc_start_main +
    245

    6    tmp886d6_73                        0x000055dda672b2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp338t3ynr/tmp338t3ynr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71dd032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71dcd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71dcd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71dcd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp338t3ynr                        0x00005575e0a8d7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b71dd21e460 __libc_start_main +
    245

    6    tmp338t3ynr                        0x00005575e0a8d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    while index >= 0\
    \ {\n        let char = word[word.index(word.startIndex, offsetBy: index)]\n \
    \       if vowels.contains(char) {\n            result = String(char)\n      \
    \      break\n        }\n        index -= 1\n    }\n    index -= 1\n    while\
    \ index >= 0 {\n        let char = word[word.index(word.startIndex, offsetBy:\
    \ index)]\n        if consonants.contains(char) {\n            break\n       \
    \ }\n        if vowels.contains(char) {\n            result = String(char)\n \
    \           break\n        }\n        index -= 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpvjsp6ztx/tmpvjsp6ztx.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab48e173c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab48de6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab48de6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab48de697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvjsp6ztx                        0x0000558f41c037e3 <unavailable> + 6115

    5    libc.so.6                          0x00002ab48e35f460 __libc_start_main +
    245

    6    tmpvjsp6ztx                        0x0000558f41c03219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013512
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var result = \"\"\n    let vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var index = word.count - 1\n    var\
    \ prev = \"\"\n    var next = \"\"\n    while index >= 0 {\n        let char =\
    \ String(word[word.index(word.startIndex, offsetBy: index)])\n        if vowels.contains(char)\
    \ {\n            if prev != \"\" && next != \"\" {\n                result = char\n\
    \                break\n            }\n        } else if consonants.contains(char)\
    \ {\n            if prev == \"\" {\n                prev = char\n            }\
    \ else {\n                next = char\n            }\n        }\n        index\
    \ -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpqyzdqzbs/tmpqyzdqzbs.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1b6002c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1b5cf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1b5cf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1b5cf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqyzdqzbs                        0x000056547d5b78a3 <unavailable> + 6307

    5    libc.so.6                          0x00002ad1b61ee460 __libc_start_main +
    245

    6    tmpqyzdqzbs                        0x000056547d5b72d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013512
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var closestVowel = \"\"\n    var closestDistance = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if vowels.contains(String(char)) {\n \
    \           var distance = 0\n            for i in index..<word.count {\n    \
    \            if vowels.contains(String(word[word.index(word.startIndex, offsetBy:\
    \ i)])) {\n                    break\n                }\n                distance\
    \ += 1\n            }\n            if distance < closestDistance {\n         \
    \       closestDistance = distance\n                closestVowel = String(char)\n\
    \            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpr6h4o2t1/tmpr6h4o2t1.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae579727c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae57941eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae57941e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae57941d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr6h4o2t1                        0x00005594192bfa77 <unavailable> + 6775

    5    libc.so.6                          0x00002ae579913460 __libc_start_main +
    245

    6    tmpr6h4o2t1                        0x00005594192bf6b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1660013512
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    for (index, char) in word.characters.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            if index == 0 {\n\
    \                continue\n            }\n            if consonants.contains(String(word.characters[word.characters.index(before:\
    \ word.characters.index(after: word.characters.startIndex, offsetBy: index))]))\
    \ {\n                result = String(char)\n                break\n          \
    \  }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmphu5qctgd.swift:12:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphu5qctgd.swift:17:110: error: extraneous argument label\
    \ 'after:' in call\n            if consonants.contains(String(word.characters[word.characters.index(before:\
    \ word.characters.index(after: word.characters.startIndex, offsetBy: index))]))\
    \ {\n                                                                        \
    \                                     ^~~~~~~~\n                             \
    \                                                                            \
    \     \n"
  stdout: ''
  timestamp: 1660013512
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closest_vowel = \"\"\n    var closest_vowel_index = -1\n\
    \    var closest_consonant_index = -1\n    var closest_consonant = \"\"\n    var\
    \ vowel_index = -1\n    var consonant_index = -1\n    for (index, char) in word.characters.enumerated()\
    \ {\n        if vowels.contains(String(char).lowercased()) {\n            vowel_index\
    \ = index\n            if closest_consonant_index != -1 && vowel_index - closest_consonant_index\
    \ < closest_vowel_index - closest_consonant_index {\n                closest_vowel\
    \ = String(char)\n                closest_vowel_index = vowel_index\n        \
    \        closest_consonant = closest_consonant\n                closest_consonant_index\
    \ = closest_consonant_index\n            }\n        }\n        if consonants.contains(String(char).lowercased())\
    \ {\n            consonant_index = index\n            if closest_vowel_index !=\
    \ -1 && consonant_index - closest_vowel_index < closest_consonant_index - closest_vowel_index\
    \ {\n                closest_vowel = closest_vowel\n                closest_vowel_index\
    \ = closest_vowel_index\n                closest_consonant = String(char)\n  \
    \              closest_consonant_index = consonant_index\n            }\n    \
    \    }\n    }\n    return closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp95otpu7v.swift:17:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp95otpu7v.swift:23:35: error: assigning a variable to\
    \ itself\n                closest_consonant = closest_consonant\n            \
    \    ~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~\n/tmp/tmp95otpu7v.swift:24:41: error:\
    \ assigning a variable to itself\n                closest_consonant_index = closest_consonant_index\n\
    \                ~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp95otpu7v.swift:30:31:\
    \ error: assigning a variable to itself\n                closest_vowel = closest_vowel\n\
    \                ~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~\n/tmp/tmp95otpu7v.swift:31:37:\
    \ error: assigning a variable to itself\n                closest_vowel_index =\
    \ closest_vowel_index\n                ~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013512
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var last_consonant = -1\n    for i in 0..<word.count {\n        let index =\
    \ word.index(word.startIndex, offsetBy: i)\n        let char = word[index]\n \
    \       if vowels.contains(char) {\n            if last_consonant != -1 {\n  \
    \              result = String(char)\n                break\n            }\n \
    \       } else {\n            last_consonant = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpwna_uf6j/tmpwna_uf6j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40f52a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40f4f97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40f4f97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40f4f967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwna_uf6j                        0x000055c46eaa9757 <unavailable> + 5975

    5    libc.so.6                          0x00002b40f548c460 __libc_start_main +
    245

    6    tmpwna_uf6j                        0x000055c46eaa9399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660013512
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var last_consonant = \"\"\n    for char in word.reversed() {\n        if vowels.contains(char)\
    \ {\n            if last_consonant != \"\" {\n                result = String(char)\n\
    \                break\n            }\n        } else {\n            last_consonant\
    \ = String(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp_3wuiez0/tmp_3wuiez0.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e926a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e9239db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e9239d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e9239c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_3wuiez0                        0x0000557bdbe098b3 <unavailable> + 6323

    5    libc.so.6                          0x00002b4e92892460 __libc_start_main +
    245

    6    tmp_3wuiez0                        0x0000557bdbe092e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var closestVowel = \"\"\n    var closestVowelIndex = 0\n    var closestVowelDistance\
    \ = 0\n    var currentVowelIndex = 0\n    var currentVowelDistance = 0\n    for\
    \ (index, char) in word.characters.enumerated() {\n        if vowels.contains(String(char))\
    \ {\n            currentVowelIndex = index\n            currentVowelDistance =\
    \ word.characters.count - currentVowelIndex\n            if currentVowelDistance\
    \ > closestVowelDistance {\n                closestVowel = String(char)\n    \
    \            closestVowelIndex = currentVowelIndex\n                closestVowelDistance\
    \ = currentVowelDistance\n            }\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp20o5fwgh.swift:15:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp20o5fwgh.swift:18:41: error: 'characters' is unavailable:\
    \ Please use String directly\n            currentVowelDistance = word.characters.count\
    \ - currentVowelIndex\n                                        ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp20o5fwgh.swift:11:9: warning: variable\
    \ 'closestVowelIndex' was written to, but never read\n    var closestVowelIndex\
    \ = 0\n        ^\n"
  stdout: ''
  timestamp: 1660013512
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var lastConsonant = -1\n    for (index, char) in word.enumerated() {\n     \
    \   if vowels.contains(char) {\n            if lastConsonant != -1 {\n       \
    \         if result.isEmpty {\n                    result = String(char)\n   \
    \             } else {\n                    if index - lastConsonant < word.count\
    \ - index {\n                        result = String(char)\n                 \
    \   }\n                }\n            }\n        } else {\n            lastConsonant\
    \ = index\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpy5qgh1gx/tmpy5qgh1gx.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e574ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e571c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e571c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e571c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5qgh1gx                        0x0000564da840eb6b <unavailable> + 7019

    5    libc.so.6                          0x00002b4e576b8460 __libc_start_main +
    245

    6    tmpy5qgh1gx                        0x0000564da840e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013512
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        if vowels.contains(String(word[word.index(word.startIndex, offsetBy:\
    \ index)])) {\n            result = String(word[word.index(word.startIndex, offsetBy:\
    \ index)])\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpxzb59mv3/tmpxzb59mv3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc24a59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc24750b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc24750988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc2474f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxzb59mv3                        0x000055f606f9d8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002acc24c45460 __libc_start_main +
    245

    6    tmpxzb59mv3                        0x000055f606f9d2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013512
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var index = 0\n    var vowel_index\
    \ = 0\n    var vowel_distance = 0\n    var distance = 0\n    for char in word.characters\
    \ {\n        if vowels.contains(String(char)) {\n            vowel_index = index\n\
    \            vowel_distance = 0\n        } else if consonants.contains(String(char))\
    \ {\n            vowel_distance += 1\n        }\n        index += 1\n    }\n \
    \   if vowel_distance == 0 {\n        return \"\"\n    }\n    index = 0\n    for\
    \ char in word.characters {\n        if vowels.contains(String(char)) {\n    \
    \        distance = abs(vowel_index - index)\n            if distance < vowel_distance\
    \ {\n                vowel_distance = distance\n                result = String(char)\n\
    \            }\n        }\n        index += 1\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpux58gtrk.swift:16:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpux58gtrk.swift:29:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013512
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var last_vowel = \"\"\n    var last_consonant = \"\"\n    for c in word.characters\
    \ {\n        if vowels.containsString(String(c)) {\n            last_vowel = String(c)\n\
    \        } else {\n            last_consonant = String(c)\n        }\n       \
    \ if last_vowel != \"\" && last_consonant != \"\" {\n            result = last_vowel\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp7bcpppf4.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7bcpppf4.swift:14:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(c))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var last_vowel_index = -1\n    for (index, char) in\
    \ word.characters.enumerated() {\n        if vowels.contains(String(char)) {\n\
    \            last_vowel_index = index\n        } else {\n            if last_vowel_index\
    \ != -1 {\n                result = String(word[word.index(word.startIndex, offsetBy:\
    \ last_vowel_index)])\n                break\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpczqy3ron.swift:12:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        let char = String(word[word.index(word.startIndex, offsetBy: index)])\n\
    \        if vowels.contains(char) {\n            result = char\n            break\n\
    \        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp886d6_73/tmp886d6_73.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f96065c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f95d5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f95d5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f95d5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp886d6_73                        0x000055dda672b8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b0f96251460 __libc_start_main +
    245

    6    tmp886d6_73                        0x000055dda672b2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var vowel_index = -1\n    var consonant_index = -1\n\
    \    for (index, char) in word.enumerated() {\n        if vowels.contains(String(char))\
    \ {\n            vowel_index = index\n        } else {\n            consonant_index\
    \ = index\n        }\n        if vowel_index != -1 && consonant_index != -1 {\n\
    \            if vowel_index > consonant_index {\n                result = String(char)\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpceu3_05z/tmpceu3_05z.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c064a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c061a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c061a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c0619f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpceu3_05z                        0x000055ad158bd787 <unavailable> + 6023

    5    libc.so.6                          0x00002b0c06695460 __libc_start_main +
    245

    6    tmpceu3_05z                        0x000055ad158bd3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660013512
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiou\"\n    var consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = 0\n    for char in word.characters.reversed()\
    \ {\n        if vowels.contains(char) {\n            if index == 0 {\n       \
    \         return \"\"\n            }\n            if consonants.contains(word[word.index(word.endIndex,\
    \ offsetBy: -index-1)]) {\n                return String(char)\n            }\n\
    \        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpmir7kdkx.swift:13:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpmir7kdkx.swift:9:9: warning: variable 'vowels' was never mutated;\
    \ consider changing to 'let' constant\n    var vowels = \"aeiou\"\n    ~~~ ^\n\
    \    let\n/tmp/tmpmir7kdkx.swift:10:9: warning: variable 'consonants' was never\
    \ mutated; consider changing to 'let' constant\n    var consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    ~~~ ^\n    let\n/tmp/tmpmir7kdkx.swift:11:9: warning: variable 'result'\
    \ was never mutated; consider changing to 'let' constant\n    var result = \"\"\
    \n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660013512
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        let char = String(word[word.index(word.startIndex, offsetBy: index)])\n\
    \        if vowels.contains(char) {\n            result = char\n            break\n\
    \        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp886d6_73/tmp886d6_73.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f96065c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f95d5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f95d5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f95d5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp886d6_73                        0x000055dda672b8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b0f96251460 __libc_start_main +
    245

    6    tmp886d6_73                        0x000055dda672b2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestDistance = word.count\n\
    \    for (index, char) in word.enumerated() {\n        if consonants.contains(String(char))\
    \ {\n            for (index2, char2) in word.enumerated() {\n                if\
    \ vowels.contains(String(char2)) {\n                    if index2 > index {\n\
    \                        if index2 - index < closestDistance {\n             \
    \               closestDistance = index2 - index\n                           \
    \ closestVowel = String(char2)\n                        }\n                  \
    \  }\n                }\n            }\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpj4yv0ws5/tmpj4yv0ws5.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af56eff7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af56eceeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af56ecee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af56eced7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj4yv0ws5                        0x000055e5acce97d7 <unavailable> + 6103

    5    libc.so.6                          0x00002af56f1e3460 __libc_start_main +
    245

    6    tmpj4yv0ws5                        0x000055e5acce9419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013512
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        if vowels.contains(String(word[word.index(word.startIndex, offsetBy:\
    \ index)])) {\n            result = String(word[word.index(word.startIndex, offsetBy:\
    \ index)])\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpxzb59mv3/tmpxzb59mv3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc24a59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc24750b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc24750988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc2474f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxzb59mv3                        0x000055f606f9d8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002acc24c45460 __libc_start_main +
    245

    6    tmpxzb59mv3                        0x000055f606f9d2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013512
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var result = \"\"\n    let vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var index = word.count - 1\n    var\
    \ is_vowel = false\n    var is_consonant = false\n    while index >= 0 {\n   \
    \     let char = word[word.index(word.startIndex, offsetBy: index)]\n        if\
    \ vowels.contains(String(char)) {\n            is_vowel = true\n        } else\
    \ if consonants.contains(String(char)) {\n            is_consonant = true\n  \
    \      }\n        if is_vowel && is_consonant {\n            result = String(char)\n\
    \            break\n        }\n        index -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpo6zcux69/tmpo6zcux69.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e60adcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e607d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e607d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e607d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo6zcux69                        0x000055da772c18a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b5e60cc8460 __libc_start_main +
    245

    6    tmpo6zcux69                        0x000055da772c12d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013512
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var word_array = Array(word)\n   \
    \ var index = 0\n    var vowel_index = 0\n    var consonant_index = 0\n    var\
    \ vowel_found = false\n    var consonant_found = false\n    var vowel_distance\
    \ = 0\n    var consonant_distance = 0\n    var distance = 0\n    var min_distance\
    \ = 0\n    var min_vowel_index = 0\n    var min_consonant_index = 0\n    var min_vowel_distance\
    \ = 0\n    var min_consonant_distance = 0\n    var min_distance_found = false\n\
    \    var min_vowel_found = false\n    var min_consonant_found = false\n    var\
    \ min_vowel = \"\"\n    var min_consonant = \"\"\n    var min_vowel_index_found\
    \ = false\n    var min_consonant_index_found = false\n    var min_vowel_distance_found\
    \ = false\n    var min_consonant_distance_found = false\n    var min_vowel_index_found_first\
    \ = false\n    var min_consonant_index_found_first = false\n    var min_vowel_distance_found_first\
    \ = false\n    var min_consonant_distance_found_first = false\n    var min_vowel_index_found_second\
    \ = false\n    var min_consonant_index_found_second = false\n    var min_vowel_distance_found_second\
    \ = false\n    var min_consonant_distance_found_second = false\n    var min_vowel_index_found_third\
    \ = false\n    var min_consonant_index_found_third = false\n    var min_vowel_distance_found_third\
    \ = false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp9s_citv4.swift:9:9: warning: initialization of variable 'vowels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    ~~~~^~~~~~\n    _\n\
    /tmp/tmp9s_citv4.swift:10:9: warning: initialization of variable 'consonants'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\",\
    \ \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmp9s_citv4.swift:11:9: warning:\
    \ initialization of variable 'result' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var result = \"\"\n    ~~~~^~~~~~\n  \
    \  _\n/tmp/tmp9s_citv4.swift:12:9: warning: initialization of variable 'word_array'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var word_array = Array(word)\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmp9s_citv4.swift:13:9:\
    \ warning: initialization of variable 'index' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var index = 0\n    ~~~~^~~~~\n  \
    \  _\n/tmp/tmp9s_citv4.swift:14:9: warning: initialization of variable 'vowel_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowel_index = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp9s_citv4.swift:15:9:\
    \ warning: initialization of variable 'consonant_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var consonant_index = 0\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmp9s_citv4.swift:16:9: warning: initialization\
    \ of variable 'vowel_found' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowel_found = false\n    ~~~~^~~~~~~~~~~\n  \
    \  _\n/tmp/tmp9s_citv4.swift:17:9: warning: initialization of variable 'consonant_found'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var consonant_found = false\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmp9s_citv4.swift:18:9:\
    \ warning: initialization of variable 'vowel_distance' was never used; consider\
    \ replaci"
  stdout: ''
  timestamp: 1660013512
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var index = 0\n    var vowelIndex\
    \ = 0\n    var consonantIndex = 0\n    var vowel = \"\"\n    var consonant = \"\
    \"\n    var vowelFound = false\n    var consonantFound = false\n    var vowelDistance\
    \ = 0\n    var consonantDistance = 0\n    var distance = 0\n    var distanceFound\
    \ = false\n    var distanceIndex = 0\n    var distanceVowel = \"\"\n    var distanceConsonant\
    \ = \"\"\n    var distanceVowelIndex = 0\n    var distanceConsonantIndex = 0\n\
    \    var distanceVowelFound = false\n    var distanceConsonantFound = false\n\
    \    var distanceVowelDistance = 0\n    var distanceConsonantDistance = 0\n  \
    \  var distanceDistance = 0\n    var distanceDistanceFound = false\n    var distanceDistanceIndex\
    \ = 0\n    var distanceDistanceVowel = \"\"\n    var distanceDistanceConsonant\
    \ = \"\"\n    var distanceDistanceVowelIndex = 0\n    var distanceDistanceConsonantIndex\
    \ = 0\n    var distanceDistanceVowelFound = false\n    var distanceDistanceConsonantFound\
    \ = false\n    var distanceDistanceVowelDistance = 0\n    var distanceDistanceConsonantDistance\
    \ = 0\n    var distanceDistanceDistance = 0\n    var distanceDistanceDistanceFound\
    \ = false\n    var distanceDistanceDistanceIndex = 0\n    var distanceDistanceDistanceVowel\
    \ = \"\"\n    var distanceDistanceDistanceConsonant = \"\"\n    var distanceDistanceDistanceVowelIndex\
    \ = 0\n    var distanceDistanceDistanceConsonantIndex = 0\n    var distanceDistanceDistanceVowelFound\
    \ = false\n    var distanceDistanceDistanceConsonantFound = false\n    var distanceDistanceDistanceVowelDistance\
    \ = 0\n    var distanceDistanceDistanceConsonantDistance = 0\n    var distanceDistanceDistanceDistance\
    \ = 0\n    var distanceDistanceDistanceDistanceFound = false\n    var distanceDistanceDistance\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpjhzrf1if.swift:56:9: error: type annotation missing in pattern\n\
    \    var distanceDistanceDistance\n        ^\n"
  stdout: ''
  timestamp: 1660013512
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ for (index, char) in word.characters.enumerated() {\n        if vowels.contains(char)\
    \ {\n            if index > 0 && index < word.characters.count - 1 {\n       \
    \         if !vowels.contains(word[word.index(word.startIndex, offsetBy: index\
    \ - 1)]) && !vowels.contains(word[word.index(word.startIndex, offsetBy: index\
    \ + 1)]) {\n                    result = String(char)\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpudr5wun9.swift:11:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpudr5wun9.swift:13:42: error: 'characters' is unavailable:\
    \ Please use String directly\n            if index > 0 && index < word.characters.count\
    \ - 1 {\n                                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var index = 0\n    var vowel_index\
    \ = 0\n    var consonant_index = 0\n    var vowel_distance = 0\n    var consonant_distance\
    \ = 0\n    var min_distance = 0\n    var min_index = 0\n    var min_vowel_index\
    \ = 0\n    var min_consonant_index = 0\n    var min_vowel_distance = 0\n    var\
    \ min_consonant_distance = 0\n    var min_vowel = \"\"\n    var min_consonant\
    \ = \"\"\n    var vowel_found = false\n    var consonant_found = false\n    for\
    \ char in word.characters {\n        if vowels.contains(String(char)) {\n    \
    \        vowel_found = true\n            vowel_index = index\n            vowel_distance\
    \ = word.characters.count - index\n        }\n        if consonants.contains(String(char))\
    \ {\n            consonant_found = true\n            consonant_index = index\n\
    \            consonant_distance = word.characters.count - index\n        }\n \
    \       if vowel_found && consonant_found {\n            if vowel_distance > consonant_distance\
    \ {\n                if min_distance == 0 {\n                    min_distance\
    \ = vowel_distance - consonant_distance\n                    min_index = index\n\
    \                    min_vowel_index = vowel_index\n                    min_consonant_index\
    \ = consonant_index\n                    min_vowel_distance = vowel_distance\n\
    \                    min_consonant_distance = consonant_distance\n           \
    \         min_vowel = String(word[word.index(word.startIndex, offsetBy: vowel_index)])\n\
    \                    min_consonant = String(word[word.index(word.startIndex, offsetBy:\
    \ consonant_index)])\n                } else {\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpmjij5to5.swift:77:48: error: expected '}' at end of brace statement\n\
    assert(get_closest_vowel(word: \"Above\") == \"o\")\n                        \
    \                       ^\n/tmp/tmpmjij5to5.swift:39:52: note: to match this opening\
    \ '{'\n            if vowel_distance > consonant_distance {\n                \
    \                                   ^\n/tmp/tmpmjij5to5.swift:77:48: error: expected\
    \ '}' at end of brace statement\nassert(get_closest_vowel(word: \"Above\") ==\
    \ \"o\")\n                                               ^\n/tmp/tmpmjij5to5.swift:38:43:\
    \ note: to match this opening '{'\n        if vowel_found && consonant_found {\n\
    \                                          ^\n/tmp/tmpmjij5to5.swift:77:48: error:\
    \ expected '}' at end of brace statement\nassert(get_closest_vowel(word: \"Above\"\
    ) == \"o\")\n                                               ^\n/tmp/tmpmjij5to5.swift:27:33:\
    \ note: to match this opening '{'\n    for char in word.characters {\n       \
    \                         ^\n/tmp/tmpmjij5to5.swift:77:48: error: expected '}'\
    \ at end of brace statement\nassert(get_closest_vowel(word: \"Above\") == \"o\"\
    )\n                                               ^\n/tmp/tmpmjij5to5.swift:8:48:\
    \ note: to match this opening '{'\nfunc get_closest_vowel(word: String) -> String\
    \ {\n                                               ^\n/tmp/tmpmjij5to5.swift:27:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpmjij5to5.swift:31:35: error: 'characters'\
    \ is unavailable: Please use String directly\n            vowel_distance = word.characters.count\
    \ - index\n                                  ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpmjij5to5.swift:36:39: error: 'characters'\
    \ is unavailable: Please use String directly\n            consonant_distance =\
    \ word.charac"
  stdout: ''
  timestamp: 1660013512
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var lastConsonant = 0\n    for (index, char) in word.enumerated() {\n      \
    \  if vowels.contains(char) {\n            if index > lastConsonant + 1 {\n  \
    \              result = String(char)\n                break\n            }\n \
    \       } else {\n            lastConsonant = index\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpp78ruw7g/tmpp78ruw7g.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af042a09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af042700b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af042700988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0426ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp78ruw7g                        0x000055bc538c0677 <unavailable> + 5751

    5    libc.so.6                          0x00002af042bf5460 __libc_start_main +
    245

    6    tmpp78ruw7g                        0x000055bc538c02b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013512
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var last_vowel_index = -1\n    for (index, char) in word.characters.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            last_vowel_index\
    \ = index\n        } else if last_vowel_index > -1 {\n            if index - last_vowel_index\
    \ < 3 {\n                result = String(word[word.index(word.startIndex, offsetBy:\
    \ last_vowel_index)])\n            }\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp6jtmikxn.swift:12:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013512
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp338t3ynr/tmp338t3ynr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71dd032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71dcd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71dcd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71dcd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp338t3ynr                        0x00005575e0a8d7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b71dd21e460 __libc_start_main +
    245

    6    tmp338t3ynr                        0x00005575e0a8d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var i = word.count - 1\n    while i >= 0 {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = word[index]\n        if vowels.contains(char)\
    \ {\n            result = String(char)\n            break\n        }\n       \
    \ i -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpilovc9mu/tmpilovc9mu.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2cb26ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2caf61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2caf61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2caf607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpilovc9mu                        0x00005624781e07e3 <unavailable> + 6115

    5    libc.so.6                          0x00002ba2cb456460 __libc_start_main +
    245

    6    tmpilovc9mu                        0x00005624781e0219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var i = word.count - 1\n    while i >= 0 {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let character = word[index]\n        if vowels.contains(character)\
    \ {\n            result = String(character)\n            break\n        }\n  \
    \      i -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpv_lom14w/tmpv_lom14w.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd90d18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd90a0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd90a0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd90a0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv_lom14w                        0x00005605c64657e3 <unavailable> + 6115

    5    libc.so.6                          0x00002abd90f04460 __libc_start_main +
    245

    6    tmpv_lom14w                        0x00005605c6465219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013512
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [Character]()\n    var consonants = [Character]()\n\
    \    var result = \"\"\n    let vowels_set = Set(\"aeiou\")\n    let consonants_set\
    \ = Set(\"bcdfghjklmnpqrstvwxyz\")\n    for char in word {\n        if vowels_set.contains(char)\
    \ {\n            vowels.append(char)\n        } else if consonants_set.contains(char)\
    \ {\n            consonants.append(char)\n        }\n    }\n    if vowels.count\
    \ == 0 || consonants.count == 0 {\n        return result\n    }\n    var i = vowels.count\
    \ - 1\n    var j = consonants.count - 1\n    while i >= 0 && j >= 0 {\n      \
    \  if vowels[i] < consonants[j] {\n            result = String(vowels[i])\n  \
    \          break\n        }\n        i -= 1\n        j -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmphlrcma3r/tmphlrcma3r.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a33009c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a32d00b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a32d00988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a32cff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphlrcma3r                        0x0000564e47b4f7b7 <unavailable> + 6071

    5    libc.so.6                          0x00002b3a331f5460 __libc_start_main +
    245

    6    tmphlrcma3r                        0x0000564e47b4f3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013512
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var result = \"\"\n    let vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var word = word.lowercased()\n    var\
    \ index = word.count - 1\n    var vowel_index = -1\n    var consonant_index =\
    \ -1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(String(char)) {\n            vowel_index\
    \ = index\n        }\n        if consonants.contains(String(char)) {\n       \
    \     consonant_index = index\n        }\n        if vowel_index != -1 && consonant_index\
    \ != -1 {\n            if vowel_index > consonant_index {\n                result\
    \ = String(char)\n                break\n            }\n        }\n        index\
    \ -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmphf_z8fxy/tmphf_z8fxy.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53fb600c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53fb2f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53fb2f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53fb2f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphf_z8fxy                        0x0000556ff997a6f7 <unavailable> + 5879

    5    libc.so.6                          0x00002b53fb7ec460 __libc_start_main +
    245

    6    tmphf_z8fxy                        0x0000556ff997a339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660013512
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    while index >= 0\
    \ {\n        let char = word[word.index(word.startIndex, offsetBy: index)]\n \
    \       if vowels.contains(char) {\n            result = String(char)\n      \
    \      break\n        }\n        if consonants.contains(char) {\n            break\n\
    \        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp53t8i_wa/tmp53t8i_wa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5498ffdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5498cf4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5498cf4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5498cf37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp53t8i_wa                        0x000056534e3ab5d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b54991e9460 __libc_start_main +
    245

    6    tmp53t8i_wa                        0x000056534e3ab219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013512
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp338t3ynr/tmp338t3ynr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71dd032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71dcd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71dcd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71dcd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp338t3ynr                        0x00005575e0a8d7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b71dd21e460 __libc_start_main +
    245

    6    tmp338t3ynr                        0x00005575e0a8d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var last_consonant_index = -1\n    var last_vowel_index = -1\n    for (index,\
    \ char) in word.enumerated() {\n        if vowels.contains(char) {\n         \
    \   last_vowel_index = index\n        } else {\n            if last_vowel_index\
    \ > last_consonant_index {\n                result = String(char)\n          \
    \      break\n            }\n            last_consonant_index = index\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp7hxojwgu/tmp7hxojwgu.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b432d2a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b432cf9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b432cf9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b432cf9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7hxojwgu                        0x000055fb5f0fe677 <unavailable> + 5751

    5    libc.so.6                          0x00002b432d491460 __libc_start_main +
    245

    6    tmp7hxojwgu                        0x000055fb5f0fe2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013512
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var distance = word.count\n    for (i, c) in word.enumerated()\
    \ {\n        if vowels.contains(c) {\n            if i > 0 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: i - 1)]) {\n                if i < word.count - 1 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: i + 1)]) {\n                    if distance > i {\n              \
    \          distance = i\n                        result = String(c)\n        \
    \            }\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp2mgc_6up/tmp2mgc_6up.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2aae36fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2aae066b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2aae066988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2aae0657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2mgc_6up                        0x000056207c7147e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b2aae55b460 __libc_start_main +
    245

    6    tmp2mgc_6up                        0x000056207c714429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013512
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    var found = false\n\
    \    while index >= 0 {\n        let char = word[word.index(word.startIndex, offsetBy:\
    \ index)]\n        if vowels.contains(String(char)) {\n            result = String(char)\n\
    \            found = true\n        } else if found {\n            break\n    \
    \    }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp__vzccqr/tmp__vzccqr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b515b6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b515b3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b515b3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b515b3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__vzccqr                        0x0000558076ae48a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b515b8a6460 __libc_start_main +
    245

    6    tmp__vzccqr                        0x0000558076ae42d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013511
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var vowel_index = 0\n    var consonant_index\
    \ = 0\n    var closest_vowel_index = 0\n    var closest_consonant_index = 0\n\
    \    var closest_distance = 0\n    for i in 0..<word.count {\n        let index\
    \ = word.index(word.startIndex, offsetBy: i)\n        let char = String(word[index])\n\
    \        if vowels.contains(char) {\n            vowel_index = i\n           \
    \ for j in (0..<i).reversed() {\n                let index = word.index(word.startIndex,\
    \ offsetBy: j)\n                let char = String(word[index])\n             \
    \   if consonants.contains(char) {\n                    consonant_index = j\n\
    \                    if closest_distance == 0 {\n                        closest_distance\
    \ = vowel_index - consonant_index\n                        closest_vowel_index\
    \ = vowel_index\n                        closest_consonant_index = consonant_index\n\
    \                    } else if vowel_index - consonant_index < closest_distance\
    \ {\n                        closest_distance = vowel_index - consonant_index\n\
    \                        closest_vowel_index = vowel_index\n                 \
    \       closest_consonant_index = consonant_index\n                    }\n   \
    \             }\n            }\n        }\n    }\n    if closest_vowel_index !=\
    \ 0 && closest_consonant_index != 0 {\n        let index = word.index(word.startIndex,\
    \ offsetBy: closest_vowel_index)\n        result = String(word[index])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpio24jc98/tmpio24jc98.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15bd8f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15bd5ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15bd5ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15bd5eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpio24jc98                        0x000055df11fd3ae7 <unavailable> + 6887

    5    libc.so.6                          0x00002b15bdae1460 __libc_start_main +
    245

    6    tmpio24jc98                        0x000055df11fd3729 <unavailable> + 5929

    '
  stdout: ''
  timestamp: 1660013512
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        let char = String(word[word.index(word.startIndex, offsetBy: index)])\n\
    \        if vowels.contains(char) {\n            result = char\n            break\n\
    \        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp886d6_73/tmp886d6_73.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f96065c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f95d5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f95d5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f95d5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp886d6_73                        0x000055dda672b8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b0f96251460 __libc_start_main +
    245

    6    tmp886d6_73                        0x000055dda672b2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp338t3ynr/tmp338t3ynr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71dd032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71dcd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71dcd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71dcd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp338t3ynr                        0x00005575e0a8d7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b71dd21e460 __libc_start_main +
    245

    6    tmp338t3ynr                        0x00005575e0a8d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[index]\n\
    \        if vowels.contains(char) {\n            result = String(char)\n     \
    \       break\n        }\n        index -= 1\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp2_3bruim.swift:13:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        let char\
    \ = word[index]\n                   ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp338t3ynr/tmp338t3ynr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71dd032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71dcd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71dcd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71dcd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp338t3ynr                        0x00005575e0a8d7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b71dd21e460 __libc_start_main +
    245

    6    tmp338t3ynr                        0x00005575e0a8d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var vowel_index = 0\n    var consonant_index\
    \ = 0\n    var distance = 0\n    var min_distance = 0\n    for i in 0..<word.count\
    \ {\n        let index = word.index(word.startIndex, offsetBy: i)\n        let\
    \ char = String(word[index])\n        if vowels.contains(char) {\n           \
    \ vowel_index = i\n            for j in 0..<word.count {\n                let\
    \ index = word.index(word.startIndex, offsetBy: j)\n                let char =\
    \ String(word[index])\n                if consonants.contains(char) {\n      \
    \              consonant_index = j\n                    if vowel_index < consonant_index\
    \ {\n                        distance = consonant_index - vowel_index\n      \
    \                  if min_distance == 0 {\n                            min_distance\
    \ = distance\n                            result = char\n                    \
    \    } else if distance < min_distance {\n                            min_distance\
    \ = distance\n                            result = char\n                    \
    \    }\n                    }\n                }\n            }\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp8udq4kxo/tmp8udq4kxo.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35ef26ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35eef65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35eef65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35eef647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8udq4kxo                        0x000055faa7d4f827 <unavailable> + 6183

    5    libc.so.6                          0x00002b35ef45a460 __libc_start_main +
    245

    6    tmp8udq4kxo                        0x000055faa7d4f469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013512
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp338t3ynr/tmp338t3ynr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71dd032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71dcd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71dcd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71dcd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp338t3ynr                        0x00005575e0a8d7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b71dd21e460 __libc_start_main +
    245

    6    tmp338t3ynr                        0x00005575e0a8d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013510
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var closest_vowel_index = -1\n   \
    \ var closest_consonant_index = -1\n    var closest_consonant_index_2 = -1\n \
    \   for (index, char) in word.characters.enumerated() {\n        if vowels.contains(String(char))\
    \ {\n            if closest_consonant_index != -1 && closest_consonant_index_2\
    \ != -1 {\n                if index > closest_consonant_index && index < closest_consonant_index_2\
    \ {\n                    if closest_vowel_index == -1 {\n                    \
    \    closest_vowel_index = index\n                    } else {\n             \
    \           if index > closest_vowel_index {\n                            closest_vowel_index\
    \ = index\n                        }\n                    }\n                }\n\
    \            }\n        } else if consonants.contains(String(char)) {\n      \
    \      if closest_consonant_index == -1 {\n                closest_consonant_index\
    \ = index\n            } else {\n                if index > closest_consonant_index\
    \ {\n                    closest_consonant_index_2 = index\n                }\n\
    \            }\n        }\n    }\n    if closest_vowel_index != -1 {\n       \
    \ result = String(word[word.index(word.startIndex, offsetBy: closest_vowel_index)])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpwiafvww1.swift:15:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013512
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = 0\n    var last_vowel_index = -1\n   \
    \ var last_consonant_index = -1\n    var last_consonant_index_before_vowel = -1\n\
    \    for character in word.characters {\n        if vowels.contains(String(character))\
    \ {\n            last_vowel_index = index\n            if last_consonant_index_before_vowel\
    \ != -1 {\n                result = String(character)\n                break\n\
    \            }\n        } else {\n            last_consonant_index = index\n \
    \           if last_vowel_index != -1 {\n                last_consonant_index_before_vowel\
    \ = index\n            }\n        }\n        index += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmplovj1t3d.swift:15:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in word.characters {\n              \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmplovj1t3d.swift:9:9: warning: variable 'vowels' was never mutated; consider\
    \ changing to 'let' constant\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    ~~~ ^\n    let\n/tmp/tmplovj1t3d.swift:13:9: warning: variable 'last_consonant_index'\
    \ was written to, but never read\n    var last_consonant_index = -1\n        ^\n"
  stdout: ''
  timestamp: 1660013512
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var last_vowel = \"\"\n    for char in word.characters.reversed()\
    \ {\n        if vowels.contains(String(char)) {\n            last_vowel = String(char)\n\
    \            break\n        }\n    }\n    for char in word.characters.reversed()\
    \ {\n        if vowels.contains(String(char)) {\n            result = String(char)\n\
    \        } else {\n            if result != \"\" {\n                break\n  \
    \          }\n        }\n    }\n    if result == \"\" {\n        return last_vowel\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp3vigwpei.swift:12:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3vigwpei.swift:18:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013511
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var vowel_index = -1\n    for (index, char) in word.characters.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            vowel_index = index\n\
    \        }\n    }\n    return vowel_index == -1 ? \"\" : String(word[word.index(word.startIndex,\
    \ offsetBy: vowel_index)])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp_azrzo5p.swift:11:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013512
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    for (index, char) in word.characters.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            if index == 0 {\n\
    \                continue\n            }\n            if index == word.characters.count\
    \ - 1 {\n                continue\n            }\n            if !vowels.contains(String(word.characters[word.index(before:\
    \ word.endIndex)])) {\n                result = String(char)\n               \
    \ break\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmphntmznyg.swift:11:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphntmznyg.swift:16:30: error: 'characters' is unavailable:\
    \ Please use String directly\n            if index == word.characters.count -\
    \ 1 {\n                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphntmznyg.swift:19:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if !vowels.contains(String(word.characters[word.index(before:\
    \ word.endIndex)])) {\n                                            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmphntmznyg.swift:9:9:\
    \ warning: variable 'vowels' was never mutated; consider changing to 'let' constant\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660013512
