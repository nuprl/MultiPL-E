language: swift
name: HumanEval_75_is_multiply_prime
results:
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = false\n    var primeNumbers = [Int]()\n    var\
    \ primeNumbersCount = 0\n    var i = 2\n    while i < a {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n            primeNumbersCount += 1\n\
    \        }\n        i += 1\n    }\n    for i in 0...primeNumbersCount {\n    \
    \    for j in 0...primeNumbersCount {\n            for k in 0...primeNumbersCount\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    isMultiplyPrime = true\n                }\n       \
    \     }\n        }\n    }\n    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpe_z9c0p6.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    var\
    \ i = 2\n    while i < a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n        i += 1\n    }\n    for i in 0..<prime_numbers.count {\n  \
    \      for j in i..<prime_numbers.count {\n            for k in j..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    is_multiply_prime = true\n                }\n  \
    \          }\n        }\n    }\n    return is_multiply_prime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpojmy9bw1.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primeNumbers = [Int]()\n    for i in 2...a\
    \ {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n       \
    \ }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i+1..<primeNumbers.count\
    \ {\n            for k in j+1..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp6ruef44i.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply = false\n    var i = 2\n    var j = 2\n    var k = 2\n\
    \    while i < a {\n        while j < a {\n            while k < a {\n       \
    \         if i * j * k == a {\n                    is_multiply = true\n      \
    \          }\n                k += 1\n            }\n            j += 1\n    \
    \    }\n        i += 1\n    }\n    return is_multiply\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpo7tptkf_/tmpo7tptkf_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adebc054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adebbd4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adebbd4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adebbd4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7tptkf_                        0x00005569ef0ef227 <unavailable> + 4647

    5    libc.so.6                          0x00002adebc240460 __libc_start_main +
    245

    6    tmpo7tptkf_                        0x00005569ef0eee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var i = 2\n    var j = 2\n    var k = 2\n    var result = false\n   \
    \ while i < a {\n        while j < a {\n            while k < a {\n          \
    \      if i * j * k == a {\n                    result = true\n              \
    \  }\n                k += 1\n            }\n            j += 1\n        }\n \
    \       i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpt7x33br_/tmpt7x33br_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87393a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b873909db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b873909d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b873909c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt7x33br_                        0x000055ee598f9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b8739592460 __libc_start_main +
    245

    6    tmpt7x33br_                        0x000055ee598f8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var prime = [Int]()\n    for i in 2...a {\n \
    \       if is_prime(a: i) {\n            prime.append(i)\n        }\n    }\n \
    \   for i in 0..<prime.count {\n        for j in i+1..<prime.count {\n       \
    \     for k in j+1..<prime.count {\n                if prime[i] * prime[j] * prime[k]\
    \ == a {\n                    result = true\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptehhn6x1.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var prime_numbers = [Int]()\n    for i in 2...a\
    \ {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n      \
    \  }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpu9qcuqvp.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isPrime = true\n    var i = 2\n    while i < a {\n        if a %\
    \ i == 0 {\n            isPrime = false\n        }\n        i += 1\n    }\n  \
    \  return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp7umu6wkb/tmp7umu6wkb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba67c36bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba67c062b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba67c062988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba67c0617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7umu6wkb                        0x0000564235fe0243 <unavailable> + 4675

    5    libc.so.6                          0x00002ba67c557460 __libc_start_main +
    245

    6    tmp7umu6wkb                        0x0000564235fdfef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var i = 2\n    var prime_numbers = [Int]()\n    while i < a {\n     \
    \   if is_prime(a: i) {\n            prime_numbers.append(i)\n        }\n    \
    \    i += 1\n    }\n    var j = 0\n    while j < prime_numbers.count {\n     \
    \   var k = j + 1\n        while k < prime_numbers.count {\n            var l\
    \ = k + 1\n            while l < prime_numbers.count {\n                if prime_numbers[j]\
    \ * prime_numbers[k] * prime_numbers[l] == a {\n                    return true\n\
    \                }\n                l += 1\n            }\n            k += 1\n\
    \        }\n        j += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpil1h4tf0.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var i = 2\n    var count = 0\n    while i < a\
    \ {\n        if a % i == 0 {\n            count += 1\n            if count ==\
    \ 3 {\n                result = true\n                break\n            }\n \
    \       }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmprsmry9wb/tmprsmry9wb.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac218a9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac218796b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac218796988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2187957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprsmry9wb                        0x000055f9e0e3332b <unavailable> + 4907

    5    libc.so.6                          0x00002ac218c8b460 __libc_start_main +
    245

    6    tmprsmry9wb                        0x000055f9e0e32ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isPrime = true\n    var i = 2\n    while i < a {\n        if a %\
    \ i == 0 {\n            isPrime = false\n        }\n        i += 1\n    }\n  \
    \  return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp7umu6wkb/tmp7umu6wkb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba67c36bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba67c062b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba67c062988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba67c0617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7umu6wkb                        0x0000564235fe0243 <unavailable> + 4675

    5    libc.so.6                          0x00002ba67c557460 __libc_start_main +
    245

    6    tmp7umu6wkb                        0x0000564235fdfef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isPrime = true\n    var number = a\n    var i = 2\n    while i <\
    \ number {\n        if number % i == 0 {\n            number = number / i\n  \
    \          if isPrime(i) {\n                isPrime = true\n            } else\
    \ {\n                isPrime = false\n                break\n            }\n \
    \       } else {\n            i += 1\n        }\n    }\n    if isPrime(number)\
    \ {\n        isPrime = true\n    } else {\n        isPrime = false\n    }\n  \
    \  return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqaiu4tt2.swift:14:16: error: cannot call value of non-function\
    \ type 'Bool'\n            if isPrime(i) {\n               ^\n/tmp/tmpqaiu4tt2.swift:24:8:\
    \ error: cannot call value of non-function type 'Bool'\n    if isPrime(number)\
    \ {\n       ^\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isPrime = true\n    var i = 2\n    while i < a {\n        if a %\
    \ i == 0 {\n            isPrime = false\n        }\n        i += 1\n    }\n  \
    \  return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp7umu6wkb/tmp7umu6wkb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba67c36bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba67c062b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba67c062988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba67c0617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7umu6wkb                        0x0000564235fe0243 <unavailable> + 4675

    5    libc.so.6                          0x00002ba67c557460 __libc_start_main +
    245

    6    tmp7umu6wkb                        0x0000564235fdfef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply = false\n    var prime_numbers = [Int]()\n    for i in\
    \ 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in 0..<prime_numbers.count\
    \ {\n            for k in 0..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnc015032.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var count = 0\n    for i in 2...a\
    \ {\n        if a % i == 0 {\n            count += 1\n        }\n    }\n    if\
    \ count == 3 {\n        is_multiply_prime = true\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpj2cpvnwh/tmpj2cpvnwh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10294a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1029198b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1029198988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10291977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2cpvnwh                        0x0000557df50343a7 <unavailable> + 5031

    5    libc.so.6                          0x00002b102968d460 __libc_start_main +
    245

    6    tmpj2cpvnwh                        0x0000557df5033fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var is_prime = false\n    var prime_numbers\
    \ = [Int]()\n    var prime_numbers_count = 0\n    var prime_numbers_product =\
    \ 1\n    var i = 2\n    while i <= a {\n        is_prime = true\n        for j\
    \ in 2..<i {\n            if i % j == 0 {\n                is_prime = false\n\
    \                break\n            }\n        }\n        if is_prime {\n    \
    \        prime_numbers.append(i)\n            prime_numbers_count += 1\n     \
    \   }\n        i += 1\n    }\n    for i in 0..<prime_numbers_count {\n       \
    \ for j in i+1..<prime_numbers_count {\n            for k in j+1..<prime_numbers_count\
    \ {\n                prime_numbers_product = prime_numbers[i] * prime_numbers[j]\
    \ * prime_numbers[k]\n                if prime_numbers_product == a {\n      \
    \              is_multiply_prime = true\n                    break\n         \
    \       }\n            }\n        }\n    }\n    return is_multiply_prime\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp5w54glw_/tmp5w54glw_.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7dc57ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7dc275b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7dc275988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7dc2747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5w54glw_                        0x000056440e2ba52b <unavailable> + 5419

    5    libc.so.6                          0x00002ad7dc76a460 __libc_start_main +
    245

    6    tmp5w54glw_                        0x000056440e2ba0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var prime_numbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            prime_numbers.append(i)\n        }\n    }\n    var result\
    \ = false\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpv_hov3bu.swift:10:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply = false\n    var i = 2\n    var j = 2\n    var k = 2\n\
    \    while i < a {\n        while j < a {\n            while k < a {\n       \
    \         if i * j * k == a {\n                    is_multiply = true\n      \
    \          }\n                k += 1\n            }\n            j += 1\n    \
    \    }\n        i += 1\n    }\n    return is_multiply\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpo7tptkf_/tmpo7tptkf_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adebc054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adebbd4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adebbd4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adebbd4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7tptkf_                        0x00005569ef0ef227 <unavailable> + 4647

    5    libc.so.6                          0x00002adebc240460 __libc_start_main +
    245

    6    tmpo7tptkf_                        0x00005569ef0eee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var i = 2\n    var j = 2\n    var\
    \ k = 2\n    while i < a {\n        while j < a {\n            while k < a {\n\
    \                if i * j * k == a {\n                    is_multiply_prime =\
    \ true\n                }\n                k += 1\n            }\n           \
    \ j += 1\n        }\n        i += 1\n    }\n    return is_multiply_prime\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp_1cv9nr6/tmp_1cv9nr6.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b188b41cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b188b113b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b188b113988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b188b1127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_1cv9nr6                        0x000055f2300c3227 <unavailable> + 4647

    5    libc.so.6                          0x00002b188b608460 __libc_start_main +
    245

    6    tmp_1cv9nr6                        0x000055f2300c2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var i = 2\n    var j = 2\n    var k = 2\n    var is_multiply = false\n\
    \    while i < a {\n        while j < a {\n            while k < a {\n       \
    \         if i * j * k == a {\n                    is_multiply = true\n      \
    \          }\n                k += 1\n            }\n            j += 1\n    \
    \    }\n        i += 1\n    }\n    return is_multiply\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp8pl1ub1j/tmp8pl1ub1j.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd24baac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd248a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd248a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd248a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8pl1ub1j                        0x00005563432c2227 <unavailable> + 4647

    5    libc.so.6                          0x00002acd24d96460 __libc_start_main +
    245

    6    tmp8pl1ub1j                        0x00005563432c1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    var\
    \ i = 2\n    while i < a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n        i += 1\n    }\n    for prime_number in prime_numbers {\n \
    \       for prime_number2 in prime_numbers {\n            for prime_number3 in\
    \ prime_numbers {\n                if prime_number * prime_number2 * prime_number3\
    \ == a {\n                    is_multiply_prime = true\n                }\n  \
    \          }\n        }\n    }\n    return is_multiply_prime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4q76196q.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = false\n    var primeNumbers = [Int]()\n    for\
    \ i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count\
    \ {\n            for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    isMultiplyPrime\
    \ = true\n                }\n            }\n        }\n    }\n    return isMultiplyPrime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpdaky4ams.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = false\n    var primeNumbers = [Int]()\n    for\
    \ i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count\
    \ {\n            for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    isMultiplyPrime\
    \ = true\n                }\n            }\n        }\n    }\n    return isMultiplyPrime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpdaky4ams.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var prime_numbers = [Int]()\n    for i in 2...a\
    \ {\n        if is_prime(i) {\n            prime_numbers.append(i)\n        }\n\
    \    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5ihyfe4w.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply = false\n    var is_prime = false\n    var i = 2\n  \
    \  var j = 2\n    var k = 2\n    var count = 0\n    while i < a {\n        while\
    \ j < a {\n            while k < a {\n                if i * j * k == a {\n  \
    \                  is_multiply = true\n                    count += 1\n      \
    \          }\n                k += 1\n            }\n            j += 1\n    \
    \    }\n        i += 1\n    }\n    if count == 1 {\n        is_prime = true\n\
    \    }\n    return is_multiply && is_prime\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmptmg2emoj/tmptmg2emoj.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e047d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e044ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e044cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e044cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptmg2emoj                        0x00005607eaaef227 <unavailable> + 4647

    5    libc.so.6                          0x00002b7e049c1460 __libc_start_main +
    245

    6    tmptmg2emoj                        0x00005607eaaeee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    var\
    \ i = 2\n    while i <= a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n        i += 1\n    }\n    for i in 0..<prime_numbers.count {\n  \
    \      for j in i..<prime_numbers.count {\n            for k in j..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    is_multiply_prime = true\n                }\n  \
    \          }\n        }\n    }\n    return is_multiply_prime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwtuwcjgn.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var i = 2\n    var j = 2\n    var k = 2\n    var result = false\n   \
    \ while i < a {\n        while j < a {\n            while k < a {\n          \
    \      if i * j * k == a {\n                    result = true\n              \
    \  }\n                k += 1\n            }\n            j += 1\n        }\n \
    \       i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpt7x33br_/tmpt7x33br_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87393a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b873909db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b873909d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b873909c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt7x33br_                        0x000055ee598f9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b8739592460 __libc_start_main +
    245

    6    tmpt7x33br_                        0x000055ee598f8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    var result = false\n    for i in\
    \ primes {\n        for j in primes {\n            for k in primes {\n       \
    \         if i * j * k == a {\n                    result = true\n           \
    \     }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979034
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    var result = false\n  \
    \  for i in 0..<prime_numbers.count {\n        for j in 0..<prime_numbers.count\
    \ {\n            for k in 0..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a < 6 {\n        return false\n    }\n    var i = 2\n    var j = 2\n\
    \    var k = 2\n    var sum = 0\n    while i < a {\n        while j < a {\n  \
    \          while k < a {\n                sum = i * j * k\n                if\
    \ sum == a {\n                    return true\n                }\n           \
    \     k += 1\n            }\n            k = 2\n            j += 1\n        }\n\
    \        j = 2\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp__grdp3k/tmp__grdp3k.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ec7af7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ec77eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ec77ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ec77ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__grdp3k                        0x0000563d44a8446f <unavailable> + 5231

    5    libc.so.6                          0x00002b4ec7ce3460 __libc_start_main +
    245

    6    tmp__grdp3k                        0x0000563d44a83e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    var result = false\n    for i in\
    \ 0..<primes.count {\n        for j in 0..<primes.count {\n            for k in\
    \ 0..<primes.count {\n                if primes[i] * primes[j] * primes[k] ==\
    \ a {\n                    result = true\n                }\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isPrime = true\n    var i = 2\n    while i < a {\n        if a %\
    \ i == 0 {\n            isPrime = false\n        }\n        i += 1\n    }\n  \
    \  return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp7umu6wkb/tmp7umu6wkb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba67c36bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba67c062b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba67c062988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba67c0617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7umu6wkb                        0x0000564235fe0243 <unavailable> + 4675

    5    libc.so.6                          0x00002ba67c557460 __libc_start_main +
    245

    6    tmp7umu6wkb                        0x0000564235fdfef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var primes = [Int]()\n    for i in\
    \ 2...a {\n        if is_prime(i) {\n            primes.append(i)\n        }\n\
    \    }\n    for i in 0..<primes.count {\n        for j in i..<primes.count {\n\
    \            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    is_multiply_prime = true\n         \
    \       }\n            }\n        }\n    }\n    return is_multiply_prime\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpdlsguljw.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_prime = true\n    var i = 2\n    while i < a {\n        if a %\
    \ i == 0 {\n            is_prime = false\n            break\n        }\n     \
    \   i += 1\n    }\n    return is_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmph21amxc7/tmph21amxc7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04b95dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04b92d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04b92d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04b92d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph21amxc7                        0x00005652f2659243 <unavailable> + 4675

    5    libc.so.6                          0x00002b04b97c6460 __libc_start_main +
    245

    6    tmph21amxc7                        0x00005652f2658ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply = false\n    var i = 2\n    var j = 2\n    var k = 2\n\
    \    while i < a {\n        while j < a {\n            while k < a {\n       \
    \         if i * j * k == a {\n                    is_multiply = true\n      \
    \          }\n                k += 1\n            }\n            j += 1\n    \
    \    }\n        i += 1\n    }\n    return is_multiply\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpo7tptkf_/tmpo7tptkf_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adebc054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adebbd4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adebbd4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adebbd4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7tptkf_                        0x00005569ef0ef227 <unavailable> + 4647

    5    libc.so.6                          0x00002adebc240460 __libc_start_main +
    245

    6    tmpo7tptkf_                        0x00005569ef0eee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var is_prime = true\n    var i = 2\n\
    \    var j = 2\n    var k = 2\n    while i < a {\n        while j < a {\n    \
    \        while k < a {\n                if i * j * k == a {\n                \
    \    is_multiply_prime = true\n                }\n                k += 1\n   \
    \         }\n            j += 1\n        }\n        i += 1\n    }\n    return\
    \ is_multiply_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpq17g6_ia/tmpq17g6_ia.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38d9268c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38d8f5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38d8f5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38d8f5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq17g6_ia                        0x0000555953a1e227 <unavailable> + 4647

    5    libc.so.6                          0x00002b38d9454460 __libc_start_main +
    245

    6    tmpq17g6_ia                        0x0000555953a1de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    var i = 0\n    while i\
    \ < prime_numbers.count {\n        if a % prime_numbers[i] == 0 {\n          \
    \  if a / prime_numbers[i] == 1 {\n                return true\n            }\n\
    \            else {\n                return is_multiply_prime(a: a / prime_numbers[i])\n\
    \            }\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp1sktc3sp/tmp1sktc3sp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adcf14edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcf11e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adcf11e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adcf11e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1sktc3sp                        0x0000562deb88c403 <unavailable> + 5123

    5    libc.so.6                          0x00002adcf16d9460 __libc_start_main +
    245

    6    tmp1sktc3sp                        0x0000562deb88c0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    var count = 0\n    for i in 0..<prime.count\
    \ {\n        if a % prime[i] == 0 {\n            count += 1\n        }\n    }\n\
    \    if count == 3 {\n        return true\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpcslvn5kk/tmpcslvn5kk.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf38415c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf3810cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf3810c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf3810b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcslvn5kk                        0x0000559f7b42c5db <unavailable> + 5595

    5    libc.so.6                          0x00002abf38601460 __libc_start_main +
    245

    6    tmpcslvn5kk                        0x0000559f7b42c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isPrime = true\n    var primeNumbers = [Int]()\n    var i = 2\n \
    \   while i < a {\n        if a % i == 0 {\n            for j in 2...i {\n   \
    \             if i % j == 0 {\n                    isPrime = false\n         \
    \           break\n                }\n            }\n            if isPrime {\n\
    \                primeNumbers.append(i)\n            }\n            isPrime =\
    \ true\n        }\n        i += 1\n    }\n    if primeNumbers.count == 3 {\n \
    \       return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpbfzf344d/tmpbfzf344d.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d23859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d23550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d23550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d2354f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbfzf344d                        0x00005614877d4507 <unavailable> + 5383

    5    libc.so.6                          0x00002b5d23a45460 __libc_start_main +
    245

    6    tmpbfzf344d                        0x00005614877d4149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var primes = [Int]()\n    for i in\
    \ 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n       \
    \ }\n    }\n    for i in 0..<primes.count {\n        for j in i+1..<primes.count\
    \ {\n            for k in j+1..<primes.count {\n                if primes[i] *\
    \ primes[j] * primes[k] == a {\n                    is_multiply_prime = true\n\
    \                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpd2vjkgkh.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_prime = true\n    var i = 2\n    while i < a {\n        if a %\
    \ i == 0 {\n            is_prime = false\n            break\n        }\n     \
    \   i += 1\n    }\n    return is_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmph21amxc7/tmph21amxc7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04b95dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04b92d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04b92d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04b92d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph21amxc7                        0x00005652f2659243 <unavailable> + 4675

    5    libc.so.6                          0x00002b04b97c6460 __libc_start_main +
    245

    6    tmph21amxc7                        0x00005652f2658ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    for\
    \ i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i+1..<prime_numbers.count\
    \ {\n            for k in j+1..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpyf7pb_jp.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isPrime = true\n    var i = 2\n    while i < a {\n        if a %\
    \ i == 0 {\n            isPrime = false\n        }\n        i += 1\n    }\n  \
    \  return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp7umu6wkb/tmp7umu6wkb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba67c36bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba67c062b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba67c062988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba67c0617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7umu6wkb                        0x0000564235fe0243 <unavailable> + 4675

    5    libc.so.6                          0x00002ba67c557460 __libc_start_main +
    245

    6    tmp7umu6wkb                        0x0000564235fdfef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var i = 2\n    var j = 2\n    var k = 2\n   \
    \ while i < a {\n        while j < a {\n            while k < a {\n          \
    \      if i * j * k == a {\n                    result = true\n              \
    \  }\n                k += 1\n            }\n            j += 1\n        }\n \
    \       i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpnqurvuop/tmpnqurvuop.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c064ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c061d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c061d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c061d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnqurvuop                        0x000055e3488ae227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c066c9460 __libc_start_main +
    245

    6    tmpnqurvuop                        0x000055e3488ade69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isPrime = true\n    var i = 2\n    while i < a {\n        if a %\
    \ i == 0 {\n            isPrime = false\n        }\n        i += 1\n    }\n  \
    \  return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp7umu6wkb/tmp7umu6wkb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba67c36bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba67c062b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba67c062988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba67c0617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7umu6wkb                        0x0000564235fe0243 <unavailable> + 4675

    5    libc.so.6                          0x00002ba67c557460 __libc_start_main +
    245

    6    tmp7umu6wkb                        0x0000564235fdfef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    for\
    \ i in 2...a {\n        var is_prime = true\n        for j in 2..<i {\n      \
    \      if i % j == 0 {\n                is_prime = false\n            }\n    \
    \    }\n        if is_prime {\n            prime_numbers.append(i)\n        }\n\
    \    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply = false\n    var i = 2\n    var prime_numbers = [Int]()\n\
    \    while i < a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n        i += 1\n    }\n    for i in 0..<prime_numbers.count {\n  \
    \      for j in i..<prime_numbers.count {\n            for k in j..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    is_multiply = true\n                }\n        \
    \    }\n        }\n    }\n    return is_multiply\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8lseepog.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result: Bool = false\n    var primeNumbers: [Int] = []\n    var i\
    \ = 2\n    while i < a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n        i += 1\n    }\n    for i in 0..<primeNumbers.count {\n   \
    \     for j in i..<primeNumbers.count {\n            for k in j..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    result = true\n                }\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpoidkmiyg.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    var result = false\n  \
    \  for i in 0...prime_numbers.count - 1 {\n        for j in 0...prime_numbers.count\
    \ - 1 {\n            for k in 0...prime_numbers.count - 1 {\n                if\
    \ prime_numbers[i] * prime_numbers[j] * prime_numbers[k] == a {\n            \
    \        result = true\n                }\n            }\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a == 1 {\n        return false\n    }\n    var i = 2\n    var count\
    \ = 0\n    while i < a {\n        if a % i == 0 {\n            count += 1\n  \
    \      }\n        i += 1\n    }\n    if count == 2 {\n        return true\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpp2p6dilp/tmpp2p6dilp.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac79b2d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac79afd0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac79afd0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac79afcf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp2p6dilp                        0x0000562f5265a2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ac79b4c5460 __libc_start_main +
    245

    6    tmpp2p6dilp                        0x0000562f52659ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primeNumbers = [Int]()\n    for i in 2...a\
    \ {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n       \
    \ }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i+1..<primeNumbers.count\
    \ {\n            for k in j+1..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp6ruef44i.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiply = false\n    var primeNumbers = [Int]()\n    for i in\
    \ 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n \
    \       }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count\
    \ {\n            for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    isMultiply =\
    \ true\n                }\n            }\n        }\n    }\n    return isMultiply\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp868k66yr.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var prime_numbers = [Int]()\n    var is_prime = true\n    for i in 2...a\
    \ {\n        for j in 2...i {\n            if i % j == 0 {\n                is_prime\
    \ = false\n            }\n        }\n        if is_prime {\n            prime_numbers.append(i)\n\
    \        }\n        is_prime = true\n    }\n    var is_multiply_prime = false\n\
    \    for i in 0..<prime_numbers.count {\n        for j in 0..<prime_numbers.count\
    \ {\n            for k in 0..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp9kucchao/tmp9kucchao.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5805740c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5805437b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5805437988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58054367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kucchao                        0x000055e456021647 <unavailable> + 5703

    5    libc.so.6                          0x00002b580592c460 __libc_start_main +
    245

    6    tmp9kucchao                        0x000055e456021289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpkk39q76p/tmpkk39q76p.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b194c308c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b194bfffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b194bfff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b194bffe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkk39q76p                        0x000055ce68b2d227 <unavailable> + 4647

    5    libc.so.6                          0x00002b194c4f4460 __libc_start_main +
    245

    6    tmpkk39q76p                        0x000055ce68b2ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    for\
    \ i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in 0..<prime_numbers.count\
    \ {\n            for k in 0..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprnkbzm5b.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var prime = [Int]()\n    for i in 2...a {\n \
    \       if is_prime(a: i) {\n            prime.append(i)\n        }\n    }\n \
    \   for i in 0..<prime.count {\n        for j in i+1..<prime.count {\n       \
    \     for k in j+1..<prime.count {\n                if prime[i] * prime[j] * prime[k]\
    \ == a {\n                    result = true\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptehhn6x1.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    for\
    \ i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i+1..<prime_numbers.count\
    \ {\n            for k in j+1..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpyf7pb_jp.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    var\
    \ prime_numbers_count = 0\n    var i = 2\n    while i < a {\n        if is_prime(a:\
    \ i) {\n            prime_numbers.append(i)\n            prime_numbers_count +=\
    \ 1\n        }\n        i += 1\n    }\n    for i in 0..<prime_numbers_count {\n\
    \        for j in 0..<prime_numbers_count {\n            for k in 0..<prime_numbers_count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    is_multiply_prime = true\n                }\n  \
    \          }\n        }\n    }\n    return is_multiply_prime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwoc1ozz4.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var number = a\n    var count = 0\n\
    \    for i in 2...number {\n        while number % i == 0 {\n            number\
    \ /= i\n            count += 1\n        }\n        if count == 3 {\n         \
    \   is_multiply_prime = true\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpkizq7kqw/tmpkizq7kqw.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bb875fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bb8456b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bb8456988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bb84557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkizq7kqw                        0x000055e6b9d995ef <unavailable> + 5615

    5    libc.so.6                          0x00002b6bb894b460 __libc_start_main +
    245

    6    tmpkizq7kqw                        0x000055e6b9d98fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var i = 2\n    var count = 0\n    while i < a {\n        if a % i ==\
    \ 0 {\n            count += 1\n        }\n        i += 1\n    }\n    return count\
    \ == 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5)\
    \ == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpg8m76hwm/tmpg8m76hwm.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a4b7cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a4b4c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a4b4c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a4b4c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8m76hwm                        0x000055e6768ed2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b2a4b9bb460 __libc_start_main +
    245

    6    tmpg8m76hwm                        0x000055e6768ecef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var prime_numbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            prime_numbers.append(i)\n        }\n    }\n    for i in 0..<prime_numbers.count\
    \ {\n        for j in i+1..<prime_numbers.count {\n            for k in j+1..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp32nzssz0.swift:10:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isPrime = true\n    var i = 2\n    while i < a {\n        if a %\
    \ i == 0 {\n            isPrime = false\n        }\n        i += 1\n    }\n  \
    \  return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp7umu6wkb/tmp7umu6wkb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba67c36bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba67c062b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba67c062988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba67c0617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7umu6wkb                        0x0000564235fe0243 <unavailable> + 4675

    5    libc.so.6                          0x00002ba67c557460 __libc_start_main +
    245

    6    tmp7umu6wkb                        0x0000564235fdfef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var i = 2\n    var j = 2\n    var k = 2\n   \
    \ while i < a {\n        while j < a {\n            while k < a {\n          \
    \      if i * j * k == a {\n                    result = true\n              \
    \  }\n                k += 1\n            }\n            j += 1\n        }\n \
    \       i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpnqurvuop/tmpnqurvuop.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c064ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c061d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c061d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c061d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnqurvuop                        0x000055e3488ae227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c066c9460 __libc_start_main +
    245

    6    tmpnqurvuop                        0x000055e3488ade69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primes = [Int]()\n    for i in 2...a {\n\
    \        if is_prime(i) {\n            primes.append(i)\n        }\n    }\n  \
    \  for i in 0..<primes.count {\n        for j in i..<primes.count {\n        \
    \    for k in j..<primes.count {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3vp_dwin.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var i = 2\n    var j = 2\n    var k = 2\n   \
    \ var count = 0\n    while i < a {\n        while j < a {\n            while k\
    \ < a {\n                if i * j * k == a {\n                    count += 1\n\
    \                }\n                k += 1\n            }\n            j += 1\n\
    \            k = 2\n        }\n        i += 1\n        j = 2\n    }\n    if count\
    \ == 1 {\n        result = true\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpc06heswb/tmpc06heswb.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba52e16dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba52de64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba52de64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba52de637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc06heswb                        0x000055c872b4f227 <unavailable> + 4647

    5    libc.so.6                          0x00002ba52e359460 __libc_start_main +
    245

    6    tmpc06heswb                        0x000055c872b4ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isPrime = true\n    var i = 2\n    while i < a {\n        if a %\
    \ i == 0 {\n            isPrime = false\n        }\n        i += 1\n    }\n  \
    \  return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp7umu6wkb/tmp7umu6wkb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba67c36bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba67c062b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba67c062988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba67c0617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7umu6wkb                        0x0000564235fe0243 <unavailable> + 4675

    5    libc.so.6                          0x00002ba67c557460 __libc_start_main +
    245

    6    tmp7umu6wkb                        0x0000564235fdfef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isPrime = true\n    var i = 2\n    while i < a {\n        if a %\
    \ i == 0 {\n            isPrime = false\n        }\n        i += 1\n    }\n  \
    \  return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp7umu6wkb/tmp7umu6wkb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba67c36bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba67c062b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba67c062988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba67c0617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7umu6wkb                        0x0000564235fe0243 <unavailable> + 4675

    5    libc.so.6                          0x00002ba67c557460 __libc_start_main +
    245

    6    tmp7umu6wkb                        0x0000564235fdfef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primes = [Int]()\n    for i in 2...a {\n\
    \        if is_prime(a: i) {\n            primes.append(i)\n        }\n    }\n\
    \    for i in 0..<primes.count {\n        for j in 0..<primes.count {\n      \
    \      for k in 0..<primes.count {\n                if primes[i] * primes[j] *\
    \ primes[k] == a {\n                    result = true\n                }\n   \
    \         }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp12ge2h4i.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primeNumbers = [Int]()\n    for i in 2...a\
    \ {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n       \
    \ }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in 0..<primeNumbers.count\
    \ {\n            for k in 0..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjyu0_sx5.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    for\
    \ i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i+1..<prime_numbers.count\
    \ {\n            for k in j+1..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpyf7pb_jp.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply = false\n    var prime_numbers = [Int]()\n    for i in\
    \ 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwtnag0or.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    for\
    \ i in 2...a {\n        var is_prime = true\n        for j in 2..<i {\n      \
    \      if i % j == 0 {\n                is_prime = false\n            }\n    \
    \    }\n        if is_prime {\n            prime_numbers.append(i)\n        }\n\
    \    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply = false\n    var i = 2\n    var prime_numbers: [Int]\
    \ = []\n    while i < a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n        i += 1\n    }\n    if prime_numbers.count >= 3 {\n       \
    \ for i in 0...prime_numbers.count - 3 {\n            for j in i + 1...prime_numbers.count\
    \ - 2 {\n                for k in j + 1...prime_numbers.count - 1 {\n        \
    \            if prime_numbers[i] * prime_numbers[j] * prime_numbers[k] == a {\n\
    \                        is_multiply = true\n                    }\n         \
    \       }\n            }\n        }\n    }\n    return is_multiply\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpanq1d849.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    for\
    \ i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i+1..<prime_numbers.count\
    \ {\n            for k in j+1..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpyf7pb_jp.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_prime = true\n    var i = 2\n    while i < a {\n        if a %\
    \ i == 0 {\n            is_prime = false\n            break\n        }\n     \
    \   i += 1\n    }\n    return is_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmph21amxc7/tmph21amxc7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04b95dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04b92d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04b92d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04b92d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph21amxc7                        0x00005652f2659243 <unavailable> + 4675

    5    libc.so.6                          0x00002b04b97c6460 __libc_start_main +
    245

    6    tmph21amxc7                        0x00005652f2658ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_prime = true\n    for i in 2...a {\n        if a % i == 0 {\n\
    \            is_prime = true\n            for j in 2...i {\n                if\
    \ i % j == 0 && i != j {\n                    is_prime = false\n             \
    \   }\n            }\n            if is_prime {\n                print(i)\n  \
    \          }\n        }\n    }\n    return is_prime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpgjst5jjf/tmpgjst5jjf.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b215b183c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b215ae7ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b215ae7a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b215ae797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgjst5jjf                        0x0000557b549f1573 <unavailable> + 5491

    5    libc.so.6                          0x00002b215b36f460 __libc_start_main +
    245

    6    tmpgjst5jjf                        0x0000557b549f1229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_prime = true\n    var i = 2\n    var j = 2\n    var k = 2\n  \
    \  while i < a {\n        while j < a {\n            while k < a {\n         \
    \       if i * j * k == a {\n                    is_prime = true\n           \
    \         return is_prime\n                }\n                k += 1\n       \
    \     }\n            j += 1\n        }\n        i += 1\n    }\n    return is_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpfhmszoff/tmpfhmszoff.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41ba9cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41ba6c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41ba6c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41ba6c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfhmszoff                        0x000055ff990931b3 <unavailable> + 4531

    5    libc.so.6                          0x00002b41babb9460 __libc_start_main +
    245

    6    tmpfhmszoff                        0x000055ff99092e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = false\n    var isPrime = true\n    var primeNumbers\
    \ = [Int]()\n    var primeNumbersCount = 0\n    var number = a\n    for i in 2...number\
    \ {\n        for j in 2...i {\n            if i % j == 0 {\n                isPrime\
    \ = false\n                break\n            }\n        }\n        if isPrime\
    \ {\n            primeNumbers.append(i)\n            primeNumbersCount += 1\n\
    \        }\n        isPrime = true\n    }\n    for i in 0..<primeNumbersCount\
    \ {\n        for j in 0..<primeNumbersCount {\n            for k in 0..<primeNumbersCount\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    isMultiplyPrime = true\n                    break\n\
    \                }\n            }\n        }\n    }\n    return isMultiplyPrime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpiwiqno8t/tmpiwiqno8t.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff07e79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff07b70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff07b70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff07b6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiwiqno8t                        0x000056396e4045a7 <unavailable> + 5543

    5    libc.so.6                          0x00002aff08065460 __libc_start_main +
    245

    6    tmpiwiqno8t                        0x000056396e4041e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var count = 0\n    for i in 1...a {\n       \
    \ if a % i == 0 {\n            count += 1\n        }\n    }\n    if count == 3\
    \ {\n        result = true\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpy4cdm9x3/tmpy4cdm9x3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad19b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad19b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad19b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad19b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy4cdm9x3                        0x000055d7d53fd3a7 <unavailable> + 5031

    5    libc.so.6                          0x00002ad19b57d460 __libc_start_main +
    245

    6    tmpy4cdm9x3                        0x000055d7d53fcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var prime_numbers = [Int]()\n    for i in 2...a\
    \ {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n      \
    \  }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in 0..<prime_numbers.count\
    \ {\n            for k in 0..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp603txj6g.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    for\
    \ i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjxge8x3l.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var prime_numbers = [Int]()\n    var is_prime = true\n    var i = 2\n\
    \    while i < a {\n        if a % i == 0 {\n            prime_numbers.append(i)\n\
    \            if prime_numbers.count == 3 {\n                break\n          \
    \  }\n        }\n        i += 1\n    }\n    for number in prime_numbers {\n  \
    \      if !is_prime_number(number) {\n            is_prime = false\n        }\n\
    \    }\n    return is_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprmi7nvv1.swift:21:13: error: cannot find 'is_prime_number' in scope\n\
    \        if !is_prime_number(number) {\n            ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primeNumbers = [Int]()\n    for i in 2...a\
    \ {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n       \
    \ }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count\
    \ {\n            for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp42ak3pgl.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isPrime = true\n    var i = 2\n    while i < a {\n        if a %\
    \ i == 0 {\n            isPrime = false\n        }\n        i += 1\n    }\n  \
    \  return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp7umu6wkb/tmp7umu6wkb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba67c36bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba67c062b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba67c062988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba67c0617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7umu6wkb                        0x0000564235fe0243 <unavailable> + 4675

    5    libc.so.6                          0x00002ba67c557460 __libc_start_main +
    245

    6    tmp7umu6wkb                        0x0000564235fdfef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var counter = 0\n    for i in 2...a\
    \ {\n        if a % i == 0 {\n            counter += 1\n        }\n    }\n   \
    \ if counter == 3 {\n        is_multiply_prime = true\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp5km64p0q/tmp5km64p0q.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3671c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab366eb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab366eb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab366eb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5km64p0q                        0x000055f922fec3a7 <unavailable> + 5031

    5    libc.so.6                          0x00002ab3673ad460 __libc_start_main +
    245

    6    tmp5km64p0q                        0x000055f922febfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    for\
    \ i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjxge8x3l.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_prime = true\n    var i = 2\n    var a = a\n    while i < a {\n\
    \        if a % i == 0 {\n            a = a / i\n            is_prime = is_prime_number(a:\
    \ i)\n            if is_prime == false {\n                return false\n     \
    \       }\n        } else {\n            i += 1\n        }\n    }\n    return\
    \ is_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpu5zbuc7j.swift:14:24: error: cannot find 'is_prime_number' in scope\n\
    \            is_prime = is_prime_number(a: i)\n                       ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var prime_numbers = [Int]()\n    for i in 2...a\
    \ {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n      \
    \  }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpu9qcuqvp.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a < 6 {\n        return false\n    }\n    var i = 2\n    while i <\
    \ a {\n        if a % i == 0 {\n            return is_multiply_prime(a: a / i)\n\
    \        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp2or2z08i/tmp2or2z08i.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b067c0e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b067bddab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b067bdda988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b067bdd97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2or2z08i                        0x000055d3b6c972b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b067c2cf460 __libc_start_main +
    245

    6    tmp2or2z08i                        0x000055d3b6c96ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = false\n    var primeNumbers = [Int]()\n    var\
    \ i = 2\n    while i < a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n        i += 1\n    }\n    for primeNumber in primeNumbers {\n   \
    \     if a % primeNumber == 0 {\n            isMultiplyPrime = true\n        }\
    \ else {\n            isMultiplyPrime = false\n        }\n    }\n    return isMultiplyPrime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpa9eai5ys.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var count = 0\n    for i in 2...a {\n        if a % i == 0 {\n      \
    \      count += 1\n        }\n    }\n    if count == 3 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp3sskgd2c/tmp3sskgd2c.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52fc48fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52fc186b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52fc186988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52fc1857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3sskgd2c                        0x00005617c76c73a7 <unavailable> + 5031

    5    libc.so.6                          0x00002b52fc67b460 __libc_start_main +
    245

    6    tmp3sskgd2c                        0x00005617c76c6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var prime_numbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            prime_numbers.append(i)\n        }\n    }\n    for i in 0..<prime_numbers.count\
    \ {\n        for j in i..<prime_numbers.count {\n            for k in j..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7gsvh8b3.swift:10:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_prime = true\n    var number = a\n    var i = 2\n    while i <\
    \ number && number > 1 {\n        if number % i == 0 {\n            number /=\
    \ i\n            is_prime = false\n        } else {\n            i += 1\n    \
    \    }\n    }\n    return is_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpj6x004nf/tmpj6x004nf.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09cf8e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09cf5dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09cf5dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09cf5db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6x004nf                        0x000055c8077c9243 <unavailable> + 4675

    5    libc.so.6                          0x00002b09cfad1460 __libc_start_main +
    245

    6    tmpj6x004nf                        0x000055c8077c8ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    for\
    \ i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in 0..<prime_numbers.count\
    \ {\n            for k in 0..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprnkbzm5b.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var prime_numbers = [Int]()\n    for i in 2...a\
    \ {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n      \
    \  }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpu9qcuqvp.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    for\
    \ i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjxge8x3l.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    for\
    \ i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjxge8x3l.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var prime_numbers = [Int]()\n    for i in 2...a\
    \ {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n      \
    \  }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpu9qcuqvp.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a < 6 {\n        return false\n    }\n    var i = 2\n    var j = 2\n\
    \    var k = 2\n    while i < a {\n        while j < a {\n            while k\
    \ < a {\n                if i * j * k == a {\n                    return true\n\
    \                }\n                k += 1\n            }\n            j += 1\n\
    \            k = 2\n        }\n        i += 1\n        j = 2\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5)\
    \ == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp9so465gm/tmp9so465gm.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b134cf4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b134cc41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b134cc41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b134cc407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9so465gm                        0x0000560facb1546f <unavailable> + 5231

    5    libc.so.6                          0x00002b134d136460 __libc_start_main +
    245

    6    tmp9so465gm                        0x0000560facb14e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var is_prime = true\n    var prime_numbers\
    \ = [Int]()\n    var prime_numbers_multiply = [Int]()\n    var prime_numbers_multiply_sum\
    \ = 0\n    var prime_numbers_multiply_sum_count = 0\n    var prime_numbers_multiply_sum_count_count\
    \ = 0\n    var prime_numbers_multiply_sum_count_count_count = 0\n    var prime_numbers_multiply_sum_count_count_count_count\
    \ = 0\n    var prime_numbers_multiply_sum_count_count_count_count_count = 0\n\
    \    var prime_numbers_multiply_sum_count_count_count_count_count_count = 0\n\
    \    var prime_numbers_multiply_sum_count_count_count_count_count_count_count\
    \ = 0\n    var prime_numbers_multiply_sum_count_count_count_count_count_count_count_count\
    \ = 0\n    var prime_numbers_multiply_sum_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var prime_numbers_multiply_sum_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var prime_numbers_multiply_sum_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var prime_numbers_multiply_sum_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var prime_numbers_multiply_sum_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var prime_numbers_multiply_sum_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var prime_numbers_multiply_sum_count_count_count_count_count_count_count_count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpdxcaak8a.swift:27:9: error: type annotation missing in pattern\n\
    \    var prime_numbers_multiply_sum_count_count_count_count_count_count_count_count\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659979035
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpkk39q76p/tmpkk39q76p.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b194c308c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b194bfffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b194bfff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b194bffe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkk39q76p                        0x000055ce68b2d227 <unavailable> + 4647

    5    libc.so.6                          0x00002b194c4f4460 __libc_start_main +
    245

    6    tmpkk39q76p                        0x000055ce68b2ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    for\
    \ i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjxge8x3l.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var counter = 0\n    for i in 2...a {\n     \
    \   if a % i == 0 {\n            counter += 1\n        }\n    }\n    if counter\
    \ == 3 {\n        result = true\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpdfygiyqb/tmpdfygiyqb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adac1bc3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adac18bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adac18ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adac18b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdfygiyqb                        0x000055fe151ac3a7 <unavailable> + 5031

    5    libc.so.6                          0x00002adac1daf460 __libc_start_main +
    245

    6    tmpdfygiyqb                        0x000055fe151abfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var i = 2\n    var count = 0\n    while i < a\
    \ {\n        if a % i == 0 {\n            result = is_prime(a: i)\n          \
    \  if result {\n                count += 1\n            }\n        }\n       \
    \ i += 1\n    }\n    if count == 3 {\n        return true\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpec277osf.swift:13:22: error: cannot find 'is_prime' in scope\n\
    \            result = is_prime(a: i)\n                     ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var prime_numbers = [Int]()\n    for i in 2...a\
    \ {\n        if is_prime(i) {\n            prime_numbers.append(i)\n        }\n\
    \    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5ihyfe4w.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    var prime_numbers_count\
    \ = prime_numbers.count\n    var i = 0\n    var j = 0\n    var k = 0\n    var\
    \ found = false\n    while i < prime_numbers_count && !found {\n        j = 0\n\
    \        while j < prime_numbers_count && !found {\n            k = 0\n      \
    \      while k < prime_numbers_count && !found {\n                if a == prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] {\n                    found = true\n\
    \                }\n                k += 1\n            }\n            j += 1\n\
    \        }\n        i += 1\n    }\n    return found\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979035
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_prime = true\n    var i = 2\n    while i < a {\n        if a %\
    \ i == 0 {\n            is_prime = false\n            break\n        }\n     \
    \   i += 1\n    }\n    return is_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmph21amxc7/tmph21amxc7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04b95dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04b92d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04b92d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04b92d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph21amxc7                        0x00005652f2659243 <unavailable> + 4675

    5    libc.so.6                          0x00002b04b97c6460 __libc_start_main +
    245

    6    tmph21amxc7                        0x00005652f2658ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a == 0 {\n        return false\n    }\n    var count = 0\n    var\
    \ i = 2\n    while i < a {\n        if a % i == 0 {\n            count += 1\n\
    \            a /= i\n        }\n        i += 1\n    }\n    return count == 2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp0z5o42pj.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'a' is a 'let' constant\n            a /= i\n            ~ ^\n"
  stdout: ''
  timestamp: 1659979035
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_prime = true\n    var i = 2\n    while i < a {\n        if a %\
    \ i == 0 {\n            is_prime = false\n            break\n        }\n     \
    \   i += 1\n    }\n    return is_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmph21amxc7/tmph21amxc7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04b95dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04b92d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04b92d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04b92d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph21amxc7                        0x00005652f2659243 <unavailable> + 4675

    5    libc.so.6                          0x00002b04b97c6460 __libc_start_main +
    245

    6    tmph21amxc7                        0x00005652f2658ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply = false\n    var prime_numbers = [Int]()\n    for i in\
    \ 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwtnag0or.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var count = 0\n    var i = 2\n    while i < a\
    \ {\n        if a % i == 0 {\n            count += 1\n            if count ==\
    \ 3 {\n                result = true\n                break\n            }\n \
    \       }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpi3a9ie26/tmpi3a9ie26.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbc75c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbc72beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbc72be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbc72bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi3a9ie26                        0x0000560d152ee32b <unavailable> + 4907

    5    libc.so.6                          0x00002abbc77b3460 __libc_start_main +
    245

    6    tmpi3a9ie26                        0x0000560d152edef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isPrime = true\n    var primeNumbers = [Int]()\n    for i in 2...a\
    \ {\n        for j in 2..<i {\n            if i % j == 0 {\n                isPrime\
    \ = false\n            }\n        }\n        if isPrime {\n            primeNumbers.append(i)\n\
    \        }\n        isPrime = true\n    }\n    var count = 0\n    for i in primeNumbers\
    \ {\n        if a % i == 0 {\n            count += 1\n        }\n    }\n    if\
    \ count == 3 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpxei2imrk/tmpxei2imrk.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab33a91cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab33a613b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab33a613988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab33a6127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxei2imrk                        0x000055f961a8377b <unavailable> + 6011

    5    libc.so.6                          0x00002ab33ab08460 __libc_start_main +
    245

    6    tmpxei2imrk                        0x000055f961a83349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    for\
    \ i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in 0..<prime_numbers.count\
    \ {\n            for k in 0..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprnkbzm5b.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    for\
    \ i in 2...a {\n        var is_prime = true\n        for j in 2..<i {\n      \
    \      if i % j == 0 {\n                is_prime = false\n            }\n    \
    \    }\n        if is_prime {\n            prime_numbers.append(i)\n        }\n\
    \    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if a == prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979035
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_prime = true\n    var i = 2\n    while i < a {\n        if a %\
    \ i == 0 {\n            is_prime = false\n            break\n        }\n     \
    \   i += 1\n    }\n    return is_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmph21amxc7/tmph21amxc7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04b95dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04b92d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04b92d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04b92d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph21amxc7                        0x00005652f2659243 <unavailable> + 4675

    5    libc.so.6                          0x00002b04b97c6460 __libc_start_main +
    245

    6    tmph21amxc7                        0x00005652f2658ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    for\
    \ i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjxge8x3l.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_prime = true\n    var i = 2\n    while i < a {\n        if a %\
    \ i == 0 {\n            is_prime = false\n            break\n        }\n     \
    \   i += 1\n    }\n    return is_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmph21amxc7/tmph21amxc7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04b95dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04b92d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04b92d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04b92d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph21amxc7                        0x00005652f2659243 <unavailable> + 4675

    5    libc.so.6                          0x00002b04b97c6460 __libc_start_main +
    245

    6    tmph21amxc7                        0x00005652f2658ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply = false\n    var a = a\n    var count = 0\n    for i\
    \ in 2...a {\n        if a % i == 0 {\n            a /= i\n            count +=\
    \ 1\n            if count == 3 {\n                is_multiply = true\n       \
    \         break\n            }\n        }\n    }\n    return is_multiply\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpvqg89r_m/tmpvqg89r_m.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7efab44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7efa83bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7efa83b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7efa83a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvqg89r_m                        0x000056076b8bc41b <unavailable> + 5147

    5    libc.so.6                          0x00002b7efad30460 __libc_start_main +
    245

    6    tmpvqg89r_m                        0x000056076b8bbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_prime = true\n    var prime_number = 2\n    var prime_number_count\
    \ = 0\n    var number = a\n    while is_prime && prime_number_count < 3 {\n  \
    \      if number % prime_number == 0 {\n            number /= prime_number\n \
    \           prime_number_count += 1\n        } else {\n            prime_number\
    \ += 1\n        }\n        if number == 1 {\n            is_prime = false\n  \
    \      }\n    }\n    return is_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpobaqvw4a/tmpobaqvw4a.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6dd7eb7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dd7baeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dd7bae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dd7bad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpobaqvw4a                        0x00005572721e22b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b6dd80a3460 __libc_start_main +
    245

    6    tmpobaqvw4a                        0x00005572721e1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply = false\n    var is_prime = false\n    var prime_numbers\
    \ = [Int]()\n    for i in 2...a {\n        is_prime = true\n        for j in 2..<i\
    \ {\n            if i % j == 0 {\n                is_prime = false\n         \
    \       break\n            }\n        }\n        if is_prime {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply\
    \ = true\n                    break\n                }\n            }\n      \
    \  }\n    }\n    return is_multiply\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    for\
    \ i in 1...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzt6ahs1n.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    for\
    \ i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in 0..<prime_numbers.count\
    \ {\n            for k in 0..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprnkbzm5b.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_prime = true\n    for i in 2...a {\n        if a % i == 0 {\n\
    \            is_prime = is_prime_number(a: i)\n            if is_prime == false\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5)\
    \ == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfjmb8i6h.swift:11:24: error: cannot find 'is_prime_number' in scope\n\
    \            is_prime = is_prime_number(a: i)\n                       ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    for\
    \ i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in 0..<prime_numbers.count\
    \ {\n            for k in 0..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprnkbzm5b.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpkk39q76p/tmpkk39q76p.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b194c308c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b194bfffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b194bfff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b194bffe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkk39q76p                        0x000055ce68b2d227 <unavailable> + 4647

    5    libc.so.6                          0x00002b194c4f4460 __libc_start_main +
    245

    6    tmpkk39q76p                        0x000055ce68b2ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    for\
    \ i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjxge8x3l.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var i = 2\n    var j = 2\n    var k = 2\n   \
    \ while i < a {\n        while j < a {\n            while k < a {\n          \
    \      if i * j * k == a {\n                    result = true\n              \
    \  }\n                k += 1\n            }\n            j += 1\n        }\n \
    \       i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpnqurvuop/tmpnqurvuop.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c064ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c061d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c061d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c061d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnqurvuop                        0x000055e3488ae227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c066c9460 __libc_start_main +
    245

    6    tmpnqurvuop                        0x000055e3488ade69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpkk39q76p/tmpkk39q76p.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b194c308c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b194bfffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b194bfff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b194bffe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkk39q76p                        0x000055ce68b2d227 <unavailable> + 4647

    5    libc.so.6                          0x00002b194c4f4460 __libc_start_main +
    245

    6    tmpkk39q76p                        0x000055ce68b2ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var i = 2\n    var j = 2\n    var k = 2\n    var result = false\n   \
    \ while i < a {\n        while j < a {\n            while k < a {\n          \
    \      if i * j * k == a {\n                    result = true\n              \
    \  }\n                k += 1\n            }\n            j += 1\n        }\n \
    \       i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpt7x33br_/tmpt7x33br_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87393a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b873909db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b873909d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b873909c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt7x33br_                        0x000055ee598f9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b8739592460 __libc_start_main +
    245

    6    tmpt7x33br_                        0x000055ee598f8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primeNumbers = [Int]()\n    for i in 1...a\
    \ {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n       \
    \ }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in 0..<primeNumbers.count\
    \ {\n            for k in 0..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpj9hxnd6h.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979035
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for\
    \ i in 0..<primeNumbers.count {\n        for j in 0..<primeNumbers.count {\n \
    \           for k in 0..<primeNumbers.count {\n                if (primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k]) == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var prime_numbers = [Int]()\n    for i in 2...a\
    \ {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n      \
    \  }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpu9qcuqvp.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var a = a\n    var prime_numbers =\
    \ [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in 0..<prime_numbers.count\
    \ {\n            for k in 0..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuepyynbm.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979035
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var i = 2\n    var j = 2\n    var\
    \ k = 2\n    var sum = 0\n    while i < a {\n        while j < a {\n         \
    \   while k < a {\n                sum = i * j * k\n                if sum ==\
    \ a {\n                    is_multiply_prime = true\n                }\n     \
    \           k += 1\n            }\n            j += 1\n        }\n        i +=\
    \ 1\n    }\n    return is_multiply_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpu66yuk9n/tmpu66yuk9n.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b02f27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b02c1eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b02c1e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b02c1d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu66yuk9n                        0x000055b6c8a2c227 <unavailable> + 4647

    5    libc.so.6                          0x00002b8b03113460 __libc_start_main +
    245

    6    tmpu66yuk9n                        0x000055b6c8a2be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a == 0 {\n        return false\n    }\n    var a = a\n    var prime_numbers\
    \ = [Int]()\n    var i = 2\n    while a > 1 {\n        if a % i == 0 {\n     \
    \       prime_numbers.append(i)\n            a /= i\n        } else {\n      \
    \      i += 1\n        }\n    }\n    return prime_numbers.count == 3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979035
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_prime = true\n    var i = 2\n    while i < a {\n        if a %\
    \ i == 0 {\n            is_prime = false\n            break\n        }\n     \
    \   i += 1\n    }\n    return is_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmph21amxc7/tmph21amxc7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04b95dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04b92d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04b92d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04b92d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph21amxc7                        0x00005652f2659243 <unavailable> + 4675

    5    libc.so.6                          0x00002b04b97c6460 __libc_start_main +
    245

    6    tmph21amxc7                        0x00005652f2658ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpkk39q76p/tmpkk39q76p.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b194c308c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b194bfffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b194bfff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b194bffe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkk39q76p                        0x000055ce68b2d227 <unavailable> + 4647

    5    libc.so.6                          0x00002b194c4f4460 __libc_start_main +
    245

    6    tmpkk39q76p                        0x000055ce68b2ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply = false\n    var prime_numbers = [Int]()\n    for i in\
    \ 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in 0..<prime_numbers.count\
    \ {\n            for k in 0..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnc015032.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var prime_numbers = [Int]()\n    for i in 1...a\
    \ {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n      \
    \  }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpim5idao4.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979035
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply = false\n    var i = 2\n    var j = 2\n    var k = 2\n\
    \    while i < a {\n        while j < a {\n            while k < a {\n       \
    \         if i * j * k == a {\n                    is_multiply = true\n      \
    \          }\n                k += 1\n            }\n            j += 1\n    \
    \    }\n        i += 1\n    }\n    return is_multiply\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpo7tptkf_/tmpo7tptkf_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adebc054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adebbd4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adebbd4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adebbd4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7tptkf_                        0x00005569ef0ef227 <unavailable> + 4647

    5    libc.so.6                          0x00002adebc240460 __libc_start_main +
    245

    6    tmpo7tptkf_                        0x00005569ef0eee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var prime_numbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            prime_numbers.append(i)\n        }\n    }\n    for i in 0..<prime_numbers.count\
    \ {\n        for j in 0..<prime_numbers.count {\n            for k in 0..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxk1kk26o.swift:10:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979035
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isPrime = true\n    var i = 2\n    while i < a {\n        if a %\
    \ i == 0 {\n            isPrime = false\n        }\n        i += 1\n    }\n  \
    \  return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp7umu6wkb/tmp7umu6wkb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba67c36bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba67c062b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba67c062988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba67c0617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7umu6wkb                        0x0000564235fe0243 <unavailable> + 4675

    5    libc.so.6                          0x00002ba67c557460 __libc_start_main +
    245

    6    tmp7umu6wkb                        0x0000564235fdfef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var a = a\n    var prime_numbers =\
    \ [Int]()\n    var prime_numbers_count = 0\n    var i = 2\n    while i <= a {\n\
    \        if a % i == 0 {\n            prime_numbers.append(i)\n            prime_numbers_count\
    \ += 1\n            a /= i\n        } else {\n            i += 1\n        }\n\
    \    }\n    if prime_numbers_count == 3 {\n        is_multiply_prime = true\n\
    \    }\n    return is_multiply_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primeNumbers = [Int]()\n    for i in 2...a\
    \ {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n       \
    \ }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in 0..<primeNumbers.count\
    \ {\n            for k in 0..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjyu0_sx5.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    var\
    \ i = 2\n    while i < a {\n        if is_prime(i) {\n            prime_numbers.append(i)\n\
    \        }\n        i += 1\n    }\n    for i in prime_numbers {\n        for j\
    \ in prime_numbers {\n            for k in prime_numbers {\n                if\
    \ i * j * k == a {\n                    is_multiply_prime = true\n           \
    \     }\n            }\n        }\n    }\n    return is_multiply_prime\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp6eo1vt8i.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979035
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a == 0 {\n        return false\n    }\n    var i = 2\n    var counter\
    \ = 0\n    while i < a {\n        if a % i == 0 {\n            counter += 1\n\
    \            if counter == 3 {\n                return true\n            }\n \
    \       }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpt3n0on6x/tmpt3n0on6x.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b275c931c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b275c628b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b275c628988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b275c6277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt3n0on6x                        0x000055c345ddc32b <unavailable> + 4907

    5    libc.so.6                          0x00002b275cb1d460 __libc_start_main +
    245

    6    tmpt3n0on6x                        0x000055c345ddbef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var prime_numbers = [Int]()\n    for i in 1...a {\n        if is_prime(a:\
    \ i) {\n            prime_numbers.append(i)\n        }\n    }\n    for i in 0..<prime_numbers.count\
    \ {\n        for j in 0..<prime_numbers.count {\n            for k in 0..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp6g010695.swift:10:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply = false\n    var prime_numbers = [Int]()\n    for i in\
    \ 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwtnag0or.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    var\
    \ prime_numbers_count = 0\n    var a_copy = a\n    for i in 2...a_copy {\n   \
    \     if is_prime(a: i) {\n            prime_numbers.append(i)\n            prime_numbers_count\
    \ += 1\n        }\n    }\n    for i in 0..<prime_numbers_count {\n        if a_copy\
    \ % prime_numbers[i] == 0 {\n            a_copy /= prime_numbers[i]\n        \
    \    if a_copy == 1 {\n                is_multiply_prime = true\n            \
    \    break\n            }\n        }\n    }\n    return is_multiply_prime\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf4mzcexl.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979035
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var a = a\n    var count = 0\n   \
    \ var i = 2\n    while i <= a {\n        if a % i == 0 {\n            a /= i\n\
    \            count += 1\n        } else {\n            i += 1\n        }\n   \
    \ }\n    if count == 3 {\n        is_multiply_prime = true\n    }\n    return\
    \ is_multiply_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply = false\n    var prime_numbers = [Int]()\n    for i in\
    \ 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in 0..<prime_numbers.count\
    \ {\n            for k in 0..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnc015032.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    for\
    \ i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in 0..<prime_numbers.count\
    \ {\n            for k in 0..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprnkbzm5b.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var i = 2\n    var prime_numbers = [Int]()\n    while i < a {\n     \
    \   if is_prime(a: i) {\n            prime_numbers.append(i)\n        }\n    \
    \    i += 1\n    }\n    var j = 0\n    while j < prime_numbers.count {\n     \
    \   var k = j + 1\n        while k < prime_numbers.count {\n            var l\
    \ = k + 1\n            while l < prime_numbers.count {\n                if prime_numbers[j]\
    \ * prime_numbers[k] * prime_numbers[l] == a {\n                    return true\n\
    \                }\n                l += 1\n            }\n            k += 1\n\
    \        }\n        j += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpil1h4tf0.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primeNumbers = [Int]()\n    for i in 2...a\
    \ {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n       \
    \ }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count\
    \ {\n            for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp42ak3pgl.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpkk39q76p/tmpkk39q76p.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b194c308c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b194bfffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b194bfff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b194bffe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkk39q76p                        0x000055ce68b2d227 <unavailable> + 4647

    5    libc.so.6                          0x00002b194c4f4460 __libc_start_main +
    245

    6    tmpkk39q76p                        0x000055ce68b2ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiply = false\n    var i = 2\n    var j = 2\n    var k = 2\n\
    \    while i < a {\n        while j < a {\n            while k < a {\n       \
    \         if i * j * k == a {\n                    isMultiply = true\n       \
    \         }\n                k += 1\n            }\n            j += 1\n     \
    \   }\n        i += 1\n    }\n    return isMultiply\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp9rvk6uzj/tmp9rvk6uzj.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d53463c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d5315ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d5315a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d531597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9rvk6uzj                        0x00005626a33b4227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1d5364f460 __libc_start_main +
    245

    6    tmp9rvk6uzj                        0x00005626a33b3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_prime = true\n    var i = 2\n    while i < a {\n        if a %\
    \ i == 0 {\n            is_prime = false\n            break\n        }\n     \
    \   i += 1\n    }\n    return is_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmph21amxc7/tmph21amxc7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04b95dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04b92d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04b92d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04b92d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph21amxc7                        0x00005652f2659243 <unavailable> + 4675

    5    libc.so.6                          0x00002b04b97c6460 __libc_start_main +
    245

    6    tmph21amxc7                        0x00005652f2658ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var count = 0\n    for i in 2...a\
    \ {\n        if a % i == 0 {\n            count += 1\n        }\n    }\n    if\
    \ count == 3 {\n        is_multiply_prime = true\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpj2cpvnwh/tmpj2cpvnwh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10294a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1029198b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1029198988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10291977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2cpvnwh                        0x0000557df50343a7 <unavailable> + 5031

    5    libc.so.6                          0x00002b102968d460 __libc_start_main +
    245

    6    tmpj2cpvnwh                        0x0000557df5033fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    var\
    \ prime_numbers_count = 0\n    var prime_numbers_product = 1\n    for i in 2...a\
    \ {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n      \
    \      prime_numbers_count += 1\n            prime_numbers_product *= i\n    \
    \    }\n    }\n    if prime_numbers_count == 3 && prime_numbers_product == a {\n\
    \        is_multiply_prime = true\n    }\n    return is_multiply_prime\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpp421dv0i.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply = false\n    var prime_numbers = [Int]()\n    for i in\
    \ 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwtnag0or.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply = false\n    var counter = 0\n    for i in 2...a {\n\
    \        if a % i == 0 {\n            counter += 1\n        }\n    }\n    if counter\
    \ == 3 {\n        is_multiply = true\n    }\n    return is_multiply\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpzmclbzyo/tmpzmclbzyo.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ca3854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ca354bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ca354b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ca354a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzmclbzyo                        0x0000562b0e6143a7 <unavailable> + 5031

    5    libc.so.6                          0x00002b1ca3a40460 __libc_start_main +
    245

    6    tmpzmclbzyo                        0x0000562b0e613fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var prime_numbers = [Int]()\n    for i in 2...a\
    \ {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n      \
    \  }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpu9qcuqvp.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primes = [Int]()\n    for i in 2...a {\n\
    \        if is_prime(a: i) {\n            primes.append(i)\n        }\n    }\n\
    \    for i in 0..<primes.count {\n        for j in i..<primes.count {\n      \
    \      for k in j..<primes.count {\n                if a == primes[i] * primes[j]\
    \ * primes[k] {\n                    result = true\n                }\n      \
    \      }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphrz_3v3e.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979035
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_prime = true\n    var i = 2\n    while i < a {\n        if a %\
    \ i == 0 {\n            is_prime = false\n            break\n        }\n     \
    \   i += 1\n    }\n    return is_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmph21amxc7/tmph21amxc7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04b95dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04b92d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04b92d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04b92d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph21amxc7                        0x00005652f2659243 <unavailable> + 4675

    5    libc.so.6                          0x00002b04b97c6460 __libc_start_main +
    245

    6    tmph21amxc7                        0x00005652f2658ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_prime = true\n    var a = a\n    var i = 2\n    while i < a {\n\
    \        if a % i == 0 {\n            is_prime = false\n            a = a / i\n\
    \        } else {\n            i += 1\n        }\n    }\n    return is_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp2nmv74_w/tmp2nmv74_w.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb1c4c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb1c1bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb1c1ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb1c1b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2nmv74_w                        0x000055dd8b83d243 <unavailable> + 4675

    5    libc.so.6                          0x00002afb1c6af460 __libc_start_main +
    245

    6    tmp2nmv74_w                        0x000055dd8b83cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var a = a\n    var prime_numbers =\
    \ [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpc9i56_7i.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979035
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a < 6 {\n        return false\n    }\n    var isPrime = true\n   \
    \ var i = 2\n    while i < a {\n        if a % i == 0 {\n            isPrime =\
    \ false\n            break\n        }\n        i += 1\n    }\n    return isPrime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpfzj_zdzg/tmpfzj_zdzg.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5917cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5914c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5914c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5914c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfzj_zdzg                        0x000056552704d2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ad5919bb460 __libc_start_main +
    245

    6    tmpfzj_zdzg                        0x000056552704cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var prime_numbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            prime_numbers.append(i)\n        }\n    }\n    for i in 0..<prime_numbers.count\
    \ {\n        for j in i..<prime_numbers.count {\n            for k in j..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7gsvh8b3.swift:10:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply = false\n    var i = 2\n    var j = 2\n    var k = 2\n\
    \    while i < a {\n        while j < a {\n            while k < a {\n       \
    \         if i * j * k == a {\n                    is_multiply = true\n      \
    \          }\n                k += 1\n            }\n            j += 1\n    \
    \    }\n        i += 1\n    }\n    return is_multiply\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpo7tptkf_/tmpo7tptkf_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adebc054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adebbd4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adebbd4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adebbd4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7tptkf_                        0x00005569ef0ef227 <unavailable> + 4647

    5    libc.so.6                          0x00002adebc240460 __libc_start_main +
    245

    6    tmpo7tptkf_                        0x00005569ef0eee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isPrime = true\n    var i = 2\n    while i < a {\n        if a %\
    \ i == 0 {\n            isPrime = false\n        }\n        i += 1\n    }\n  \
    \  return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp7umu6wkb/tmp7umu6wkb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba67c36bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba67c062b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba67c062988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba67c0617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7umu6wkb                        0x0000564235fe0243 <unavailable> + 4675

    5    libc.so.6                          0x00002ba67c557460 __libc_start_main +
    245

    6    tmp7umu6wkb                        0x0000564235fdfef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isPrime = true\n    var counter = 2\n    var divider = 2\n    var\
    \ primeNumbers = [Int]()\n    while counter <= a {\n        while divider < counter\
    \ {\n            if counter % divider == 0 {\n                isPrime = false\n\
    \            }\n            divider += 1\n        }\n        if isPrime {\n  \
    \          primeNumbers.append(counter)\n        }\n        counter += 1\n   \
    \     divider = 2\n        isPrime = true\n    }\n    var result = 1\n    for\
    \ i in primeNumbers {\n        if result * i <= a {\n            result *= i\n\
    \        }\n    }\n    if result == a {\n        return true\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5)\
    \ == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpnkd3v6gz/tmpnkd3v6gz.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb5165ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb51351b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb51351988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb513507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnkd3v6gz                        0x0000558c44ffa58b <unavailable> + 5515

    5    libc.so.6                          0x00002acb51846460 __libc_start_main +
    245

    6    tmpnkd3v6gz                        0x0000558c44ffa159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    for\
    \ i in 1...a {\n        if is_prime(i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in 0..<prime_numbers.count\
    \ {\n            for k in 0..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp0mum_wmn.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979035
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var i = 2\n    var j = 2\n    var k = 2\n    var sum = 0\n    while i\
    \ < a {\n        while j < a {\n            while k < a {\n                sum\
    \ = i * j * k\n                if sum == a {\n                    return true\n\
    \                }\n                k += 1\n            }\n            j += 1\n\
    \        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp_u2sf6qh/tmp_u2sf6qh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30009a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3000697b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3000697988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30006967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_u2sf6qh                        0x000055920c3ca227 <unavailable> + 4647

    5    libc.so.6                          0x00002b3000b8c460 __libc_start_main +
    245

    6    tmp_u2sf6qh                        0x000055920c3c9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var count = 0\n    var i = 2\n    while i < a\
    \ {\n        if a % i == 0 {\n            count += 1\n            if count ==\
    \ 3 {\n                result = true\n                break\n            }\n \
    \       }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpi3a9ie26/tmpi3a9ie26.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbc75c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbc72beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbc72be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbc72bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi3a9ie26                        0x0000560d152ee32b <unavailable> + 4907

    5    libc.so.6                          0x00002abbc77b3460 __libc_start_main +
    245

    6    tmpi3a9ie26                        0x0000560d152edef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpkk39q76p/tmpkk39q76p.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b194c308c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b194bfffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b194bfff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b194bffe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkk39q76p                        0x000055ce68b2d227 <unavailable> + 4647

    5    libc.so.6                          0x00002b194c4f4460 __libc_start_main +
    245

    6    tmpkk39q76p                        0x000055ce68b2ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply = false\n    var prime_numbers = [Int]()\n    for i in\
    \ 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwtnag0or.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a < 6 {\n        return false\n    }\n    var i = 2\n    var j = 2\n\
    \    var k = 2\n    while i < a {\n        while j < a {\n            while k\
    \ < a {\n                if i * j * k == a {\n                    return true\n\
    \                }\n                k += 1\n            }\n            j += 1\n\
    \            k = 2\n        }\n        i += 1\n        j = 2\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5)\
    \ == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp9so465gm/tmp9so465gm.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b134cf4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b134cc41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b134cc41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b134cc407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9so465gm                        0x0000560facb1546f <unavailable> + 5231

    5    libc.so.6                          0x00002b134d136460 __libc_start_main +
    245

    6    tmp9so465gm                        0x0000560facb14e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    var result = false\n    for prime\
    \ in primes {\n        if a % prime == 0 {\n            result = true\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpba8o5xca/tmpba8o5xca.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d8d982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d8d679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d8d679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d8d6787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba8o5xca                        0x00005586280084b3 <unavailable> + 5299

    5    libc.so.6                          0x00002b8d8db6e460 __libc_start_main +
    245

    6    tmpba8o5xca                        0x0000558628008169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isPrime = true\n    var i = 2\n    while i < a {\n        if a %\
    \ i == 0 {\n            isPrime = false\n        }\n        i += 1\n    }\n  \
    \  return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp7umu6wkb/tmp7umu6wkb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba67c36bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba67c062b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba67c062988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba67c0617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7umu6wkb                        0x0000564235fe0243 <unavailable> + 4675

    5    libc.so.6                          0x00002ba67c557460 __libc_start_main +
    245

    6    tmp7umu6wkb                        0x0000564235fdfef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply = false\n    var prime_numbers = [Int]()\n    for i in\
    \ 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    var i = 0\n    while i < prime_numbers.count {\n      \
    \  var j = i + 1\n        while j < prime_numbers.count {\n            var k =\
    \ j + 1\n            while k < prime_numbers.count {\n                if a ==\
    \ prime_numbers[i] * prime_numbers[j] * prime_numbers[k] {\n                 \
    \   is_multiply = true\n                }\n                k += 1\n          \
    \  }\n            j += 1\n        }\n        i += 1\n    }\n    return is_multiply\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpdny0sqdl.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979035
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_prime = true\n    var i = 2\n    while i < a {\n        if a %\
    \ i == 0 {\n            is_prime = false\n            break\n        }\n     \
    \   i += 1\n    }\n    return is_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmph21amxc7/tmph21amxc7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04b95dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04b92d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04b92d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04b92d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph21amxc7                        0x00005652f2659243 <unavailable> + 4675

    5    libc.so.6                          0x00002b04b97c6460 __libc_start_main +
    245

    6    tmph21amxc7                        0x00005652f2658ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply = false\n    var i = 2\n    var j = 2\n    var k = 2\n\
    \    while i < a {\n        while j < a {\n            while k < a {\n       \
    \         if i * j * k == a {\n                    is_multiply = true\n      \
    \          }\n                k += 1\n            }\n            j += 1\n    \
    \    }\n        i += 1\n    }\n    return is_multiply\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpo7tptkf_/tmpo7tptkf_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adebc054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adebbd4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adebbd4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adebbd4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7tptkf_                        0x00005569ef0ef227 <unavailable> + 4647

    5    libc.so.6                          0x00002adebc240460 __libc_start_main +
    245

    6    tmpo7tptkf_                        0x00005569ef0eee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiply = false\n    var i = 2\n    var j = 2\n    var k = 2\n\
    \    while i <= a {\n        while j <= a {\n            while k <= a {\n    \
    \            if i * j * k == a {\n                    isMultiply = true\n    \
    \            }\n                k += 1\n            }\n            j += 1\n  \
    \      }\n        i += 1\n    }\n    return isMultiply\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpmlsyuclv/tmpmlsyuclv.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7060740c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7060437b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7060437988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70604367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmlsyuclv                        0x0000558028ec7227 <unavailable> + 4647

    5    libc.so.6                          0x00002b706092c460 __libc_start_main +
    245

    6    tmpmlsyuclv                        0x0000558028ec6e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    var\
    \ prime_numbers_count = 0\n    var prime_numbers_sum = 0\n    var prime_numbers_product\
    \ = 1\n    var i = 2\n    while i < a {\n        if is_prime(a: i) {\n       \
    \     prime_numbers.append(i)\n            prime_numbers_count += 1\n        \
    \    prime_numbers_sum += i\n            prime_numbers_product *= i\n        }\n\
    \        i += 1\n    }\n    if prime_numbers_count == 3 && prime_numbers_product\
    \ == a {\n        is_multiply_prime = true\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpucra8kku.swift:15:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply = false\n    var prime_numbers = [Int]()\n    for i in\
    \ 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwtnag0or.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    var\
    \ i = 2\n    while i < a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n        i += 1\n    }\n    for i in 0..<prime_numbers.count {\n  \
    \      for j in i+1..<prime_numbers.count {\n            for k in j+1..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    is_multiply_prime = true\n                }\n  \
    \          }\n        }\n    }\n    return is_multiply_prime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9jcd9tjn.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var prime_numbers = [Int]()\n    for i in 2...a\
    \ {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n      \
    \  }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpu9qcuqvp.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiply = false\n    var i = 2\n    var j = 2\n    var k = 2\n\
    \    while i < a {\n        while j < a {\n            while k < a {\n       \
    \         if i * j * k == a {\n                    isMultiply = true\n       \
    \         }\n                k += 1\n            }\n            j += 1\n     \
    \   }\n        i += 1\n    }\n    return isMultiply\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp9rvk6uzj/tmp9rvk6uzj.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d53463c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d5315ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d5315a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d531597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9rvk6uzj                        0x00005626a33b4227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1d5364f460 __libc_start_main +
    245

    6    tmp9rvk6uzj                        0x00005626a33b3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979035
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var is_prime = true\n    var prime_numbers\
    \ = [Int]()\n    var prime_numbers_count = 0\n    var prime_numbers_product =\
    \ 1\n    var i = 2\n    while i <= a {\n        is_prime = true\n        for j\
    \ in 2..<i {\n            if i % j == 0 {\n                is_prime = false\n\
    \                break\n            }\n        }\n        if is_prime {\n    \
    \        prime_numbers.append(i)\n            prime_numbers_count += 1\n     \
    \   }\n        i += 1\n    }\n    for i in 0..<prime_numbers_count {\n       \
    \ for j in i..<prime_numbers_count {\n            for k in j..<prime_numbers_count\
    \ {\n                prime_numbers_product = prime_numbers[i] * prime_numbers[j]\
    \ * prime_numbers[k]\n                if prime_numbers_product == a {\n      \
    \              is_multiply_prime = true\n                    break\n         \
    \       }\n            }\n        }\n    }\n    return is_multiply_prime\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979035
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isPrime = true\n    var i = 2\n    while i < a {\n        if a %\
    \ i == 0 {\n            isPrime = false\n        }\n        i += 1\n    }\n  \
    \  return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp7umu6wkb/tmp7umu6wkb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba67c36bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba67c062b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba67c062988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba67c0617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7umu6wkb                        0x0000564235fe0243 <unavailable> + 4675

    5    libc.so.6                          0x00002ba67c557460 __libc_start_main +
    245

    6    tmp7umu6wkb                        0x0000564235fdfef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply = false\n    var primes = [Int]()\n    for i in 2...a\
    \ {\n        if is_prime(a: i) {\n            primes.append(i)\n        }\n  \
    \  }\n    for i in 0..<primes.count {\n        for j in i..<primes.count {\n \
    \           for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    is_multiply = true\n               \
    \ }\n            }\n        }\n    }\n    return is_multiply\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1aalu65l.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979035
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply = false\n    var a = a\n    var i = 2\n    var counter\
    \ = 0\n    while a > 1 {\n        if a % i == 0 {\n            a /= i\n      \
    \      counter += 1\n        } else {\n            i += 1\n        }\n    }\n\
    \    if counter == 3 {\n        is_multiply = true\n    }\n    return is_multiply\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a == 0 {\n        return false\n    }\n    var num = a\n    var i\
    \ = 2\n    while i < num {\n        if num % i == 0 {\n            num /= i\n\
    \            if !is_prime(a: i) {\n                return false\n            }\n\
    \        } else {\n            i += 1\n        }\n    }\n    return is_prime(a:\
    \ num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5)\
    \ == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpj_aoc7ip.swift:16:17: error: cannot find 'is_prime' in scope\n\
    \            if !is_prime(a: i) {\n                ^~~~~~~~\n/tmp/tmpj_aoc7ip.swift:23:12:\
    \ error: cannot find 'is_prime' in scope\n    return is_prime(a: num)\n      \
    \     ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    for\
    \ i in 1...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzt6ahs1n.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var prime = [Int]()\n    for i in 2...a {\n \
    \       if is_prime(a: i) {\n            prime.append(i)\n        }\n    }\n \
    \   for i in 0..<prime.count {\n        for j in 0..<prime.count {\n         \
    \   for k in 0..<prime.count {\n                if a == prime[i] * prime[j] *\
    \ prime[k] {\n                    result = true\n                }\n         \
    \   }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpplkbtd96.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979035
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var i = 2\n    var j = 2\n    var k = 2\n   \
    \ while i < a {\n        while j < a {\n            while k < a {\n          \
    \      if i * j * k == a {\n                    result = true\n              \
    \  }\n                k += 1\n            }\n            j += 1\n        }\n \
    \       i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpnqurvuop/tmpnqurvuop.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c064ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c061d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c061d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c061d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnqurvuop                        0x000055e3488ae227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c066c9460 __libc_start_main +
    245

    6    tmpnqurvuop                        0x000055e3488ade69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var i = 2\n    var count = 0\n    while i < a {\n        if a % i ==\
    \ 0 {\n            count += 1\n        }\n        i += 1\n    }\n    return count\
    \ == 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5)\
    \ == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpg8m76hwm/tmpg8m76hwm.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a4b7cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a4b4c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a4b4c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a4b4c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8m76hwm                        0x000055e6768ed2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b2a4b9bb460 __libc_start_main +
    245

    6    tmpg8m76hwm                        0x000055e6768ecef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979034
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isPrime = true\n    var number = a\n    var i = 2\n    while i <\
    \ number {\n        if number % i == 0 {\n            number = number / i\n  \
    \          if is_prime(a: i) {\n                isPrime = true\n            }\
    \ else {\n                isPrime = false\n                break\n           \
    \ }\n        } else {\n            i += 1\n        }\n    }\n    if is_prime(a:\
    \ number) {\n        isPrime = true\n    } else {\n        isPrime = false\n \
    \   }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwb11ckgr.swift:14:16: error: cannot find 'is_prime' in scope\n\
    \            if is_prime(a: i) {\n               ^~~~~~~~\n/tmp/tmpwb11ckgr.swift:24:8:\
    \ error: cannot find 'is_prime' in scope\n    if is_prime(a: number) {\n     \
    \  ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979035
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primeNumbers = [Int]()\n    for i in 2...a\
    \ {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n       \
    \ }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count\
    \ {\n            for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp42ak3pgl.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979034
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var prime_numbers = [Int]()\n    var is_prime = true\n    for i in 2...a\
    \ {\n        for j in 2...i {\n            if i % j == 0 {\n                is_prime\
    \ = false\n            }\n        }\n        if is_prime {\n            prime_numbers.append(i)\n\
    \        }\n        is_prime = true\n    }\n    var counter = 0\n    for i in\
    \ 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count {\n    \
    \        for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    counter +=\
    \ 1\n                }\n            }\n        }\n    }\n    if counter > 0 {\n\
    \        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpehgz3sew/tmpehgz3sew.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af647a36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af64772db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af64772d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af64772c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpehgz3sew                        0x00005608cf7ae647 <unavailable> + 5703

    5    libc.so.6                          0x00002af647c22460 __libc_start_main +
    245

    6    tmpehgz3sew                        0x00005608cf7ae289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979035
