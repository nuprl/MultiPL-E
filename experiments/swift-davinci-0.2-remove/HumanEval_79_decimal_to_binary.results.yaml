language: swift
name: HumanEval_79_decimal_to_binary
results:
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    return String(decimal, radix: 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpy88wll6g/tmpy88wll6g.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae86156c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae85e4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae85e4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae85e4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy88wll6g                        0x000055659d81c382 <unavailable> + 4994

    5    libc.so.6                          0x00002aae86342460 __libc_start_main +
    245

    6    tmpy88wll6g                        0x000055659d81bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var temp = decimal\n    while temp > 0 {\n       \
    \ binary = String(temp % 2) + binary\n        temp /= 2\n    }\n    return \"\
    db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp4ithjv77/tmp4ithjv77.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdf4f1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdf4c15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdf4c15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdf4c147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ithjv77                        0x0000559d155d9492 <unavailable> + 5266

    5    libc.so.6                          0x00002afdf510a460 __libc_start_main +
    245

    6    tmp4ithjv77                        0x0000559d155d90f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var result = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       result = String(decimal % 2) + result\n        decimal /= 2\n    }\n \
    \   return \"db\" + result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpinuwd2h3/tmpinuwd2h3.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52b218ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52b1e81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52b1e81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52b1e807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpinuwd2h3                        0x0000555afea8a492 <unavailable> + 5266

    5    libc.so.6                          0x00002b52b2376460 __libc_start_main +
    245

    6    tmpinuwd2h3                        0x0000555afea8a0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var num = decimal\n    while num > 0 {\n        binary\
    \ = String(num % 2) + binary\n        num /= 2\n    }\n    return \"db\" + binary\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpywawsg5x/tmpywawsg5x.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba31700c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba313f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba313f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba313f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpywawsg5x                        0x0000561f1367e492 <unavailable> + 5266

    5    libc.so.6                          0x00002aba318ec460 __libc_start_main +
    245

    6    tmpywawsg5x                        0x0000561f1367e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var number = decimal\n    while number > 0 {\n   \
    \     binary = String(number % 2) + binary\n        number /= 2\n    }\n    return\
    \ \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_zzj0d1b/tmp_zzj0d1b.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55d3a72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55d3769b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55d3769988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55d37687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zzj0d1b                        0x000055e6683f0492 <unavailable> + 5266

    5    libc.so.6                          0x00002b55d3c5e460 __libc_start_main +
    245

    6    tmp_zzj0d1b                        0x000055e6683f00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"db\"\n    var decimal = decimal\n    while decimal > 0 {\n\
    \        binary += String(decimal % 2)\n        decimal /= 2\n    }\n    return\
    \ String(binary.reversed()) + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpqgeqhwp_/tmpqgeqhwp_.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a93bfdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a938f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a938f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a938f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqgeqhwp_                        0x000055fc5b4cb6c2 <unavailable> + 5826

    5    libc.so.6                          0x00002b2a93de9460 __libc_start_main +
    245

    6    tmpqgeqhwp_                        0x000055fc5b4cb329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var dec = decimal\n    while dec > 0 {\n        binary\
    \ = String(dec % 2) + binary\n        dec /= 2\n    }\n    return \"db\" + binary\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpzo5cb7e2/tmpzo5cb7e2.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3c6fdac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3c6cd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3c6cd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3c6cd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzo5cb7e2                        0x00005601c9ef3492 <unavailable> + 5266

    5    libc.so.6                          0x00002ba3c71c6460 __libc_start_main +
    245

    6    tmpzo5cb7e2                        0x00005601c9ef30f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = \"\\(decimal % 2)\" + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmph1cpouht/tmph1cpouht.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af746aa7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af74679eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af74679e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af74679d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph1cpouht                        0x000055e9fe5ee622 <unavailable> + 5666

    5    libc.so.6                          0x00002af746c93460 __libc_start_main +
    245

    6    tmph1cpouht                        0x000055e9fe5ee289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"db\"\n    var temp = decimal\n    while temp > 0 {\n     \
    \   binary.append(temp % 2 == 0 ? \"0\" : \"1\")\n        temp /= 2\n    }\n \
    \   return binary.reversed() + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpp0gd_j9n/tmpp0gd_j9n.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed6ed63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed6ea5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed6ea5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed6ea597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0gd_j9n                        0x000055fb6db425f2 <unavailable> + 5618

    5    libc.so.6                          0x00002aed6ef4f460 __libc_start_main +
    245

    6    tmpp0gd_j9n                        0x000055fb6db42259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var num = decimal\n    while num > 0 {\n        binary\
    \ += \"\\(num % 2)\"\n        num /= 2\n    }\n    return \"db\\(String(binary.reversed()))db\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmprmumktk0/tmprmumktk0.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23575b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23572a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23572a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23572a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprmumktk0                        0x0000560068b01952 <unavailable> + 6482

    5    libc.so.6                          0x00002b235779c460 __libc_start_main +
    245

    6    tmprmumktk0                        0x0000560068b015b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var num = decimal\n    while num > 0 {\n        binary\
    \ = String(num % 2) + binary\n        num /= 2\n    }\n    return \"db\" + binary\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpywawsg5x/tmpywawsg5x.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba31700c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba313f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba313f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba313f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpywawsg5x                        0x0000561f1367e492 <unavailable> + 5266

    5    libc.so.6                          0x00002aba318ec460 __libc_start_main +
    245

    6    tmpywawsg5x                        0x0000561f1367e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var number = decimal\n    while number > 0 {\n   \
    \     binary = String(number % 2) + binary\n        number /= 2\n    }\n    return\
    \ \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_zzj0d1b/tmp_zzj0d1b.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55d3a72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55d3769b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55d3769988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55d37687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zzj0d1b                        0x000055e6683f0492 <unavailable> + 5266

    5    libc.so.6                          0x00002b55d3c5e460 __libc_start_main +
    245

    6    tmp_zzj0d1b                        0x000055e6683f00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var num = decimal\n    while num > 0 {\n        binary\
    \ = String(num % 2) + binary\n        num /= 2\n    }\n    return \"db\" + binary\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpywawsg5x/tmpywawsg5x.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba31700c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba313f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba313f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba313f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpywawsg5x                        0x0000561f1367e492 <unavailable> + 5266

    5    libc.so.6                          0x00002aba318ec460 __libc_start_main +
    245

    6    tmpywawsg5x                        0x0000561f1367e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var dec = decimal\n    while dec > 0 {\n        binary\
    \ = String(dec % 2) + binary\n        dec /= 2\n    }\n    return \"db\" + binary\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpzo5cb7e2/tmpzo5cb7e2.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3c6fdac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3c6cd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3c6cd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3c6cd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzo5cb7e2                        0x00005601c9ef3492 <unavailable> + 5266

    5    libc.so.6                          0x00002ba3c71c6460 __libc_start_main +
    245

    6    tmpzo5cb7e2                        0x00005601c9ef30f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var number = decimal\n    while number > 0 {\n   \
    \     binary = String(number % 2) + binary\n        number /= 2\n    }\n    return\
    \ \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_zzj0d1b/tmp_zzj0d1b.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55d3a72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55d3769b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55d3769988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55d37687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zzj0d1b                        0x000055e6683f0492 <unavailable> + 5266

    5    libc.so.6                          0x00002b55d3c5e460 __libc_start_main +
    245

    6    tmp_zzj0d1b                        0x000055e6683f00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var result = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       result = String(decimal % 2) + result\n        decimal /= 2\n    }\n \
    \   return \"db\" + result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpinuwd2h3/tmpinuwd2h3.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52b218ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52b1e81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52b1e81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52b1e807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpinuwd2h3                        0x0000555afea8a492 <unavailable> + 5266

    5    libc.so.6                          0x00002b52b2376460 __libc_start_main +
    245

    6    tmpinuwd2h3                        0x0000555afea8a0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var number = decimal\n    while number > 0 {\n   \
    \     binary = String(number % 2) + binary\n        number /= 2\n    }\n    return\
    \ \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_zzj0d1b/tmp_zzj0d1b.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55d3a72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55d3769b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55d3769988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55d37687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zzj0d1b                        0x000055e6683f0492 <unavailable> + 5266

    5    libc.so.6                          0x00002b55d3c5e460 __libc_start_main +
    245

    6    tmp_zzj0d1b                        0x000055e6683f00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var result = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       result = \"\\(decimal % 2)\" + result\n        decimal /= 2\n    }\n \
    \   return \"db\" + result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp212321kn/tmp212321kn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29ff57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29fc4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29fc4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29fc4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp212321kn                        0x0000555b3ac57622 <unavailable> + 5666

    5    libc.so.6                          0x00002af2a0143460 __libc_start_main +
    245

    6    tmp212321kn                        0x0000555b3ac57289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var result = \"db\"\n    var number = decimal\n    while number > 0 {\n \
    \       result.append(String(number % 2))\n        number /= 2\n    }\n    result.append(\"\
    db\")\n    return String(result.reversed())\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjbotirh0/tmpjbotirh0.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3c8e81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3c8b78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3c8b78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3c8b777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjbotirh0                        0x0000561544d06672 <unavailable> + 5746

    5    libc.so.6                          0x00002af3c906d460 __libc_start_main +
    245

    6    tmpjbotirh0                        0x0000561544d062d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var result = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       result = String(decimal % 2) + result\n        decimal /= 2\n    }\n \
    \   return \"db\" + result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpinuwd2h3/tmpinuwd2h3.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52b218ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52b1e81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52b1e81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52b1e807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpinuwd2h3                        0x0000555afea8a492 <unavailable> + 5266

    5    libc.so.6                          0x00002b52b2376460 __libc_start_main +
    245

    6    tmpinuwd2h3                        0x0000555afea8a0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var result = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       result = String(decimal % 2) + result\n        decimal /= 2\n    }\n \
    \   return \"db\" + result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpinuwd2h3/tmpinuwd2h3.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52b218ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52b1e81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52b1e81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52b1e807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpinuwd2h3                        0x0000555afea8a492 <unavailable> + 5266

    5    libc.so.6                          0x00002b52b2376460 __libc_start_main +
    245

    6    tmpinuwd2h3                        0x0000555afea8a0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var dec = decimal\n    while dec > 0 {\n        binary\
    \ = String(dec % 2) + binary\n        dec /= 2\n    }\n    return \"db\" + binary\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpzo5cb7e2/tmpzo5cb7e2.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3c6fdac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3c6cd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3c6cd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3c6cd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzo5cb7e2                        0x00005601c9ef3492 <unavailable> + 5266

    5    libc.so.6                          0x00002ba3c71c6460 __libc_start_main +
    245

    6    tmpzo5cb7e2                        0x00005601c9ef30f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var result = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       result = String(decimal % 2) + result\n        decimal /= 2\n    }\n \
    \   return \"db\" + result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpinuwd2h3/tmpinuwd2h3.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52b218ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52b1e81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52b1e81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52b1e807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpinuwd2h3                        0x0000555afea8a492 <unavailable> + 5266

    5    libc.so.6                          0x00002b52b2376460 __libc_start_main +
    245

    6    tmpinuwd2h3                        0x0000555afea8a0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var number = decimal\n    while number > 0 {\n   \
    \     binary = String(number % 2) + binary\n        number /= 2\n    }\n    return\
    \ \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_zzj0d1b/tmp_zzj0d1b.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55d3a72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55d3769b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55d3769988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55d37687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zzj0d1b                        0x000055e6683f0492 <unavailable> + 5266

    5    libc.so.6                          0x00002b55d3c5e460 __libc_start_main +
    245

    6    tmp_zzj0d1b                        0x000055e6683f00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var number = decimal\n    while number > 0 {\n   \
    \     binary = String(number % 2) + binary\n        number /= 2\n    }\n    return\
    \ \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_zzj0d1b/tmp_zzj0d1b.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55d3a72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55d3769b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55d3769988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55d37687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zzj0d1b                        0x000055e6683f0492 <unavailable> + 5266

    5    libc.so.6                          0x00002b55d3c5e460 __libc_start_main +
    245

    6    tmp_zzj0d1b                        0x000055e6683f00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    return String(decimal, radix: 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpy88wll6g/tmpy88wll6g.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae86156c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae85e4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae85e4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae85e4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy88wll6g                        0x000055659d81c382 <unavailable> + 4994

    5    libc.so.6                          0x00002aae86342460 __libc_start_main +
    245

    6    tmpy88wll6g                        0x000055659d81bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var dec = decimal\n    while dec > 0 {\n        binary\
    \ = String(dec % 2) + binary\n        dec /= 2\n    }\n    return \"db\" + binary\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpzo5cb7e2/tmpzo5cb7e2.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3c6fdac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3c6cd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3c6cd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3c6cd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzo5cb7e2                        0x00005601c9ef3492 <unavailable> + 5266

    5    libc.so.6                          0x00002ba3c71c6460 __libc_start_main +
    245

    6    tmpzo5cb7e2                        0x00005601c9ef30f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"db\"\n    var decimal = decimal\n    while decimal > 0 {\n\
    \        binary.append(String(decimal % 2))\n        decimal /= 2\n    }\n   \
    \ return binary.reversed() + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmps_aggwcg/tmps_aggwcg.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca9b1f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca9aeeeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca9aeee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca9aeed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps_aggwcg                        0x000055c408f176b2 <unavailable> + 5810

    5    libc.so.6                          0x00002aca9b3e3460 __libc_start_main +
    245

    6    tmps_aggwcg                        0x000055c408f17319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = \"\\(decimal % 2)\" + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmph1cpouht/tmph1cpouht.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af746aa7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af74679eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af74679e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af74679d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph1cpouht                        0x000055e9fe5ee622 <unavailable> + 5666

    5    libc.so.6                          0x00002af746c93460 __libc_start_main +
    245

    6    tmph1cpouht                        0x000055e9fe5ee289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var dec = decimal\n    while dec > 0 {\n        binary\
    \ = \"\\(dec % 2)\" + binary\n        dec /= 2\n    }\n    return \"db\" + binary\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpbjlv0xc1/tmpbjlv0xc1.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b26d92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b26a89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b26a89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b26a887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbjlv0xc1                        0x000055f26104e622 <unavailable> + 5666

    5    libc.so.6                          0x00002b4b26f7e460 __libc_start_main +
    245

    6    tmpbjlv0xc1                        0x000055f26104e289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var result = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       result = String(decimal % 2) + result\n        decimal /= 2\n    }\n \
    \   return \"db\" + result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpinuwd2h3/tmpinuwd2h3.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52b218ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52b1e81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52b1e81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52b1e807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpinuwd2h3                        0x0000555afea8a492 <unavailable> + 5266

    5    libc.so.6                          0x00002b52b2376460 __libc_start_main +
    245

    6    tmpinuwd2h3                        0x0000555afea8a0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var result = \"db\"\n    var decimal = decimal\n    while decimal > 0 {\n\
    \        result.append(String(decimal % 2))\n        decimal /= 2\n    }\n   \
    \ result.append(\"db\")\n    return String(result.reversed())\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpw70xe_an/tmpw70xe_an.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc8d5cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc8d2c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc8d2c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc8d2c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw70xe_an                        0x000055bfdc4ac672 <unavailable> + 5746

    5    libc.so.6                          0x00002afc8d7b9460 __libc_start_main +
    245

    6    tmpw70xe_an                        0x000055bfdc4ac2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var result = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       result = String(decimal % 2) + result\n        decimal /= 2\n    }\n \
    \   return \"db\" + result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpinuwd2h3/tmpinuwd2h3.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52b218ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52b1e81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52b1e81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52b1e807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpinuwd2h3                        0x0000555afea8a492 <unavailable> + 5266

    5    libc.so.6                          0x00002b52b2376460 __libc_start_main +
    245

    6    tmpinuwd2h3                        0x0000555afea8a0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var dec = decimal\n    while dec > 0 {\n        binary\
    \ = String(dec % 2) + binary\n        dec /= 2\n    }\n    return \"db\" + binary\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpzo5cb7e2/tmpzo5cb7e2.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3c6fdac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3c6cd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3c6cd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3c6cd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzo5cb7e2                        0x00005601c9ef3492 <unavailable> + 5266

    5    libc.so.6                          0x00002ba3c71c6460 __libc_start_main +
    245

    6    tmpzo5cb7e2                        0x00005601c9ef30f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var number = decimal\n    while number > 0 {\n   \
    \     binary = String(number % 2) + binary\n        number /= 2\n    }\n    return\
    \ \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_zzj0d1b/tmp_zzj0d1b.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55d3a72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55d3769b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55d3769988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55d37687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zzj0d1b                        0x000055e6683f0492 <unavailable> + 5266

    5    libc.so.6                          0x00002b55d3c5e460 __libc_start_main +
    245

    6    tmp_zzj0d1b                        0x000055e6683f00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var dec = decimal\n    while dec > 0 {\n        binary\
    \ = String(dec % 2) + binary\n        dec /= 2\n    }\n    return \"db\" + binary\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpzo5cb7e2/tmpzo5cb7e2.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3c6fdac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3c6cd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3c6cd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3c6cd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzo5cb7e2                        0x00005601c9ef3492 <unavailable> + 5266

    5    libc.so.6                          0x00002ba3c71c6460 __libc_start_main +
    245

    6    tmpzo5cb7e2                        0x00005601c9ef30f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var num = decimal\n    while num > 0 {\n        binary\
    \ = String(num % 2) + binary\n        num /= 2\n    }\n    return \"db\" + binary\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpywawsg5x/tmpywawsg5x.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba31700c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba313f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba313f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba313f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpywawsg5x                        0x0000561f1367e492 <unavailable> + 5266

    5    libc.so.6                          0x00002aba318ec460 __libc_start_main +
    245

    6    tmpywawsg5x                        0x0000561f1367e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var num = decimal\n    while num > 0 {\n        binary\
    \ = String(num % 2) + binary\n        num /= 2\n    }\n    return \"db\" + binary\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpywawsg5x/tmpywawsg5x.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba31700c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba313f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba313f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba313f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpywawsg5x                        0x0000561f1367e492 <unavailable> + 5266

    5    libc.so.6                          0x00002aba318ec460 __libc_start_main +
    245

    6    tmpywawsg5x                        0x0000561f1367e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var number = decimal\n    while number > 0 {\n   \
    \     binary = String(number % 2) + binary\n        number /= 2\n    }\n    return\
    \ \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_zzj0d1b/tmp_zzj0d1b.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55d3a72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55d3769b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55d3769988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55d37687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zzj0d1b                        0x000055e6683f0492 <unavailable> + 5266

    5    libc.so.6                          0x00002b55d3c5e460 __libc_start_main +
    245

    6    tmp_zzj0d1b                        0x000055e6683f00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var number = decimal\n    while number > 0 {\n   \
    \     binary = String(number % 2) + binary\n        number /= 2\n    }\n    return\
    \ \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_zzj0d1b/tmp_zzj0d1b.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55d3a72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55d3769b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55d3769988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55d37687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zzj0d1b                        0x000055e6683f0492 <unavailable> + 5266

    5    libc.so.6                          0x00002b55d3c5e460 __libc_start_main +
    245

    6    tmp_zzj0d1b                        0x000055e6683f00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var num = decimal\n    while num > 0 {\n        binary\
    \ = String(num % 2) + binary\n        num /= 2\n    }\n    return \"db\" + binary\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpywawsg5x/tmpywawsg5x.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba31700c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba313f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba313f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba313f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpywawsg5x                        0x0000561f1367e492 <unavailable> + 5266

    5    libc.so.6                          0x00002aba318ec460 __libc_start_main +
    245

    6    tmpywawsg5x                        0x0000561f1367e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var result = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       result = \"\\(decimal % 2)\" + result\n        decimal /= 2\n    }\n \
    \   return \"db\" + result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp212321kn/tmp212321kn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29ff57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29fc4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29fc4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29fc4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp212321kn                        0x0000555b3ac57622 <unavailable> + 5666

    5    libc.so.6                          0x00002af2a0143460 __libc_start_main +
    245

    6    tmp212321kn                        0x0000555b3ac57289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var num = decimal\n    while num > 0 {\n        binary\
    \ = String(num % 2) + binary\n        num /= 2\n    }\n    return \"db\" + binary\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpywawsg5x/tmpywawsg5x.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba31700c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba313f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba313f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba313f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpywawsg5x                        0x0000561f1367e492 <unavailable> + 5266

    5    libc.so.6                          0x00002aba318ec460 __libc_start_main +
    245

    6    tmpywawsg5x                        0x0000561f1367e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var number = decimal\n    while number > 0 {\n   \
    \     binary = String(number % 2) + binary\n        number /= 2\n    }\n    return\
    \ \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_zzj0d1b/tmp_zzj0d1b.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55d3a72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55d3769b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55d3769988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55d37687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zzj0d1b                        0x000055e6683f0492 <unavailable> + 5266

    5    libc.so.6                          0x00002b55d3c5e460 __libc_start_main +
    245

    6    tmp_zzj0d1b                        0x000055e6683f00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var result = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       result = String(decimal % 2) + result\n        decimal /= 2\n    }\n \
    \   return \"db\" + result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpinuwd2h3/tmpinuwd2h3.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52b218ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52b1e81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52b1e81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52b1e807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpinuwd2h3                        0x0000555afea8a492 <unavailable> + 5266

    5    libc.so.6                          0x00002b52b2376460 __libc_start_main +
    245

    6    tmpinuwd2h3                        0x0000555afea8a0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var number = decimal\n    while number > 0 {\n   \
    \     binary = String(number % 2) + binary\n        number /= 2\n    }\n    return\
    \ \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_zzj0d1b/tmp_zzj0d1b.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55d3a72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55d3769b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55d3769988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55d37687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zzj0d1b                        0x000055e6683f0492 <unavailable> + 5266

    5    libc.so.6                          0x00002b55d3c5e460 __libc_start_main +
    245

    6    tmp_zzj0d1b                        0x000055e6683f00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var num = decimal\n    while num > 0 {\n        binary\
    \ = String(num % 2) + binary\n        num /= 2\n    }\n    return \"db\" + binary\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpywawsg5x/tmpywawsg5x.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba31700c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba313f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba313f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba313f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpywawsg5x                        0x0000561f1367e492 <unavailable> + 5266

    5    libc.so.6                          0x00002aba318ec460 __libc_start_main +
    245

    6    tmpywawsg5x                        0x0000561f1367e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var dec = decimal\n    while dec > 0 {\n        binary\
    \ = String(dec % 2) + binary\n        dec /= 2\n    }\n    return \"db\" + binary\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpzo5cb7e2/tmpzo5cb7e2.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3c6fdac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3c6cd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3c6cd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3c6cd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzo5cb7e2                        0x00005601c9ef3492 <unavailable> + 5266

    5    libc.so.6                          0x00002ba3c71c6460 __libc_start_main +
    245

    6    tmpzo5cb7e2                        0x00005601c9ef30f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var result = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       result = String(decimal % 2) + result\n        decimal /= 2\n    }\n \
    \   return \"db\" + result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpinuwd2h3/tmpinuwd2h3.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52b218ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52b1e81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52b1e81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52b1e807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpinuwd2h3                        0x0000555afea8a492 <unavailable> + 5266

    5    libc.so.6                          0x00002b52b2376460 __libc_start_main +
    245

    6    tmpinuwd2h3                        0x0000555afea8a0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    let binary = String(decimal, radix: 2)\n    return \"db\\(binary)db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    return \"db\\(String(decimal, radix: 2))db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    return String(decimal, radix: 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpy88wll6g/tmpy88wll6g.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae86156c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae85e4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae85e4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae85e4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy88wll6g                        0x000055659d81c382 <unavailable> + 4994

    5    libc.so.6                          0x00002aae86342460 __libc_start_main +
    245

    6    tmpy88wll6g                        0x000055659d81bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var decimal = decimal\n    while decimal > 0 {\n \
    \       binary = String(decimal % 2) + binary\n        decimal /= 2\n    }\n \
    \   return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpuc36fzqy/tmpuc36fzqy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53bc6f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53bc3ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53bc3eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53bc3ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc36fzqy                        0x000055bb2ca04492 <unavailable> + 5266

    5    libc.so.6                          0x00002b53bc8e0460 __libc_start_main +
    245

    6    tmpuc36fzqy                        0x000055bb2ca040f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary = \"\"\n    var number = decimal\n    while number > 0 {\n   \
    \     binary = String(number % 2) + binary\n        number /= 2\n    }\n    return\
    \ \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_zzj0d1b/tmp_zzj0d1b.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55d3a72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55d3769b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55d3769988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55d37687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zzj0d1b                        0x000055e6683f0492 <unavailable> + 5266

    5    libc.so.6                          0x00002b55d3c5e460 __libc_start_main +
    245

    6    tmp_zzj0d1b                        0x000055e6683f00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013768
