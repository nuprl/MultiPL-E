language: swift
name: HumanEval_63_fibfib
results:
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 1\n    if n == 0 {\n        return a\n    }\n    if\
    \ n == 1 {\n        return b\n    }\n    if n == 2 {\n        return c\n    }\n\
    \    if n == 3 {\n        return d\n    }\n    for _ in 4...n {\n        let e\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n        d = e\n  \
    \  }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmpk7ejurpt/tmpk7ejurpt.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6428534c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b642822bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b642822b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b642822a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk7ejurpt                        0x000055e00b16542e <unavailable> + 5166

    5    libc.so.6                          0x00002b6428720460 __libc_start_main +
    245

    6    tmpk7ejurpt                        0x000055e00b164fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpk4887npm.swift:14:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpk4887npm.swift:14:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpk4887npm.swift:14:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var last = 0\n    var current\
    \ = 0\n    var next = 1\n    for _ in 0..<n {\n        last = current\n      \
    \  current = next\n        next = last + current + next\n    }\n    return current\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp4ayh60hd/tmp4ayh60hd.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18cd130c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18cce27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18cce27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18cce267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ayh60hd                        0x000055e4b8787338 <unavailable> + 4920

    5    libc.so.6                          0x00002b18cd31c460 __libc_start_main +
    245

    6    tmp4ayh60hd                        0x000055e4b8786fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n:\
    \ n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ae6f73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ae6c6a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0ae6c6a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0ae6c6a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0ae6c69bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp0_mgz6d5                        0x000055584f5e1769 <unavailable> + 5993

    6    tmp0_mgz6d5                        0x000055584f5e12cb <unavailable> + 4811

    7    libc.so.6                          0x00002b0ae715f460 __libc_start_main +
    245

    8    tmp0_mgz6d5                        0x000055584f5e0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpdy47m7yy/tmpdy47m7yy.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba995cf5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9959ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9959ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9959eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdy47m7yy                        0x000056471b9ae1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002ba995ee1460 __libc_start_main +
    245

    6    tmpdy47m7yy                        0x000056471b9ade69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    }\n    \n    var fibfib = [0,\
    \ 0, 1]\n    for i in 3...n {\n        fibfib.append(fibfib[i-1] + fibfib[i-2]\
    \ + fibfib[i-3])\n    }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 1...n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpfsacxd5d/tmpfsacxd5d.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24b904ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24b8d41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24b8d41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24b8d407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfsacxd5d                        0x0000559a09e8f338 <unavailable> + 4920

    5    libc.so.6                          0x00002b24b9236460 __libc_start_main +
    245

    6    tmpfsacxd5d                        0x0000559a09e8efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpk4887npm.swift:14:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpk4887npm.swift:14:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpk4887npm.swift:14:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 1\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    guard n > 2 else { return\
    \ n - 1 }\n    var a = 0\n    var b = 0\n    var c = 1\n    for _ in 3...n {\n\
    \        let d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    }\n    \n    var n1 = 0\n \
    \   var n2 = 0\n    var n3 = 1\n    var result = 0\n    \n    for _ in 3...n {\n\
    \        result = n1 + n2 + n3\n        n1 = n2\n        n2 = n3\n        n3 =\
    \ result\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    }\n    \n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    \n    for _ in 3...n {\n     \
    \   d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    \n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 1\n    if n == 0 {\n        return a\n    }\n    if\
    \ n == 1 {\n        return b\n    }\n    if n == 2 {\n        return c\n    }\n\
    \    for _ in 3...n {\n        let e = a + b + c\n        a = b\n        b = c\n\
    \        c = d\n        d = e\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp8vio1kld/tmp8vio1kld.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6be1e59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6be1b50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6be1b50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6be1b4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8vio1kld                        0x000055dadd68242e <unavailable> + 5166

    5    libc.so.6                          0x00002b6be2045460 __libc_start_main +
    245

    6    tmp8vio1kld                        0x000055dadd681fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return fibfib(n:\
    \ n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    }\n    \n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    \n    for _ in 3...n {\n     \
    \   d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    \n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    }\n    \n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    \n    for _ in 3...n {\n     \
    \   d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    \n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    for _ in 0..<n {\n        (a, b, c) = (b, c, a + b + c)\n\
    \    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    for _ in 0..<n {\n        (a, b, c) = (b, c, a + b + c)\n\
    \    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n < 2 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 1\n    }\n    var a = 0\n    var b = 0\n    var c = 1\n    var d = 0\n\
    \    for _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n \
    \       c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpdy47m7yy/tmpdy47m7yy.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba995cf5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9959ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9959ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9959eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdy47m7yy                        0x000056471b9ae1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002ba995ee1460 __libc_start_main +
    245

    6    tmpdy47m7yy                        0x000056471b9ade69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpk4887npm.swift:14:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpk4887npm.swift:14:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpk4887npm.swift:14:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpk4887npm.swift:14:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpk4887npm.swift:14:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpk4887npm.swift:14:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n:\
    \ n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpk4887npm.swift:14:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpk4887npm.swift:14:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpk4887npm.swift:14:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpk4887npm.swift:14:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpk4887npm.swift:14:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpk4887npm.swift:14:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    guard n > 2 else { return\
    \ n - 1 }\n    var a = 0\n    var b = 0\n    var c = 1\n    var d = 1\n    for\
    \ _ in 3...n {\n        (a, b, c) = (b, c, c + b + a)\n    }\n    return c\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    }\n    \n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 1\n    \n    for _ in 3...n {\n     \
    \   d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    \n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    }\n    \n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    \n    for _ in 3...n {\n     \
    \   d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    \n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    }\n    \n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    \n    for _ in 3...n {\n     \
    \   d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    \n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    for _ in 0..<n {\n        (a, b, c) = (b, c, a + b + c)\n\
    \    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    }\n    \n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    \n    for _ in 3...n {\n     \
    \   d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    \n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    guard n > 2 else { return\
    \ n - 1 }\n    var a = 0\n    var b = 0\n    var c = 1\n    for _ in 3...n {\n\
    \        (a, b, c) = (b, c, a + b + c)\n    }\n    return c\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    guard n > 2 else { return\
    \ n - 1 }\n    var a = 0\n    var b = 0\n    var c = 1\n    for _ in 3...n {\n\
    \        let d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    }\n    \n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    \n    for _ in 3...n {\n     \
    \   d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    \n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpdy47m7yy/tmpdy47m7yy.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba995cf5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9959ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9959ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9959eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdy47m7yy                        0x000056471b9ae1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002ba995ee1460 __libc_start_main +
    245

    6    tmpdy47m7yy                        0x000056471b9ade69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpk4887npm.swift:14:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpk4887npm.swift:14:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpk4887npm.swift:14:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpk4887npm.swift:14:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpk4887npm.swift:14:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpk4887npm.swift:14:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    }\n    var n1 = 0\n    var n2 = 0\n    var n3 = 1\n    var result\
    \ = 0\n    for _ in 3...n {\n        result = n1 + n2 + n3\n        n1 = n2\n\
    \        n2 = n3\n        n3 = result\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    }\n    \n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    \n    for _ in 3...n {\n     \
    \   d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    \n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [0, 0, 1]\n\
    \    if n <= 2 {\n        return fibfib[n]\n    }\n    for i in 3...n {\n    \
    \    fibfib.append(fibfib[i-1] + fibfib[i-2] + fibfib[i-3])\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n:\
    \ n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpk4887npm.swift:14:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpk4887npm.swift:14:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpk4887npm.swift:14:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    }\n    var a = 0\n    var b = 0\n    var c = 1\n    var d = 0\n\
    \    for _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n \
    \       c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpk4887npm.swift:14:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpk4887npm.swift:14:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpk4887npm.swift:14:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqdotu1p6/tmpqdotu1p6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdotu1p6                        0x00005636e7f1e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b00b3929460 __libc_start_main +
    245

    6    tmpqdotu1p6                        0x00005636e7f1dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbvbbwek.swift:16:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpwbvbbwek.swift:16:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpwbvbbwek.swift:16:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009715
