language: swift
name: HumanEval_126_is_sorted
results:
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = lst.sorted()\n    for i\
    \ in 0..<lst.count {\n        if lst[i] != sorted[i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpnnb2jkyj/tmpnnb2jkyj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab782fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab77ff2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab77ff2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab77ff17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnnb2jkyj                        0x000055d2eb623d9b <unavailable> + 7579

    5    libc.so.6                          0x00002aab784e7460 __libc_start_main +
    245

    6    tmpnnb2jkyj                        0x000055d2eb623249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < lst[i-1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af6e1cc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6e19bd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af6e19bd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af6e19bd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af6e19bcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpd65zbrbi                        0x000056522c8b80de <unavailable> + 8414

    6    tmpd65zbrbi                        0x000056522c8b79d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af6e1eb2460 __libc_start_main +
    245

    8    tmpd65zbrbi                        0x000056522c8b71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for num in lst {\n        if num < prev {\n            sorted = false\n \
    \       }\n        prev = num\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b293048ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2930185561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2930185286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b293018513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2930184bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b292ff84e83 <unavailable> + 188035

    6    tmpqf_w5uek                        0x00005644501d2fd6 <unavailable> + 8150

    7    tmpqf_w5uek                        0x00005644501d2954 <unavailable> + 6484

    8    libc.so.6                          0x00002b293067a460 __libc_start_main +
    245

    9    tmpqf_w5uek                        0x00005644501d2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    for i in 0..<lst.count - 1 {\n     \
    \   if lst[i] > lst[i + 1] {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aeff1092c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeff0d89561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aeff0d89286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aeff0d8913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aeff0d88bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv_ofz5lt                        0x000055a4c044b0da <unavailable> + 8410

    6    tmpv_ofz5lt                        0x000055a4c044a9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002aeff127e460 __libc_start_main +
    245

    8    tmpv_ofz5lt                        0x000055a4c044a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    for i in 0..<lst.count - 1 {\n     \
    \   if lst[i] > lst[i + 1] {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aeff1092c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeff0d89561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aeff0d89286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aeff0d8913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aeff0d88bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv_ofz5lt                        0x000055a4c044b0da <unavailable> + 8410

    6    tmpv_ofz5lt                        0x000055a4c044a9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002aeff127e460 __libc_start_main +
    245

    8    tmpv_ofz5lt                        0x000055a4c044a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    for i in 0..<lst.count - 1 {\n     \
    \   if lst[i] > lst[i + 1] {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aeff1092c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeff0d89561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aeff0d89286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aeff0d8913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aeff0d88bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv_ofz5lt                        0x000055a4c044b0da <unavailable> + 8410

    6    tmpv_ofz5lt                        0x000055a4c044a9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002aeff127e460 __libc_start_main +
    245

    8    tmpv_ofz5lt                        0x000055a4c044a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    if lst.count == 0 {\n        return\
    \ true\n    }\n    var last = lst[0]\n    for num in lst {\n        if num < last\
    \ {\n            return false\n        }\n        last = num\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp0wxyoc7i/tmp0wxyoc7i.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b643b9bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b643b6b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b643b6b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b643b6b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wxyoc7i                        0x000055c898b20cdb <unavailable> + 7387

    5    libc.so.6                          0x00002b643bba9460 __libc_start_main +
    245

    6    tmp0wxyoc7i                        0x000055c898b20189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = lst.sorted()\n    return\
    \ sorted == lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpxrjydtf5/tmpxrjydtf5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2330eefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2330be6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2330be6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2330be57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxrjydtf5                        0x000055d7ae5adbcb <unavailable> + 7115

    5    libc.so.6                          0x00002b23310db460 __libc_start_main +
    245

    6    tmpxrjydtf5                        0x000055d7ae5ad079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if prev > lst[i] {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab90ad32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab90aa29561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab90aa29286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab90aa2913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab90aa28bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab90a828e83 <unavailable> + 188035

    6    tmpkpu8fwkt                        0x000055f5c652c056 <unavailable> + 8278

    7    tmpkpu8fwkt                        0x000055f5c652b9d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ab90af1e460 __libc_start_main +
    245

    9    tmpkpu8fwkt                        0x000055f5c652b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    for i in 0..<lst.count - 1 {\n     \
    \   if lst[i] > lst[i + 1] {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aeff1092c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeff0d89561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aeff0d89286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aeff0d8913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aeff0d88bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv_ofz5lt                        0x000055a4c044b0da <unavailable> + 8410

    6    tmpv_ofz5lt                        0x000055a4c044a9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002aeff127e460 __libc_start_main +
    245

    8    tmpv_ofz5lt                        0x000055a4c044a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = lst.sorted()\n    return\
    \ sorted == lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpxrjydtf5/tmpxrjydtf5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2330eefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2330be6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2330be6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2330be57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxrjydtf5                        0x000055d7ae5adbcb <unavailable> + 7115

    5    libc.so.6                          0x00002b23310db460 __libc_start_main +
    245

    6    tmpxrjydtf5                        0x000055d7ae5ad079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var last = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < last {\n            sorted\
    \ = false\n        }\n        last = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7577ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7574f6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba7574f6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba7574f613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba7574f5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba7572f5e83 <unavailable> + 188035

    6    tmpmmrqtwur                        0x000056213c55d056 <unavailable> + 8278

    7    tmpmmrqtwur                        0x000056213c55c9d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ba7579eb460 __libc_start_main +
    245

    9    tmpmmrqtwur                        0x000056213c55c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for num in lst {\n        if num < prev {\n            sorted = false\n \
    \       }\n        prev = num\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b293048ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2930185561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2930185286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b293018513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2930184bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b292ff84e83 <unavailable> + 188035

    6    tmpqf_w5uek                        0x00005644501d2fd6 <unavailable> + 8150

    7    tmpqf_w5uek                        0x00005644501d2954 <unavailable> + 6484

    8    libc.so.6                          0x00002b293067a460 __libc_start_main +
    245

    9    tmpqf_w5uek                        0x00005644501d2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var last = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < last {\n            sorted\
    \ = false\n        }\n        last = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7577ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7574f6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba7574f6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba7574f613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba7574f5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba7572f5e83 <unavailable> + 188035

    6    tmpmmrqtwur                        0x000056213c55d056 <unavailable> + 8278

    7    tmpmmrqtwur                        0x000056213c55c9d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ba7579eb460 __libc_start_main +
    245

    9    tmpmmrqtwur                        0x000056213c55c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    if lst.count == 0 {\n        return\
    \ true\n    }\n    var prev = lst[0]\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < prev {\n            return false\n        }\n        prev = lst[i]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmphna3roau/tmphna3roau.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad18e3f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad18e0eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad18e0ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad18e0ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphna3roau                        0x000055d10efd9cfb <unavailable> + 7419

    5    libc.so.6                          0x00002ad18e5e3460 __libc_start_main +
    245

    6    tmphna3roau                        0x000055d10efd91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = false\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] <= lst[i + 1] {\n            sorted = true\n      \
    \  } else {\n            sorted = false\n            break\n        }\n    }\n\
    \    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmper91tuo_/tmper91tuo_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad482c65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad48295cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad48295c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad48295b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmper91tuo_                        0x0000555cf515c52a <unavailable> + 5418

    5    libc.so.6                          0x00002ad482e51460 __libc_start_main +
    245

    6    tmper91tuo_                        0x0000555cf515c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var previous\
    \ = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] < previous {\n   \
    \         sorted = false\n        }\n        previous = lst[i]\n    }\n    return\
    \ sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae951321c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae951018561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae951018286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae95101813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae951017bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae950e17e83 <unavailable> + 188035

    6    tmp8r1s_qr8                        0x00005636dc023056 <unavailable> + 8278

    7    tmp8r1s_qr8                        0x00005636dc0229d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ae95150d460 __libc_start_main +
    245

    9    tmp8r1s_qr8                        0x00005636dc0221a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    for i in 0..<lst.count - 1 {\n     \
    \   if lst[i] > lst[i + 1] {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aeff1092c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeff0d89561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aeff0d89286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aeff0d8913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aeff0d88bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv_ofz5lt                        0x000055a4c044b0da <unavailable> + 8410

    6    tmpv_ofz5lt                        0x000055a4c044a9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002aeff127e460 __libc_start_main +
    245

    8    tmpv_ofz5lt                        0x000055a4c044a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    for i in 0..<lst.count - 1 {\n     \
    \   if lst[i] > lst[i + 1] {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aeff1092c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeff0d89561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aeff0d89286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aeff0d8913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aeff0d88bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv_ofz5lt                        0x000055a4c044b0da <unavailable> + 8410

    6    tmpv_ofz5lt                        0x000055a4c044a9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002aeff127e460 __libc_start_main +
    245

    8    tmpv_ofz5lt                        0x000055a4c044a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for num in lst {\n        if num < prev {\n            sorted = false\n \
    \       }\n        prev = num\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b293048ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2930185561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2930185286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b293018513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2930184bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b292ff84e83 <unavailable> + 188035

    6    tmpqf_w5uek                        0x00005644501d2fd6 <unavailable> + 8150

    7    tmpqf_w5uek                        0x00005644501d2954 <unavailable> + 6484

    8    libc.so.6                          0x00002b293067a460 __libc_start_main +
    245

    9    tmpqf_w5uek                        0x00005644501d2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = lst.sorted()\n    return\
    \ sorted == lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpxrjydtf5/tmpxrjydtf5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2330eefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2330be6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2330be6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2330be57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxrjydtf5                        0x000055d7ae5adbcb <unavailable> + 7115

    5    libc.so.6                          0x00002b23310db460 __libc_start_main +
    245

    6    tmpxrjydtf5                        0x000055d7ae5ad079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = lst.sorted()\n    return\
    \ sorted == lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpxrjydtf5/tmpxrjydtf5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2330eefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2330be6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2330be6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2330be57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxrjydtf5                        0x000055d7ae5adbcb <unavailable> + 7115

    5    libc.so.6                          0x00002b23310db460 __libc_start_main +
    245

    6    tmpxrjydtf5                        0x000055d7ae5ad079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    for i in 0..<lst.count-1 {\n       \
    \ if lst[i] > lst[i+1] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b7218833c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b721852a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b721852a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b721852a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7218529bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpsr33ef58                        0x000055b1f396c0da <unavailable> + 8410

    6    tmpsr33ef58                        0x000055b1f396b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002b7218a1f460 __libc_start_main +
    245

    8    tmpsr33ef58                        0x000055b1f396b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    if lst.count == 0 {\n        return\
    \ true\n    }\n    var sorted = true\n    for i in 0..<lst.count - 1 {\n     \
    \   if lst[i] > lst[i + 1] {\n            sorted = false\n        }\n    }\n \
    \   return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpzdnqyyed/tmpzdnqyyed.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1328c36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b132892db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b132892d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b132892c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzdnqyyed                        0x000055d0219d8cfb <unavailable> + 7419

    5    libc.so.6                          0x00002b1328e22460 __libc_start_main +
    245

    6    tmpzdnqyyed                        0x000055d0219d81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    if lst.count == 0 {\n        return\
    \ true\n    }\n    var prev = lst[0]\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < prev {\n            return false\n        }\n        prev = lst[i]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmphna3roau/tmphna3roau.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad18e3f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad18e0eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad18e0ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad18e0ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphna3roau                        0x000055d10efd9cfb <unavailable> + 7419

    5    libc.so.6                          0x00002ad18e5e3460 __libc_start_main +
    245

    6    tmphna3roau                        0x000055d10efd91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = lst.sorted()\n    return\
    \ sorted == lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpxrjydtf5/tmpxrjydtf5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2330eefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2330be6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2330be6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2330be57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxrjydtf5                        0x000055d7ae5adbcb <unavailable> + 7115

    5    libc.so.6                          0x00002b23310db460 __libc_start_main +
    245

    6    tmpxrjydtf5                        0x000055d7ae5ad079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var previous\
    \ = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] < previous {\n   \
    \         sorted = false\n        }\n        previous = lst[i]\n    }\n    return\
    \ sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae951321c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae951018561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae951018286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae95101813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae951017bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae950e17e83 <unavailable> + 188035

    6    tmp8r1s_qr8                        0x00005636dc023056 <unavailable> + 8278

    7    tmp8r1s_qr8                        0x00005636dc0229d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ae95150d460 __libc_start_main +
    245

    9    tmp8r1s_qr8                        0x00005636dc0221a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var previous\
    \ = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] < previous {\n   \
    \         sorted = false\n        }\n        previous = lst[i]\n    }\n    return\
    \ sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae951321c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae951018561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae951018286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae95101813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae951017bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae950e17e83 <unavailable> + 188035

    6    tmp8r1s_qr8                        0x00005636dc023056 <unavailable> + 8278

    7    tmp8r1s_qr8                        0x00005636dc0229d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ae95150d460 __libc_start_main +
    245

    9    tmp8r1s_qr8                        0x00005636dc0221a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var last = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < last {\n            sorted\
    \ = false\n        }\n        last = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7577ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7574f6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba7574f6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba7574f613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba7574f5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba7572f5e83 <unavailable> + 188035

    6    tmpmmrqtwur                        0x000056213c55d056 <unavailable> + 8278

    7    tmpmmrqtwur                        0x000056213c55c9d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ba7579eb460 __libc_start_main +
    245

    9    tmpmmrqtwur                        0x000056213c55c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = lst.sorted()\n    if sorted\
    \ == lst {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpzl36zvdj/tmpzl36zvdj.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e0807c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e04feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e04fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e04fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzl36zvdj                        0x0000563b80cdabcb <unavailable> + 7115

    5    libc.so.6                          0x00002b21e09f3460 __libc_start_main +
    245

    6    tmpzl36zvdj                        0x0000563b80cda079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    // TODO: Implement me!\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp2n2krbpn/tmp2n2krbpn.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6471e16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6471b0db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6471b0d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6471b0c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2n2krbpn                        0x00005586e419b2ea <unavailable> + 4842

    5    libc.so.6                          0x00002b6472002460 __libc_start_main +
    245

    6    tmp2n2krbpn                        0x00005586e419af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = lst.sorted()\n    return\
    \ lst == sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp0txcbe9e/tmp0txcbe9e.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba39ee0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba39eb01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba39eb01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba39eb007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0txcbe9e                        0x0000564b7918cbcb <unavailable> + 7115

    5    libc.so.6                          0x00002ba39eff6460 __libc_start_main +
    245

    6    tmp0txcbe9e                        0x0000564b7918c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    if lst.count == 0 {\n        return\
    \ true\n    }\n    var prev = lst[0]\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < prev {\n            return false\n        }\n        prev = lst[i]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmphna3roau/tmphna3roau.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad18e3f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad18e0eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad18e0ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad18e0ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphna3roau                        0x000055d10efd9cfb <unavailable> + 7419

    5    libc.so.6                          0x00002ad18e5e3460 __libc_start_main +
    245

    6    tmphna3roau                        0x000055d10efd91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = lst.sorted()\n    return\
    \ sorted == lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpxrjydtf5/tmpxrjydtf5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2330eefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2330be6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2330be6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2330be57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxrjydtf5                        0x000055d7ae5adbcb <unavailable> + 7115

    5    libc.so.6                          0x00002b23310db460 __libc_start_main +
    245

    6    tmpxrjydtf5                        0x000055d7ae5ad079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    for i in 0..<lst.count - 1 {\n     \
    \   if lst[i] > lst[i + 1] {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aeff1092c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeff0d89561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aeff0d89286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aeff0d8913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aeff0d88bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv_ofz5lt                        0x000055a4c044b0da <unavailable> + 8410

    6    tmpv_ofz5lt                        0x000055a4c044a9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002aeff127e460 __libc_start_main +
    245

    8    tmpv_ofz5lt                        0x000055a4c044a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    if lst.count == 0 {\n        return\
    \ true\n    }\n    var curr = lst[0]\n    for i in 1..<lst.count {\n        if\
    \ curr > lst[i] {\n            return false\n        }\n        curr = lst[i]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmptd92xa56/tmptd92xa56.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a0b592c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a0b289b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a0b289988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a0b2887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptd92xa56                        0x0000564d8ec1bcfb <unavailable> + 7419

    5    libc.so.6                          0x00002b5a0b77e460 __libc_start_main +
    245

    6    tmptd92xa56                        0x0000564d8ec1b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    for i in 0..<lst.count-1 {\n       \
    \ if lst[i] > lst[i+1] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b7218833c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b721852a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b721852a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b721852a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7218529bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpsr33ef58                        0x000055b1f396c0da <unavailable> + 8410

    6    tmpsr33ef58                        0x000055b1f396b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002b7218a1f460 __libc_start_main +
    245

    8    tmpsr33ef58                        0x000055b1f396b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = lst.sorted()\n    return\
    \ sorted == lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpxrjydtf5/tmpxrjydtf5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2330eefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2330be6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2330be6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2330be57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxrjydtf5                        0x000055d7ae5adbcb <unavailable> + 7115

    5    libc.so.6                          0x00002b23310db460 __libc_start_main +
    245

    6    tmpxrjydtf5                        0x000055d7ae5ad079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    if lst.count == 0 {\n        return\
    \ true\n    }\n    var prev = lst[0]\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < prev {\n            return false\n        }\n        prev = lst[i]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmphna3roau/tmphna3roau.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad18e3f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad18e0eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad18e0ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad18e0ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphna3roau                        0x000055d10efd9cfb <unavailable> + 7419

    5    libc.so.6                          0x00002ad18e5e3460 __libc_start_main +
    245

    6    tmphna3roau                        0x000055d10efd91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    for i in 0..<lst.count - 1 {\n     \
    \   if lst[i] > lst[i + 1] {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aeff1092c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeff0d89561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aeff0d89286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aeff0d8913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aeff0d88bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv_ofz5lt                        0x000055a4c044b0da <unavailable> + 8410

    6    tmpv_ofz5lt                        0x000055a4c044a9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002aeff127e460 __libc_start_main +
    245

    8    tmpv_ofz5lt                        0x000055a4c044a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    for i in 0..<lst.count - 1 {\n     \
    \   if lst[i] > lst[i + 1] {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aeff1092c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeff0d89561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aeff0d89286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aeff0d8913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aeff0d88bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv_ofz5lt                        0x000055a4c044b0da <unavailable> + 8410

    6    tmpv_ofz5lt                        0x000055a4c044a9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002aeff127e460 __libc_start_main +
    245

    8    tmpv_ofz5lt                        0x000055a4c044a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = lst.sorted()\n    return\
    \ sorted == lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpxrjydtf5/tmpxrjydtf5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2330eefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2330be6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2330be6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2330be57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxrjydtf5                        0x000055d7ae5adbcb <unavailable> + 7115

    5    libc.so.6                          0x00002b23310db460 __libc_start_main +
    245

    6    tmpxrjydtf5                        0x000055d7ae5ad079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    for i in 0..<lst.count - 1 {\n     \
    \   if lst[i] > lst[i + 1] {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aeff1092c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeff0d89561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aeff0d89286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aeff0d8913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aeff0d88bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv_ofz5lt                        0x000055a4c044b0da <unavailable> + 8410

    6    tmpv_ofz5lt                        0x000055a4c044a9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002aeff127e460 __libc_start_main +
    245

    8    tmpv_ofz5lt                        0x000055a4c044a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for num in lst {\n        if num < prev {\n            sorted = false\n \
    \       }\n        prev = num\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b293048ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2930185561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2930185286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b293018513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2930184bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b292ff84e83 <unavailable> + 188035

    6    tmpqf_w5uek                        0x00005644501d2fd6 <unavailable> + 8150

    7    tmpqf_w5uek                        0x00005644501d2954 <unavailable> + 6484

    8    libc.so.6                          0x00002b293067a460 __libc_start_main +
    245

    9    tmpqf_w5uek                        0x00005644501d2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var i = 0\n \
    \   while i < lst.count - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted\
    \ = false\n        }\n        i += 1\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpq355_g5g/tmpq355_g5g.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91b56f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91b53e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91b53e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91b53e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq355_g5g                        0x00005613e89a6b6b <unavailable> + 7019

    5    libc.so.6                          0x00002b91b58dd460 __libc_start_main +
    245

    6    tmpq355_g5g                        0x00005613e89a6019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var last = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < last {\n            sorted\
    \ = false\n        }\n        last = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7577ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7574f6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba7574f6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba7574f613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba7574f5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba7572f5e83 <unavailable> + 188035

    6    tmpmmrqtwur                        0x000056213c55d056 <unavailable> + 8278

    7    tmpmmrqtwur                        0x000056213c55c9d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ba7579eb460 __libc_start_main +
    245

    9    tmpmmrqtwur                        0x000056213c55c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var last = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < last {\n            sorted\
    \ = false\n        }\n        last = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7577ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7574f6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba7574f6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba7574f613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba7574f5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba7572f5e83 <unavailable> + 188035

    6    tmpmmrqtwur                        0x000056213c55d056 <unavailable> + 8278

    7    tmpmmrqtwur                        0x000056213c55c9d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ba7579eb460 __libc_start_main +
    245

    9    tmpmmrqtwur                        0x000056213c55c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = lst.sorted()\n    return\
    \ sorted == lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpxrjydtf5/tmpxrjydtf5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2330eefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2330be6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2330be6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2330be57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxrjydtf5                        0x000055d7ae5adbcb <unavailable> + 7115

    5    libc.so.6                          0x00002b23310db460 __libc_start_main +
    245

    6    tmpxrjydtf5                        0x000055d7ae5ad079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    for i in 0..<lst.count - 1 {\n     \
    \   if lst[i] > lst[i + 1] {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aeff1092c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeff0d89561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aeff0d89286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aeff0d8913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aeff0d88bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv_ofz5lt                        0x000055a4c044b0da <unavailable> + 8410

    6    tmpv_ofz5lt                        0x000055a4c044a9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002aeff127e460 __libc_start_main +
    245

    8    tmpv_ofz5lt                        0x000055a4c044a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpxmoksj_3/tmpxmoksj_3.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6030880c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6030577b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6030577988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60305767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxmoksj_3                        0x0000558b14a122ea <unavailable> + 4842

    5    libc.so.6                          0x00002b6030a6c460 __libc_start_main +
    245

    6    tmpxmoksj_3                        0x0000558b14a11f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < lst[i-1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af6e1cc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6e19bd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af6e19bd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af6e19bd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af6e19bcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpd65zbrbi                        0x000056522c8b80de <unavailable> + 8414

    6    tmpd65zbrbi                        0x000056522c8b79d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af6e1eb2460 __libc_start_main +
    245

    8    tmpd65zbrbi                        0x000056522c8b71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    // TODO: Implement me\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpvwwxa8nh/tmpvwwxa8nh.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb770c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb76db7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb76db7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb76db67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvwwxa8nh                        0x0000562f6a8e22ea <unavailable> + 4842

    5    libc.so.6                          0x00002aeb772ac460 __libc_start_main +
    245

    6    tmpvwwxa8nh                        0x0000562f6a8e1f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = lst.sorted()\n    if sorted\
    \ == lst {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpzl36zvdj/tmpzl36zvdj.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e0807c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e04feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e04fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e04fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzl36zvdj                        0x0000563b80cdabcb <unavailable> + 7115

    5    libc.so.6                          0x00002b21e09f3460 __libc_start_main +
    245

    6    tmpzl36zvdj                        0x0000563b80cda079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < lst[i-1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af6e1cc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6e19bd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af6e19bd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af6e19bd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af6e19bcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpd65zbrbi                        0x000056522c8b80de <unavailable> + 8414

    6    tmpd65zbrbi                        0x000056522c8b79d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af6e1eb2460 __libc_start_main +
    245

    8    tmpd65zbrbi                        0x000056522c8b71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = lst.sorted()\n    return\
    \ sorted == lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpxrjydtf5/tmpxrjydtf5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2330eefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2330be6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2330be6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2330be57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxrjydtf5                        0x000055d7ae5adbcb <unavailable> + 7115

    5    libc.so.6                          0x00002b23310db460 __libc_start_main +
    245

    6    tmpxrjydtf5                        0x000055d7ae5ad079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    for i in 0..<lst.count - 1 {\n     \
    \   if lst[i] > lst[i + 1] {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aeff1092c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeff0d89561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aeff0d89286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aeff0d8913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aeff0d88bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv_ofz5lt                        0x000055a4c044b0da <unavailable> + 8410

    6    tmpv_ofz5lt                        0x000055a4c044a9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002aeff127e460 __libc_start_main +
    245

    8    tmpv_ofz5lt                        0x000055a4c044a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for num in lst {\n        if num < prev {\n            sorted = false\n \
    \       }\n        prev = num\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b293048ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2930185561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2930185286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b293018513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2930184bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b292ff84e83 <unavailable> + 188035

    6    tmpqf_w5uek                        0x00005644501d2fd6 <unavailable> + 8150

    7    tmpqf_w5uek                        0x00005644501d2954 <unavailable> + 6484

    8    libc.so.6                          0x00002b293067a460 __libc_start_main +
    245

    9    tmpqf_w5uek                        0x00005644501d2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    for i in 0..<lst.count - 1 {\n     \
    \   if lst[i] > lst[i + 1] {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aeff1092c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeff0d89561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aeff0d89286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aeff0d8913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aeff0d88bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv_ofz5lt                        0x000055a4c044b0da <unavailable> + 8410

    6    tmpv_ofz5lt                        0x000055a4c044a9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002aeff127e460 __libc_start_main +
    245

    8    tmpv_ofz5lt                        0x000055a4c044a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var previous\
    \ = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] < previous {\n   \
    \         sorted = false\n        }\n        previous = lst[i]\n    }\n    return\
    \ sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae951321c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae951018561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae951018286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae95101813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae951017bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae950e17e83 <unavailable> + 188035

    6    tmp8r1s_qr8                        0x00005636dc023056 <unavailable> + 8278

    7    tmp8r1s_qr8                        0x00005636dc0229d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ae95150d460 __libc_start_main +
    245

    9    tmp8r1s_qr8                        0x00005636dc0221a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = lst.sorted()\n    return\
    \ lst == sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp0txcbe9e/tmp0txcbe9e.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba39ee0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba39eb01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba39eb01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba39eb007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0txcbe9e                        0x0000564b7918cbcb <unavailable> + 7115

    5    libc.so.6                          0x00002ba39eff6460 __libc_start_main +
    245

    6    tmp0txcbe9e                        0x0000564b7918c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = lst.sorted()\n    if lst\
    \ == sorted {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp035ijdeu/tmp035ijdeu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1e8f9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1e8c94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1e8c94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1e8c937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp035ijdeu                        0x000055b444db8bcb <unavailable> + 7115

    5    libc.so.6                          0x00002ad1e9189460 __libc_start_main +
    245

    6    tmp035ijdeu                        0x000055b444db8079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    if lst.count == 0 {\n        return\
    \ true\n    }\n    var prev = lst[0]\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < prev {\n            return false\n        }\n        prev = lst[i]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmphna3roau/tmphna3roau.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad18e3f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad18e0eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad18e0ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad18e0ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphna3roau                        0x000055d10efd9cfb <unavailable> + 7419

    5    libc.so.6                          0x00002ad18e5e3460 __libc_start_main +
    245

    6    tmphna3roau                        0x000055d10efd91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var previous\
    \ = lst[0]\n    for num in lst {\n        if num < previous {\n            sorted\
    \ = false\n        }\n        previous = num\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6e3cc3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6e39ba561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae6e39ba286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae6e39ba13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae6e39b9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae6e37b9e83 <unavailable> + 188035

    6    tmp6nbq_tzq                        0x0000558240abcfd6 <unavailable> + 8150

    7    tmp6nbq_tzq                        0x0000558240abc954 <unavailable> + 6484

    8    libc.so.6                          0x00002ae6e3eaf460 __libc_start_main +
    245

    9    tmp6nbq_tzq                        0x0000558240abc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    for i in 0..<lst.count-1 {\n       \
    \ if lst[i] > lst[i+1] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b7218833c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b721852a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b721852a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b721852a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7218529bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpsr33ef58                        0x000055b1f396c0da <unavailable> + 8410

    6    tmpsr33ef58                        0x000055b1f396b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002b7218a1f460 __libc_start_main +
    245

    8    tmpsr33ef58                        0x000055b1f396b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for num in lst {\n        if num < prev {\n            sorted = false\n \
    \       }\n        prev = num\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b293048ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2930185561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2930185286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b293018513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2930184bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b292ff84e83 <unavailable> + 188035

    6    tmpqf_w5uek                        0x00005644501d2fd6 <unavailable> + 8150

    7    tmpqf_w5uek                        0x00005644501d2954 <unavailable> + 6484

    8    libc.so.6                          0x00002b293067a460 __libc_start_main +
    245

    9    tmpqf_w5uek                        0x00005644501d2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af024d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af024a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af024a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af024a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af024a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09__epq5                        0x000055d3c213c0ee <unavailable> + 8430

    6    tmp09__epq5                        0x000055d3c213b9d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af024f45460 __libc_start_main +
    245

    8    tmp09__epq5                        0x000055d3c213b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < lst[i-1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af6e1cc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6e19bd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af6e19bd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af6e19bd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af6e19bcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpd65zbrbi                        0x000056522c8b80de <unavailable> + 8414

    6    tmpd65zbrbi                        0x000056522c8b79d4 <unavailable> + 6612

    7    libc.so.6                          0x00002af6e1eb2460 __libc_start_main +
    245

    8    tmpd65zbrbi                        0x000056522c8b71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    var prev = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted\
    \ = false\n        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ed03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac47ed03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac47ed0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac47ed02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac47eb02e83 <unavailable> + 188035

    6    tmpo09fvix3                        0x0000560b5b28a056 <unavailable> + 8278

    7    tmpo09fvix3                        0x0000560b5b2899d4 <unavailable> + 6612

    8    libc.so.6                          0x00002ac47f1f8460 __libc_start_main +
    245

    9    tmpo09fvix3                        0x0000560b5b2891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62482dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae624524561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae624524286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62452413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae624523bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxrcvi70h                        0x0000558cb6b150ee <unavailable> + 8430

    6    tmpxrcvi70h                        0x0000558cb6b149d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ae624a19460 __libc_start_main +
    245

    8    tmpxrcvi70h                        0x0000558cb6b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013813
