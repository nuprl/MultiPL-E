language: swift
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let set = Set(string.lowercased())\n    return set.count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var chars = Set<Character>()\n    for char in string {\n     \
    \   chars.insert(char)\n    }\n    return chars.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpsttxd49q/tmpsttxd49q.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cba241c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cb9f38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cb9f38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cb9f377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsttxd49q                        0x000056183fb695f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b4cba42d460 __libc_start_main +
    245

    6    tmpsttxd49q                        0x000056183fb69129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return string.lowercased().count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp92radobc/tmp92radobc.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba38f2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba38c21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba38c21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba38c207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp92radobc                        0x000055c868df0461 <unavailable> + 5217

    5    libc.so.6                          0x00002aba39116460 __libc_start_main +
    245

    6    tmp92radobc                        0x000055c868deff99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let characters = string.lowercased().compactMap { $0.asciiValue\
    \ }\n    return Set(characters).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Array(Set(string.lowercased())).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var distinct_characters = Set<Character>()\n    for char in string\
    \ {\n        distinct_characters.insert(char)\n    }\n    return distinct_characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpva79kry7/tmpva79kry7.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aede27fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aede24f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aede24f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aede24f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpva79kry7                        0x00005606acc995f1 <unavailable> + 5617

    5    libc.so.6                          0x00002aede29e6460 __libc_start_main +
    245

    6    tmpva79kry7                        0x00005606acc99129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var characters = Set<Character>()\n    for character in string\
    \ {\n        characters.insert(character)\n    }\n    return characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpodyvusg5/tmpodyvusg5.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b5f100c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b5edf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b5edf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b5edf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodyvusg5                        0x00005641b48f65f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b1b5f2ec460 __libc_start_main +
    245

    6    tmpodyvusg5                        0x00005641b48f6129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var characters = Set<Character>()\n    for character in string\
    \ {\n        characters.insert(character)\n    }\n    return characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpodyvusg5/tmpodyvusg5.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b5f100c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b5edf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b5edf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b5edf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodyvusg5                        0x00005641b48f65f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b1b5f2ec460 __libc_start_main +
    245

    6    tmpodyvusg5                        0x00005641b48f6129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var distinct_characters = Set<Character>()\n    for char in string\
    \ {\n        distinct_characters.insert(char)\n    }\n    return distinct_characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpva79kry7/tmpva79kry7.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aede27fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aede24f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aede24f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aede24f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpva79kry7                        0x00005606acc995f1 <unavailable> + 5617

    5    libc.so.6                          0x00002aede29e6460 __libc_start_main +
    245

    6    tmpva79kry7                        0x00005606acc99129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var distinct_characters = Set<Character>()\n    for c in string\
    \ {\n        distinct_characters.insert(c)\n    }\n    return distinct_characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpti2uc822/tmpti2uc822.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc9591c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc9288b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc9288988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc92877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpti2uc822                        0x00005589429b25f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b3fc977d460 __libc_start_main +
    245

    6    tmpti2uc822                        0x00005589429b2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var characters = Set<Character>()\n    for character in string\
    \ {\n        characters.insert(character)\n    }\n    return characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpodyvusg5/tmpodyvusg5.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b5f100c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b5edf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b5edf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b5edf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodyvusg5                        0x00005641b48f65f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b1b5f2ec460 __libc_start_main +
    245

    6    tmpodyvusg5                        0x00005641b48f6129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Array(Set(string.lowercased())).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let lowercase = string.lowercased()\n    let distinct = Set(lowercase)\n\
    \    return distinct.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var distinct_characters = Set<Character>()\n    for character\
    \ in string {\n        distinct_characters.insert(character)\n    }\n    return\
    \ distinct_characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp0wgob5sh/tmp0wgob5sh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5326f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5323efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5323ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5323ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wgob5sh                        0x000055c35dd8a5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002ad5328e4460 __libc_start_main +
    245

    6    tmp0wgob5sh                        0x000055c35dd8a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return string.lowercased().count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp92radobc/tmp92radobc.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba38f2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba38c21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba38c21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba38c207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp92radobc                        0x000055c868df0461 <unavailable> + 5217

    5    libc.so.6                          0x00002aba39116460 __libc_start_main +
    245

    6    tmp92radobc                        0x000055c868deff99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var characters = [Character]()\n    for character in string.lowercased()\
    \ {\n        if !characters.contains(character) {\n            characters.append(character)\n\
    \        }\n    }\n    return characters.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let characters = string.lowercased().map { String($0) }\n    return\
    \ Set(characters).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let characters = string.lowercased().characters\n    let distinctCharacters\
    \ = Set(characters)\n    return distinctCharacters.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpiip3etgh.swift:4:42: error: 'characters' is unavailable: Please\
    \ use String directly\n    let characters = string.lowercased().characters\n \
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return string.lowercased().characters.reduce(into: [:]) { $0[$1]\
    \ = true }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmplbr6e5jf.swift:4:32: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.lowercased().characters.reduce(into:\
    \ [:]) { $0[$1] = true }.count\n                               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return string.lowercased().count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp92radobc/tmp92radobc.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba38f2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba38c21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba38c21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba38c207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp92radobc                        0x000055c868df0461 <unavailable> + 5217

    5    libc.so.6                          0x00002aba39116460 __libc_start_main +
    245

    6    tmp92radobc                        0x000055c868deff99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let lowercase = string.lowercased()\n    let characters = Set(lowercase)\n\
    \    return characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var characters = Set<Character>()\n    for character in string\
    \ {\n        characters.insert(character)\n    }\n    return characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpodyvusg5/tmpodyvusg5.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b5f100c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b5edf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b5edf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b5edf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodyvusg5                        0x00005641b48f65f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b1b5f2ec460 __libc_start_main +
    245

    6    tmpodyvusg5                        0x00005641b48f6129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var set = Set<Character>()\n    for char in string {\n       \
    \ set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpja1z0kou/tmpja1z0kou.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b378d352c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b378d049b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b378d049988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b378d0487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpja1z0kou                        0x00005644767f35f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b378d53e460 __libc_start_main +
    245

    6    tmpja1z0kou                        0x00005644767f3129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var distinct_characters = Set<Character>()\n    for character\
    \ in string {\n        distinct_characters.insert(character)\n    }\n    return\
    \ distinct_characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp0wgob5sh/tmp0wgob5sh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5326f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5323efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5323ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5323ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wgob5sh                        0x000055c35dd8a5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002ad5328e4460 __libc_start_main +
    245

    6    tmp0wgob5sh                        0x000055c35dd8a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var characters = Set<Character>()\n    for character in string\
    \ {\n        characters.insert(character)\n    }\n    return characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpodyvusg5/tmpodyvusg5.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b5f100c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b5edf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b5edf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b5edf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodyvusg5                        0x00005641b48f65f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b1b5f2ec460 __libc_start_main +
    245

    6    tmpodyvusg5                        0x00005641b48f6129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let lowercase = string.lowercased()\n    let characters = Set(lowercase)\n\
    \    return characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let characters = string.lowercased().characters\n    let distinctCharacters\
    \ = Set(characters)\n    return distinctCharacters.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpiip3etgh.swift:4:42: error: 'characters' is unavailable: Please\
    \ use String directly\n    let characters = string.lowercased().characters\n \
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let lowercase = string.lowercased()\n    let characters = Set(lowercase)\n\
    \    return characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var chars = Set<Character>()\n    for char in string {\n     \
    \   chars.insert(char)\n    }\n    return chars.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpsttxd49q/tmpsttxd49q.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cba241c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cb9f38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cb9f38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cb9f377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsttxd49q                        0x000056183fb695f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b4cba42d460 __libc_start_main +
    245

    6    tmpsttxd49q                        0x000056183fb69129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var distinct_characters = Set<Character>()\n    for character\
    \ in string {\n        distinct_characters.insert(character)\n    }\n    return\
    \ distinct_characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp0wgob5sh/tmp0wgob5sh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5326f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5323efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5323ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5323ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wgob5sh                        0x000055c35dd8a5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002ad5328e4460 __libc_start_main +
    245

    6    tmp0wgob5sh                        0x000055c35dd8a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let lowercase = string.lowercased()\n    let distinct = Set(lowercase)\n\
    \    return distinct.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return string.lowercased().count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp92radobc/tmp92radobc.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba38f2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba38c21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba38c21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba38c207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp92radobc                        0x000055c868df0461 <unavailable> + 5217

    5    libc.so.6                          0x00002aba39116460 __libc_start_main +
    245

    6    tmp92radobc                        0x000055c868deff99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let lowercase = string.lowercased()\n    let characters = Array(lowercase)\n\
    \    let uniqueCharacters = Set(characters)\n    return uniqueCharacters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return string.lowercased().count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp92radobc/tmp92radobc.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba38f2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba38c21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba38c21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba38c207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp92radobc                        0x000055c868df0461 <unavailable> + 5217

    5    libc.so.6                          0x00002aba39116460 __libc_start_main +
    245

    6    tmp92radobc                        0x000055c868deff99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var distinct_characters = Set<Character>()\n    for character\
    \ in string {\n        distinct_characters.insert(character)\n    }\n    return\
    \ distinct_characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp0wgob5sh/tmp0wgob5sh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5326f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5323efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5323ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5323ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wgob5sh                        0x000055c35dd8a5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002ad5328e4460 __libc_start_main +
    245

    6    tmp0wgob5sh                        0x000055c35dd8a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let lowercase = string.lowercased()\n    let characters = Array(lowercase)\n\
    \    let set = Set(characters)\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return string.lowercased().count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp92radobc/tmp92radobc.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba38f2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba38c21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba38c21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba38c207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp92radobc                        0x000055c868df0461 <unavailable> + 5217

    5    libc.so.6                          0x00002aba39116460 __libc_start_main +
    245

    6    tmp92radobc                        0x000055c868deff99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var set = Set<Character>()\n    for char in string {\n       \
    \ set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpja1z0kou/tmpja1z0kou.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b378d352c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b378d049b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b378d049988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b378d0487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpja1z0kou                        0x00005644767f35f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b378d53e460 __libc_start_main +
    245

    6    tmpja1z0kou                        0x00005644767f3129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let lowercaseString = string.lowercased()\n    let characters\
    \ = lowercaseString.characters\n    let distinctCharacters = Set(characters)\n\
    \    return distinctCharacters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpkfq9bk07.swift:5:38: error: 'characters' is unavailable: Please\
    \ use String directly\n    let characters = lowercaseString.characters\n     \
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let lowercase = string.lowercased()\n    let characters = Set(lowercase)\n\
    \    return characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let lowercase = string.lowercased()\n    let distinct = Set(lowercase)\n\
    \    return distinct.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return string.lowercased().unicodeScalars.reduce(into: Set<UnicodeScalar>())\
    \ { $0.insert($1) }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var set = Set<Character>()\n    for char in string {\n       \
    \ set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpja1z0kou/tmpja1z0kou.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b378d352c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b378d049b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b378d049988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b378d0487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpja1z0kou                        0x00005644767f35f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b378d53e460 __libc_start_main +
    245

    6    tmpja1z0kou                        0x00005644767f3129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var dict = [Character: Int]()\n    for char in string {\n    \
    \    dict[char] = (dict[char] ?? 0) + 1\n    }\n    return dict.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpqhs_nmyj/tmpqhs_nmyj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41ec07ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41ebd71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41ebd71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41ebd707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhs_nmyj                        0x0000558b9b080621 <unavailable> + 5665

    5    libc.so.6                          0x00002b41ec266460 __libc_start_main +
    245

    6    tmpqhs_nmyj                        0x0000558b9b080159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let lowercase = string.lowercased()\n    let set = Set(lowercase)\n\
    \    return set.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let characters = string.lowercased().characters\n    var distinctCharacters\
    \ = Set<Character>()\n    for character in characters {\n        distinctCharacters.insert(character)\n\
    \    }\n    return distinctCharacters.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpv9v2y5o3.swift:4:42: error: 'characters' is unavailable: Please\
    \ use String directly\n    let characters = string.lowercased().characters\n \
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var distinct_characters = Set<Character>()\n    for character\
    \ in string {\n        distinct_characters.insert(character)\n    }\n    return\
    \ distinct_characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp0wgob5sh/tmp0wgob5sh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5326f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5323efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5323ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5323ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wgob5sh                        0x000055c35dd8a5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002ad5328e4460 __libc_start_main +
    245

    6    tmp0wgob5sh                        0x000055c35dd8a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var distinct_characters = Set<Character>()\n    for character\
    \ in string {\n        distinct_characters.insert(character)\n    }\n    return\
    \ distinct_characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp0wgob5sh/tmp0wgob5sh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5326f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5323efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5323ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5323ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wgob5sh                        0x000055c35dd8a5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002ad5328e4460 __libc_start_main +
    245

    6    tmp0wgob5sh                        0x000055c35dd8a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var characters = Set<Character>()\n    for char in string {\n\
    \        characters.insert(char)\n    }\n    return characters.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpqn9ulp5h/tmpqn9ulp5h.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4848ac3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48487bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48487ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48487b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqn9ulp5h                        0x0000557b4d29e5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b4848caf460 __libc_start_main +
    245

    6    tmpqn9ulp5h                        0x0000557b4d29e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var characters = Set<Character>()\n    for char in string {\n\
    \        characters.insert(char)\n    }\n    return characters.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpqn9ulp5h/tmpqn9ulp5h.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4848ac3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48487bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48487ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48487b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqn9ulp5h                        0x0000557b4d29e5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b4848caf460 __libc_start_main +
    245

    6    tmpqn9ulp5h                        0x0000557b4d29e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Array(Set(string.lowercased())).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return string.lowercased().count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp92radobc/tmp92radobc.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba38f2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba38c21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba38c21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba38c207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp92radobc                        0x000055c868df0461 <unavailable> + 5217

    5    libc.so.6                          0x00002aba39116460 __libc_start_main +
    245

    6    tmp92radobc                        0x000055c868deff99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var set = Set<Character>()\n    for char in string {\n       \
    \ set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpja1z0kou/tmpja1z0kou.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b378d352c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b378d049b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b378d049988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b378d0487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpja1z0kou                        0x00005644767f35f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b378d53e460 __libc_start_main +
    245

    6    tmpja1z0kou                        0x00005644767f3129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var distinct_characters = Set<Character>()\n    for char in string\
    \ {\n        distinct_characters.insert(char)\n    }\n    return distinct_characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpva79kry7/tmpva79kry7.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aede27fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aede24f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aede24f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aede24f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpva79kry7                        0x00005606acc995f1 <unavailable> + 5617

    5    libc.so.6                          0x00002aede29e6460 __libc_start_main +
    245

    6    tmpva79kry7                        0x00005606acc99129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var distinct_characters = Set<Character>()\n    for char in string\
    \ {\n        distinct_characters.insert(char)\n    }\n    return distinct_characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpva79kry7/tmpva79kry7.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aede27fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aede24f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aede24f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aede24f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpva79kry7                        0x00005606acc995f1 <unavailable> + 5617

    5    libc.so.6                          0x00002aede29e6460 __libc_start_main +
    245

    6    tmpva79kry7                        0x00005606acc99129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return string.lowercased().count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp92radobc/tmp92radobc.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba38f2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba38c21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba38c21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba38c207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp92radobc                        0x000055c868df0461 <unavailable> + 5217

    5    libc.so.6                          0x00002aba39116460 __libc_start_main +
    245

    6    tmp92radobc                        0x000055c868deff99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return string.lowercased().count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp92radobc/tmp92radobc.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba38f2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba38c21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba38c21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba38c207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp92radobc                        0x000055c868df0461 <unavailable> + 5217

    5    libc.so.6                          0x00002aba39116460 __libc_start_main +
    245

    6    tmp92radobc                        0x000055c868deff99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Array(Set(string.lowercased())).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var distinct_characters = Set<Character>()\n    for character\
    \ in string {\n        distinct_characters.insert(character)\n    }\n    return\
    \ distinct_characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp0wgob5sh/tmp0wgob5sh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5326f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5323efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5323ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5323ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wgob5sh                        0x000055c35dd8a5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002ad5328e4460 __libc_start_main +
    245

    6    tmp0wgob5sh                        0x000055c35dd8a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return string.lowercased().count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp92radobc/tmp92radobc.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba38f2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba38c21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba38c21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba38c207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp92radobc                        0x000055c868df0461 <unavailable> + 5217

    5    libc.so.6                          0x00002aba39116460 __libc_start_main +
    245

    6    tmp92radobc                        0x000055c868deff99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var characters = Set<Character>()\n    for character in string\
    \ {\n        characters.insert(character)\n    }\n    return characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpodyvusg5/tmpodyvusg5.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b5f100c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b5edf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b5edf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b5edf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodyvusg5                        0x00005641b48f65f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b1b5f2ec460 __libc_start_main +
    245

    6    tmpodyvusg5                        0x00005641b48f6129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let characters = string.lowercased().characters\n    let distinctCharacters\
    \ = Set(characters)\n    return distinctCharacters.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpiip3etgh.swift:4:42: error: 'characters' is unavailable: Please\
    \ use String directly\n    let characters = string.lowercased().characters\n \
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let characters = string.lowercased().characters\n    var distinctCharacters\
    \ = Set<Character>()\n    for character in characters {\n        distinctCharacters.insert(character)\n\
    \    }\n    return distinctCharacters.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpv9v2y5o3.swift:4:42: error: 'characters' is unavailable: Please\
    \ use String directly\n    let characters = string.lowercased().characters\n \
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let lowercase = string.lowercased()\n    let distinct = Set(lowercase)\n\
    \    return distinct.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var set = Set<Character>()\n    for char in string {\n       \
    \ set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpja1z0kou/tmpja1z0kou.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b378d352c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b378d049b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b378d049988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b378d0487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpja1z0kou                        0x00005644767f35f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b378d53e460 __libc_start_main +
    245

    6    tmpja1z0kou                        0x00005644767f3129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return string.lowercased().reduce(into: Set<Character>()) { $0.insert($1)\
    \ }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var distinct_characters = Set<Character>()\n    for character\
    \ in string {\n        distinct_characters.insert(character)\n    }\n    return\
    \ distinct_characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp0wgob5sh/tmp0wgob5sh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5326f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5323efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5323ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5323ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wgob5sh                        0x000055c35dd8a5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002ad5328e4460 __libc_start_main +
    245

    6    tmp0wgob5sh                        0x000055c35dd8a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var set = Set<Character>()\n    for c in string {\n        set.insert(c)\n\
    \    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpk5q2t4of/tmpk5q2t4of.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9960f94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9960c8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9960c8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9960c8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk5q2t4of                        0x0000559c700c85f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b9961180460 __libc_start_main +
    245

    6    tmpk5q2t4of                        0x0000559c700c8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var count = 0\n    var charSet = Set<Character>()\n    for char\
    \ in string {\n        if !charSet.contains(char) {\n            charSet.insert(char)\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6e2nm3po/tmp6e2nm3po.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f69fa0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69c97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69c97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69c967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6e2nm3po                        0x000055f7e515e601 <unavailable> + 5633

    5    libc.so.6                          0x00002b7f6a18c460 __libc_start_main +
    245

    6    tmp6e2nm3po                        0x000055f7e515e139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let lowercase = string.lowercased()\n    let characters = Set(lowercase)\n\
    \    return characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var distinct_characters = Set<Character>()\n    for character\
    \ in string {\n        distinct_characters.insert(character)\n    }\n    return\
    \ distinct_characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp0wgob5sh/tmp0wgob5sh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5326f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5323efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5323ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5323ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wgob5sh                        0x000055c35dd8a5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002ad5328e4460 __libc_start_main +
    245

    6    tmp0wgob5sh                        0x000055c35dd8a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return string.lowercased().count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp92radobc/tmp92radobc.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba38f2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba38c21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba38c21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba38c207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp92radobc                        0x000055c868df0461 <unavailable> + 5217

    5    libc.so.6                          0x00002aba39116460 __libc_start_main +
    245

    6    tmp92radobc                        0x000055c868deff99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let lowercase = string.lowercased()\n    let set = Set(lowercase)\n\
    \    return set.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var characters = Set<Character>()\n    for character in string\
    \ {\n        characters.insert(character)\n    }\n    return characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpodyvusg5/tmpodyvusg5.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b5f100c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b5edf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b5edf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b5edf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodyvusg5                        0x00005641b48f65f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b1b5f2ec460 __libc_start_main +
    245

    6    tmpodyvusg5                        0x00005641b48f6129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let distinctCharacters = Set(string.lowercased())\n    return\
    \ distinctCharacters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var count = 0\n    var characters = [Character]()\n    for char\
    \ in string {\n        if !characters.contains(char) {\n            characters.append(char)\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmps1_gdwf_/tmps1_gdwf_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73b2412c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73b2109b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73b2109988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73b21087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1_gdwf_                        0x0000555f9fc81611 <unavailable> + 5649

    5    libc.so.6                          0x00002b73b25fe460 __libc_start_main +
    245

    6    tmps1_gdwf_                        0x0000555f9fc81149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var distinct_characters = Set<Character>()\n    for character\
    \ in string {\n        distinct_characters.insert(character)\n    }\n    return\
    \ distinct_characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp0wgob5sh/tmp0wgob5sh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5326f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5323efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5323ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5323ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wgob5sh                        0x000055c35dd8a5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002ad5328e4460 __libc_start_main +
    245

    6    tmp0wgob5sh                        0x000055c35dd8a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var distinct_characters = Set<Character>()\n    for char in string\
    \ {\n        distinct_characters.insert(char)\n    }\n    return distinct_characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpva79kry7/tmpva79kry7.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aede27fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aede24f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aede24f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aede24f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpva79kry7                        0x00005606acc995f1 <unavailable> + 5617

    5    libc.so.6                          0x00002aede29e6460 __libc_start_main +
    245

    6    tmpva79kry7                        0x00005606acc99129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var distinct_characters = Set<Character>()\n    for char in string\
    \ {\n        distinct_characters.insert(char)\n    }\n    return distinct_characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpva79kry7/tmpva79kry7.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aede27fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aede24f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aede24f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aede24f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpva79kry7                        0x00005606acc995f1 <unavailable> + 5617

    5    libc.so.6                          0x00002aede29e6460 __libc_start_main +
    245

    6    tmpva79kry7                        0x00005606acc99129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var set = Set<Character>()\n    for char in string {\n       \
    \ set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpja1z0kou/tmpja1z0kou.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b378d352c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b378d049b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b378d049988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b378d0487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpja1z0kou                        0x00005644767f35f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b378d53e460 __libc_start_main +
    245

    6    tmpja1z0kou                        0x00005644767f3129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Array(Set(string.lowercased())).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var distinct_characters = Set<Character>()\n    for char in string\
    \ {\n        distinct_characters.insert(char)\n    }\n    return distinct_characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpva79kry7/tmpva79kry7.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aede27fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aede24f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aede24f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aede24f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpva79kry7                        0x00005606acc995f1 <unavailable> + 5617

    5    libc.so.6                          0x00002aede29e6460 __libc_start_main +
    245

    6    tmpva79kry7                        0x00005606acc99129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let lowercase = string.lowercased()\n    let distinctCharacters\
    \ = Set(lowercase)\n    return distinctCharacters.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var characters = Set<Character>()\n    for character in string\
    \ {\n        characters.insert(character)\n    }\n    return characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpodyvusg5/tmpodyvusg5.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b5f100c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b5edf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b5edf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b5edf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodyvusg5                        0x00005641b48f65f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b1b5f2ec460 __libc_start_main +
    245

    6    tmpodyvusg5                        0x00005641b48f6129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var count = 0\n    var characters = [Character]()\n    for char\
    \ in string {\n        if !characters.contains(char) {\n            characters.append(char)\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmps1_gdwf_/tmps1_gdwf_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73b2412c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73b2109b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73b2109988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73b21087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1_gdwf_                        0x0000555f9fc81611 <unavailable> + 5649

    5    libc.so.6                          0x00002b73b25fe460 __libc_start_main +
    245

    6    tmps1_gdwf_                        0x0000555f9fc81149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var distinct_characters = Set<Character>()\n    for character\
    \ in string {\n        distinct_characters.insert(character)\n    }\n    return\
    \ distinct_characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp0wgob5sh/tmp0wgob5sh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5326f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5323efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5323ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5323ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wgob5sh                        0x000055c35dd8a5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002ad5328e4460 __libc_start_main +
    245

    6    tmp0wgob5sh                        0x000055c35dd8a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let lowercase = string.lowercased()\n    let set = Set(lowercase)\n\
    \    return set.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var distinct_characters = Set<Character>()\n    for character\
    \ in string {\n        distinct_characters.insert(character)\n    }\n    return\
    \ distinct_characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp0wgob5sh/tmp0wgob5sh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5326f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5323efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5323ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5323ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wgob5sh                        0x000055c35dd8a5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002ad5328e4460 __libc_start_main +
    245

    6    tmp0wgob5sh                        0x000055c35dd8a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var set = Set<Character>()\n    for char in string {\n       \
    \ set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpja1z0kou/tmpja1z0kou.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b378d352c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b378d049b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b378d049988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b378d0487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpja1z0kou                        0x00005644767f35f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b378d53e460 __libc_start_main +
    245

    6    tmpja1z0kou                        0x00005644767f3129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let characters = string.lowercased().characters\n    let distinctCharacters\
    \ = Set(characters)\n    return distinctCharacters.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpiip3etgh.swift:4:42: error: 'characters' is unavailable: Please\
    \ use String directly\n    let characters = string.lowercased().characters\n \
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var characters = Set<Character>()\n    for character in string\
    \ {\n        characters.insert(character)\n    }\n    return characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpodyvusg5/tmpodyvusg5.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b5f100c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b5edf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b5edf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b5edf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodyvusg5                        0x00005641b48f65f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b1b5f2ec460 __libc_start_main +
    245

    6    tmpodyvusg5                        0x00005641b48f6129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var characters = Set<Character>()\n    for char in string {\n\
    \        characters.insert(char)\n    }\n    return characters.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpqn9ulp5h/tmpqn9ulp5h.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4848ac3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48487bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48487ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48487b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqn9ulp5h                        0x0000557b4d29e5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b4848caf460 __libc_start_main +
    245

    6    tmpqn9ulp5h                        0x0000557b4d29e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var distinct_characters = Set<Character>()\n    for character\
    \ in string {\n        distinct_characters.insert(character)\n    }\n    return\
    \ distinct_characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp0wgob5sh/tmp0wgob5sh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5326f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5323efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5323ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5323ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wgob5sh                        0x000055c35dd8a5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002ad5328e4460 __libc_start_main +
    245

    6    tmp0wgob5sh                        0x000055c35dd8a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var set = Set<Character>()\n    for char in string {\n       \
    \ set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpja1z0kou/tmpja1z0kou.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b378d352c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b378d049b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b378d049988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b378d0487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpja1z0kou                        0x00005644767f35f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b378d53e460 __libc_start_main +
    245

    6    tmpja1z0kou                        0x00005644767f3129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Array(Set(string.lowercased())).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var set = Set<Character>()\n    for char in string {\n       \
    \ set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpja1z0kou/tmpja1z0kou.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b378d352c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b378d049b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b378d049988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b378d0487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpja1z0kou                        0x00005644767f35f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b378d53e460 __libc_start_main +
    245

    6    tmpja1z0kou                        0x00005644767f3129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    var distinct_characters = Set<Character>()\n    for character\
    \ in string {\n        distinct_characters.insert(character)\n    }\n    return\
    \ distinct_characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp0wgob5sh/tmp0wgob5sh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5326f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5323efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5323ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5323ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wgob5sh                        0x000055c35dd8a5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002ad5328e4460 __libc_start_main +
    245

    6    tmp0wgob5sh                        0x000055c35dd8a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    let lowercase = string.lowercased()\n    let distinct = Set(lowercase)\n\
    \    return distinct.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
