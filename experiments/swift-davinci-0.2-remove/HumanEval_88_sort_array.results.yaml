language: swift
name: HumanEval_88_sort_array
results:
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n        evenArray.reverse()\n    }\n \
    \   for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b62ae2a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62adf97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b62adf97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b62adf9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b62adf96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b62add96e83 <unavailable> + 188035

    6    tmp3ew2_d2g                        0x000055a081f19467 <unavailable> + 9319

    7    tmp3ew2_d2g                        0x000055a081f187fd <unavailable> + 6141

    8    libc.so.6                          0x00002b62ae48c460 __libc_start_main +
    245

    9    tmp3ew2_d2g                        0x000055a081f18509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sortedArray = array\n    let sum = array[0] + array[array.count\
    \ - 1]\n    if sum % 2 == 0 {\n        sortedArray.sort(by: >)\n    } else {\n\
    \        sortedArray.sort(by: <)\n    }\n    return sortedArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b74592a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7458f9f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7458f9f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7458f9f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7458f9ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7458d9ee83 <unavailable> + 188035

    6    tmpe35zcbhp                        0x0000562487f1adab <unavailable> + 7595

    7    tmpe35zcbhp                        0x0000562487f1a47d <unavailable> + 5245

    8    libc.so.6                          0x00002b7459494460 __libc_start_main +
    245

    9    tmpe35zcbhp                        0x0000562487f1a189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var left = 0\n    var right = array.count\
    \ - 1\n    while left < right {\n        if array[left] % 2 == 0 {\n         \
    \   while array[right] % 2 == 0 && left < right {\n                right -= 1\n\
    \            }\n            result.swapAt(left, right)\n        }\n        left\
    \ += 1\n    }\n    for i in 0..<result.count {\n        if result[i] % 2 == 0\
    \ {\n            result[i...].sort()\n            break\n        }\n    }\n  \
    \  for i in (0..<result.count).reversed() {\n        if result[i] % 2 == 1 {\n\
    \            result[0...i].sort(by: >)\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpucg4dxep/tmpucg4dxep.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af54e195c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af54de8cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af54de8c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af54de8b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucg4dxep                        0x000056356165dec6 <unavailable> + 7878

    5    libc.so.6                          0x00002af54e381460 __libc_start_main +
    245

    6    tmpucg4dxep                        0x000056356165d8a9 <unavailable> + 6313

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result.append(even[0])\n        \
    \    even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4ej09uv1/tmp4ej09uv1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c4d57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c4a4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c4a4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c4a4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ej09uv1                        0x000055e2cc49bc16 <unavailable> + 7190

    5    libc.so.6                          0x00002b26c4f43460 __libc_start_main +
    245

    6    tmp4ej09uv1                        0x000055e2cc49b5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result.append(even[0])\n        \
    \    even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4ej09uv1/tmp4ej09uv1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c4d57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c4a4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c4a4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c4a4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ej09uv1                        0x000055e2cc49bc16 <unavailable> + 7190

    5    libc.so.6                          0x00002b26c4f43460 __libc_start_main +
    245

    6    tmp4ej09uv1                        0x000055e2cc49b5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            even.append(array[i])\n\
    \        } else {\n            odd.append(array[i])\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n    \
    \    even = even.reversed()\n    }\n    var j = 0\n    var k = 0\n    for i in\
    \ 0..<array.count {\n        if array[i] % 2 == 0 {\n            result[i] = even[j]\n\
    \            j += 1\n        } else {\n            result[i] = odd[k]\n      \
    \      k += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cd0730c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cd0427561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8cd0427286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8cd042713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8cd0426bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8cd0226e83 <unavailable> + 188035

    6    tmpcc5ejdps                        0x0000558d7493940e <unavailable> + 9230

    7    tmpcc5ejdps                        0x0000558d7493877d <unavailable> + 6013

    8    libc.so.6                          0x00002b8cd091c460 __libc_start_main +
    245

    9    tmpcc5ejdps                        0x0000558d74938489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            even.append(array[i])\n\
    \        } else {\n            odd.append(array[i])\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n    \
    \    even = even.reversed()\n    }\n    var index = 0\n    for i in 0..<array.count\
    \ {\n        if array[i] % 2 == 0 {\n            result[i] = even[index]\n   \
    \         index += 1\n        } else {\n            result[i] = odd[index]\n \
    \           index += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac334614c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac33430b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac33430b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac33430b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac33430abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac33410ae83 <unavailable> + 188035

    6    tmpcn7kuhjd                        0x00005609c84b53fe <unavailable> + 9214

    7    tmpcn7kuhjd                        0x00005609c84b477d <unavailable> + 6013

    8    libc.so.6                          0x00002ac334800460 __libc_start_main +
    245

    9    tmpcn7kuhjd                        0x00005609c84b4489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if array.first!\
    \ + array.last! % 2 == 0 {\n        evenArray.reverse()\n    }\n    for i in 0..<array.count\
    \ {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp2g8loepl/tmp2g8loepl.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b605ed91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b605ea88561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b605ea88286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b605ea8813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b605ea87bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2g8loepl                        0x0000560f024ce615 <unavailable> + 9749

    6    tmp2g8loepl                        0x0000560f024cd8fd <unavailable> + 6397

    7    libc.so.6                          0x00002b605ef7d460 __libc_start_main +
    245

    8    tmp2g8loepl                        0x0000560f024cd609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    while i < j {\n        if (array[i] + array[j]) % 2 == 0 {\n        \
    \    result[i] = array[j]\n            result[j] = array[i]\n            i +=\
    \ 1\n            j -= 1\n        } else {\n            i += 1\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpormitlsd/tmpormitlsd.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5d8f81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5d8c78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5d8c78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5d8c777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpormitlsd                        0x0000561d30b1d786 <unavailable> + 6022

    5    libc.so.6                          0x00002ac5d916d460 __libc_start_main +
    245

    6    tmpormitlsd                        0x0000561d30b1d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            even.append(array[i])\n\
    \        } else {\n            odd.append(array[i])\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n    \
    \    even = even.reversed()\n    }\n    var index = 0\n    for i in 0..<array.count\
    \ {\n        if array[i] % 2 == 0 {\n            result[i] = even[index]\n   \
    \         index += 1\n        } else {\n            result[i] = odd[index]\n \
    \           index += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac334614c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac33430b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac33430b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac33430b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac33430abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac33410ae83 <unavailable> + 188035

    6    tmpcn7kuhjd                        0x00005609c84b53fe <unavailable> + 9214

    7    tmpcn7kuhjd                        0x00005609c84b477d <unavailable> + 6013

    8    libc.so.6                          0x00002ac334800460 __libc_start_main +
    245

    9    tmpcn7kuhjd                        0x00005609c84b4489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    var temp = 0\n    while i < j {\n        if array[i] % 2 == 0 {\n   \
    \         if array[j] % 2 != 0 {\n                temp = array[i]\n          \
    \      array[i] = array[j]\n                array[j] = temp\n                i\
    \ += 1\n                j -= 1\n            } else {\n                j -= 1\n\
    \            }\n        } else {\n            i += 1\n        }\n    }\n    if\
    \ array.count % 2 == 0 {\n        i = 0\n        j = array.count - 1\n       \
    \ while i < j {\n            temp = array[i]\n            array[i] = array[j]\n\
    \            array[j] = temp\n            i += 1\n            j -= 1\n       \
    \ }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpw0jskpy8/tmpw0jskpy8.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2524ad9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25247d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25247d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25247cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw0jskpy8                        0x0000556bda816786 <unavailable> + 6022

    5    libc.so.6                          0x00002b2524cc5460 __libc_start_main +
    245

    6    tmpw0jskpy8                        0x0000556bda816169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if array.first!\
    \ + array.last! % 2 == 0 {\n        evenArray.reverse()\n    }\n    for i in 0..<array.count\
    \ {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp2g8loepl/tmp2g8loepl.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b605ed91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b605ea88561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b605ea88286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b605ea8813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b605ea87bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2g8loepl                        0x0000560f024ce615 <unavailable> + 9749

    6    tmp2g8loepl                        0x0000560f024cd8fd <unavailable> + 6397

    7    libc.so.6                          0x00002b605ef7d460 __libc_start_main +
    245

    8    tmp2g8loepl                        0x0000560f024cd609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    while i < j {\n        if array[i] % 2 == 0 {\n            if array[j]\
    \ % 2 == 1 {\n                array.swapAt(i, j)\n                i += 1\n   \
    \             j -= 1\n            } else {\n                j -= 1\n         \
    \   }\n        } else {\n            i += 1\n        }\n    }\n    if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n        array.sort(by: >)\n    } else\
    \ {\n        array.sort(by: <)\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b236178cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2361483561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2361483286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b236148313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2361482bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2361282e83 <unavailable> + 188035

    6    tmpg9ev03td                        0x0000564fd95a9171 <unavailable> + 8561

    7    tmpg9ev03td                        0x0000564fd95a851d <unavailable> + 5405

    8    libc.so.6                          0x00002b2361978460 __libc_start_main +
    245

    9    tmpg9ev03td                        0x0000564fd95a8229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var first = 0\n    var last = array.count\
    \ - 1\n    while first < last {\n        if result[first] % 2 == 0 && result[last]\
    \ % 2 == 1 {\n            result.swapAt(first, last)\n            first += 1\n\
    \            last -= 1\n        } else if result[first] % 2 == 1 && result[last]\
    \ % 2 == 0 {\n            first += 1\n            last -= 1\n        } else if\
    \ result[first] % 2 == 0 && result[last] % 2 == 0 {\n            last -= 1\n \
    \       } else {\n            first += 1\n        }\n    }\n    if result.count\
    \ % 2 == 0 {\n        for i in 0..<result.count / 2 {\n            if result[i]\
    \ > result[result.count - 1 - i] {\n                result.swapAt(i, result.count\
    \ - 1 - i)\n            }\n        }\n    } else {\n        for i in 0..<result.count\
    \ / 2 {\n            if result[i] < result[result.count - 1 - i] {\n         \
    \       result.swapAt(i, result.count - 1 - i)\n            }\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpe9czyorx/tmpe9czyorx.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6f2070c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6f1d67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6f1d67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6f1d667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9czyorx                        0x000055c8bf47c8c6 <unavailable> + 6342

    5    libc.so.6                          0x00002af6f225c460 __libc_start_main +
    245

    6    tmpe9czyorx                        0x000055c8bf47c2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var newArray = array\n    var left = 0\n    var right = array.count\
    \ - 1\n    while left < right {\n        if (array[left] + array[right]) % 2 ==\
    \ 0 {\n            newArray[left] = array[right]\n            newArray[right]\
    \ = array[left]\n            left += 1\n            right -= 1\n        } else\
    \ {\n            left += 1\n        }\n    }\n    return newArray\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmptzuy4996/tmptzuy4996.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b502edb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b502eaabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b502eaab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b502eaaa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptzuy4996                        0x00005613b9a74786 <unavailable> + 6022

    5    libc.so.6                          0x00002b502efa0460 __libc_start_main +
    245

    6    tmptzuy4996                        0x00005613b9a74169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = result.count\
    \ - 1\n    while i < j {\n        if (result[i] + result[j]) % 2 == 0 {\n    \
    \        let temp = result[i]\n            result[i] = result[j]\n           \
    \ result[j] = temp\n            i += 1\n            j -= 1\n        } else {\n\
    \            i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpnjpwna5y/tmpnjpwna5y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae588bccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5888c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5888c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5888c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnjpwna5y                        0x000056324c894786 <unavailable> + 6022

    5    libc.so.6                          0x00002ae588db8460 __libc_start_main +
    245

    6    tmpnjpwna5y                        0x000056324c894169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            even.append(array[i])\n\
    \        } else {\n            odd.append(array[i])\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n    \
    \    even = even.reversed()\n    }\n    var j = 0\n    var k = 0\n    for i in\
    \ 0..<array.count {\n        if array[i] % 2 == 0 {\n            result[i] = even[j]\n\
    \            j += 1\n        } else {\n            result[i] = odd[k]\n      \
    \      k += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cd0730c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cd0427561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8cd0427286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8cd042713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8cd0426bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8cd0226e83 <unavailable> + 188035

    6    tmpcc5ejdps                        0x0000558d7493940e <unavailable> + 9230

    7    tmpcc5ejdps                        0x0000558d7493877d <unavailable> + 6013

    8    libc.so.6                          0x00002b8cd091c460 __libc_start_main +
    245

    9    tmpcc5ejdps                        0x0000558d74938489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if (oddArray.count\
    \ + evenArray.count) % 2 == 0 {\n        evenArray.reverse()\n    }\n    for i\
    \ in 0..<array.count {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpbs_ob9sp/tmpbs_ob9sp.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba659adfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6597d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6597d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6597d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbs_ob9sp                        0x00005590510a1b26 <unavailable> + 6950

    5    libc.so.6                          0x00002ba659ccb460 __libc_start_main +
    245

    6    tmpbs_ob9sp                        0x00005590510a1509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            even.append(array[i])\n\
    \        } else {\n            odd.append(array[i])\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    if array.count % 2 == 0 {\n        for i in 0..<odd.count\
    \ {\n            result[i * 2] = odd[i]\n        }\n        for i in 0..<even.count\
    \ {\n            result[i * 2 + 1] = even[i]\n        }\n    } else {\n      \
    \  for i in 0..<odd.count {\n            result[i * 2] = odd[i]\n        }\n \
    \       for i in 0..<even.count {\n            result[i * 2 + 1] = even[i]\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp3_wyjjd5/tmp3_wyjjd5.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73f9f6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73f9c62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73f9c62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73f9c617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_wyjjd5                        0x000055b41fde7a46 <unavailable> + 6726

    5    libc.so.6                          0x00002b73fa157460 __libc_start_main +
    245

    6    tmp3_wyjjd5                        0x000055b41fde7429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    var temp = 0\n    while i < j {\n        if (array[i] + array[j]) % 2\
    \ == 0 {\n            temp = result[i]\n            result[i] = result[j]\n  \
    \          result[j] = temp\n            i += 1\n            j -= 1\n        }\
    \ else {\n            i += 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd0xqfc6v/tmpd0xqfc6v.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16bfd63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16bfa5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16bfa5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16bfa597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0xqfc6v                        0x0000557f8144a786 <unavailable> + 6022

    5    libc.so.6                          0x00002b16bff4f460 __libc_start_main +
    245

    6    tmpd0xqfc6v                        0x0000557f8144a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    while i < j {\n        if (array[i] + array[j]) % 2 == 0 {\n        \
    \    result[i] = array[j]\n            result[j] = array[i]\n            i +=\
    \ 1\n            j -= 1\n        } else {\n            i += 1\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpormitlsd/tmpormitlsd.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5d8f81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5d8c78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5d8c78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5d8c777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpormitlsd                        0x0000561d30b1d786 <unavailable> + 6022

    5    libc.so.6                          0x00002ac5d916d460 __libc_start_main +
    245

    6    tmpormitlsd                        0x0000561d30b1d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result.append(even[0])\n        \
    \    even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4ej09uv1/tmp4ej09uv1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c4d57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c4a4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c4a4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c4a4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ej09uv1                        0x000055e2cc49bc16 <unavailable> + 7190

    5    libc.so.6                          0x00002b26c4f43460 __libc_start_main +
    245

    6    tmp4ej09uv1                        0x000055e2cc49b5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result.append(even[0])\n        \
    \    even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4ej09uv1/tmp4ej09uv1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c4d57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c4a4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c4a4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c4a4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ej09uv1                        0x000055e2cc49bc16 <unavailable> + 7190

    5    libc.so.6                          0x00002b26c4f43460 __libc_start_main +
    245

    6    tmp4ej09uv1                        0x000055e2cc49b5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if array.first!\
    \ + array.last! % 2 == 0 {\n        evenArray.reverse()\n    }\n    for i in 0..<array.count\
    \ {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp2g8loepl/tmp2g8loepl.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b605ed91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b605ea88561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b605ea88286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b605ea8813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b605ea87bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2g8loepl                        0x0000560f024ce615 <unavailable> + 9749

    6    tmp2g8loepl                        0x0000560f024cd8fd <unavailable> + 6397

    7    libc.so.6                          0x00002b605ef7d460 __libc_start_main +
    245

    8    tmp2g8loepl                        0x0000560f024cd609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            even.append(array[i])\n\
    \        } else {\n            odd.append(array[i])\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    if array.first! + array.last! % 2 == 0 {\n        even =\
    \ even.reversed()\n    }\n    var result = [Int]()\n    var oddIndex = 0\n   \
    \ var evenIndex = 0\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            result.append(even[evenIndex])\n            evenIndex += 1\n\
    \        } else {\n            result.append(odd[oddIndex])\n            oddIndex\
    \ += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_lpy73kk/tmp_lpy73kk.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ab75abf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab75a8e9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab75a8e9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab75a8e913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab75a8e8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp_lpy73kk                        0x000055afcdceb6c9 <unavailable> + 9929

    6    tmp_lpy73kk                        0x000055afcdcea85d <unavailable> + 6237

    7    libc.so.6                          0x00002ab75adde460 __libc_start_main +
    245

    8    tmp_lpy73kk                        0x000055afcdcea569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if array.first!\
    \ + array.last! % 2 == 0 {\n        evenArray.reverse()\n    }\n    for i in 0..<array.count\
    \ {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp2g8loepl/tmp2g8loepl.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b605ed91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b605ea88561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b605ea88286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b605ea8813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b605ea87bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2g8loepl                        0x0000560f024ce615 <unavailable> + 9749

    6    tmp2g8loepl                        0x0000560f024cd8fd <unavailable> + 6397

    7    libc.so.6                          0x00002b605ef7d460 __libc_start_main +
    245

    8    tmp2g8loepl                        0x0000560f024cd609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    var isOdd = false\n    if (array[0] + array[array.count - 1]) % 2 ==\
    \ 1 {\n        isOdd = true\n    }\n    while i < j {\n        if isOdd {\n  \
    \          if array[i] % 2 == 0 {\n                while array[j] % 2 == 0 {\n\
    \                    j -= 1\n                }\n                result[i] = array[j]\n\
    \                result[j] = array[i]\n                j -= 1\n            }\n\
    \        } else {\n            if array[i] % 2 == 1 {\n                while array[j]\
    \ % 2 == 1 {\n                    j -= 1\n                }\n                result[i]\
    \ = array[j]\n                result[j] = array[i]\n                j -= 1\n \
    \           }\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b59fdf58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59fdc4f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b59fdc4f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b59fdc4f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b59fdc4ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b59fda4ee83 <unavailable> + 188035

    6    tmp6thfc98v                        0x00005559ab7dfe00 <unavailable> + 7680

    7    tmp6thfc98v                        0x00005559ab7df45d <unavailable> + 5213

    8    libc.so.6                          0x00002b59fe144460 __libc_start_main +
    245

    9    tmp6thfc98v                        0x00005559ab7df169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var start = 0\n    var end = array.count\
    \ - 1\n    while start < end {\n        if (array[start] + array[end]) % 2 ==\
    \ 0 {\n            result[start] = array[end]\n            start += 1\n      \
    \  } else {\n            result[end] = array[start]\n            end -= 1\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpggxal4kx/tmpggxal4kx.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab49a88ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab49a585b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab49a585988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab49a5847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpggxal4kx                        0x0000555a4b19c786 <unavailable> + 6022

    5    libc.so.6                          0x00002ab49aa7a460 __libc_start_main +
    245

    6    tmpggxal4kx                        0x0000555a4b19c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            even.append(array[i])\n\
    \        } else {\n            odd.append(array[i])\n        }\n    }\n    odd.sort(by:\
    \ >)\n    even.sort(by: <)\n    for i in 0..<array.count {\n        if array[i]\
    \ % 2 == 0 {\n            array[i] = even.removeFirst()\n        } else {\n  \
    \          array[i] = odd.removeFirst()\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpjiuv7z1a/tmpjiuv7z1a.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b349847ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3498175b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3498175988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34981747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjiuv7z1a                        0x0000557d47944a46 <unavailable> + 6726

    5    libc.so.6                          0x00002b349866a460 __libc_start_main +
    245

    6    tmpjiuv7z1a                        0x0000557d47944429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var start = 0\n    var end = array.count\
    \ - 1\n    while start < end {\n        if (array[start] + array[end]) % 2 ==\
    \ 0 {\n            result[start] = array[end]\n            start += 1\n      \
    \  } else {\n            result[end] = array[start]\n            end -= 1\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpggxal4kx/tmpggxal4kx.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab49a88ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab49a585b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab49a585988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab49a5847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpggxal4kx                        0x0000555a4b19c786 <unavailable> + 6022

    5    libc.so.6                          0x00002ab49aa7a460 __libc_start_main +
    245

    6    tmpggxal4kx                        0x0000555a4b19c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if array.count\
    \ % 2 == 0 {\n        evenArray.reverse()\n    } else {\n        oddArray.reverse()\n\
    \    }\n    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n     \
    \       result.append(evenArray.removeFirst())\n        } else {\n           \
    \ result.append(oddArray.removeFirst())\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpoyvnod8a/tmpoyvnod8a.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a5005ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a4fd55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a4fd55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a4fd547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoyvnod8a                        0x000055ddd7cbcb26 <unavailable> + 6950

    5    libc.so.6                          0x00002b9a5024a460 __libc_start_main +
    245

    6    tmpoyvnod8a                        0x000055ddd7cbc509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    while i < j {\n        if (array[i] + array[j]) % 2 == 0 {\n        \
    \    result[i] = array[j]\n            result[j] = array[i]\n            i +=\
    \ 1\n            j -= 1\n        } else {\n            i += 1\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpormitlsd/tmpormitlsd.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5d8f81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5d8c78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5d8c78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5d8c777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpormitlsd                        0x0000561d30b1d786 <unavailable> + 6022

    5    libc.so.6                          0x00002ac5d916d460 __libc_start_main +
    245

    6    tmpormitlsd                        0x0000561d30b1d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var start = 0\n    var end = array.count\
    \ - 1\n    var isAscending = true\n    if (array[start] + array[end]) % 2 == 0\
    \ {\n        isAscending = false\n    }\n    while start < end {\n        if isAscending\
    \ {\n            if array[start] > array[end] {\n                result[start]\
    \ = array[end]\n                result[end] = array[start]\n            }\n  \
    \      } else {\n            if array[start] < array[end] {\n                result[start]\
    \ = array[end]\n                result[end] = array[start]\n            }\n  \
    \      }\n        start += 1\n        end -= 1\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba87193cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba871633561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba871633286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba87163313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba871632bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba871432e83 <unavailable> + 188035

    6    tmpu0xxh4fu                        0x000055da6df05e00 <unavailable> + 7680

    7    tmpu0xxh4fu                        0x000055da6df0545d <unavailable> + 5213

    8    libc.so.6                          0x00002ba871b28460 __libc_start_main +
    245

    9    tmpu0xxh4fu                        0x000055da6df05169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result.append(even[0])\n        \
    \    even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4ej09uv1/tmp4ej09uv1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c4d57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c4a4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c4a4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c4a4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ej09uv1                        0x000055e2cc49bc16 <unavailable> + 7190

    5    libc.so.6                          0x00002b26c4f43460 __libc_start_main +
    245

    6    tmp4ej09uv1                        0x000055e2cc49b5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    for i in 0..<array.count\
    \ {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpzz289_g6/tmpzz289_g6.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c6f365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c6f05cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c6f05c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c6f05b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzz289_g6                        0x000056057be3ea86 <unavailable> + 6790

    5    libc.so.6                          0x00002b7c6f551460 __libc_start_main +
    245

    6    tmpzz289_g6                        0x000056057be3e469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var start = 0\n    var end = array.count\
    \ - 1\n    while start < end {\n        if (array[start] + array[end]) % 2 ==\
    \ 0 {\n            result[start] = array[end]\n            start += 1\n      \
    \  } else {\n            result[end] = array[start]\n            end -= 1\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpggxal4kx/tmpggxal4kx.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab49a88ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab49a585b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab49a585988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab49a5847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpggxal4kx                        0x0000555a4b19c786 <unavailable> + 6022

    5    libc.so.6                          0x00002ab49aa7a460 __libc_start_main +
    245

    6    tmpggxal4kx                        0x0000555a4b19c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    evenArray.reverse()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpwhih9_tt/tmpwhih9_tt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75fa38cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75fa083b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75fa083988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75fa0827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwhih9_tt                        0x0000559caf8a4b26 <unavailable> + 6950

    5    libc.so.6                          0x00002b75fa578460 __libc_start_main +
    245

    6    tmpwhih9_tt                        0x0000559caf8a4509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sortedArray = array\n    var oddArray = [Int]()\n    var\
    \ evenArray = [Int]()\n    for i in 0..<array.count {\n        if i % 2 == 0 {\n\
    \            oddArray.append(array[i])\n        } else {\n            evenArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    evenArray.reverse()\n\
    \    for i in 0..<array.count {\n        if i % 2 == 0 {\n            sortedArray[i]\
    \ = oddArray[i/2]\n        } else {\n            sortedArray[i] = evenArray[i/2]\n\
    \        }\n    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp48s8t1t7/tmp48s8t1t7.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaea266c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adae9f5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adae9f5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adae9f5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp48s8t1t7                        0x000055dcf158bae6 <unavailable> + 6886

    5    libc.so.6                          0x00002adaea452460 __libc_start_main +
    245

    6    tmp48s8t1t7                        0x000055dcf158b4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    if array.first! + array.last! % 2 == 0 {\n        even =\
    \ even.reversed()\n    }\n    for i in 0..<array.count {\n        if array[i]\
    \ % 2 == 0 {\n            result.append(even.removeFirst())\n        } else {\n\
    \            result.append(odd.removeFirst())\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpm0oysmvx/tmpm0oysmvx.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fbe12cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fbde23561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6fbde23286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6fbde2313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6fbde22bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm0oysmvx                        0x0000556fcea9c695 <unavailable> + 9877

    6    tmpm0oysmvx                        0x0000556fcea9ba2d <unavailable> + 6701

    7    libc.so.6                          0x00002b6fbe318460 __libc_start_main +
    245

    8    tmpm0oysmvx                        0x0000556fcea9b739 <unavailable> + 5945

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            even.append(array[i])\n\
    \        } else {\n            odd.append(array[i])\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    if array.count % 2 == 0 {\n        even = even.reversed()\n\
    \    } else {\n        odd = odd.reversed()\n    }\n    for i in 0..<array.count\
    \ {\n        if array[i] % 2 == 0 {\n            array[i] = even.removeFirst()\n\
    \        } else {\n            array[i] = odd.removeFirst()\n        }\n    }\n\
    \    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp470fysuk/tmp470fysuk.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef63910c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef63607b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef63607988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef636067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp470fysuk                        0x00005587d6b13b46 <unavailable> + 6982

    5    libc.so.6                          0x00002aef63afc460 __libc_start_main +
    245

    6    tmp470fysuk                        0x00005587d6b13529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            even.append(array[i])\n\
    \        } else {\n            odd.append(array[i])\n        }\n    }\n    odd.sort(by:\
    \ >)\n    even.sort(by: <)\n    var index = 0\n    for i in 0..<odd.count {\n\
    \        result[index] = odd[i]\n        index += 1\n    }\n    for i in 0..<even.count\
    \ {\n        result[index] = even[i]\n        index += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp2efcwgk1/tmp2efcwgk1.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7c1c7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7c1973b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7c1973988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7c19727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2efcwgk1                        0x0000564576042996 <unavailable> + 6550

    5    libc.so.6                          0x00002ab7c1e68460 __libc_start_main +
    245

    6    tmp2efcwgk1                        0x0000564576042379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sortedArray = array\n    var oddArray = [Int]()\n    var\
    \ evenArray = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2\
    \ == 0 {\n            evenArray.append(array[i])\n        } else {\n         \
    \   oddArray.append(array[i])\n        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            sortedArray[i]\
    \ = evenArray.removeFirst()\n        } else {\n            sortedArray[i] = oddArray.removeFirst()\n\
    \        }\n    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp1liybsyt/tmp1liybsyt.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40ed867c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40ed55eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40ed55e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40ed55d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1liybsyt                        0x000055d3c102aae6 <unavailable> + 6886

    5    libc.so.6                          0x00002b40eda53460 __libc_start_main +
    245

    6    tmp1liybsyt                        0x000055d3c102a4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result.append(even[0])\n        \
    \    even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4ej09uv1/tmp4ej09uv1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c4d57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c4a4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c4a4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c4a4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ej09uv1                        0x000055e2cc49bc16 <unavailable> + 7190

    5    libc.so.6                          0x00002b26c4f43460 __libc_start_main +
    245

    6    tmp4ej09uv1                        0x000055e2cc49b5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    evenArray.reverse()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpwhih9_tt/tmpwhih9_tt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75fa38cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75fa083b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75fa083988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75fa0827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwhih9_tt                        0x0000559caf8a4b26 <unavailable> + 6950

    5    libc.so.6                          0x00002b75fa578460 __libc_start_main +
    245

    6    tmpwhih9_tt                        0x0000559caf8a4509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort(by:\
    \ >)\n    even.sort(by: <)\n    for i in 0..<array.count {\n        if array[i]\
    \ % 2 == 0 {\n            result.append(even.removeFirst())\n        } else {\n\
    \            result.append(odd.removeFirst())\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaf2rzjdv/tmpaf2rzjdv.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c0eb51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c0e848b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c0e848988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c0e8477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaf2rzjdv                        0x00005645d25c8b56 <unavailable> + 6998

    5    libc.so.6                          0x00002b4c0ed3d460 __libc_start_main +
    245

    6    tmpaf2rzjdv                        0x00005645d25c8539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var start = 0\n    var end = array.count\
    \ - 1\n    while start < end {\n        if array[start] % 2 == 0 && array[end]\
    \ % 2 == 1 {\n            result[start] = array[end]\n            result[end]\
    \ = array[start]\n            start += 1\n            end -= 1\n        } else\
    \ if array[start] % 2 == 1 && array[end] % 2 == 0 {\n            start += 1\n\
    \            end -= 1\n        } else if array[start] % 2 == 0 && array[end] %\
    \ 2 == 0 {\n            end -= 1\n        } else {\n            start += 1\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpcjmyvv4o/tmpcjmyvv4o.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab855461c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab855158b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab855158988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8551577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcjmyvv4o                        0x000055c91fdf3786 <unavailable> + 6022

    5    libc.so.6                          0x00002ab85564d460 __libc_start_main +
    245

    6    tmpcjmyvv4o                        0x000055c91fdf3169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sortedArray = array\n    var isEven = false\n    if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n        isEven = true\n    }\n    sortedArray.sort()\n\
    \    if isEven {\n        sortedArray.reverse()\n    }\n    return sortedArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b60d6937c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60d662e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b60d662e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b60d662e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b60d662dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b60d642de83 <unavailable> + 188035

    6    tmpl8x_qb_u                        0x000055c8f66a3f03 <unavailable> + 7939

    7    tmpl8x_qb_u                        0x000055c8f66a35bd <unavailable> + 5565

    8    libc.so.6                          0x00002b60d6b23460 __libc_start_main +
    245

    9    tmpl8x_qb_u                        0x000055c8f66a32c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n        evenArray.reverse()\n    }\n \
    \   for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b62ae2a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62adf97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b62adf97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b62adf9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b62adf96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b62add96e83 <unavailable> + 188035

    6    tmp3ew2_d2g                        0x000055a081f19467 <unavailable> + 9319

    7    tmp3ew2_d2g                        0x000055a081f187fd <unavailable> + 6141

    8    libc.so.6                          0x00002b62ae48c460 __libc_start_main +
    245

    9    tmp3ew2_d2g                        0x000055a081f18509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            even.append(array[i])\n\
    \        } else {\n            odd.append(array[i])\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    if array.count % 2 == 0 {\n        even = even.reversed()\n\
    \    } else {\n        odd = odd.reversed()\n    }\n    for i in 0..<array.count\
    \ {\n        if array[i] % 2 == 0 {\n            array[i] = even.removeFirst()\n\
    \        } else {\n            array[i] = odd.removeFirst()\n        }\n    }\n\
    \    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp470fysuk/tmp470fysuk.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef63910c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef63607b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef63607988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef636067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp470fysuk                        0x00005587d6b13b46 <unavailable> + 6982

    5    libc.so.6                          0x00002aef63afc460 __libc_start_main +
    245

    6    tmp470fysuk                        0x00005587d6b13529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for num in array {\n        if num % 2 == 0 {\n      \
    \      evenArray.append(num)\n        } else {\n            oddArray.append(num)\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if array.first!\
    \ + array.last! % 2 == 0 {\n        evenArray.reverse()\n    }\n    for num in\
    \ array {\n        if num % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp2ynejj7j/tmp2ynejj7j.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7a172dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7a1424561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab7a1424286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab7a142413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab7a1423bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2ynejj7j                        0x00005648837b64ec <unavailable> + 9452

    6    tmp2ynejj7j                        0x00005648837b587d <unavailable> + 6269

    7    libc.so.6                          0x00002ab7a1919460 __libc_start_main +
    245

    8    tmp2ynejj7j                        0x00005648837b5589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result.append(even[0])\n        \
    \    even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4ej09uv1/tmp4ej09uv1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c4d57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c4a4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c4a4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c4a4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ej09uv1                        0x000055e2cc49bc16 <unavailable> + 7190

    5    libc.so.6                          0x00002b26c4f43460 __libc_start_main +
    245

    6    tmp4ej09uv1                        0x000055e2cc49b5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = result.count\
    \ - 1\n    while i < j {\n        if (result[i] + result[j]) % 2 == 0 {\n    \
    \        result.swapAt(i, j)\n            i += 1\n            j -= 1\n       \
    \ } else {\n            i += 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp77b0rsrk/tmp77b0rsrk.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03bad8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03baa82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03baa82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03baa817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp77b0rsrk                        0x000055993bd107c6 <unavailable> + 6086

    5    libc.so.6                          0x00002b03baf77460 __libc_start_main +
    245

    6    tmp77b0rsrk                        0x000055993bd101a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    for i in array\
    \ {\n        if i % 2 == 0 {\n            even.append(i)\n        } else {\n \
    \           odd.append(i)\n        }\n    }\n    odd.sort()\n    even.sort()\n\
    \    even = even.reversed()\n    var result = [Int]()\n    for i in 0..<array.count\
    \ {\n        if array[i] % 2 == 0 {\n            result.append(even[0])\n    \
    \        even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpop_itlbq/tmpop_itlbq.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae676dabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae676aa2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae676aa2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae676aa17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpop_itlbq                        0x000055d8e7f7cc16 <unavailable> + 7190

    5    libc.so.6                          0x00002ae676f97460 __libc_start_main +
    245

    6    tmpop_itlbq                        0x000055d8e7f7c5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var newArray = array\n    var firstIndex = 0\n    var lastIndex\
    \ = array.count - 1\n    while firstIndex < lastIndex {\n        if (array[firstIndex]\
    \ + array[lastIndex]) % 2 == 0 {\n            newArray[firstIndex] = array[lastIndex]\n\
    \            newArray[lastIndex] = array[firstIndex]\n            firstIndex +=\
    \ 1\n            lastIndex -= 1\n        } else {\n            firstIndex += 1\n\
    \        }\n    }\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpndw4rnap/tmpndw4rnap.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8708e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8705deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8705de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8705dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpndw4rnap                        0x000055647e1cb786 <unavailable> + 6022

    5    libc.so.6                          0x00002ae870ad3460 __libc_start_main +
    245

    6    tmpndw4rnap                        0x000055647e1cb169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            even.append(array[i])\n\
    \        } else {\n            odd.append(array[i])\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    for i in 0..<array.count {\n        if array[i] % 2 == 0\
    \ {\n            array[i] = even.removeFirst()\n        } else {\n           \
    \ array[i] = odd.removeFirst()\n        }\n    }\n    return array\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp9z2by0gd/tmp9z2by0gd.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d16835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d1652cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d1652c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d1652b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9z2by0gd                        0x0000561881145ae6 <unavailable> + 6886

    5    libc.so.6                          0x00002b7d16a21460 __libc_start_main +
    245

    6    tmp9z2by0gd                        0x00005618811454c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            even.append(array[i])\n\
    \        } else {\n            odd.append(array[i])\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n    \
    \    even.reverse()\n    }\n    var result = [Int]()\n    var oddIndex = 0\n \
    \   var evenIndex = 0\n    for i in 0..<array.count {\n        if array[i] % 2\
    \ == 0 {\n            result.append(even[evenIndex])\n            evenIndex +=\
    \ 1\n        } else {\n            result.append(odd[oddIndex])\n            oddIndex\
    \ += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f37353c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f3704a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5f3704a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5f3704a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5f37049bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5f36e49e83 <unavailable> + 188035

    6    tmplzonnfm8                        0x000055a9344be508 <unavailable> + 9480

    7    tmplzonnfm8                        0x000055a9344bd75d <unavailable> + 5981

    8    libc.so.6                          0x00002b5f3753f460 __libc_start_main +
    245

    9    tmplzonnfm8                        0x000055a9344bd469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sortedArray = array\n    var i = 0\n    var j = array.count\
    \ - 1\n    var isOdd = false\n    if (array[0] + array[array.count - 1]) % 2 ==\
    \ 1 {\n        isOdd = true\n    }\n    while i < j {\n        if isOdd {\n  \
    \          if sortedArray[i] % 2 == 0 {\n                i += 1\n            }\
    \ else if sortedArray[j] % 2 == 1 {\n                j -= 1\n            } else\
    \ {\n                let temp = sortedArray[i]\n                sortedArray[i]\
    \ = sortedArray[j]\n                sortedArray[j] = temp\n                i +=\
    \ 1\n                j -= 1\n            }\n        } else {\n            if sortedArray[i]\
    \ % 2 == 1 {\n                i += 1\n            } else if sortedArray[j] % 2\
    \ == 0 {\n                j -= 1\n            } else {\n                let temp\
    \ = sortedArray[i]\n                sortedArray[i] = sortedArray[j]\n        \
    \        sortedArray[j] = temp\n                i += 1\n                j -= 1\n\
    \            }\n        }\n    }\n    return sortedArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab29e42bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab29e122561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab29e122286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab29e12213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab29e121bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab29df21e83 <unavailable> + 188035

    6    tmp80xcddzk                        0x0000559284ed7e23 <unavailable> + 7715

    7    tmp80xcddzk                        0x0000559284ed745d <unavailable> + 5213

    8    libc.so.6                          0x00002ab29e617460 __libc_start_main +
    245

    9    tmp80xcddzk                        0x0000559284ed7169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result.append(even[0])\n        \
    \    even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4ej09uv1/tmp4ej09uv1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c4d57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c4a4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c4a4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c4a4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ej09uv1                        0x000055e2cc49bc16 <unavailable> + 7190

    5    libc.so.6                          0x00002b26c4f43460 __libc_start_main +
    245

    6    tmp4ej09uv1                        0x000055e2cc49b5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if array.count\
    \ % 2 == 0 {\n        evenArray.reverse()\n    } else {\n        oddArray.reverse()\n\
    \    }\n    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n     \
    \       result.append(evenArray.removeFirst())\n        } else {\n           \
    \ result.append(oddArray.removeFirst())\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpoyvnod8a/tmpoyvnod8a.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a5005ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a4fd55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a4fd55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a4fd547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoyvnod8a                        0x000055ddd7cbcb26 <unavailable> + 6950

    5    libc.so.6                          0x00002b9a5024a460 __libc_start_main +
    245

    6    tmpoyvnod8a                        0x000055ddd7cbc509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    for i in array\
    \ {\n        if i % 2 == 0 {\n            even.append(i)\n        } else {\n \
    \           odd.append(i)\n        }\n    }\n    odd.sort(by: >)\n    even.sort(by:\
    \ <)\n    var result = [Int]()\n    for i in 0..<array.count {\n        if array[i]\
    \ % 2 == 0 {\n            result.append(even.removeFirst())\n        } else {\n\
    \            result.append(odd.removeFirst())\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp9dxo2axr/tmp9dxo2axr.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad45bb95c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad45b88cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad45b88c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad45b88b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9dxo2axr                        0x000055c5417e6b56 <unavailable> + 6998

    5    libc.so.6                          0x00002ad45bd81460 __libc_start_main +
    245

    6    tmp9dxo2axr                        0x000055c5417e6539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    while i < j {\n        if array[i] % 2 == 0 && array[j] % 2 == 1 {\n\
    \            array.swapAt(i, j)\n            i += 1\n            j -= 1\n    \
    \    } else if array[i] % 2 == 1 {\n            i += 1\n        } else if array[j]\
    \ % 2 == 0 {\n            j -= 1\n        }\n    }\n    if array.count % 2 ==\
    \ 0 {\n        for i in 0..<array.count / 2 {\n            if array[i] > array[array.count\
    \ - 1 - i] {\n                array.swapAt(i, array.count - 1 - i)\n         \
    \   }\n        }\n    } else {\n        for i in 0..<array.count / 2 {\n     \
    \       if array[i] < array[array.count - 1 - i] {\n                array.swapAt(i,\
    \ array.count - 1 - i)\n            }\n        }\n    }\n    return array\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpjjddibv1/tmpjjddibv1.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9678a44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b967873bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b967873b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b967873a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjddibv1                        0x0000558323bb08c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b9678c30460 __libc_start_main +
    245

    6    tmpjjddibv1                        0x0000558323bb02a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result.append(even[0])\n        \
    \    even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4ej09uv1/tmp4ej09uv1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c4d57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c4a4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c4a4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c4a4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ej09uv1                        0x000055e2cc49bc16 <unavailable> + 7190

    5    libc.so.6                          0x00002b26c4f43460 __libc_start_main +
    245

    6    tmp4ej09uv1                        0x000055e2cc49b5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    while i < result.count\
    \ {\n        if i == result.count - 1 {\n            break\n        }\n      \
    \  if (result[i] + result[result.count - 1]) % 2 == 0 {\n            let temp\
    \ = result[i]\n            result[i] = result[result.count - 1]\n            result[result.count\
    \ - 1] = temp\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpmgsi1ttl/tmpmgsi1ttl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acadf0e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acadedd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acadedd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acadedd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmgsi1ttl                        0x000055e975833786 <unavailable> + 6022

    5    libc.so.6                          0x00002acadf2cc460 __libc_start_main +
    245

    6    tmpmgsi1ttl                        0x000055e975833169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            even.append(array[i])\n\
    \        } else {\n            odd.append(array[i])\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    var index = 0\n    for i in\
    \ 0..<array.count {\n        if array[i] % 2 == 0 {\n            result[i] = even[index]\n\
    \            index += 1\n        } else {\n            result[i] = odd[index]\n\
    \            index += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f79c3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f79932561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9f79932286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9f7993213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9f79931bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9f79731e83 <unavailable> + 188035

    6    tmp6xqnbait                        0x00005555ef589660 <unavailable> + 9824

    7    tmp6xqnbait                        0x00005555ef58899f <unavailable> + 6559

    8    libc.so.6                          0x00002b9f79e27460 __libc_start_main +
    245

    9    tmp6xqnbait                        0x00005555ef588489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    for\
    \ i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            evenArray.append(array[i])\n\
    \        } else {\n            oddArray.append(array[i])\n        }\n    }\n \
    \   oddArray.sort()\n    evenArray.sort()\n    evenArray.reverse()\n    var result\
    \ = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n\
    \            result.append(evenArray[0])\n            evenArray.removeFirst()\n\
    \        } else {\n            result.append(oddArray[0])\n            oddArray.removeFirst()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp1ujfaihf/tmp1ujfaihf.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75131e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7512ee0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7512ee0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7512edf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ujfaihf                        0x000055e978532b26 <unavailable> + 6950

    5    libc.so.6                          0x00002b75133d5460 __libc_start_main +
    245

    6    tmp1ujfaihf                        0x000055e978532509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result.append(even[0])\n        \
    \    even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4ej09uv1/tmp4ej09uv1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c4d57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c4a4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c4a4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c4a4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ej09uv1                        0x000055e2cc49bc16 <unavailable> + 7190

    5    libc.so.6                          0x00002b26c4f43460 __libc_start_main +
    245

    6    tmp4ej09uv1                        0x000055e2cc49b5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if array.count\
    \ % 2 == 0 {\n        evenArray.reverse()\n    } else {\n        oddArray.reverse()\n\
    \    }\n    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n     \
    \       result.append(evenArray.removeFirst())\n        } else {\n           \
    \ result.append(oddArray.removeFirst())\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpoyvnod8a/tmpoyvnod8a.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a5005ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a4fd55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a4fd55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a4fd547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoyvnod8a                        0x000055ddd7cbcb26 <unavailable> + 6950

    5    libc.so.6                          0x00002b9a5024a460 __libc_start_main +
    245

    6    tmpoyvnod8a                        0x000055ddd7cbc509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result.append(even[0])\n        \
    \    even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4ej09uv1/tmp4ej09uv1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c4d57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c4a4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c4a4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c4a4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ej09uv1                        0x000055e2cc49bc16 <unavailable> + 7190

    5    libc.so.6                          0x00002b26c4f43460 __libc_start_main +
    245

    6    tmp4ej09uv1                        0x000055e2cc49b5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            even.append(array[i])\n\
    \        } else {\n            odd.append(array[i])\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    var index = 0\n    for i in 0..<odd.count {\n        result[index]\
    \ = odd[i]\n        index += 1\n    }\n    for i in 0..<even.count {\n       \
    \ result[index] = even[i]\n        index += 1\n    }\n    if array.count % 2 ==\
    \ 0 {\n        return result.reversed()\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp0jjcgu9i/tmp0jjcgu9i.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd571dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd56ed6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd56ed6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd56ed57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0jjcgu9i                        0x000056053d66caa6 <unavailable> + 6822

    5    libc.so.6                          0x00002afd573cb460 __libc_start_main +
    245

    6    tmp0jjcgu9i                        0x000056053d66c489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var start = 0\n    var end = array.count\
    \ - 1\n    var isAscending = (array[0] + array[array.count - 1]) % 2 == 1\n  \
    \  while start < end {\n        if isAscending {\n            if result[start]\
    \ > result[end] {\n                let temp = result[start]\n                result[start]\
    \ = result[end]\n                result[end] = temp\n            }\n        }\
    \ else {\n            if result[start] < result[end] {\n                let temp\
    \ = result[start]\n                result[start] = result[end]\n             \
    \   result[end] = temp\n            }\n        }\n        start += 1\n       \
    \ end -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b9747bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b97172561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5b97172286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5b9717213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5b97171bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5b96f71e83 <unavailable> + 188035

    6    tmpbep22sr3                        0x0000557afe9aee1f <unavailable> + 7711

    7    tmpbep22sr3                        0x0000557afe9ae45d <unavailable> + 5213

    8    libc.so.6                          0x00002b5b97667460 __libc_start_main +
    245

    9    tmpbep22sr3                        0x0000557afe9ae169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result.append(even[0])\n        \
    \    even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4ej09uv1/tmp4ej09uv1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c4d57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c4a4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c4a4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c4a4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ej09uv1                        0x000055e2cc49bc16 <unavailable> + 7190

    5    libc.so.6                          0x00002b26c4f43460 __libc_start_main +
    245

    6    tmp4ej09uv1                        0x000055e2cc49b5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n        evenArray.reverse()\n    }\n \
    \   for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b62ae2a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62adf97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b62adf97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b62adf9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b62adf96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b62add96e83 <unavailable> + 188035

    6    tmp3ew2_d2g                        0x000055a081f19467 <unavailable> + 9319

    7    tmp3ew2_d2g                        0x000055a081f187fd <unavailable> + 6141

    8    libc.so.6                          0x00002b62ae48c460 __libc_start_main +
    245

    9    tmp3ew2_d2g                        0x000055a081f18509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    for i in 0..<result.count {\n      \
    \  for j in 0..<result.count {\n            if (i + j) % 2 == 0 {\n          \
    \      if result[i] > result[j] {\n                    let temp = result[i]\n\
    \                    result[i] = result[j]\n                    result[j] = temp\n\
    \                }\n            } else {\n                if result[i] < result[j]\
    \ {\n                    let temp = result[i]\n                    result[i] =\
    \ result[j]\n                    result[j] = temp\n                }\n       \
    \     }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphvbx3emz/tmphvbx3emz.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b585a18ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5859e81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5859e81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5859e807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphvbx3emz                        0x000055605daa6876 <unavailable> + 6262

    5    libc.so.6                          0x00002b585a376460 __libc_start_main +
    245

    6    tmphvbx3emz                        0x000055605daa6259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    evenArray.reverse()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpwhih9_tt/tmpwhih9_tt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75fa38cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75fa083b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75fa083988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75fa0827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwhih9_tt                        0x0000559caf8a4b26 <unavailable> + 6950

    5    libc.so.6                          0x00002b75fa578460 __libc_start_main +
    245

    6    tmpwhih9_tt                        0x0000559caf8a4509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n        evenArray.reverse()\n    }\n \
    \   for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b62ae2a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62adf97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b62adf97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b62adf9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b62adf96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b62add96e83 <unavailable> + 188035

    6    tmp3ew2_d2g                        0x000055a081f19467 <unavailable> + 9319

    7    tmp3ew2_d2g                        0x000055a081f187fd <unavailable> + 6141

    8    libc.so.6                          0x00002b62ae48c460 __libc_start_main +
    245

    9    tmp3ew2_d2g                        0x000055a081f18509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if array.first!\
    \ + array.last! % 2 == 0 {\n        evenArray.reverse()\n    }\n    for i in 0..<array.count\
    \ {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp2g8loepl/tmp2g8loepl.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b605ed91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b605ea88561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b605ea88286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b605ea8813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b605ea87bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2g8loepl                        0x0000560f024ce615 <unavailable> + 9749

    6    tmp2g8loepl                        0x0000560f024cd8fd <unavailable> + 6397

    7    libc.so.6                          0x00002b605ef7d460 __libc_start_main +
    245

    8    tmp2g8loepl                        0x0000560f024cd609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var newArray = array\n    var index = 0\n    var index2 = newArray.count\
    \ - 1\n    var temp = 0\n    var sum = 0\n    var odd = false\n    while index\
    \ < index2 {\n        sum = newArray[index] + newArray[index2]\n        if sum\
    \ % 2 == 0 {\n            temp = newArray[index]\n            newArray[index]\
    \ = newArray[index2]\n            newArray[index2] = temp\n            index +=\
    \ 1\n            index2 -= 1\n        } else {\n            odd = true\n     \
    \       break\n        }\n    }\n    if odd {\n        newArray.sort(by: >)\n\
    \    } else {\n        newArray.sort(by: <)\n    }\n    return newArray\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp9jg7sg8k/tmp9jg7sg8k.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3272f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab326febb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab326feb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab326fea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9jg7sg8k                        0x00005597388987f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ab3274e0460 __libc_start_main +
    245

    6    tmp9jg7sg8k                        0x00005597388981d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var start = 0\n    var end = array.count\
    \ - 1\n    let sum = array[start] + array[end]\n    while start < end {\n    \
    \    if sum % 2 == 0 {\n            if result[start] < result[end] {\n       \
    \         result.swapAt(start, end)\n            }\n        } else {\n       \
    \     if result[start] > result[end] {\n                result.swapAt(start, end)\n\
    \            }\n        }\n        start += 1\n        end -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b95ea561c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95ea258561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b95ea258286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b95ea25813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b95ea257bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b95ea057e83 <unavailable> + 188035

    6    tmpvroqzigh                        0x000055dfd93f6e3c <unavailable> + 7740

    7    tmpvroqzigh                        0x000055dfd93f649d <unavailable> + 5277

    8    libc.so.6                          0x00002b95ea74d460 __libc_start_main +
    245

    9    tmpvroqzigh                        0x000055dfd93f61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n        evenArray.reverse()\n    }\n \
    \   for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b62ae2a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62adf97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b62adf97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b62adf9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b62adf96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b62add96e83 <unavailable> + 188035

    6    tmp3ew2_d2g                        0x000055a081f19467 <unavailable> + 9319

    7    tmp3ew2_d2g                        0x000055a081f187fd <unavailable> + 6141

    8    libc.so.6                          0x00002b62ae48c460 __libc_start_main +
    245

    9    tmp3ew2_d2g                        0x000055a081f18509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            even.append(array[i])\n\
    \        } else {\n            odd.append(array[i])\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    if array[0] + array[array.count - 1] % 2 == 0 {\n      \
    \  even = even.reversed()\n    }\n    for i in 0..<array.count {\n        if array[i]\
    \ % 2 == 0 {\n            array[i] = even.removeFirst()\n        } else {\n  \
    \          array[i] = odd.removeFirst()\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0438715c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b043840c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b043840c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b043840c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b043840bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b043820be83 <unavailable> + 188035

    6    tmprn7bboev                        0x000055683d42049e <unavailable> + 9374

    7    tmprn7bboev                        0x000055683d41f81d <unavailable> + 6173

    8    libc.so.6                          0x00002b0438901460 __libc_start_main +
    245

    9    tmprn7bboev                        0x000055683d41f529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result.append(even[0])\n        \
    \    even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4ej09uv1/tmp4ej09uv1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c4d57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c4a4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c4a4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c4a4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ej09uv1                        0x000055e2cc49bc16 <unavailable> + 7190

    5    libc.so.6                          0x00002b26c4f43460 __libc_start_main +
    245

    6    tmp4ej09uv1                        0x000055e2cc49b5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var newArray = array\n    var oddArray = [Int]()\n    var evenArray\
    \ = [Int]()\n    var resultArray = [Int]()\n    for i in 0..<array.count {\n \
    \       if array[i] % 2 == 0 {\n            evenArray.append(array[i])\n     \
    \   } else {\n            oddArray.append(array[i])\n        }\n    }\n    oddArray.sort()\n\
    \    evenArray.sort()\n    evenArray.reverse()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            resultArray.append(evenArray[0])\n\
    \            evenArray.removeFirst()\n        } else {\n            resultArray.append(oddArray[0])\n\
    \            oddArray.removeFirst()\n        }\n    }\n    return resultArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmprfiawur4/tmprfiawur4.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b894cbf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b894c8eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b894c8ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b894c8ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprfiawur4                        0x000055fad8973b26 <unavailable> + 6950

    5    libc.so.6                          0x00002b894cde3460 __libc_start_main +
    245

    6    tmprfiawur4                        0x000055fad8973509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    while i < j {\n        if (array[i] + array[j]) % 2 == 0 {\n        \
    \    result[i] = array[j]\n            result[j] = array[i]\n            i +=\
    \ 1\n            j -= 1\n        } else {\n            i += 1\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpormitlsd/tmpormitlsd.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5d8f81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5d8c78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5d8c78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5d8c777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpormitlsd                        0x0000561d30b1d786 <unavailable> + 6022

    5    libc.so.6                          0x00002ac5d916d460 __libc_start_main +
    245

    6    tmpormitlsd                        0x0000561d30b1d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if i % 2 == 0 {\n            odd.append(array[i])\n\
    \        } else {\n            even.append(array[i])\n        }\n    }\n    odd.sort()\n\
    \    even.sort(by: >)\n    for i in 0..<array.count {\n        if i % 2 == 0 {\n\
    \            result[i] = odd[i / 2]\n        } else {\n            result[i] =\
    \ even[i / 2]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpwdbq2nml/tmpwdbq2nml.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc3dad6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc3d7cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc3d7cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc3d7cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwdbq2nml                        0x0000559d8e245ab6 <unavailable> + 6838

    5    libc.so.6                          0x00002abc3dcc2460 __libc_start_main +
    245

    6    tmpwdbq2nml                        0x0000559d8e245499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sum = array.first! + array.last!\n    let sorted = array.sorted()\n\
    \    return sum % 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpwgnne3yb/tmpwgnne3yb.swift:9: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ef5376c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ef506d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0ef506d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0ef506d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0ef506cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwgnne3yb                        0x0000559235508f7d <unavailable> + 8061

    6    tmpwgnne3yb                        0x000055923550858d <unavailable> + 5517

    7    libc.so.6                          0x00002b0ef5562460 __libc_start_main +
    245

    8    tmpwgnne3yb                        0x0000559235508299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n        evenArray.reverse()\n    }\n \
    \   for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b62ae2a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62adf97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b62adf97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b62adf9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b62adf96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b62add96e83 <unavailable> + 188035

    6    tmp3ew2_d2g                        0x000055a081f19467 <unavailable> + 9319

    7    tmp3ew2_d2g                        0x000055a081f187fd <unavailable> + 6141

    8    libc.so.6                          0x00002b62ae48c460 __libc_start_main +
    245

    9    tmp3ew2_d2g                        0x000055a081f18509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sortedArray = array\n    let firstIndex = array[0]\n   \
    \ let lastIndex = array[array.count - 1]\n    let sum = firstIndex + lastIndex\n\
    \    if sum % 2 == 0 {\n        sortedArray.sort(by: >)\n    } else {\n      \
    \  sortedArray.sort(by: <)\n    }\n    return sortedArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6208fdbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6208cd2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6208cd2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6208cd213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6208cd1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6208ad1e83 <unavailable> + 188035

    6    tmpsgcpztzn                        0x00005634ee9b1dbb <unavailable> + 7611

    7    tmpsgcpztzn                        0x00005634ee9b147d <unavailable> + 5245

    8    libc.so.6                          0x00002b62091c7460 __libc_start_main +
    245

    9    tmpsgcpztzn                        0x00005634ee9b1189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    for i in 0..<result.count {\n      \
    \  for j in i+1..<result.count {\n            if (i + j) % 2 == 0 {\n        \
    \        if result[i] < result[j] {\n                    let temp = result[i]\n\
    \                    result[i] = result[j]\n                    result[j] = temp\n\
    \                }\n            } else {\n                if result[i] > result[j]\
    \ {\n                    let temp = result[i]\n                    result[i] =\
    \ result[j]\n                    result[j] = temp\n                }\n       \
    \     }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp34sd7d2h/tmp34sd7d2h.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af26d1b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af26ceaeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af26ceae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af26cead7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp34sd7d2h                        0x000055dfe3900876 <unavailable> + 6262

    5    libc.so.6                          0x00002af26d3a3460 __libc_start_main +
    245

    6    tmp34sd7d2h                        0x000055dfe3900259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    while i < j {\n        if (array[i] + array[j]) % 2 == 0 {\n        \
    \    result[i] = array[j]\n            result[j] = array[i]\n            i +=\
    \ 1\n            j -= 1\n        } else {\n            i += 1\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpormitlsd/tmpormitlsd.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5d8f81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5d8c78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5d8c78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5d8c777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpormitlsd                        0x0000561d30b1d786 <unavailable> + 6022

    5    libc.so.6                          0x00002ac5d916d460 __libc_start_main +
    245

    6    tmpormitlsd                        0x0000561d30b1d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    while i < j {\n        if array[i] % 2 == 0 {\n            if array[j]\
    \ % 2 == 1 {\n                let temp = array[i]\n                array[i] =\
    \ array[j]\n                array[j] = temp\n                i += 1\n        \
    \        j -= 1\n            } else {\n                j -= 1\n            }\n\
    \        } else {\n            i += 1\n        }\n    }\n    if (i + j) % 2 ==\
    \ 0 {\n        array[i...].sort(by: >)\n    } else {\n        array[i...].sort(by:\
    \ <)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpfbn4n03l/tmpfbn4n03l.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b445d3e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b445d0e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b445d0e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b445d0df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfbn4n03l                        0x000055e12d3c9a26 <unavailable> + 6694

    5    libc.so.6                          0x00002b445d5d5460 __libc_start_main +
    245

    6    tmpfbn4n03l                        0x000055e12d3c9409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    var isAscending = false\n    if (array[0] + array[array.count - 1]) %\
    \ 2 == 0 {\n        isAscending = true\n    }\n    while i < j {\n        if isAscending\
    \ {\n            if result[i] % 2 == 0 {\n                i += 1\n           \
    \ } else if result[j] % 2 == 1 {\n                j -= 1\n            } else {\n\
    \                result.swapAt(i, j)\n                i += 1\n               \
    \ j -= 1\n            }\n        } else {\n            if result[i] % 2 == 1 {\n\
    \                i += 1\n            } else if result[j] % 2 == 0 {\n        \
    \        j -= 1\n            } else {\n                result.swapAt(i, j)\n \
    \               i += 1\n                j -= 1\n            }\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae98bc95c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae98b98c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae98b98c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae98b98c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae98b98bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae98b78be83 <unavailable> + 188035

    6    tmpcmonm_x3                        0x0000565175de7e40 <unavailable> + 7744

    7    tmpcmonm_x3                        0x0000565175de749d <unavailable> + 5277

    8    libc.so.6                          0x00002ae98be81460 __libc_start_main +
    245

    9    tmpcmonm_x3                        0x0000565175de71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    let isEven = (array[0] + array[array.count - 1]) % 2 == 0\n    while\
    \ i < j {\n        if isEven {\n            if result[i] % 2 == 0 {\n        \
    \        i += 1\n            } else if result[j] % 2 == 1 {\n                j\
    \ -= 1\n            } else {\n                let temp = result[i]\n         \
    \       result[i] = result[j]\n                result[j] = temp\n            \
    \    i += 1\n                j -= 1\n            }\n        } else {\n       \
    \     if result[i] % 2 == 1 {\n                i += 1\n            } else if result[j]\
    \ % 2 == 0 {\n                j -= 1\n            } else {\n                let\
    \ temp = result[i]\n                result[i] = result[j]\n                result[j]\
    \ = temp\n                i += 1\n                j -= 1\n            }\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b45d0d61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45d0a58561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b45d0a58286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b45d0a5813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b45d0a57bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b45d0857e83 <unavailable> + 188035

    6    tmp0_0ju4cu                        0x000055b9bee11e1f <unavailable> + 7711

    7    tmp0_0ju4cu                        0x000055b9bee1145d <unavailable> + 5213

    8    libc.so.6                          0x00002b45d0f4d460 __libc_start_main +
    245

    9    tmp0_0ju4cu                        0x000055b9bee11169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    while i < j {\n        if (array[i] + array[j]) % 2 == 0 {\n        \
    \    result[i] = array[j]\n            result[j] = array[i]\n            i +=\
    \ 1\n            j -= 1\n        } else {\n            i += 1\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpormitlsd/tmpormitlsd.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5d8f81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5d8c78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5d8c78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5d8c777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpormitlsd                        0x0000561d30b1d786 <unavailable> + 6022

    5    libc.so.6                          0x00002ac5d916d460 __libc_start_main +
    245

    6    tmpormitlsd                        0x0000561d30b1d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if array.first!\
    \ + array.last! % 2 == 0 {\n        evenArray.reverse()\n    }\n    for i in 0..<array.count\
    \ {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp2g8loepl/tmp2g8loepl.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b605ed91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b605ea88561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b605ea88286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b605ea8813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b605ea87bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2g8loepl                        0x0000560f024ce615 <unavailable> + 9749

    6    tmp2g8loepl                        0x0000560f024cd8fd <unavailable> + 6397

    7    libc.so.6                          0x00002b605ef7d460 __libc_start_main +
    245

    8    tmp2g8loepl                        0x0000560f024cd609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    var isOdd = false\n    if (array[0] + array[array.count - 1]) % 2 ==\
    \ 1 {\n        isOdd = true\n    }\n    while i < j {\n        if isOdd {\n  \
    \          if result[i] % 2 == 0 {\n                i += 1\n            }\n  \
    \          if result[j] % 2 == 1 {\n                j -= 1\n            }\n  \
    \          if result[i] % 2 == 1 && result[j] % 2 == 0 {\n                let\
    \ temp = result[i]\n                result[i] = result[j]\n                result[j]\
    \ = temp\n                i += 1\n                j -= 1\n            }\n    \
    \    } else {\n            if result[i] % 2 == 1 {\n                i += 1\n \
    \           }\n            if result[j] % 2 == 0 {\n                j -= 1\n \
    \           }\n            if result[i] % 2 == 0 && result[j] % 2 == 1 {\n   \
    \             let temp = result[i]\n                result[i] = result[j]\n  \
    \              result[j] = temp\n                i += 1\n                j -=\
    \ 1\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aded908bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aded8d82561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aded8d82286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aded8d8213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aded8d81bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aded8b81e83 <unavailable> + 188035

    6    tmphiy8q_qn                        0x000055c1dc4d5e23 <unavailable> + 7715

    7    tmphiy8q_qn                        0x000055c1dc4d545d <unavailable> + 5213

    8    libc.so.6                          0x00002aded9277460 __libc_start_main +
    245

    9    tmphiy8q_qn                        0x000055c1dc4d5169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if i % 2 == 0 {\n            odd.append(array[i])\n\
    \        } else {\n            even.append(array[i])\n        }\n    }\n    odd.sort()\n\
    \    even.sort(by: >)\n    for i in 0..<array.count {\n        if i % 2 == 0 {\n\
    \            array[i] = odd[i / 2]\n        } else {\n            array[i] = even[i\
    \ / 2]\n        }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpo0kpw0tw/tmpo0kpw0tw.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaba3211c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaba2f08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaba2f08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaba2f077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo0kpw0tw                        0x0000557719c93ab6 <unavailable> + 6838

    5    libc.so.6                          0x00002aaba33fd460 __libc_start_main +
    245

    6    tmpo0kpw0tw                        0x0000557719c93499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    var temp = 0\n    while i < j {\n        if array[i] + array[j] % 2 ==\
    \ 0 {\n            temp = array[i]\n            array[i] = array[j]\n        \
    \    array[j] = temp\n        }\n        i += 1\n        j -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpxyeig84g.swift:16:18: error: cannot assign through subscript: 'array'\
    \ is a 'let' constant\n            array[i] = array[j]\n            ~~~~~^\n/tmp/tmpxyeig84g.swift:17:18:\
    \ error: cannot assign through subscript: 'array' is a 'let' constant\n      \
    \      array[j] = temp\n            ~~~~~^\n"
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            even.append(array[i])\n\
    \        } else {\n            odd.append(array[i])\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    if array.count % 2 == 0 {\n        for i in 0..<array.count\
    \ {\n            if i % 2 == 0 {\n                result[i] = even[i / 2]\n  \
    \          } else {\n                result[i] = odd[i / 2]\n            }\n \
    \       }\n    } else {\n        for i in 0..<array.count {\n            if i\
    \ % 2 == 0 {\n                result[i] = odd[i / 2]\n            } else {\n \
    \               result[i] = even[i / 2]\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b076dc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076d90f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b076d90f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b076d90f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b076d90ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b076d70ee83 <unavailable> + 188035

    6    tmp3o5c_83c                        0x000056306689fa42 <unavailable> + 10818

    7    tmp3o5c_83c                        0x000056306689eab0 <unavailable> + 6832

    8    libc.so.6                          0x00002b076de04460 __libc_start_main +
    245

    9    tmp3o5c_83c                        0x000056306689e429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    while i < j {\n        if (array[i] + array[j]) % 2 == 0 {\n        \
    \    result[i] = array[j]\n            result[j] = array[i]\n            i +=\
    \ 1\n            j -= 1\n        } else {\n            i += 1\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpormitlsd/tmpormitlsd.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5d8f81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5d8c78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5d8c78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5d8c777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpormitlsd                        0x0000561d30b1d786 <unavailable> + 6022

    5    libc.so.6                          0x00002ac5d916d460 __libc_start_main +
    245

    6    tmpormitlsd                        0x0000561d30b1d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    let sum = array[0] + array[array.count\
    \ - 1]\n    if sum % 2 == 0 {\n        result.sort(by: >)\n    } else {\n    \
    \    result.sort(by: <)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b91640c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b91337561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4b91337286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4b9133713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4b91336bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4b91136e83 <unavailable> + 188035

    6    tmp9fhn4sx6                        0x000055c767de9dab <unavailable> + 7595

    7    tmp9fhn4sx6                        0x000055c767de947d <unavailable> + 5245

    8    libc.so.6                          0x00002b4b9182c460 __libc_start_main +
    245

    9    tmp9fhn4sx6                        0x000055c767de9189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result.append(even[0])\n        \
    \    even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4ej09uv1/tmp4ej09uv1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c4d57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c4a4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c4a4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c4a4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ej09uv1                        0x000055e2cc49bc16 <unavailable> + 7190

    5    libc.so.6                          0x00002b26c4f43460 __libc_start_main +
    245

    6    tmp4ej09uv1                        0x000055e2cc49b5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result.append(even[0])\n        \
    \    even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4ej09uv1/tmp4ej09uv1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c4d57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c4a4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c4a4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c4a4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ej09uv1                        0x000055e2cc49bc16 <unavailable> + 7190

    5    libc.so.6                          0x00002b26c4f43460 __libc_start_main +
    245

    6    tmp4ej09uv1                        0x000055e2cc49b5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var start = 0\n    var end = array.count\
    \ - 1\n    while start < end {\n        if array[start] % 2 == 0 && array[end]\
    \ % 2 == 1 {\n            result[start] = array[end]\n            result[end]\
    \ = array[start]\n            start += 1\n            end -= 1\n        } else\
    \ if array[start] % 2 == 1 && array[end] % 2 == 0 {\n            start += 1\n\
    \            end -= 1\n        } else if array[start] % 2 == 0 && array[end] %\
    \ 2 == 0 {\n            end -= 1\n        } else {\n            start += 1\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpcjmyvv4o/tmpcjmyvv4o.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab855461c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab855158b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab855158988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8551577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcjmyvv4o                        0x000055c91fdf3786 <unavailable> + 6022

    5    libc.so.6                          0x00002ab85564d460 __libc_start_main +
    245

    6    tmpcjmyvv4o                        0x000055c91fdf3169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n        evenArray.reverse()\n    }\n \
    \   for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b62ae2a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62adf97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b62adf97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b62adf9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b62adf96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b62add96e83 <unavailable> + 188035

    6    tmp3ew2_d2g                        0x000055a081f19467 <unavailable> + 9319

    7    tmp3ew2_d2g                        0x000055a081f187fd <unavailable> + 6141

    8    libc.so.6                          0x00002b62ae48c460 __libc_start_main +
    245

    9    tmp3ew2_d2g                        0x000055a081f18509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var first = 0\n    var last = array.count\
    \ - 1\n    while first < last {\n        if (array[first] + array[last]) % 2 ==\
    \ 0 {\n            result[first] = array[last]\n            result[last] = array[first]\n\
    \            first += 1\n            last -= 1\n        } else {\n           \
    \ first += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpt1uz3cjn/tmpt1uz3cjn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d6e902c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d6e5f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d6e5f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d6e5f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt1uz3cjn                        0x000055e39f741786 <unavailable> + 6022

    5    libc.so.6                          0x00002b8d6eaee460 __libc_start_main +
    245

    6    tmpt1uz3cjn                        0x000055e39f741169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    var isOdd = false\n    if (array[0] + array[array.count - 1]) % 2 ==\
    \ 1 {\n        isOdd = true\n    }\n    while i < j {\n        if isOdd {\n  \
    \          if array[i] % 2 == 0 {\n                i += 1\n            } else\
    \ if array[j] % 2 == 1 {\n                j -= 1\n            } else {\n     \
    \           let temp = array[i]\n                result[i] = array[j]\n      \
    \          result[j] = temp\n                i += 1\n                j -= 1\n\
    \            }\n        } else {\n            if array[i] % 2 == 1 {\n       \
    \         i += 1\n            } else if array[j] % 2 == 0 {\n                j\
    \ -= 1\n            } else {\n                let temp = array[i]\n          \
    \      result[i] = array[j]\n                result[j] = temp\n              \
    \  i += 1\n                j -= 1\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3dd127c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3dce1e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae3dce1e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae3dce1e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae3dce1dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae3dcc1de83 <unavailable> + 188035

    6    tmp7_o5y102                        0x00005633a97eee23 <unavailable> + 7715

    7    tmp7_o5y102                        0x00005633a97ee45d <unavailable> + 5213

    8    libc.so.6                          0x00002ae3dd313460 __libc_start_main +
    245

    9    tmp7_o5y102                        0x00005633a97ee169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n        evenArray.reverse()\n    }\n \
    \   for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b62ae2a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62adf97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b62adf97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b62adf9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b62adf96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b62add96e83 <unavailable> + 188035

    6    tmp3ew2_d2g                        0x000055a081f19467 <unavailable> + 9319

    7    tmp3ew2_d2g                        0x000055a081f187fd <unavailable> + 6141

    8    libc.so.6                          0x00002b62ae48c460 __libc_start_main +
    245

    9    tmp3ew2_d2g                        0x000055a081f18509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result.append(even[0])\n        \
    \    even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4ej09uv1/tmp4ej09uv1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c4d57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c4a4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c4a4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c4a4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ej09uv1                        0x000055e2cc49bc16 <unavailable> + 7190

    5    libc.so.6                          0x00002b26c4f43460 __libc_start_main +
    245

    6    tmp4ej09uv1                        0x000055e2cc49b5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            even.append(array[i])\n\
    \        } else {\n            odd.append(array[i])\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    for i in 0..<array.count {\n        if array[i] % 2 == 0\
    \ {\n            result[i] = even.removeFirst()\n        } else {\n          \
    \  result[i] = odd.removeFirst()\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp9izgpd9a/tmp9izgpd9a.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bc4a6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2bc4764b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2bc4764988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2bc47637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9izgpd9a                        0x0000559a767ceae6 <unavailable> + 6886

    5    libc.so.6                          0x00002b2bc4c59460 __libc_start_main +
    245

    6    tmp9izgpd9a                        0x0000559a767ce4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var newArray = array\n    var oddArray = [Int]()\n    var evenArray\
    \ = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n\
    \            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort(by: >)\n    evenArray.sort(by: <)\n    var\
    \ index = 0\n    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n\
    \            newArray[i] = evenArray[index]\n            index += 1\n        }\
    \ else {\n            newArray[i] = oddArray[index]\n            index += 1\n\
    \        }\n    }\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b110dbf5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b110d8ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b110d8ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b110d8ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b110d8ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b110d6ebe83 <unavailable> + 188035

    6    tmpqvn4ohsl                        0x000055d205b9d596 <unavailable> + 9622

    7    tmpqvn4ohsl                        0x000055d205b9c88f <unavailable> + 6287

    8    libc.so.6                          0x00002b110dde1460 __libc_start_main +
    245

    9    tmpqvn4ohsl                        0x000055d205b9c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result.append(even[0])\n        \
    \    even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4ej09uv1/tmp4ej09uv1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c4d57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c4a4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c4a4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c4a4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ej09uv1                        0x000055e2cc49bc16 <unavailable> + 7190

    5    libc.so.6                          0x00002b26c4f43460 __libc_start_main +
    245

    6    tmp4ej09uv1                        0x000055e2cc49b5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if array.count\
    \ % 2 == 0 {\n        evenArray.reverse()\n    } else {\n        oddArray.reverse()\n\
    \    }\n    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n     \
    \       result.append(evenArray.removeFirst())\n        } else {\n           \
    \ result.append(oddArray.removeFirst())\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpoyvnod8a/tmpoyvnod8a.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a5005ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a4fd55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a4fd55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a4fd547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoyvnod8a                        0x000055ddd7cbcb26 <unavailable> + 6950

    5    libc.so.6                          0x00002b9a5024a460 __libc_start_main +
    245

    6    tmpoyvnod8a                        0x000055ddd7cbc509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    while i < j {\n        if array[i] % 2 == 0 {\n            while i <\
    \ j && array[j] % 2 == 0 {\n                j -= 1\n            }\n          \
    \  if i < j {\n                array.swapAt(i, j)\n            }\n        }\n\
    \        i += 1\n    }\n    if array.count % 2 == 0 {\n        for i in 0..<array.count/2\
    \ {\n            array.swapAt(i, array.count - 1 - i)\n        }\n    }\n    return\
    \ array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(array: [] as\
    \ [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpivdqar68/tmpivdqar68.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41a94ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41a91e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41a91e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41a91e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivdqar68                        0x000055c3a46b18c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b41a96d8460 __libc_start_main +
    245

    6    tmpivdqar68                        0x000055c3a46b12a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result.append(even[0])\n        \
    \    even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4ej09uv1/tmp4ej09uv1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c4d57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c4a4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c4a4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c4a4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ej09uv1                        0x000055e2cc49bc16 <unavailable> + 7190

    5    libc.so.6                          0x00002b26c4f43460 __libc_start_main +
    245

    6    tmp4ej09uv1                        0x000055e2cc49b5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    evenArray.reverse()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpwhih9_tt/tmpwhih9_tt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75fa38cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75fa083b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75fa083988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75fa0827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwhih9_tt                        0x0000559caf8a4b26 <unavailable> + 6950

    5    libc.so.6                          0x00002b75fa578460 __libc_start_main +
    245

    6    tmpwhih9_tt                        0x0000559caf8a4509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let first\
    \ = array[0]\n        let last = array[array.count - 1]\n        if (first + last)\
    \ % 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result.append(even[0])\n        \
    \    even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4ej09uv1/tmp4ej09uv1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c4d57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c4a4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c4a4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c4a4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ej09uv1                        0x000055e2cc49bc16 <unavailable> + 7190

    5    libc.so.6                          0x00002b26c4f43460 __libc_start_main +
    245

    6    tmp4ej09uv1                        0x000055e2cc49b5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result.append(even[0])\n        \
    \    even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4ej09uv1/tmp4ej09uv1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c4d57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c4a4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c4a4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c4a4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ej09uv1                        0x000055e2cc49bc16 <unavailable> + 7190

    5    libc.so.6                          0x00002b26c4f43460 __libc_start_main +
    245

    6    tmp4ej09uv1                        0x000055e2cc49b5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    while i < j {\n        if (array[i] + array[j]) % 2 == 0 {\n        \
    \    result[i] = array[j]\n            result[j] = array[i]\n            i +=\
    \ 1\n            j -= 1\n        } else {\n            i += 1\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpormitlsd/tmpormitlsd.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5d8f81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5d8c78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5d8c78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5d8c777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpormitlsd                        0x0000561d30b1d786 <unavailable> + 6022

    5    libc.so.6                          0x00002ac5d916d460 __libc_start_main +
    245

    6    tmpormitlsd                        0x0000561d30b1d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result.append(even[0])\n        \
    \    even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4ej09uv1/tmp4ej09uv1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c4d57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c4a4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c4a4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c4a4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ej09uv1                        0x000055e2cc49bc16 <unavailable> + 7190

    5    libc.so.6                          0x00002b26c4f43460 __libc_start_main +
    245

    6    tmp4ej09uv1                        0x000055e2cc49b5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    var temp = 0\n    while i < j {\n        if (array[i] + array[j]) % 2\
    \ == 0 {\n            temp = result[i]\n            result[i] = result[j]\n  \
    \          result[j] = temp\n            i += 1\n            j -= 1\n        }\
    \ else {\n            i += 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd0xqfc6v/tmpd0xqfc6v.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16bfd63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16bfa5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16bfa5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16bfa597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0xqfc6v                        0x0000557f8144a786 <unavailable> + 6022

    5    libc.so.6                          0x00002b16bff4f460 __libc_start_main +
    245

    6    tmpd0xqfc6v                        0x0000557f8144a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    while i < j {\n        if (array[i] + array[j]) % 2 == 0 {\n        \
    \    let temp = array[i]\n            array[i] = array[j]\n            array[j]\
    \ = temp\n            i += 1\n            j -= 1\n        } else {\n         \
    \   i += 1\n        }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpqvkgtsix/tmpqvkgtsix.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acca937bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acca9072b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acca9072988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acca90717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqvkgtsix                        0x0000555a5f1f5786 <unavailable> + 6022

    5    libc.so.6                          0x00002acca9567460 __libc_start_main +
    245

    6    tmpqvkgtsix                        0x0000555a5f1f5169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result.append(even[0])\n        \
    \    even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4ej09uv1/tmp4ej09uv1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c4d57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c4a4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c4a4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c4a4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ej09uv1                        0x000055e2cc49bc16 <unavailable> + 7190

    5    libc.so.6                          0x00002b26c4f43460 __libc_start_main +
    245

    6    tmp4ej09uv1                        0x000055e2cc49b5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n        evenArray.reverse()\n    }\n \
    \   for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b62ae2a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62adf97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b62adf97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b62adf9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b62adf96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b62add96e83 <unavailable> + 188035

    6    tmp3ew2_d2g                        0x000055a081f19467 <unavailable> + 9319

    7    tmp3ew2_d2g                        0x000055a081f187fd <unavailable> + 6141

    8    libc.so.6                          0x00002b62ae48c460 __libc_start_main +
    245

    9    tmp3ew2_d2g                        0x000055a081f18509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n        evenArray.reverse()\n    }\n \
    \   for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b62ae2a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62adf97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b62adf97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b62adf9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b62adf96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b62add96e83 <unavailable> + 188035

    6    tmp3ew2_d2g                        0x000055a081f19467 <unavailable> + 9319

    7    tmp3ew2_d2g                        0x000055a081f187fd <unavailable> + 6141

    8    libc.so.6                          0x00002b62ae48c460 __libc_start_main +
    245

    9    tmp3ew2_d2g                        0x000055a081f18509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    while i < j {\n        if (array[i] + array[j]) % 2 == 0 {\n        \
    \    result[i] = array[j]\n            result[j] = array[i]\n            i +=\
    \ 1\n            j -= 1\n        } else {\n            i += 1\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpormitlsd/tmpormitlsd.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5d8f81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5d8c78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5d8c78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5d8c777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpormitlsd                        0x0000561d30b1d786 <unavailable> + 6022

    5    libc.so.6                          0x00002ac5d916d460 __libc_start_main +
    245

    6    tmpormitlsd                        0x0000561d30b1d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if i % 2 == 0 {\n            even.append(array[i])\n\
    \        } else {\n            odd.append(array[i])\n        }\n    }\n    even.sort()\n\
    \    odd.sort(by: >)\n    for i in 0..<array.count {\n        if i % 2 == 0 {\n\
    \            result[i] = even[i / 2]\n        } else {\n            result[i]\
    \ = odd[i / 2]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4e7f8hic/tmp4e7f8hic.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8fdbc5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8fd8bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8fd8bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8fd8bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4e7f8hic                        0x000055bed79b1ab6 <unavailable> + 6838

    5    libc.so.6                          0x00002af8fddb1460 __libc_start_main +
    245

    6    tmp4e7f8hic                        0x000055bed79b1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var sum = 0\n    for i in 0..<array.count\
    \ {\n        sum += array[i]\n    }\n    if sum % 2 == 0 {\n        result.sort(by:\
    \ >)\n    } else {\n        result.sort(by: <)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpfilnm44l/tmpfilnm44l.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b310dd60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b310da57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b310da57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b310da567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfilnm44l                        0x000055a6ae32aa34 <unavailable> + 6708

    5    libc.so.6                          0x00002b310df4c460 __libc_start_main +
    245

    6    tmpfilnm44l                        0x000055a6ae32a289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var start = 0\n    var end = array.count\
    \ - 1\n    while start < end {\n        if (array[start] + array[end]) % 2 ==\
    \ 0 {\n            let temp = array[start]\n            array[start] = array[end]\n\
    \            array[end] = temp\n        }\n        start += 1\n        end -=\
    \ 1\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpiqasqo5u/tmpiqasqo5u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1d28b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1d25acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1d25ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1d25ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiqasqo5u                        0x0000562e77d3d786 <unavailable> + 6022

    5    libc.so.6                          0x00002ac1d2aa1460 __libc_start_main +
    245

    6    tmpiqasqo5u                        0x0000562e77d3d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    while i < j {\n        if (array[i] + array[j]) % 2 == 0 {\n        \
    \    let temp = array[i]\n            array[i] = array[j]\n            array[j]\
    \ = temp\n            i += 1\n            j -= 1\n        } else {\n         \
    \   i += 1\n        }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpqvkgtsix/tmpqvkgtsix.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acca937bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acca9072b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acca9072988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acca90717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqvkgtsix                        0x0000555a5f1f5786 <unavailable> + 6022

    5    libc.so.6                          0x00002acca9567460 __libc_start_main +
    245

    6    tmpqvkgtsix                        0x0000555a5f1f5169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count == 0 {\n        return\
    \ result\n    }\n    if array.count == 1 {\n        return result\n    }\n   \
    \ if array.count == 2 {\n        if (array[0] + array[1]) % 2 == 0 {\n       \
    \     result[0] = array[1]\n            result[1] = array[0]\n        }\n    \
    \    return result\n    }\n    if (array[0] + array[array.count - 1]) % 2 == 0\
    \ {\n        for i in 0..<array.count / 2 {\n            result[i] = array[array.count\
    \ - 1 - i]\n            result[array.count - 1 - i] = array[i]\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpqm2fe5d3/tmpqm2fe5d3.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55038f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55035f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55035f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55035ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqm2fe5d3                        0x000055cfe061f876 <unavailable> + 6262

    5    libc.so.6                          0x00002b5503ae5460 __libc_start_main +
    245

    6    tmpqm2fe5d3                        0x000055cfe061f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    if (array.first! + array.last!) % 2 == 0 {\n        even\
    \ = even.reversed()\n    }\n    for i in 0..<array.count {\n        if array[i]\
    \ % 2 == 0 {\n            result.append(even.removeFirst())\n        } else {\n\
    \            result.append(odd.removeFirst())\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpuf9nz2uj/tmpuf9nz2uj.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0e34ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0e31e2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae0e31e2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae0e31e213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae0e31e1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpuf9nz2uj                        0x000055aa6a694695 <unavailable> + 9877

    6    tmpuf9nz2uj                        0x000055aa6a693a2d <unavailable> + 6701

    7    libc.so.6                          0x00002ae0e36d7460 __libc_start_main +
    245

    8    tmpuf9nz2uj                        0x000055aa6a693739 <unavailable> + 5945

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result.append(even[0])\n        \
    \    even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4ej09uv1/tmp4ej09uv1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c4d57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c4a4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c4a4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c4a4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ej09uv1                        0x000055e2cc49bc16 <unavailable> + 7190

    5    libc.so.6                          0x00002b26c4f43460 __libc_start_main +
    245

    6    tmp4ej09uv1                        0x000055e2cc49b5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            even.append(array[i])\n\
    \        } else {\n            odd.append(array[i])\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result[i] = even.removeFirst()\n\
    \        } else {\n            result[i] = odd.removeFirst()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpm6yerjop/tmpm6yerjop.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f7be0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f7bb06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f7bb06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f7bb057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm6yerjop                        0x000055db0e272b46 <unavailable> + 6982

    5    libc.so.6                          0x00002b6f7bffb460 __libc_start_main +
    245

    6    tmpm6yerjop                        0x000055db0e272529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    evenArray.reverse()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpwhih9_tt/tmpwhih9_tt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75fa38cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75fa083b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75fa083988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75fa0827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwhih9_tt                        0x0000559caf8a4b26 <unavailable> + 6950

    5    libc.so.6                          0x00002b75fa578460 __libc_start_main +
    245

    6    tmpwhih9_tt                        0x0000559caf8a4509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    while i < j {\n        if (array[i] + array[j]) % 2 == 0 {\n        \
    \    let temp = array[i]\n            array[i] = array[j]\n            array[j]\
    \ = temp\n            i += 1\n            j -= 1\n        } else {\n         \
    \   i += 1\n        }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpqvkgtsix/tmpqvkgtsix.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acca937bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acca9072b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acca9072988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acca90717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqvkgtsix                        0x0000555a5f1f5786 <unavailable> + 6022

    5    libc.so.6                          0x00002acca9567460 __libc_start_main +
    245

    6    tmpqvkgtsix                        0x0000555a5f1f5169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if array.count\
    \ % 2 == 0 {\n        evenArray.reverse()\n    } else {\n        oddArray.reverse()\n\
    \    }\n    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n     \
    \       result.append(evenArray.removeFirst())\n        } else {\n           \
    \ result.append(oddArray.removeFirst())\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpoyvnod8a/tmpoyvnod8a.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a5005ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a4fd55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a4fd55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a4fd547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoyvnod8a                        0x000055ddd7cbcb26 <unavailable> + 6950

    5    libc.so.6                          0x00002b9a5024a460 __libc_start_main +
    245

    6    tmpoyvnod8a                        0x000055ddd7cbc509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if i % 2 == 0 {\n\
    \            oddArray.append(array[i])\n        } else {\n            evenArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    for i in 0..<array.count\
    \ {\n        if i % 2 == 0 {\n            result.append(oddArray[i/2])\n     \
    \   } else {\n            result.append(evenArray[i/2])\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpx5djas67/tmpx5djas67.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f79375c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f7906cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f7906c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f7906b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx5djas67                        0x000055dc9d3f39f6 <unavailable> + 6646

    5    libc.so.6                          0x00002b2f79561460 __libc_start_main +
    245

    6    tmpx5djas67                        0x000055dc9d3f33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            even.append(array[i])\n\
    \        } else {\n            odd.append(array[i])\n        }\n    }\n    odd.sort(by:\
    \ >)\n    even.sort(by: <)\n    for i in 0..<array.count {\n        if array[i]\
    \ % 2 == 0 {\n            array[i] = even.removeFirst()\n        } else {\n  \
    \          array[i] = odd.removeFirst()\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpjiuv7z1a/tmpjiuv7z1a.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b349847ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3498175b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3498175988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34981747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjiuv7z1a                        0x0000557d47944a46 <unavailable> + 6726

    5    libc.so.6                          0x00002b349866a460 __libc_start_main +
    245

    6    tmpjiuv7z1a                        0x0000557d47944429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            even.append(array[i])\n\
    \        } else {\n            odd.append(array[i])\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n    \
    \    even = even.reversed()\n    }\n    var j = 0\n    var k = 0\n    for i in\
    \ 0..<array.count {\n        if array[i] % 2 == 0 {\n            result[i] = even[j]\n\
    \            j += 1\n        } else {\n            result[i] = odd[k]\n      \
    \      k += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cd0730c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cd0427561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8cd0427286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8cd042713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8cd0426bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8cd0226e83 <unavailable> + 188035

    6    tmpcc5ejdps                        0x0000558d7493940e <unavailable> + 9230

    7    tmpcc5ejdps                        0x0000558d7493877d <unavailable> + 6013

    8    libc.so.6                          0x00002b8cd091c460 __libc_start_main +
    245

    9    tmpcc5ejdps                        0x0000558d74938489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var start = 0\n    var end = array.count\
    \ - 1\n    var temp = 0\n    while start < end {\n        if (array[start] + array[end])\
    \ % 2 == 0 {\n            temp = array[start]\n            array[start] = array[end]\n\
    \            array[end] = temp\n        }\n        start += 1\n        end -=\
    \ 1\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmplf7xlirf/tmplf7xlirf.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6be2598c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6be228fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6be228f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6be228e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplf7xlirf                        0x000055fc81321786 <unavailable> + 6022

    5    libc.so.6                          0x00002b6be2784460 __libc_start_main +
    245

    6    tmplf7xlirf                        0x000055fc81321169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    var odd = true\n    if array.count > 1 {\n        if (array[0] + array[array.count\
    \ - 1]) % 2 == 0 {\n            odd = false\n        }\n        while i < j {\n\
    \            if odd {\n                if result[i] % 2 == 0 {\n             \
    \       if result[j] % 2 != 0 {\n                        result.swapAt(i, j)\n\
    \                        i += 1\n                        j -= 1\n            \
    \        } else {\n                        j -= 1\n                    }\n   \
    \             } else {\n                    i += 1\n                }\n      \
    \      } else {\n                if result[i] % 2 != 0 {\n                   \
    \ if result[j] % 2 == 0 {\n                        result.swapAt(i, j)\n     \
    \                   i += 1\n                        j -= 1\n                 \
    \   } else {\n                        j -= 1\n                    }\n        \
    \        } else {\n                    i += 1\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4sv_9tfs/tmp4sv_9tfs.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b480b98ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b480b685b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b480b685988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b480b6847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4sv_9tfs                        0x0000559a928de7c6 <unavailable> + 6086

    5    libc.so.6                          0x00002b480bb7a460 __libc_start_main +
    245

    6    tmp4sv_9tfs                        0x0000559a928de1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var sum = array[0] + array[array.count\
    \ - 1]\n    if sum % 2 == 0 {\n        array.sort(by: >)\n    } else {\n     \
    \   array.sort(by: <)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ccd28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36cca1f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36cca1f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36cca1f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36cca1ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36cc81ee83 <unavailable> + 188035

    6    tmp3svnopdp                        0x000055e5e2fb8daf <unavailable> + 7599

    7    tmp3svnopdp                        0x000055e5e2fb847d <unavailable> + 5245

    8    libc.so.6                          0x00002b36ccf14460 __libc_start_main +
    245

    9    tmp3svnopdp                        0x000055e5e2fb8189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    for i in 0..<result.count {\n      \
    \  for j in i..<result.count {\n            if (i + j) % 2 == 0 {\n          \
    \      if result[i] < result[j] {\n                    let temp = result[i]\n\
    \                    result[i] = result[j]\n                    result[j] = temp\n\
    \                }\n            } else {\n                if result[i] > result[j]\
    \ {\n                    let temp = result[i]\n                    result[i] =\
    \ result[j]\n                    result[j] = temp\n                }\n       \
    \     }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp20rlz044/tmp20rlz044.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac27a29fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac279f96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac279f96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac279f957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp20rlz044                        0x0000562b6f0b3876 <unavailable> + 6262

    5    libc.so.6                          0x00002ac27a48b460 __libc_start_main +
    245

    6    tmp20rlz044                        0x0000562b6f0b3259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if i % 2 == 0 {\n            even.append(array[i])\n\
    \        } else {\n            odd.append(array[i])\n        }\n    }\n    even.sort()\n\
    \    odd.sort(by: >)\n    for i in 0..<array.count {\n        if i % 2 == 0 {\n\
    \            array[i] = even[i / 2]\n        } else {\n            array[i] =\
    \ odd[i / 2]\n        }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmprpg38c9m/tmprpg38c9m.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab00c55c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab0094cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab0094c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab0094b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprpg38c9m                        0x00005620747f7ab6 <unavailable> + 6838

    5    libc.so.6                          0x00002aab00e41460 __libc_start_main +
    245

    6    tmprpg38c9m                        0x00005620747f7499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            even.append(array[i])\n\
    \        } else {\n            odd.append(array[i])\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    var index = 0\n    for i in 0..<array.count {\n        if\
    \ array[i] % 2 == 0 {\n            result[i] = even[index]\n            index\
    \ += 1\n        } else {\n            result[i] = odd[index]\n            index\
    \ += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b728bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b725b2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6b725b2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6b725b213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6b725b1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6b723b1e83 <unavailable> + 188035

    6    tmpo6yoduwl                        0x000055f0e66e8584 <unavailable> + 9604

    7    tmpo6yoduwl                        0x000055f0e66e793f <unavailable> + 6463

    8    libc.so.6                          0x00002b6b72aa7460 __libc_start_main +
    245

    9    tmpo6yoduwl                        0x000055f0e66e7429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var left = 0\n    var right = array.count\
    \ - 1\n    while left < right {\n        if array[left] % 2 == 0 {\n         \
    \   if array[right] % 2 != 0 {\n                result.swapAt(left, right)\n \
    \               left += 1\n                right -= 1\n            } else {\n\
    \                right -= 1\n            }\n        } else {\n            left\
    \ += 1\n        }\n    }\n    if array.count % 2 == 0 {\n        result.sort(by:\
    \ >)\n    } else {\n        result.sort(by: <)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp94d8tz69/tmp94d8tz69.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b598e030c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b598dd27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b598dd27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b598dd267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp94d8tz69                        0x000055ee3fb7c846 <unavailable> + 6214

    5    libc.so.6                          0x00002b598e21c460 __libc_start_main +
    245

    6    tmp94d8tz69                        0x000055ee3fb7c229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if array.first!\
    \ + array.last! % 2 == 0 {\n        evenArray.reverse()\n    }\n    for i in 0..<array.count\
    \ {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp2g8loepl/tmp2g8loepl.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b605ed91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b605ea88561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b605ea88286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b605ea8813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b605ea87bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2g8loepl                        0x0000560f024ce615 <unavailable> + 9749

    6    tmp2g8loepl                        0x0000560f024cd8fd <unavailable> + 6397

    7    libc.so.6                          0x00002b605ef7d460 __libc_start_main +
    245

    8    tmp2g8loepl                        0x0000560f024cd609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var start = 0\n    var end = array.count\
    \ - 1\n    while start < end {\n        if (array[start] + array[end]) % 2 ==\
    \ 0 {\n            result[start] = array[end]\n            result[end] = array[start]\n\
    \        }\n        start += 1\n        end -= 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmps9vtmcde/tmps9vtmcde.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b462cd7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b462ca72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b462ca72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b462ca717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps9vtmcde                        0x0000561b4954a786 <unavailable> + 6022

    5    libc.so.6                          0x00002b462cf67460 __libc_start_main +
    245

    6    tmps9vtmcde                        0x0000561b4954a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var sum = array[0] + array[array.count\
    \ - 1]\n    if sum % 2 == 0 {\n        array.sort(by: >)\n    } else {\n     \
    \   array.sort(by: <)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ccd28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36cca1f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36cca1f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36cca1f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36cca1ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36cc81ee83 <unavailable> + 188035

    6    tmp3svnopdp                        0x000055e5e2fb8daf <unavailable> + 7599

    7    tmp3svnopdp                        0x000055e5e2fb847d <unavailable> + 5245

    8    libc.so.6                          0x00002b36ccf14460 __libc_start_main +
    245

    9    tmp3svnopdp                        0x000055e5e2fb8189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sortedArray = array\n    var left = 0\n    var right = array.count\
    \ - 1\n    while left < right {\n        if (array[left] + array[right]) % 2 ==\
    \ 0 {\n            let temp = sortedArray[left]\n            sortedArray[left]\
    \ = sortedArray[right]\n            sortedArray[right] = temp\n            left\
    \ += 1\n            right -= 1\n        } else {\n            left += 1\n    \
    \    }\n    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp5ty3rtgg/tmp5ty3rtgg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8835d42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8835a39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8835a39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8835a387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ty3rtgg                        0x00005630da64c786 <unavailable> + 6022

    5    libc.so.6                          0x00002b8835f2e460 __libc_start_main +
    245

    6    tmp5ty3rtgg                        0x00005630da64c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            even.append(array[i])\n\
    \        } else {\n            odd.append(array[i])\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n    \
    \    even.reverse()\n    }\n    var index = 0\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            array[i] = even[index]\n        \
    \    index += 1\n        }\n    }\n    index = 0\n    for i in 0..<array.count\
    \ {\n        if array[i] % 2 != 0 {\n            array[i] = odd[index]\n     \
    \       index += 1\n        }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2b193ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2b1631561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba2b1631286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba2b163113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba2b1630bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba2b1430e83 <unavailable> + 188035

    6    tmpasv4gpeu                        0x000055d0c3413474 <unavailable> + 9332

    7    tmpasv4gpeu                        0x000055d0c34127bd <unavailable> + 6077

    8    libc.so.6                          0x00002ba2b1b26460 __libc_start_main +
    245

    9    tmpasv4gpeu                        0x000055d0c34124c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    for i in array\
    \ {\n        if i % 2 == 0 {\n            even.append(i)\n        } else {\n \
    \           odd.append(i)\n        }\n    }\n    odd.sort()\n    even.sort()\n\
    \    even = even.reversed()\n    var result = [Int]()\n    for i in 0..<array.count\
    \ {\n        if array[i] % 2 == 0 {\n            result.append(even[0])\n    \
    \        even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpop_itlbq/tmpop_itlbq.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae676dabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae676aa2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae676aa2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae676aa17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpop_itlbq                        0x000055d8e7f7cc16 <unavailable> + 7190

    5    libc.so.6                          0x00002ae676f97460 __libc_start_main +
    245

    6    tmpop_itlbq                        0x000055d8e7f7c5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sortedArray = array\n    var leftIndex = 0\n    var rightIndex\
    \ = array.count - 1\n    while leftIndex < rightIndex {\n        if (array[leftIndex]\
    \ + array[rightIndex]) % 2 == 0 {\n            sortedArray[leftIndex] = array[rightIndex]\n\
    \            sortedArray[rightIndex] = array[leftIndex]\n            leftIndex\
    \ += 1\n            rightIndex -= 1\n        } else {\n            leftIndex +=\
    \ 1\n        }\n    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpl47fh_wc/tmpl47fh_wc.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acdbe718c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acdbe40fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acdbe40f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acdbe40e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl47fh_wc                        0x000055663819d786 <unavailable> + 6022

    5    libc.so.6                          0x00002acdbe904460 __libc_start_main +
    245

    6    tmpl47fh_wc                        0x000055663819d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var first = 0\n    var last = array.count\
    \ - 1\n    while first < last {\n        if (array[first] + array[last]) % 2 ==\
    \ 0 {\n            result[first] = array[last]\n            result[last] = array[first]\n\
    \            first += 1\n            last -= 1\n        } else {\n           \
    \ first += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpt1uz3cjn/tmpt1uz3cjn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d6e902c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d6e5f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d6e5f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d6e5f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt1uz3cjn                        0x000055e39f741786 <unavailable> + 6022

    5    libc.so.6                          0x00002b8d6eaee460 __libc_start_main +
    245

    6    tmpt1uz3cjn                        0x000055e39f741169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if i % 2 == 0 {\n            even.append(array[i])\n\
    \        } else {\n            odd.append(array[i])\n        }\n    }\n    even.sort()\n\
    \    odd.sort()\n    for i in 0..<array.count {\n        if i % 2 == 0 {\n   \
    \         result[i] = even[i / 2]\n        } else {\n            result[i] = odd[i\
    \ / 2]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpxw75ytrm/tmpxw75ytrm.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe0779fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe07496b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe07496988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe074957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxw75ytrm                        0x000055a6405b0a46 <unavailable> + 6726

    5    libc.so.6                          0x00002afe0798b460 __libc_start_main +
    245

    6    tmpxw75ytrm                        0x000055a6405b0429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var start = 0\n    var end = array.count\
    \ - 1\n    while start < end {\n        if (array[start] + array[end]) % 2 ==\
    \ 0 {\n            result[start] = array[end]\n            result[end] = array[start]\n\
    \        }\n        start += 1\n        end -= 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmps9vtmcde/tmps9vtmcde.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b462cd7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b462ca72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b462ca72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b462ca717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps9vtmcde                        0x0000561b4954a786 <unavailable> + 6022

    5    libc.so.6                          0x00002b462cf67460 __libc_start_main +
    245

    6    tmps9vtmcde                        0x0000561b4954a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var oddArray = [Int]()\n    var evenArray\
    \ = [Int]()\n    var result = [Int]()\n    for i in 0..<array.count {\n      \
    \  if array[i] % 2 == 0 {\n            evenArray.append(array[i])\n        } else\
    \ {\n            oddArray.append(array[i])\n        }\n    }\n    oddArray.sort()\n\
    \    evenArray.sort()\n    evenArray.reverse()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result.append(evenArray[0])\n   \
    \         evenArray.removeFirst()\n        } else {\n            result.append(oddArray[0])\n\
    \            oddArray.removeFirst()\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpp4ssh3eb/tmpp4ssh3eb.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d85551c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d85248b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d85248988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d852477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp4ssh3eb                        0x0000558ba2e17b26 <unavailable> + 6950

    5    libc.so.6                          0x00002b7d8573d460 __libc_start_main +
    245

    6    tmpp4ssh3eb                        0x0000558ba2e17509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var start = 0\n    var end = array.count\
    \ - 1\n    while start < end {\n        if (array[start] + array[end]) % 2 ==\
    \ 0 {\n            result[start] = array[end]\n            result[end] = array[start]\n\
    \        }\n        start += 1\n        end -= 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmps9vtmcde/tmps9vtmcde.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b462cd7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b462ca72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b462ca72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b462ca717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps9vtmcde                        0x0000561b4954a786 <unavailable> + 6022

    5    libc.so.6                          0x00002b462cf67460 __libc_start_main +
    245

    6    tmps9vtmcde                        0x0000561b4954a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    while i < j {\n        if array[i] % 2 == 0 {\n            if array[j]\
    \ % 2 == 1 {\n                let temp = array[i]\n                array[i] =\
    \ array[j]\n                array[j] = temp\n                i += 1\n        \
    \        j -= 1\n            } else {\n                j -= 1\n            }\n\
    \        } else {\n            i += 1\n        }\n    }\n    if (i + j) % 2 ==\
    \ 0 {\n        array[i...].sort(by: >)\n    } else {\n        array[i...].sort(by:\
    \ <)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpfbn4n03l/tmpfbn4n03l.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b445d3e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b445d0e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b445d0e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b445d0df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfbn4n03l                        0x000055e12d3c9a26 <unavailable> + 6694

    5    libc.so.6                          0x00002b445d5d5460 __libc_start_main +
    245

    6    tmpfbn4n03l                        0x000055e12d3c9409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    while i < j {\n        if array[i] % 2 == 0 && array[j] % 2 == 1 {\n\
    \            result[i] = array[j]\n            result[j] = array[i]\n        \
    \    i += 1\n            j -= 1\n        } else if array[i] % 2 == 1 && array[j]\
    \ % 2 == 0 {\n            i += 1\n            j -= 1\n        } else if array[i]\
    \ % 2 == 0 && array[j] % 2 == 0 {\n            j -= 1\n        } else {\n    \
    \        i += 1\n        }\n    }\n    if result[0] % 2 == 0 {\n        result.sort(by:\
    \ >)\n    } else {\n        result.sort(by: <)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1361e8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1361b85561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1361b85286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1361b8513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1361b84bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1361984e83 <unavailable> + 188035

    6    tmph_kz6sou                        0x000055cc1c19a5e9 <unavailable> + 9705

    7    tmph_kz6sou                        0x000055cc1c1994cd <unavailable> + 5325

    8    libc.so.6                          0x00002b136207a460 __libc_start_main +
    245

    9    tmph_kz6sou                        0x000055cc1c1991d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var start = 0\n    var end = array.count\
    \ - 1\n    var isOdd = false\n    if (array[start] + array[end]) % 2 == 1 {\n\
    \        isOdd = true\n    }\n    while start < end {\n        if isOdd {\n  \
    \          if array[start] % 2 == 0 {\n                start += 1\n          \
    \  } else if array[end] % 2 == 1 {\n                end -= 1\n            } else\
    \ {\n                array.swapAt(start, end)\n                start += 1\n  \
    \              end -= 1\n            }\n        } else {\n            if array[start]\
    \ % 2 == 1 {\n                start += 1\n            } else if array[end] % 2\
    \ == 0 {\n                end -= 1\n            } else {\n                array.swapAt(start,\
    \ end)\n                start += 1\n                end -= 1\n            }\n\
    \        }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b370b863c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b370b55a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b370b55a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b370b55a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b370b559bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b370b359e83 <unavailable> + 188035

    6    tmp065r81cr                        0x000055e14d6a1e7e <unavailable> + 7806

    7    tmp065r81cr                        0x000055e14d6a149d <unavailable> + 5277

    8    libc.so.6                          0x00002b370ba4f460 __libc_start_main +
    245

    9    tmp065r81cr                        0x000055e14d6a11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for num in array {\n        if num % 2 == 0 {\n      \
    \      evenArray.append(num)\n        } else {\n            oddArray.append(num)\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if array.first!\
    \ + array.last! % 2 == 0 {\n        evenArray.reverse()\n    }\n    for (index,\
    \ num) in array.enumerated() {\n        if num % 2 == 0 {\n            result.append(evenArray[0])\n\
    \            evenArray.removeFirst()\n        } else {\n            result.append(oddArray[0])\n\
    \            oddArray.removeFirst()\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp8sn0q_o5/tmp8sn0q_o5.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b65065e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65062de561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65062de286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65062de13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65062ddbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp8sn0q_o5                        0x000055c94cdc3768 <unavailable> + 10088

    6    tmp8sn0q_o5                        0x000055c94cdc2aed <unavailable> + 6893

    7    libc.so.6                          0x00002b65067d3460 __libc_start_main +
    245

    8    tmp8sn0q_o5                        0x000055c94cdc27f9 <unavailable> + 6137

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var start = 0\n    var end = array.count\
    \ - 1\n    while start < end {\n        if array[start] + array[end] % 2 == 0\
    \ {\n            result[start] = array[end]\n            result[end] = array[start]\n\
    \        }\n        start += 1\n        end -= 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp1tjc9t9u/tmp1tjc9t9u.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac231bcfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2318c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2318c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2318c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1tjc9t9u                        0x0000564e8c03d786 <unavailable> + 6022

    5    libc.so.6                          0x00002ac231dbb460 __libc_start_main +
    245

    6    tmp1tjc9t9u                        0x0000564e8c03d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if array.first!\
    \ + array.last! % 2 == 0 {\n        evenArray.reverse()\n    }\n    for i in 0..<array.count\
    \ {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp2g8loepl/tmp2g8loepl.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b605ed91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b605ea88561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b605ea88286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b605ea8813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b605ea87bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2g8loepl                        0x0000560f024ce615 <unavailable> + 9749

    6    tmp2g8loepl                        0x0000560f024cd8fd <unavailable> + 6397

    7    libc.so.6                          0x00002b605ef7d460 __libc_start_main +
    245

    8    tmp2g8loepl                        0x0000560f024cd609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var left = 0\n    var right = array.count\
    \ - 1\n    while left < right {\n        if array[left] % 2 == 0 {\n         \
    \   while array[right] % 2 == 0 && left < right {\n                right -= 1\n\
    \            }\n            result.swapAt(left, right)\n        }\n        left\
    \ += 1\n    }\n    result.sort(by: { (a, b) -> Bool in\n        if a % 2 == 0\
    \ {\n            return a > b\n        } else {\n            return a < b\n  \
    \      }\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpvkjf5e4h/tmpvkjf5e4h.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05b05f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05b02eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05b02ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05b02e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvkjf5e4h                        0x00005603dab60846 <unavailable> + 6214

    5    libc.so.6                          0x00002b05b07df460 __libc_start_main +
    245

    6    tmpvkjf5e4h                        0x00005603dab60229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var newArray = array\n    var sum = 0\n    for i in 0..<array.count\
    \ {\n        sum += array[i]\n    }\n    if sum % 2 == 0 {\n        newArray.sort(by:\
    \ >)\n    } else {\n        newArray.sort(by: <)\n    }\n    return newArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpmeqel1a3/tmpmeqel1a3.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeab3069c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeab2d60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeab2d60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeab2d5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmeqel1a3                        0x000055fdd80b4a34 <unavailable> + 6708

    5    libc.so.6                          0x00002aeab3255460 __libc_start_main +
    245

    6    tmpmeqel1a3                        0x000055fdd80b4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if i % 2 == 0 {\n\
    \            oddArray.append(array[i])\n        } else {\n            evenArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    for i in 0..<array.count\
    \ {\n        if i % 2 == 0 {\n            result.append(oddArray[i/2])\n     \
    \   } else {\n            result.append(evenArray[i/2])\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpx5djas67/tmpx5djas67.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f79375c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f7906cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f7906c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f7906b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx5djas67                        0x000055dc9d3f39f6 <unavailable> + 6646

    5    libc.so.6                          0x00002b2f79561460 __libc_start_main +
    245

    6    tmpx5djas67                        0x000055dc9d3f33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sortedArray = array\n    let firstIndex = sortedArray.first!\n\
    \    let lastIndex = sortedArray.last!\n    let sum = firstIndex + lastIndex\n\
    \    if sum % 2 == 0 {\n        sortedArray.sort(by: >)\n    } else {\n      \
    \  sortedArray.sort(by: <)\n    }\n    return sortedArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmph3vci42p/tmph3vci42p.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002afc230cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc22dc1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afc22dc1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afc22dc113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afc22dc0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmph3vci42p                        0x0000561fcc6cff49 <unavailable> + 8009

    6    tmph3vci42p                        0x0000561fcc6cf50d <unavailable> + 5389

    7    libc.so.6                          0x00002afc232b6460 __libc_start_main +
    245

    8    tmph3vci42p                        0x0000561fcc6cf219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n            result.sort(by: >)\n     \
    \   } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    for i in array\
    \ {\n        if i % 2 == 0 {\n            even.append(i)\n        } else {\n \
    \           odd.append(i)\n        }\n    }\n    odd.sort()\n    even.sort()\n\
    \    even = even.reversed()\n    var result = [Int]()\n    for i in 0..<array.count\
    \ {\n        if array[i] % 2 == 0 {\n            result.append(even[0])\n    \
    \        even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpop_itlbq/tmpop_itlbq.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae676dabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae676aa2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae676aa2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae676aa17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpop_itlbq                        0x000055d8e7f7cc16 <unavailable> + 7190

    5    libc.so.6                          0x00002ae676f97460 __libc_start_main +
    245

    6    tmpop_itlbq                        0x000055d8e7f7c5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var newArray = array\n    var sum = 0\n    for i in 0..<array.count\
    \ {\n        sum += array[i]\n    }\n    if sum % 2 == 0 {\n        newArray.sort(by:\
    \ >)\n    } else {\n        newArray.sort(by: <)\n    }\n    return newArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpmeqel1a3/tmpmeqel1a3.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeab3069c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeab2d60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeab2d60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeab2d5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmeqel1a3                        0x000055fdd80b4a34 <unavailable> + 6708

    5    libc.so.6                          0x00002aeab3255460 __libc_start_main +
    245

    6    tmpmeqel1a3                        0x000055fdd80b4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result.append(even[0])\n        \
    \    even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4ej09uv1/tmp4ej09uv1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c4d57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c4a4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c4a4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c4a4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ej09uv1                        0x000055e2cc49bc16 <unavailable> + 7190

    5    libc.so.6                          0x00002b26c4f43460 __libc_start_main +
    245

    6    tmp4ej09uv1                        0x000055e2cc49b5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var start = 0\n    var end = array.count\
    \ - 1\n    while start < end {\n        if array[start] % 2 == 0 && array[end]\
    \ % 2 == 1 {\n            result[start] = array[end]\n            result[end]\
    \ = array[start]\n            start += 1\n            end -= 1\n        } else\
    \ if array[start] % 2 == 1 && array[end] % 2 == 0 {\n            start += 1\n\
    \            end -= 1\n        } else if array[start] % 2 == 0 && array[end] %\
    \ 2 == 0 {\n            end -= 1\n        } else {\n            start += 1\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpcjmyvv4o/tmpcjmyvv4o.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab855461c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab855158b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab855158988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8551577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcjmyvv4o                        0x000055c91fdf3786 <unavailable> + 6022

    5    libc.so.6                          0x00002ab85564d460 __libc_start_main +
    245

    6    tmpcjmyvv4o                        0x000055c91fdf3169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    for i in array\
    \ {\n        if i % 2 == 0 {\n            even.append(i)\n        } else {\n \
    \           odd.append(i)\n        }\n    }\n    odd.sort()\n    even.sort()\n\
    \    even = even.reversed()\n    var result = [Int]()\n    for i in 0..<array.count\
    \ {\n        if array[i] % 2 == 0 {\n            result.append(even[0])\n    \
    \        even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpop_itlbq/tmpop_itlbq.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae676dabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae676aa2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae676aa2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae676aa17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpop_itlbq                        0x000055d8e7f7cc16 <unavailable> + 7190

    5    libc.so.6                          0x00002ae676f97460 __libc_start_main +
    245

    6    tmpop_itlbq                        0x000055d8e7f7c5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd = [Int]()\n    var even = [Int]()\n    var result =\
    \ [Int]()\n    for i in array {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    even = even.reversed()\n    for i in 0..<array.count {\n\
    \        if array[i] % 2 == 0 {\n            result.append(even[0])\n        \
    \    even.remove(at: 0)\n        } else {\n            result.append(odd[0])\n\
    \            odd.remove(at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4ej09uv1/tmp4ej09uv1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c4d57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c4a4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c4a4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c4a4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ej09uv1                        0x000055e2cc49bc16 <unavailable> + 7190

    5    libc.so.6                          0x00002b26c4f43460 __libc_start_main +
    245

    6    tmp4ej09uv1                        0x000055e2cc49b5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var oddArray = [Int]()\n    var evenArray\
    \ = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n\
    \            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if array.first!\
    \ + array.last! % 2 == 0 {\n        evenArray.reverse()\n    }\n    for i in 0..<array.count\
    \ {\n        if array[i] % 2 == 0 {\n            array[i] = evenArray.removeFirst()\n\
    \        } else {\n            array[i] = oddArray.removeFirst()\n        }\n\
    \    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp6xihtcge/tmp6xihtcge.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002abaeba76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abaeb76d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abaeb76d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abaeb76d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abaeb76cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp6xihtcge                        0x0000556c564ce6a8 <unavailable> + 9896

    6    tmp6xihtcge                        0x0000556c564cd94d <unavailable> + 6477

    7    libc.so.6                          0x00002abaebc62460 __libc_start_main +
    245

    8    tmp6xihtcge                        0x0000556c564cd659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if i % 2 == 0 {\n\
    \            oddArray.append(array[i])\n        } else {\n            evenArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    for i in 0..<array.count\
    \ {\n        if i % 2 == 0 {\n            result.append(oddArray[i/2])\n     \
    \   } else {\n            result.append(evenArray[i/2])\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpx5djas67/tmpx5djas67.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f79375c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f7906cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f7906c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f7906b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx5djas67                        0x000055dc9d3f39f6 <unavailable> + 6646

    5    libc.so.6                          0x00002b2f79561460 __libc_start_main +
    245

    6    tmpx5djas67                        0x000055dc9d3f33d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    var isOdd = false\n    if (array[0] + array[array.count - 1]) % 2 ==\
    \ 1 {\n        isOdd = true\n    }\n    while i < j {\n        if isOdd {\n  \
    \          if result[i] % 2 == 0 {\n                while result[j] % 2 == 0 {\n\
    \                    j -= 1\n                }\n                let temp = result[i]\n\
    \                result[i] = result[j]\n                result[j] = temp\n   \
    \             j -= 1\n            }\n        } else {\n            if result[i]\
    \ % 2 == 1 {\n                while result[j] % 2 == 1 {\n                   \
    \ j -= 1\n                }\n                let temp = result[i]\n          \
    \      result[i] = result[j]\n                result[j] = temp\n             \
    \   j -= 1\n            }\n        }\n        i += 1\n    }\n    if isOdd {\n\
    \        result.sort(by: >)\n    } else {\n        result.sort(by: <)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b40d04c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40d01b9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b40d01b9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b40d01b913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b40d01b8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b40cffb8e83 <unavailable> + 188035

    6    tmph_mqhmeo                        0x000055d610950e72 <unavailable> + 7794

    7    tmph_mqhmeo                        0x000055d6109504cd <unavailable> + 5325

    8    libc.so.6                          0x00002b40d06ae460 __libc_start_main +
    245

    9    tmph_mqhmeo                        0x000055d6109501d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if i % 2 == 0 {\n            odd.append(array[i])\n\
    \        } else {\n            even.append(array[i])\n        }\n    }\n    odd.sort()\n\
    \    even.sort(by: >)\n    for i in 0..<array.count {\n        if i % 2 == 0 {\n\
    \            array[i] = odd[i / 2]\n        } else {\n            array[i] = even[i\
    \ / 2]\n        }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpo0kpw0tw/tmpo0kpw0tw.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaba3211c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaba2f08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaba2f08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaba2f077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo0kpw0tw                        0x0000557719c93ab6 <unavailable> + 6838

    5    libc.so.6                          0x00002aaba33fd460 __libc_start_main +
    245

    6    tmpo0kpw0tw                        0x0000557719c93499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    var temp = 0\n    while i < j {\n        if (array[i] + array[j]) % 2\
    \ == 0 {\n            temp = result[i]\n            result[i] = result[j]\n  \
    \          result[j] = temp\n            i += 1\n            j -= 1\n        }\
    \ else {\n            i += 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd0xqfc6v/tmpd0xqfc6v.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16bfd63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16bfa5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16bfa5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16bfa597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0xqfc6v                        0x0000557f8144a786 <unavailable> + 6022

    5    libc.so.6                          0x00002b16bff4f460 __libc_start_main +
    245

    6    tmpd0xqfc6v                        0x0000557f8144a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var start = 0\n    var end = array.count\
    \ - 1\n    while start < end {\n        if (array[start] + array[end]) % 2 ==\
    \ 0 {\n            result[start] = array[end]\n            result[end] = array[start]\n\
    \        }\n        start += 1\n        end -= 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmps9vtmcde/tmps9vtmcde.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b462cd7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b462ca72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b462ca72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b462ca717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps9vtmcde                        0x0000561b4954a786 <unavailable> + 6022

    5    libc.so.6                          0x00002b462cf67460 __libc_start_main +
    245

    6    tmps9vtmcde                        0x0000561b4954a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    evenArray.reverse()\n\
    \    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpwhih9_tt/tmpwhih9_tt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75fa38cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75fa083b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75fa083988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75fa0827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwhih9_tt                        0x0000559caf8a4b26 <unavailable> + 6950

    5    libc.so.6                          0x00002b75fa578460 __libc_start_main +
    245

    6    tmpwhih9_tt                        0x0000559caf8a4509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort(by: >)\n    evenArray.sort(by: <)\n    for\
    \ i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmper6k8v4l/tmper6k8v4l.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeeadceac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeead9e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeead9e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeead9e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmper6k8v4l                        0x0000556180c7e9e6 <unavailable> + 6630

    5    libc.so.6                          0x00002aeeaded6460 __libc_start_main +
    245

    6    tmper6k8v4l                        0x0000556180c7e3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if i % 2 == 0 {\n            odd.append(array[i])\n\
    \        } else {\n            even.append(array[i])\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    for i in 0..<array.count {\n        if i % 2 == 0 {\n  \
    \          result[i] = odd[i / 2]\n        } else {\n            result[i] = even[i\
    \ / 2]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp20k0ypsd/tmp20k0ypsd.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b362804ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3627d45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3627d45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3627d447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp20k0ypsd                        0x000055e2b954ba46 <unavailable> + 6726

    5    libc.so.6                          0x00002b362823a460 __libc_start_main +
    245

    6    tmp20k0ypsd                        0x000055e2b954b429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var start = 0\n    var end = array.count\
    \ - 1\n    while start < end {\n        if array[start] % 2 == 0 && array[end]\
    \ % 2 == 1 {\n            result[start] = array[end]\n            result[end]\
    \ = array[start]\n            start += 1\n            end -= 1\n        } else\
    \ if array[start] % 2 == 1 && array[end] % 2 == 0 {\n            start += 1\n\
    \            end -= 1\n        } else if array[start] % 2 == 0 && array[end] %\
    \ 2 == 0 {\n            end -= 1\n        } else {\n            start += 1\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpcjmyvv4o/tmpcjmyvv4o.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab855461c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab855158b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab855158988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8551577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcjmyvv4o                        0x000055c91fdf3786 <unavailable> + 6022

    5    libc.so.6                          0x00002ab85564d460 __libc_start_main +
    245

    6    tmpcjmyvv4o                        0x000055c91fdf3169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = result.count\
    \ - 1\n    while i < j {\n        if result[i] % 2 == 0 {\n            while j\
    \ > i {\n                if result[j] % 2 == 1 {\n                    let temp\
    \ = result[i]\n                    result[i] = result[j]\n                   \
    \ result[j] = temp\n                    j -= 1\n                    break\n  \
    \              }\n                j -= 1\n            }\n        }\n        i\
    \ += 1\n    }\n    if result.count % 2 == 1 {\n        for i in 0..<result.count\
    \ / 2 {\n            let temp = result[i]\n            result[i] = result[result.count\
    \ - 1 - i]\n            result[result.count - 1 - i] = temp\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp9xbyvxjf/tmp9xbyvxjf.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51ce004c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51cdcfbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51cdcfb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51cdcfa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9xbyvxjf                        0x000055eb6b497876 <unavailable> + 6262

    5    libc.so.6                          0x00002b51ce1f0460 __libc_start_main +
    245

    6    tmp9xbyvxjf                        0x000055eb6b497259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var oddArray = [Int]()\n    var evenArray\
    \ = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 == 0 {\n\
    \            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort(by: >)\n    evenArray.sort(by: <)\n    for\
    \ i in 0..<array.count {\n        if array[i] % 2 == 0 {\n            array[i]\
    \ = evenArray.removeFirst()\n        } else {\n            array[i] = oddArray.removeFirst()\n\
    \        }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpbjzuuin0/tmpbjzuuin0.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1cf562c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1cf259b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1cf259988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1cf2587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbjzuuin0                        0x000055b32d2e8a46 <unavailable> + 6726

    5    libc.so.6                          0x00002ab1cf74e460 __libc_start_main +
    245

    6    tmpbjzuuin0                        0x000055b32d2e8429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    var isOdd = false\n    if (array[0] + array[array.count - 1]) % 2 ==\
    \ 1 {\n        isOdd = true\n    }\n    while i < j {\n        if isOdd {\n  \
    \          if result[i] % 2 == 0 {\n                while result[j] % 2 == 0 {\n\
    \                    j -= 1\n                }\n                let temp = result[i]\n\
    \                result[i] = result[j]\n                result[j] = temp\n   \
    \             j -= 1\n            }\n        } else {\n            if result[i]\
    \ % 2 == 1 {\n                while result[j] % 2 == 1 {\n                   \
    \ j -= 1\n                }\n                let temp = result[i]\n          \
    \      result[i] = result[j]\n                result[j] = temp\n             \
    \   j -= 1\n            }\n        }\n        i += 1\n    }\n    if isOdd {\n\
    \        result.sort(by: >)\n    } else {\n        result.sort(by: <)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b40d04c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40d01b9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b40d01b9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b40d01b913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b40d01b8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b40cffb8e83 <unavailable> + 188035

    6    tmph_mqhmeo                        0x000055d610950e72 <unavailable> + 7794

    7    tmph_mqhmeo                        0x000055d6109504cd <unavailable> + 5325

    8    libc.so.6                          0x00002b40d06ae460 __libc_start_main +
    245

    9    tmph_mqhmeo                        0x000055d6109501d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var odd = [Int]()\n    var even = [Int]()\n\
    \    for i in 0..<array.count {\n        if i % 2 == 0 {\n            odd.append(array[i])\n\
    \        } else {\n            even.append(array[i])\n        }\n    }\n    odd.sort()\n\
    \    even.sort(by: >)\n    for i in 0..<array.count {\n        if i % 2 == 0 {\n\
    \            result[i] = odd[i / 2]\n        } else {\n            result[i] =\
    \ even[i / 2]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpwdbq2nml/tmpwdbq2nml.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc3dad6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc3d7cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc3d7cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc3d7cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwdbq2nml                        0x0000559d8e245ab6 <unavailable> + 6838

    5    libc.so.6                          0x00002abc3dcc2460 __libc_start_main +
    245

    6    tmpwdbq2nml                        0x0000559d8e245499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var start = 0\n    var end = array.count\
    \ - 1\n    while start < end {\n        if array[start] % 2 == 0 {\n         \
    \   if array[end] % 2 != 0 {\n                result[start] = array[end]\n   \
    \             result[end] = array[start]\n                start += 1\n       \
    \         end -= 1\n            } else {\n                end -= 1\n         \
    \   }\n        } else {\n            start += 1\n        }\n    }\n    if result.count\
    \ % 2 == 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by:\
    \ <)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpu1j0o0cf/tmpu1j0o0cf.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b4dad3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b4d7cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b4d7ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b4d7c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu1j0o0cf                        0x00005560bf00e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b1b4dcbf460 __libc_start_main +
    245

    6    tmpu1j0o0cf                        0x00005560bf00e1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 0 {\n            evenArray.append(array[i])\n        } else {\n            oddArray.append(array[i])\n\
    \        }\n    }\n    oddArray.sort()\n    evenArray.sort()\n    if array.first!\
    \ + array.last! % 2 == 0 {\n        evenArray.reverse()\n    }\n    for i in 0..<array.count\
    \ {\n        if array[i] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp2g8loepl/tmp2g8loepl.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b605ed91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b605ea88561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b605ea88286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b605ea8813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b605ea87bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2g8loepl                        0x0000560f024ce615 <unavailable> + 9749

    6    tmp2g8loepl                        0x0000560f024cd8fd <unavailable> + 6397

    7    libc.so.6                          0x00002b605ef7d460 __libc_start_main +
    245

    8    tmp2g8loepl                        0x0000560f024cd609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660013949
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var left = 0\n    var right = array.count\
    \ - 1\n    while left < right {\n        if array[left] % 2 == 0 {\n         \
    \   if array[right] % 2 != 0 {\n                result.swapAt(left, right)\n \
    \               left += 1\n                right -= 1\n            } else {\n\
    \                right -= 1\n            }\n        } else {\n            left\
    \ += 1\n        }\n    }\n    if array.count % 2 == 0 {\n        for i in 0..<array.count/2\
    \ {\n            if array[i] > array[array.count - 1 - i] {\n                result.swapAt(i,\
    \ array.count - 1 - i)\n            }\n        }\n    } else {\n        for i\
    \ in 0..<array.count/2 {\n            if array[i] < array[array.count - 1 - i]\
    \ {\n                result.swapAt(i, array.count - 1 - i)\n            }\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp24ea1u5n/tmp24ea1u5n.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8df63d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8df60c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8df60c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8df60c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp24ea1u5n                        0x0000558090ed88c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b8df65bc460 __libc_start_main +
    245

    6    tmp24ea1u5n                        0x0000558090ed82a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var first = 0\n    var last = array.count\
    \ - 1\n    var temp = 0\n    if (first + last) % 2 == 0 {\n        while first\
    \ < last {\n            if result[first] > result[last] {\n                temp\
    \ = result[first]\n                result[first] = result[last]\n            \
    \    result[last] = temp\n            }\n            first += 1\n            last\
    \ -= 1\n        }\n    } else {\n        while first < last {\n            if\
    \ result[first] < result[last] {\n                temp = result[first]\n     \
    \           result[first] = result[last]\n                result[last] = temp\n\
    \            }\n            first += 1\n            last -= 1\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpvhmsgel2/tmpvhmsgel2.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9572406c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95720fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95720fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95720fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvhmsgel2                        0x00005625dbe89786 <unavailable> + 6022

    5    libc.so.6                          0x00002b95725f2460 __libc_start_main +
    245

    6    tmpvhmsgel2                        0x00005625dbe89169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var sum = array[0] + array[array.count\
    \ - 1]\n    if sum % 2 == 0 {\n        array.sort(by: >)\n    } else {\n     \
    \   array.sort(by: <)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ccd28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36cca1f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36cca1f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36cca1f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36cca1ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36cc81ee83 <unavailable> + 188035

    6    tmp3svnopdp                        0x000055e5e2fb8daf <unavailable> + 7599

    7    tmp3svnopdp                        0x000055e5e2fb847d <unavailable> + 5245

    8    libc.so.6                          0x00002b36ccf14460 __libc_start_main +
    245

    9    tmp3svnopdp                        0x000055e5e2fb8189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    for i in 0..<result.count {\n      \
    \  for j in 0..<result.count - 1 {\n            if (i + j) % 2 == 0 {\n      \
    \          if result[j] > result[j + 1] {\n                    let temp = result[j]\n\
    \                    result[j] = result[j + 1]\n                    result[j +\
    \ 1] = temp\n                }\n            } else {\n                if result[j]\
    \ < result[j + 1] {\n                    let temp = result[j]\n              \
    \      result[j] = result[j + 1]\n                    result[j + 1] = temp\n \
    \               }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpsxh855q9/tmpsxh855q9.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba74cb7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba74c876b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba74c876988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba74c8757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsxh855q9                        0x000055e256ff5876 <unavailable> + 6262

    5    libc.so.6                          0x00002ba74cd6b460 __libc_start_main +
    245

    6    tmpsxh855q9                        0x000055e256ff5259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    while i < j {\n        if array[i] % 2 == 0 && array[j] % 2 == 1 {\n\
    \            let temp = array[i]\n            array[i] = array[j]\n          \
    \  array[j] = temp\n            i += 1\n            j -= 1\n        } else if\
    \ array[i] % 2 == 1 && array[j] % 2 == 1 {\n            i += 1\n        } else\
    \ if array[i] % 2 == 0 && array[j] % 2 == 0 {\n            j -= 1\n        } else\
    \ {\n            i += 1\n            j -= 1\n        }\n    }\n    if array.count\
    \ % 2 == 1 {\n        if array[array.count / 2] % 2 == 0 {\n            for i\
    \ in 0..<array.count / 2 {\n                let temp = array[i]\n            \
    \    array[i] = array[array.count - 1 - i]\n                array[array.count\
    \ - 1 - i] = temp\n            }\n        }\n    } else {\n        for i in 0..<array.count\
    \ / 2 {\n            let temp = array[i]\n            array[i] = array[array.count\
    \ - 1 - i]\n            array[array.count - 1 - i] = temp\n        }\n    }\n\
    \    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmplc4vnpkb/tmplc4vnpkb.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e7f355c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e7f04cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e7f04c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e7f04b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplc4vnpkb                        0x00005613cffb1876 <unavailable> + 6262

    5    libc.so.6                          0x00002b8e7f541460 __libc_start_main +
    245

    6    tmplc4vnpkb                        0x00005613cffb1259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var newArray = array\n    var i = 0\n    while i < newArray.count\
    \ {\n        var j = i + 1\n        while j < newArray.count {\n            if\
    \ (newArray[i] + newArray[newArray.count - 1]) % 2 == 0 {\n                if\
    \ newArray[i] < newArray[j] {\n                    let temp = newArray[i]\n  \
    \                  newArray[i] = newArray[j]\n                    newArray[j]\
    \ = temp\n                }\n            } else {\n                if newArray[i]\
    \ > newArray[j] {\n                    let temp = newArray[i]\n              \
    \      newArray[i] = newArray[j]\n                    newArray[j] = temp\n   \
    \             }\n            }\n            j += 1\n        }\n        i += 1\n\
    \    }\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpbhg_5qkb/tmpbhg_5qkb.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25d6fd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25d6ccbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25d6ccb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25d6cca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbhg_5qkb                        0x000056495cd42786 <unavailable> + 6022

    5    libc.so.6                          0x00002b25d71c0460 __libc_start_main +
    245

    6    tmpbhg_5qkb                        0x000056495cd42169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    let sum = array[i] + array[j]\n    while i < j {\n        if sum % 2\
    \ == 0 {\n            if array[i] > array[j] {\n                array.swapAt(i,\
    \ j)\n            }\n            i += 1\n        } else {\n            if array[i]\
    \ < array[j] {\n                array.swapAt(i, j)\n            }\n          \
    \  j -= 1\n        }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b11370fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1136df4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1136df4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1136df413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1136df3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1136bf3e83 <unavailable> + 188035

    6    tmp3eolbmal                        0x00005621dd62ae7a <unavailable> + 7802

    7    tmp3eolbmal                        0x00005621dd62a49d <unavailable> + 5277

    8    libc.so.6                          0x00002b11372e9460 __libc_start_main +
    245

    9    tmp3eolbmal                        0x00005621dd62a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013950
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    while i < j {\n        if (array[i] + array[j]) % 2 == 0 {\n        \
    \    result[i] = array[j]\n            result[j] = array[i]\n            i +=\
    \ 1\n            j -= 1\n        } else {\n            i += 1\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpormitlsd/tmpormitlsd.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5d8f81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5d8c78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5d8c78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5d8c777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpormitlsd                        0x0000561d30b1d786 <unavailable> + 6022

    5    libc.so.6                          0x00002ac5d916d460 __libc_start_main +
    245

    6    tmpormitlsd                        0x0000561d30b1d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013949
