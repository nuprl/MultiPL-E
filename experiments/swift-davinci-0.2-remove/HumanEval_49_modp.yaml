name: HumanEval_49_modp
language: swift
prompt: "\n/// Return 2^n modulo p (be aware of numerics).\nfunc modp(n: Int, p: Int)\
  \ -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(modp(n: 3, p: 5) == 3)\nassert(modp(n: 1101,\
  \ p: 101) == 2)\nassert(modp(n: 0, p: 101) == 1)\nassert(modp(n: 3, p: 11) == 8)\n\
  assert(modp(n: 100, p: 101) == 1)\nassert(modp(n: 30, p: 5) == 4)\nassert(modp(n:\
  \ 31, p: 5) == 3)"
completions: ["    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n   \
    \     return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return 2 *\
    \ modp(n - 1, p: p) % p", "    if n == 0 {\n        return 1\n    }\n    if n\
    \ % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n\
    \    return modp(n - 1, p: p) * 2 % p", "    var res = 1\n    var n = n\n    var\
    \ p = p\n    while n > 0 {\n        if n % 2 == 1 {\n            res = (res *\
    \ 2) % p\n        }\n        n /= 2\n        p = (p * p) % MODULO\n    }\n   \
    \ return res", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        let m = modp(n / 2, p: p)\n        return (m * m) % p\n    }\n    return\
    \ (2 * modp(n - 1, p: p)) % p", "    var result = 1\n    for _ in 0..<n {\n  \
    \      result = (result * 2) % p\n    }\n    return result", "    var result =\
    \ 1\n    var n = n\n    var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n\
    \            result = (result * 2) % p\n        }\n        n /= 2\n        p =\
    \ (p * p) % MODULO\n    }\n    return result", "    var res = 1\n    var n = n\n\
    \    var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n            res =\
    \ (res * 2) % p\n        }\n        n /= 2\n        p = (p * p) % MODULO\n   \
    \ }\n    return res", "    if n == 0 {\n        return 1\n    }\n    if n % 2\
    \ == 0 {\n        return modp(n/2, p: p) * modp(n/2, p: p) % p\n    }\n    return\
    \ 2 * modp(n-1, p: p) % p", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n/2, p: p) * modp(n/2, p: p) % p\n    }\n\
    \    return modp(n-1, p: p) * 2 % p", "    var res = 1\n    var n = n\n    var\
    \ p = p\n    while n > 0 {\n        if n & 1 != 0 {\n            res = (res *\
    \ n) % p\n        }\n        n = n >> 1\n        p = (p * p) % p\n    }\n    return\
    \ res", "    var result = 1\n    for _ in 0..<n {\n        result = (result *\
    \ 2) % p\n    }\n    return result", "    if n == 0 {\n        return 1\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n\
    \    }\n    return modp(n - 1, p: p) * 2 % p", "    var result = 1\n    var n\
    \ = n\n    var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n           \
    \ result = (result * 2) % p\n        }\n        n /= 2\n        p = (p * p) %\
    \ modulus\n    }\n    return result", "    if n == 0 {\n        return 1\n   \
    \ }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p)\
    \ % p\n    }\n    return 2 * modp(n - 1, p: p) % p", "    var res = 1\n    var\
    \ n = n\n    var p = p\n    while n > 0 {\n        if n & 1 == 1 {\n         \
    \   res = (res * n) % p\n        }\n        n = n >> 1\n        p = (p * p) %\
    \ p\n    }\n    return res", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n/2, p: p) * modp(n/2, p: p) % p\n    }\n\
    \    return 2 * modp(n-1, p: p) % p", "    if n == 0 {\n        return 1\n   \
    \ }\n    if n % 2 == 0 {\n        return modp(n/2, p: p) * modp(n/2, p: p) % p\n\
    \    }\n    return 2 * modp(n-1, p: p) % p", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p: p) * modp(n/2, p:\
    \ p) % p\n    }\n    return modp(n-1, p: p) * modp(1, p: p) % p", "    var result\
    \ = 1\n    var n = n\n    var p = p\n    while n > 0 {\n        if n % 2 == 1\
    \ {\n            result = (result * 2) % p\n        }\n        n /= 2\n      \
    \  p = (p * p) % modulus\n    }\n    return result", "    if n == 0 {\n      \
    \  return 1\n    }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n\
    \ / 2, p: p) % p\n    }\n    return modp(n - 1, p: p) * modp(1, p: p) % p", " \
    \   if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        let x =\
    \ modp(n / 2, p: p)\n        return (x * x) % p\n    }\n    return (2 * modp(n\
    \ - 1, p: p)) % p", "    var result = 1\n    var n = n\n    var p = p\n    while\
    \ n > 0 {\n        if n % 2 == 1 {\n            result = (result * 2) % p\n  \
    \      }\n        n /= 2\n        p = (p * p) % MODULO\n    }\n    return result",
  "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p: p) * modp(n/2, p: p) % p\n    }\n    return modp(n-1, p: p) * 2 % p", " \
    \   if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return\
    \ modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return 2 * modp(n - 1,\
    \ p: p) % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        let x = modp(n: n / 2, p: p)\n        return (x * x) % p\n    }\n   \
    \ return (2 * modp(n: n - 1, p: p)) % p", "    var res = 1\n    var n = n\n  \
    \  var p = p\n    while n > 0 {\n        if n & 1 == 1 {\n            res = (res\
    \ * n) % p\n        }\n        n = n >> 1\n        p = (p * p) % p\n    }\n  \
    \  return res", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n\
    \ - 1, p: p) * modp(1, p: p) % p", "    var res = 1\n    var n = n\n    var p\
    \ = p\n    while n > 0 {\n        if n & 1 == 1 {\n            res = (res * n)\
    \ % p\n        }\n        n = n >> 1\n        p = (p * p) % p\n    }\n    return\
    \ res", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n     \
    \   return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n\
    \ - 1, p: p) * modp(1, p: p) % p", "    if n == 0 {\n        return 1\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n/2, p: p) * modp(n/2, p: p) % p\n \
    \   }\n    return modp(n-1, p: p) * modp(1, p: p) % p", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p: p) * modp(n/2,\
    \ p: p) % p\n    }\n    return 2 * modp(n-1, p: p) % p", "    var result = 1\n\
    \    for _ in 0..<n {\n        result = (result * 2) % p\n    }\n    return result",
  "    if n == 0 {\n        return 1\n    } else if n % 2 == 0 {\n        let m =\
    \ modp(n/2, p: p)\n        return (m*m) % p\n    } else {\n        return (2 *\
    \ modp(n-1, p: p)) % p\n    }", "    if n == 0 {\n        return 1\n    }\n  \
    \  if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n\
    \    }\n    return modp(n - 1, p: p) * modp(1, p: p) % p", "    var result = 1\n\
    \    var n = n\n    var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n  \
    \          result = (result * 2) % p\n        }\n        n /= 2\n        p = (p\
    \ * p) % MODULO\n    }\n    return result", "    var result = 1\n    for _ in\
    \ 0..<n {\n        result = (result * 2) % p\n    }\n    return result", "   \
    \ if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n\
    \ / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return 2 * modp(n - 1, p: p)\
    \ % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n     \
    \   return modp(n/2, p: p) * modp(n/2, p: p) % p\n    }\n    return modp(n-1,\
    \ p: p) * modp(1, p: p) % p", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        let x = modp(n / 2, p: p)\n        return (x * x) % p\n\
    \    }\n    return (2 * modp(n - 1, p: p)) % p", "    var n = n\n    var result\
    \ = 1\n    while n > 0 {\n        if n % 2 == 1 {\n            result = (result\
    \ * 2) % p\n        }\n        n /= 2\n    }\n    return result", "    if n ==\
    \ 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n / 2,\
    \ p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n - 1, p: p) * modp(1,\
    \ p: p) % p", "    var r = 1\n    var k = n\n    var m = p\n    while k > 0 {\n\
    \        if k % 2 == 1 {\n            r = (r * n) % p\n        }\n        k =\
    \ k / 2\n        n = (n * n) % p\n    }\n    return r", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2\
    \ == 0 {\n        return modp(n: n/2, p: p) * modp(n: n/2, p: p) % p\n    }\n\
    \    return modp(n: n/2, p: p) * modp(n: n/2, p: p) * 2 % p", "    if n == 0 {\n\
    \        return 1\n    }\n    if n % 2 == 0 {\n        let m = modp(n / 2, p:\
    \ p)\n        return (m * m) % p\n    }\n    return (2 * modp(n - 1, p: p)) %\
    \ p", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n       \
    \ let m = modp(n / 2, p: p)\n        return (m * m) % p\n    }\n    return (2\
    \ * modp(n - 1, p: p)) % p", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        let x = modp(n / 2, p: p)\n        return (x * x) % p\n\
    \    }\n    return (2 * modp(n - 1, p: p)) % p", "    var res = 1\n    var n =\
    \ n\n    var p = p\n    while n > 0 {\n        if n & 1 == 1 {\n            res\
    \ = (res * n) % p\n        }\n        n = n >> 1\n        p = (p * p) % p\n  \
    \  }\n    return res", "    if n == 0 {\n        return 1\n    }\n    if n % 2\
    \ == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n  \
    \  return modp(n - 1, p: p) * 2 % p", "    var res = 1\n    var n = n\n    var\
    \ p = p\n    while n > 0 {\n        if n & 1 == 1 {\n            res = (res *\
    \ n) % p\n        }\n        n = n >> 1\n        p = (p * p) % p\n    }\n    return\
    \ res", "    var res = 1\n    var nn = n\n    while nn > 0 {\n        if nn &\
    \ 1 != 0 {\n            res = (res * n) % p\n        }\n        nn >>= 1\n   \
    \     n = (n * n) % p\n    }\n    return res", "    var r = 1\n    var k = n\n\
    \    var m = p\n    while k > 0 {\n        if k & 1 == 1 {\n            r = (r\
    \ * k) % m\n        }\n        k = k >> 1\n        m = (m * m) % p\n    }\n  \
    \  return r", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n/2, p: p) * modp(n/2, p: p) % p\n    }\n    return 2 * modp(n-1,\
    \ p: p) % p", "    if n == 0 {\n        return 1\n    } else if n % 2 == 0 {\n\
    \        let x = modp(n / 2, p: p)\n        return (x * x) % p\n    } else {\n\
    \        return (2 * modp(n - 1, p: p)) % p\n    }", "    var result = 1\n   \
    \ for _ in 0..<n {\n        result = (result * 2) % p\n    }\n    return result",
  "    var result = 1\n    for _ in 0..<n {\n        result = (result * 2) % p\n \
    \   }\n    return result", "    var result = 1\n    var n = n\n    var p = p\n\
    \    while n > 0 {\n        if n % 2 == 1 {\n            result = (result * 2)\
    \ % p\n        }\n        n /= 2\n        p = (p * p) % modulus\n    }\n    return\
    \ result", "    var res = 1\n    var n = n\n    var p = p\n    while n > 0 {\n\
    \        if n & 1 == 1 {\n            res = (res * n) % p\n        }\n       \
    \ n = n >> 1\n        p = (p * p) % p\n    }\n    return res", "    if n == 0\
    \ {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n / 2,\
    \ p: p) * modp(n / 2, p: p) % p\n    }\n    return 2 * modp(n - 1, p: p) % p",
  "    var res = 1\n    var n = n\n    var p = p\n    while n > 0 {\n        if n\
    \ % 2 == 1 {\n            res = (res * 2) % p\n        }\n        n /= 2\n   \
    \     p = (p * p) % MODULO\n    }\n    return res", "  if n == 0 {\n    return\
    \ 1\n  }\n  if n % 2 == 0 {\n    return modp(n/2, p: p) * modp(n/2, p: p) % p\n\
    \  }\n  return modp(n/2, p: p) * modp(n/2, p: p) * 2 % p", "    if n == 0 {\n\
    \        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p: p)\
    \ * modp(n/2, p: p) % p\n    }\n    return 2 * modp(n-1, p: p) % p", "    var\
    \ res = 1\n    var n = n\n    var p = p\n    while n > 0 {\n        if n % 2 ==\
    \ 1 {\n            res = (res * 2) % p\n        }\n        n /= 2\n        p =\
    \ (p * p) % MODULO\n    }\n    return res", "    var result = 1\n    var n = n\n\
    \    var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n            result\
    \ = (result * 2) % p\n        }\n        n /= 2\n        p = (p * p) % MODULO\n\
    \    }\n    return result", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n   \
    \ }\n    return 2 * modp(n - 1, p: p) % p", "    if n == 0 {\n        return 1\n\
    \    }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p:\
    \ p) % p\n    }\n    return modp(n - 1, p: p) * modp(1, p: p) % p", "    if n\
    \ == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n\
    \ / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n - 1, p: p) * 2\
    \ % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n     \
    \   return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return 2 * modp(n\
    \ - 1, p: p) % p", "    var result = 1\n    for _ in 0..<n {\n        result =\
    \ (result * 2) % p\n    }\n    return result", "    var result = 1\n    for _\
    \ in 0..<n {\n        result = (result * 2) % p\n    }\n    return result", " \
    \   var res = 1\n    var n = n\n    var p = p\n    while n > 0 {\n        if n\
    \ & 1 == 1 {\n            res = (res * n) % p\n        }\n        n = n >> 1\n\
    \        p = (p * p) % p\n    }\n    return res", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p: p) * modp(n/2, p:\
    \ p) % p\n    }\n    return modp(n-1, p: p) * 2 % p", "    var res = 1\n    var\
    \ n = n\n    var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n         \
    \   res = (res * 2) % p\n        }\n        n /= 2\n        p = (p * p) % MODULO\n\
    \    }\n    return res", "    if n == 0 {\n        return 1\n    }\n    if n %\
    \ 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n\
    \    return 2 * modp(n - 1, p: p) % p", "    var res = 1\n    var n = n\n    var\
    \ p = p\n    while n > 0 {\n        if n & 1 == 1 {\n            res = (res *\
    \ n) % p\n        }\n        n = n >> 1\n        p = (p * p) % p\n    }\n    return\
    \ res", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n     \
    \   let x = modp(n / 2, p: p)\n        return (x * x) % p\n    }\n    return (2\
    \ * modp(n - 1, p: p)) % p", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n   \
    \ }\n    return modp(n - 1, p: p) * modp(1, p: p) % p", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p) *\
    \ modp(n / 2, p: p) % p\n    }\n    return 2 * modp(n - 1, p: p) % p", "    var\
    \ result = 1\n    for _ in 0..<n {\n        result = (result * 2) % p\n    }\n\
    \    return result", "    var r = 1\n    var k = n\n    var m = p\n    while k\
    \ > 0 {\n        if k % 2 == 1 {\n            r = (r * n) % p\n        }\n   \
    \     k = k / 2\n        n = (n * n) % p\n    }\n    return r", "    if n == 0\
    \ {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n / 2,\
    \ p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n - 1, p: p) * modp(1,\
    \ p: p) % p", "    if n == 0 {\n        return 1\n    } else if n == 1 {\n   \
    \     return 2\n    } else if n % 2 == 0 {\n        let m = modp(n: n / 2, p:\
    \ p)\n        return (m * m) % p\n    } else {\n        return (2 * modp(n: n\
    \ - 1, p: p)) % p\n    }", "    var result = 1\n    for _ in 0..<n {\n       \
    \ result = (result * 2) % p\n    }\n    return result", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n % 2 == 0 {\n        let x = modp(n / 2, p: p)\n\
    \        return (x * x) % p\n    }\n    return (2 * modp(n - 1, p: p)) % p", " \
    \   if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return\
    \ modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n - 1, p:\
    \ p) * modp(1, p: p) % p", "    if n == 0 {\n        return 1\n    }\n    if n\
    \ % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n\
    \    return modp(n - 1, p: p) * modp(1, p: p) % p", "    var res = 1\n    var\
    \ n = n\n    var p = p\n    while n > 0 {\n        if n & 1 == 1 {\n         \
    \   res = (res * n) % p\n        }\n        n = n >> 1\n        p = (p * p) %\
    \ p\n    }\n    return res", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n   \
    \ }\n    return modp(n - 1, p: p) * 2 % p", "    var n = n\n    var p = p\n  \
    \  var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n            result\
    \ = (result * 2) % p\n        }\n        n /= 2\n        p = (p * p) % MODULO\n\
    \    }\n    return result", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n   \
    \ }\n    return modp(n - 1, p: p) * 2 % p", "    if n == 0 {\n        return 1\n\
    \    }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p:\
    \ p) % p\n    }\n    return 2 * modp(n - 1, p: p) % p", "    var result = 1\n\
    \    for _ in 0..<n {\n        result = (result * 2) % p\n    }\n    return result",
  "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n\
    \ / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n - 1, p: p) * modp(1,\
    \ p: p) % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n\
    \ - 1, p: p) * modp(1, p: p) % p", "    if n == 0 {\n        return 1\n    }\n\
    \    if n % 2 == 0 {\n        let x = modp(n / 2, p: p)\n        return (x * x)\
    \ % p\n    }\n    return (2 * modp(n - 1, p: p)) % p", "    var res = 1\n    var\
    \ n = n\n    var p = p\n    while n > 0 {\n        if n & 1 == 1 {\n         \
    \   res = (res * res) % p\n        }\n        n >>= 1\n    }\n    return res",
  "    var res = 1\n    var n = n\n    var p = p\n    while n > 0 {\n        if n\
    \ & 1 == 1 {\n            res = (res * n) % p\n        }\n        n = n >> 1\n\
    \        p = (p * p) % p\n    }\n    return res", "    var result = 1\n    var\
    \ n = n\n    var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n         \
    \   result = (result * 2) % p\n        }\n        n /= 2\n        p = (p * p)\
    \ % MODULO\n    }\n    return result", "    var result = 1\n    var n = n\n  \
    \  var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n            result =\
    \ (result * 2) % p\n        }\n        n /= 2\n        p = (p * p) % MODULO\n\
    \    }\n    return result", "    var result = 1\n    for _ in 0..<n {\n      \
    \  result = (result * 2) % p\n    }\n    return result", "    var res = 1\n  \
    \  var n = n\n    var p = p\n    while n > 0 {\n        if n & 1 == 1 {\n    \
    \        res = (res * n) % p\n        }\n        n = n >> 1\n        p = (p *\
    \ p) % p\n    }\n    return res", "    if n == 0 {\n        return 1\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n/2, p: p) * modp(n/2, p: p) % p\n \
    \   }\n    return 2 * modp(n-1, p: p) % p", "    if n == 0 {\n        return 1\n\
    \    }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p:\
    \ p) % p\n    }\n    return modp(n - 1, p: p) * modp(1, p: p) % p", "    if n\
    \ == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n\
    \ / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return 2 * modp(n - 1, p: p)\
    \ % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n     \
    \   return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return 2 * modp(n\
    \ - 1, p: p) % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2 ==\
    \ 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return\
    \ modp(n - 1, p: p) * modp(1, p: p) % p", "    var result = 1\n    var n = n\n\
    \    var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n            result\
    \ = (result * 2) % p\n        }\n        n /= 2\n        p = (p * p) % MODULO\n\
    \    }\n    return result", "    var r = 1\n    var n = n\n    var p = p\n   \
    \ while n > 0 {\n        if n % 2 == 1 {\n            r = (r * 2) % p\n      \
    \  }\n        n /= 2\n        p = (p * 2) % MOD\n    }\n    return r", "    var\
    \ res = 1\n    var n = n\n    var p = p\n    while n > 0 {\n        if n % 2 ==\
    \ 1 {\n            res = (res * 2) % p\n        }\n        n /= 2\n        p =\
    \ (p * p) % MODULO\n    }\n    return res", "    if n == 0 {\n        return 1\n\
    \    }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p:\
    \ p) % p\n    }\n    return 2 * modp(n - 1, p: p) % p", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p: p) * modp(n/2,\
    \ p: p) % p\n    }\n    return modp(n-1, p: p) * modp(1, p: p) % p", "    if n\
    \ == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        let m = modp(n\
    \ / 2, p: p)\n        return (m * m) % p\n    }\n    return (2 * modp(n - 1, p:\
    \ p)) % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n \
    \       let x = modp(n: n / 2, p: p)\n        return (x * x) % p\n    }\n    return\
    \ (2 * modp(n: n - 1, p: p)) % p", "    if n == 0 {\n        return 1\n    }\n\
    \    var result = modp(n / 2, p: p)\n    result = (result * result) % p\n    if\
    \ n % 2 == 1 {\n        result = (result * 2) % p\n    }\n    return result",
  "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        let m =\
    \ modp(n: n / 2, p: p)\n        return (m * m) % p\n    }\n    return (2 * modp(n:\
    \ n - 1, p: p)) % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2\
    \ == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n  \
    \  return modp(n - 1, p: p) * modp(1, p: p) % p", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2,\
    \ p: p) % p\n    }\n    return 2 * modp(n - 1, p: p) % p", "    if n == 0 {\n\
    \        return 1\n    }\n    var res = modp(n / 2, p: p)\n    res = (res * res)\
    \ % p\n    if n % 2 == 1 {\n        res = (res * 2) % p\n    }\n    return res",
  "    var res = 1\n    var n = n\n    var p = p\n    while n > 0 {\n        if n\
    \ & 1 == 1 {\n            res = (res * n) % p\n        }\n        n = n >> 1\n\
    \        p = (p * p) % p\n    }\n    return res", "    var res = 1\n    var n\
    \ = n\n    var p = p\n    while n > 0 {\n        if n & 1 == 1 {\n           \
    \ res = (res * n) % p\n        }\n        n = n >> 1\n        p = (p * p) % p\n\
    \    }\n    return res", "    if n == 0 {\n        return 1\n    }\n    if n %\
    \ 2 == 0 {\n        let m = modp(n: n / 2, p: p)\n        return (m * m) % p\n\
    \    }\n    return (2 * modp(n: n - 1, p: p)) % p", "    if n == 0 {\n       \
    \ return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p: p) * modp(n/2,\
    \ p: p) % p\n    }\n    return modp(n-1, p: p) * modp(1, p: p) % p", "    if n\
    \ == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n\
    \ / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return 2 * modp(n - 1, p: p)\
    \ % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n     \
    \   return modp(n/2, p: p) * modp(n/2, p: p) % p\n    }\n    return modp(n-1,\
    \ p: p) * modp(1, p: p) % p", "    var res = 1\n    var k = n\n    var two = 2\n\
    \    while k > 0 {\n        if k & 1 == 1 {\n            res = (res * two) % p\n\
    \        }\n        two = (two * two) % p\n        k >>= 1\n    }\n    return\
    \ res", "    var result = 1\n    for _ in 0..<n {\n        result = (result *\
    \ 2) % p\n    }\n    return result", "    if n == 0 {\n        return 1\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n\
    \    }\n    return 2 * modp(n - 1, p: p) % p", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2,\
    \ p: p) % p\n    }\n    return modp(n - 1, p: p) * modp(1, p: p) % p", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n\
    \ / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n - 1, p: p) * modp(1,\
    \ p: p) % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return 2\
    \ * modp(n - 1, p: p) % p", "    if n == 0 {\n        return 1\n    } else if\
    \ n % 2 == 0 {\n        let x = modp(n / 2, p: p)\n        return (x * x) % p\n\
    \    } else {\n        return (2 * modp(n - 1, p: p)) % p\n    }", "    if n ==\
    \ 0 {\n        return 1\n    } else if n == 1 {\n        return 2\n    } else\
    \ if n % 2 == 0 {\n        let m = modp(n: n / 2, p: p)\n        return (m * m)\
    \ % p\n    } else {\n        return (2 * modp(n: n - 1, p: p)) % p\n    }", " \
    \   if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return\
    \ modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n - 1, p:\
    \ p) * 2 % p", "    if n == 0 {\n        return 1\n    } else if n % 2 == 0 {\n\
    \        let x = modp(n / 2, p: p)\n        return (x * x) % p\n    } else {\n\
    \        return (2 * modp(n - 1, p: p)) % p\n    }", "    var r = 1\n    var k\
    \ = n\n    var m = p\n    while k > 0 {\n        if k % 2 == 1 {\n           \
    \ r = (r * n) % p\n        }\n        k /= 2\n        n = (n * n) % p\n    }\n\
    \    return r", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n\
    \ - 1, p: p) * modp(1, p: p) % p", "    var res = 1\n    var n = n\n    var p\
    \ = p\n    while n > 0 {\n        if n & 1 == 1 {\n            res = (res * n)\
    \ % p\n        }\n        n = n >> 1\n        p = (p * p) % p\n    }\n    return\
    \ res", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n     \
    \   return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return 2 * modp(n\
    \ - 1, p: p) % p", "    var res = 1\n    var a = 2\n    var b = n\n    while b\
    \ > 0 {\n        if b % 2 == 1 {\n            res = (res * a) % p\n        }\n\
    \        a = (a * a) % p\n        b /= 2\n    }\n    return res", "    if n ==\
    \ 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n / 2,\
    \ p: p) * modp(n / 2, p: p) % p\n    }\n    return 2 * modp(n - 1, p: p) % p",
  "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n:\
    \ n / 2, p: p) * modp(n: n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p:\
    \ p) * 2 % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n\
    \ - 1, p: p) * 2 % p", "    var result = 1\n    var n = n\n    var p = p\n   \
    \ while n > 0 {\n        if n % 2 == 1 {\n            result = (result * 2) %\
    \ p\n        }\n        n /= 2\n        p = (p * p) % MODULO\n    }\n    return\
    \ result", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n  \
    \      return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n\
    \ - 1, p: p) * modp(1, p: p) % p", "    if n == 0 {\n        return 1\n    } else\
    \ if n == 1 {\n        return 2\n    } else if n % 2 == 0 {\n        let m = modp(n:\
    \ n / 2, p: p)\n        return (m * m) % p\n    } else {\n        return (2 *\
    \ modp(n: n - 1, p: p)) % p\n    }", "    var result = 1\n    var n = n\n    var\
    \ p = p\n    while n > 0 {\n        if n % 2 == 1 {\n            result = (result\
    \ * 2) % p\n        }\n        n /= 2\n        p = (p * p) % MODULO\n    }\n \
    \   return result", "    if n == 0 {\n        return 1\n    } else if n == 1 {\n\
    \        return 2\n    } else if n % 2 == 0 {\n        return modp(n / 2, p: p)\
    \ * modp(n / 2, p: p) % p\n    } else {\n        return modp(n / 2, p: p) * modp(n\
    \ / 2, p: p) * 2 % p\n    }", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n   \
    \ }\n    return 2 * modp(n - 1, p: p) % p", "    if n == 0 {\n        return 1\n\
    \    }\n    if n % 2 == 0 {\n        return modp(n/2, p: p) * modp(n/2, p: p)\
    \ % p\n    }\n    return modp(n-1, p: p) * modp(1, p: p) % p", "    if n == 0\
    \ {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n / 2,\
    \ p: p) * modp(n / 2, p: p) % p\n    }\n    return 2 * modp(n - 1, p: p) % p",
  "    if n == 0 {\n        return 1\n    }\n    var result = modp(n / 2, p: p)\n\
    \    result = (result * result) % p\n    if n % 2 == 1 {\n        result = (result\
    \ * 2) % p\n    }\n    return result", "    var res = 1\n    var n = n\n    var\
    \ p = p\n    while n > 0 {\n        if n & 1 == 1 {\n            res = (res *\
    \ n) % p\n        }\n        n = n >> 1\n        p = (p * p) % p\n    }\n    return\
    \ res", "    var result = 1\n    var n = n\n    var p = p\n    while n > 0 {\n\
    \        if n % 2 == 1 {\n            result = (result * 2) % p\n        }\n \
    \       n /= 2\n        p = (p * p) % MODULO\n    }\n    return result", "   \
    \ var res = 1\n    for _ in 0..<n {\n        res = (res * 2) % p\n    }\n    return\
    \ res", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n     \
    \   return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n\
    \ - 1, p: p) * 2 % p", "    var result = 1\n    var n = n\n    var p = p\n   \
    \ while n > 0 {\n        if n & 1 == 1 {\n            result = (result * p) %\
    \ MOD\n        }\n        n = n >> 1\n        p = (p * p) % MOD\n    }\n    return\
    \ result", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n  \
    \      return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n\
    \ - 1, p: p) * modp(1, p: p) % p", "    var result = 1\n    var n = n\n    var\
    \ p = p\n    while n > 0 {\n        if n % 2 == 1 {\n            result = (result\
    \ * 2) % p\n        }\n        n /= 2\n        p = (p * p) % modulus\n    }\n\
    \    return result", "    var result = 1\n    for _ in 0..<n {\n        result\
    \ = (result * 2) % p\n    }\n    return result", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p: p) * modp(n/2, p:\
    \ p) % p\n    }\n    return modp(n/2, p: p) * modp(n/2, p: p) * 2 % p", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n\
    \ / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n - 1, p: p) * modp(1,\
    \ p: p) % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n\
    \ - 1, p: p) * 2 % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2\
    \ == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n  \
    \  return modp(n - 1, p: p) * modp(1, p: p) % p", "    var res = 1\n    var n\
    \ = n\n    var p = p\n    while n > 0 {\n        if n & 1 == 1 {\n           \
    \ res = (res * n) % p\n        }\n        n = n >> 1\n        p = (p * p) % p\n\
    \    }\n    return res", "    if n == 0 {\n        return 1\n    }\n    if n %\
    \ 2 == 0 {\n        let x = modp(n / 2, p: p)\n        return (x * x) % p\n  \
    \  }\n    return (2 * modp(n - 1, p: p)) % p", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        let t = modp(n: n / 2, p: p)\n      \
    \  return (t * t) % p\n    }\n    return (2 * modp(n: n - 1, p: p)) % p", "  \
    \  if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n\
    \ / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n - 1, p: p) * 2\
    \ % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n     \
    \   return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n\
    \ - 1, p: p) * modp(1, p: p) % p", "    if n == 0 {\n        return 1\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p:\
    \ p) % p\n    }\n    return modp(n: n - 1, p: p) * modp(n: 1, p: p) % p", "  \
    \  if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n \
    \   }\n    if n % 2 == 0 {\n        return modp(n/2, p: p) * modp(n/2, p: p) %\
    \ p\n    }\n    return modp(n/2, p: p) * modp(n/2, p: p) * 2 % p", "    if n ==\
    \ 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n / 2,\
    \ p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n - 1, p: p) * modp(1,\
    \ p: p) % p", "    var res = 1\n    var n = n\n    var p = p\n    while n > 0\
    \ {\n        if n & 1 == 1 {\n            res = (res * n) % p\n        }\n   \
    \     n = n >> 1\n        p = (p * p) % p\n    }\n    return res", "    var res\
    \ = 1\n    var n = n\n    var p = p\n    while n > 0 {\n        if n & 1 == 1\
    \ {\n            res = (res * n) % p\n        }\n        n = n >> 1\n        p\
    \ = (p * p) % p\n    }\n    return res", "    if n == 0 {\n        return 1\n\
    \    }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p:\
    \ p) % p\n    }\n    return 2 * modp(n - 1, p: p) % p", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n % 2 == 0 {\n        let x = modp(n / 2, p: p)\n\
    \        return (x * x) % p\n    }\n    return (2 * modp(n - 1, p: p)) % p", " \
    \   if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return\
    \ modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return 2 * modp(n - 1,\
    \ p: p) % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        let x = modp(n / 2, p: p)\n        return (x * x) % p\n    }\n    return\
    \ (2 * modp(n - 1, p: p)) % p", "    if n == 0 {\n        return 1\n    }\n  \
    \  if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n\
    \    }\n    return 2 * modp(n - 1, p: p) % p", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2,\
    \ p: p) % p\n    }\n    return 2 * modp(n - 1, p: p) % p", "    var result = 1\n\
    \    var n = n\n    var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n  \
    \          result = (result * 2) % p\n        }\n        n /= 2\n        p = (p\
    \ * p) % MODULO\n    }\n    return result", "    if n == 0 {\n        return 1\n\
    \    }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p:\
    \ p) % p\n    }\n    return modp(n - 1, p: p) * 2 % p", "    var result = 1\n\
    \    var n = n\n    var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n  \
    \          result = (result * 2) % p\n        }\n        n /= 2\n        p = (p\
    \ * p) % MODULO\n    }\n    return result", "    if n == 0 {\n        return 1\n\
    \    }\n    if n % 2 == 0 {\n        return modp(n/2, p: p) * modp(n/2, p: p)\
    \ % p\n    }\n    return modp(n-1, p: p) * modp(1, p: p) % p", "    var result\
    \ = 1\n    for _ in 0..<n {\n        result = (result * 2) % p\n    }\n    return\
    \ result", "    var result = 1\n    var n = n\n    var p = p\n    while n > 0\
    \ {\n        if n % 2 == 1 {\n            result = (result * 2) % p\n        }\n\
    \        n /= 2\n        p = (p * p) % MODULO\n    }\n    return result", "  \
    \  if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n\
    \ / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return 2 * modp(n - 1, p: p)\
    \ % p", "    var result = 1\n    for _ in 0..<n {\n        result = (result *\
    \ 2) % p\n    }\n    return result", "    if n == 0 {\n        return 1\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n\
    \    }\n    return modp(n - 1, p: p) * modp(1, p: p) % p", "    if n == 0 {\n\
    \        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p: p)\
    \ * modp(n/2, p: p) % p\n    }\n    return 2 * modp(n-1, p: p) % p", "    if n\
    \ == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p: p) * modp(n/2, p: p) % p\n    }\n    return 2 * modp(n-1, p: p) % p", " \
    \   var res = 1\n    var n = n\n    var p = p\n    while n > 0 {\n        if n\
    \ & 1 == 1 {\n            res = (res * n) % p\n        }\n        n = n >> 1\n\
    \        p = (p * p) % p\n    }\n    return res", "    var res = 1\n    var n\
    \ = n\n    var p = p\n    while n > 0 {\n        if n & 1 == 1 {\n           \
    \ res = (res * n) % p\n        }\n        n = n >> 1\n        p = (p * p) % p\n\
    \    }\n    return res", "    if n == 0 {\n        return 1\n    }\n    if n %\
    \ 2 == 0 {\n        return modp(n/2, p: p) * modp(n/2, p: p) % p\n    }\n    return\
    \ modp(n-1, p: p) * modp(1, p: p) % p", "    if n == 0 {\n        return 1\n \
    \   }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p:\
    \ p) % p\n    }\n    return modp(n - 1, p: p) * modp(1, p: p) % p", "    var result\
    \ = 1\n    var n = n\n    var p = p\n    while n > 0 {\n        if n % 2 == 1\
    \ {\n            result = (result * 2) % p\n        }\n        n /= 2\n      \
    \  p = (p * p) % MODULO\n    }\n    return result", "    if n == 0 {\n       \
    \ return 1\n    } else if n == 1 {\n        return 2\n    } else if n % 2 == 0\
    \ {\n        let x = modp(n / 2, p: p)\n        return (x * x) % p\n    } else\
    \ {\n        return (2 * modp(n - 1, p: p)) % p\n    }", "    if n == 0 {\n  \
    \      return 1\n    }\n    if n % 2 == 0 {\n        let x = modp(n / 2, p: p)\n\
    \        return (x * x) % p\n    }\n    return (2 * modp(n - 1, p: p)) % p", " \
    \   if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return\
    \ modp(n/2, p: p) * modp(n/2, p: p) % p\n    }\n    return modp(n-1, p: p) * modp(1,\
    \ p: p) % p", "    var result = 1\n    for _ in 0..<n {\n        result = (result\
    \ * 2) % p\n    }\n    return result", "    var result = 1\n    var n = n\n  \
    \  var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n            result =\
    \ (result * 2) % p\n        }\n        n /= 2\n        p = (p * p) % modulus\n\
    \    }\n    return result", "    var res = 1\n    var n = n\n    var p = p\n \
    \   while n > 0 {\n        if n & 1 == 1 {\n            res = (res * n) % p\n\
    \        }\n        n = n >> 1\n        p = (p * p) % p\n    }\n    return res"]
stop_tokens:
- "\n}"
