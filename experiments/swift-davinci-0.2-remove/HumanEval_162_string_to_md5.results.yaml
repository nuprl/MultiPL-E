language: swift
name: HumanEval_162_string_to_md5
results:
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    data.withUnsafeBytes {\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n    }\n    let hexBytes = digest.map { String(format: \"%02hhx\",\
    \ $0) }\n    return hexBytes.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpuoj3_xti.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpuoj3_xti.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpuoj3_xti.swift:9:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpuoj3_xti.swift:11:13:\
    \ error: cannot find 'CC_MD5' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n            ^~~~~~\n/tmp/tmpuoj3_xti.swift:11:36: error: cannot find\
    \ 'CC_LONG' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n                                   ^~~~~~~\n/tmp/tmpuoj3_xti.swift:13:39:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    let hexBytes = digest.map { String(format: \"%02hhx\", $0) }\n          \
    \                            ^~~~~~~\n                                       repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let md5 = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<Data>) -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return md5.map { String(format: \"%02hhx\"\
    , $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpcploqk6g.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpcploqk6g.swift:8:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpcploqk6g.swift:10:62: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcploqk6g.swift:11:9: error:\
    \ cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \        ^~~~~~\n/tmp/tmpcploqk6g.swift:11:23: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n                 \
    \     ^~~~~~~\n/tmp/tmpcploqk6g.swift:14:28: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return md5.map\
    \ { String(format: \"%02hhx\", $0) }.joined()\n                           ^~~~~~~\n\
    \                            repeating         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let cstr\
    \ = text.cString(using: String.Encoding.utf8)\n    let data = NSData(bytes: cstr!,\
    \ length: text.lengthOfBytes(using: String.Encoding.utf8))\n    let result = data.md5()\n\
    \    return result.toHexString()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpmqmruq3f.swift:8:21: error: value of type 'String' has no member\
    \ 'cString'\n    let cstr = text.cString(using: String.Encoding.utf8)\n      \
    \         ~~~~ ^~~~~~~\n/tmp/tmpmqmruq3f.swift:8:43: error: type 'String' has\
    \ no member 'Encoding'\n    let cstr = text.cString(using: String.Encoding.utf8)\n\
    \                                   ~~~~~~ ^~~~~~~~\n/tmp/tmpmqmruq3f.swift:9:16:\
    \ error: cannot find 'NSData' in scope\n    let data = NSData(bytes: cstr!, length:\
    \ text.lengthOfBytes(using: String.Encoding.utf8))\n               ^~~~~~\n/tmp/tmpmqmruq3f.swift:9:50:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let data =\
    \ NSData(bytes: cstr!, length: text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \                                            ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpmqmruq3f.swift:9:78:\
    \ error: type 'String' has no member 'Encoding'\n    let data = NSData(bytes:\
    \ cstr!, length: text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                                                            ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmphjinhnc4.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmphjinhnc4.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:9:18:\
    \ error: cannot find 'CC_LONG' in scope\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                 ^~~~~~~\n/tmp/tmphjinhnc4.swift:9:31:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n               \
    \          ~~~~ ^~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:9:59: error: type 'String'\
    \ has no member 'Encoding'\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmphjinhnc4.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let md5 = data.withUnsafeBytes { (bytes: UnsafePointer<Data>)\
    \ -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return md5.map { String(format: \"%02x\", $0) }.joined()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfo8tq3hr.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpfo8tq3hr.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpfo8tq3hr.swift:10:62: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                             ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpfo8tq3hr.swift:11:9: error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes,\
    \ CC_LONG(data.count), &hash)\n        ^~~~~~\n/tmp/tmpfo8tq3hr.swift:11:23: error:\
    \ cannot find 'CC_LONG' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \                      ^~~~~~~\n/tmp/tmpfo8tq3hr.swift:14:28: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  return md5.map { String(format: \"%02x\", $0) }.joined()\n                \
    \           ^~~~~~~\n                            repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let cstr\
    \ = text.cString(using: String.Encoding.utf8)\n    let len = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(cstr!, len, result)\n    let hash = NSMutableString()\n    for i in\
    \ 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n   \
    \ result.deinitialize()\n    return String(format: hash as String)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpc0gxhe5r.swift:8:21: error: value of type 'String' has no member\
    \ 'cString'\n    let cstr = text.cString(using: String.Encoding.utf8)\n      \
    \         ~~~~ ^~~~~~~\n/tmp/tmpc0gxhe5r.swift:8:43: error: type 'String' has\
    \ no member 'Encoding'\n    let cstr = text.cString(using: String.Encoding.utf8)\n\
    \                                   ~~~~~~ ^~~~~~~~\n/tmp/tmpc0gxhe5r.swift:9:33:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let len = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpc0gxhe5r.swift:9:61:\
    \ error: type 'String' has no member 'Encoding'\n    let len = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \  ~~~~~~ ^~~~~~~~\n/tmp/tmpc0gxhe5r.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpc0gxhe5r.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(cstr!, len, result)\n    ^~~~~~\n/tmp/tmpc0gxhe5r.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpc0gxhe5r.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<Data>) -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp85b8nq_m.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp85b8nq_m.swift:8:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp85b8nq_m.swift:10:62: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp85b8nq_m.swift:11:9: error:\
    \ cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \        ^~~~~~\n/tmp/tmp85b8nq_m.swift:11:23: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n                 \
    \     ^~~~~~~\n/tmp/tmp85b8nq_m.swift:14:29: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return hash.map\
    \ { String(format: \"%02x\", $0) }.joined()\n                            ^~~~~~~\n\
    \                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let md5 = data.withUnsafeBytes { (bytes: UnsafePointer<Data>)\
    \ -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return md5.map { String(format: \"%02x\", $0) }.joined()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfo8tq3hr.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpfo8tq3hr.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpfo8tq3hr.swift:10:62: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                             ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpfo8tq3hr.swift:11:9: error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes,\
    \ CC_LONG(data.count), &hash)\n        ^~~~~~\n/tmp/tmpfo8tq3hr.swift:11:23: error:\
    \ cannot find 'CC_LONG' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \                      ^~~~~~~\n/tmp/tmpfo8tq3hr.swift:14:28: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  return md5.map { String(format: \"%02x\", $0) }.joined()\n                \
    \           ^~~~~~~\n                            repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let md5 = data.withUnsafeBytes { (bytes: UnsafePointer<Data>)\
    \ -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    let md5Data = Data(bytes: md5)\n    let md5Hex =  md5Data.map { String(format:\
    \ \"%02hhx\", $0) }.joined()\n    return md5Hex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpj3mqv4y5.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpj3mqv4y5.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpj3mqv4y5.swift:10:62: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                             ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpj3mqv4y5.swift:11:9: error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes,\
    \ CC_LONG(data.count), &hash)\n        ^~~~~~\n/tmp/tmpj3mqv4y5.swift:11:23: error:\
    \ cannot find 'CC_LONG' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \                      ^~~~~~~\n/tmp/tmpj3mqv4y5.swift:14:19: error: cannot find\
    \ 'Data' in scope\n    let md5Data = Data(bytes: md5)\n                  ^~~~\n\
    /tmp/tmpj3mqv4y5.swift:15:39: error: incorrect argument labels in call (have 'format:_:',\
    \ expected 'repeating:count:')\n    let md5Hex =  md5Data.map { String(format:\
    \ \"%02hhx\", $0) }.joined()\n                                      ^~~~~~~\n\
    \                                       repeating         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmphjinhnc4.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmphjinhnc4.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:9:18:\
    \ error: cannot find 'CC_LONG' in scope\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                 ^~~~~~~\n/tmp/tmphjinhnc4.swift:9:31:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n               \
    \          ~~~~ ^~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:9:59: error: type 'String'\
    \ has no member 'Encoding'\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmphjinhnc4.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<Data>) -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp85b8nq_m.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp85b8nq_m.swift:8:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp85b8nq_m.swift:10:62: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp85b8nq_m.swift:11:9: error:\
    \ cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \        ^~~~~~\n/tmp/tmp85b8nq_m.swift:11:23: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n                 \
    \     ^~~~~~~\n/tmp/tmp85b8nq_m.swift:14:29: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return hash.map\
    \ { String(format: \"%02x\", $0) }.joined()\n                            ^~~~~~~\n\
    \                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let cstr\
    \ = text.cString(using: String.Encoding.utf8)\n    let len = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(cstr!, len, result)\n    let hash = NSMutableString()\n    for i in\
    \ 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n   \
    \ result.deinitialize()\n    return String(format: hash as String)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpc0gxhe5r.swift:8:21: error: value of type 'String' has no member\
    \ 'cString'\n    let cstr = text.cString(using: String.Encoding.utf8)\n      \
    \         ~~~~ ^~~~~~~\n/tmp/tmpc0gxhe5r.swift:8:43: error: type 'String' has\
    \ no member 'Encoding'\n    let cstr = text.cString(using: String.Encoding.utf8)\n\
    \                                   ~~~~~~ ^~~~~~~~\n/tmp/tmpc0gxhe5r.swift:9:33:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let len = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpc0gxhe5r.swift:9:61:\
    \ error: type 'String' has no member 'Encoding'\n    let len = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \  ~~~~~~ ^~~~~~~~\n/tmp/tmpc0gxhe5r.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpc0gxhe5r.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(cstr!, len, result)\n    ^~~~~~\n/tmp/tmpc0gxhe5r.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpc0gxhe5r.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let utf8_text\
    \ = text.cString(using: String.Encoding.utf8)\n    let utf8_text_len = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digest_len = Int(CC_MD5_DIGEST_LENGTH)\n   \
    \ let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digest_len)\n\
    \    CC_MD5(utf8_text!, utf8_text_len, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digest_len {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpmvfhbpqu.swift:8:26: error: value of type 'String' has no member\
    \ 'cString'\n    let utf8_text = text.cString(using: String.Encoding.utf8)\n \
    \                   ~~~~ ^~~~~~~\n/tmp/tmpmvfhbpqu.swift:8:48: error: type 'String'\
    \ has no member 'Encoding'\n    let utf8_text = text.cString(using: String.Encoding.utf8)\n\
    \                                        ~~~~~~ ^~~~~~~~\n/tmp/tmpmvfhbpqu.swift:9:43:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let utf8_text_len\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpmvfhbpqu.swift:9:71: error:\
    \ type 'String' has no member 'Encoding'\n    let utf8_text_len = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \            ~~~~~~ ^~~~~~~~\n/tmp/tmpmvfhbpqu.swift:10:26: error: cannot find\
    \ 'CC_MD5_DIGEST_LENGTH' in scope\n    let digest_len = Int(CC_MD5_DIGEST_LENGTH)\n\
    \                         ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmvfhbpqu.swift:12:5: error:\
    \ cannot find 'CC_MD5' in scope\n    CC_MD5(utf8_text!, utf8_text_len, result)\n\
    \    ^~~~~~\n/tmp/tmpmvfhbpqu.swift:13:16: error: cannot find 'NSMutableString'\
    \ in scope\n    let hash = NSMutableString()\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpmvfhbpqu.swift:18:18: error: extraneous argument label 'format:' in call\n\
    \    return String(format: hash as String)\n                 ^~~~~~~~~\n     \
    \             \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let md5\
    \ = MD5(text)\n    return md5.calculate()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmprkkhljnb.swift:8:15: error: cannot find 'MD5' in scope\n    let\
    \ md5 = MD5(text)\n              ^~~\n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if let data = text.dataUsingEncoding(NSUTF8StringEncoding)\
    \ {\n        let md5 = NSMutableData(length: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \    CC_MD5(data.bytes, CC_LONG(data.length), UnsafeMutablePointer<UInt8>(md5!.mutableBytes))\n\
    \        return md5!.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue:\
    \ 0))\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpt5__na62.swift:5:42: error: cannot find 'NSUTF8StringEncoding'\
    \ in scope\n    if let data = text.dataUsingEncoding(NSUTF8StringEncoding) {\n\
    \                                         ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpt5__na62.swift:5:24:\
    \ error: value of type 'String' has no member 'dataUsingEncoding'\n    if let\
    \ data = text.dataUsingEncoding(NSUTF8StringEncoding) {\n                  ~~~~\
    \ ^~~~~~~~~~~~~~~~~\n/tmp/tmpt5__na62.swift:6:19: error: cannot find 'NSMutableData'\
    \ in scope\n        let md5 = NSMutableData(length: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                  ^~~~~~~~~~~~~\n/tmp/tmpt5__na62.swift:6:45: error: cannot find\
    \ 'CC_MD5_DIGEST_LENGTH' in scope\n        let md5 = NSMutableData(length: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpt5__na62.swift:7:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(data.bytes, CC_LONG(data.length),\
    \ UnsafeMutablePointer<UInt8>(md5!.mutableBytes))\n        ^~~~~~\n/tmp/tmpt5__na62.swift:7:28:\
    \ error: cannot find 'CC_LONG' in scope\n        CC_MD5(data.bytes, CC_LONG(data.length),\
    \ UnsafeMutablePointer<UInt8>(md5!.mutableBytes))\n                          \
    \ ^~~~~~~\n/tmp/tmpt5__na62.swift:8:52: error: cannot find 'NSDataBase64EncodingOptions'\
    \ in scope\n        return md5!.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue:\
    \ 0))\n                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjz4d1ayg.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpjz4d1ayg.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:64: error: type\
    \ 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpjz4d1ayg.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let md5 = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<Data>) -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return md5.map { String(format: \"%02hhx\"\
    , $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpcploqk6g.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpcploqk6g.swift:8:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpcploqk6g.swift:10:62: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcploqk6g.swift:11:9: error:\
    \ cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \        ^~~~~~\n/tmp/tmpcploqk6g.swift:11:23: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n                 \
    \     ^~~~~~~\n/tmp/tmpcploqk6g.swift:14:28: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return md5.map\
    \ { String(format: \"%02hhx\", $0) }.joined()\n                           ^~~~~~~\n\
    \                            repeating         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let md5\
    \ = MD5(text)\n    return md5.hexString()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp3jjm7d3n.swift:8:15: error: cannot find 'MD5' in scope\n    let\
    \ md5 = MD5(text)\n              ^~~\n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<Data>) -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp85b8nq_m.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp85b8nq_m.swift:8:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp85b8nq_m.swift:10:62: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp85b8nq_m.swift:11:9: error:\
    \ cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \        ^~~~~~\n/tmp/tmp85b8nq_m.swift:11:23: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n                 \
    \     ^~~~~~~\n/tmp/tmp85b8nq_m.swift:14:29: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return hash.map\
    \ { String(format: \"%02x\", $0) }.joined()\n                            ^~~~~~~\n\
    \                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let cstr\
    \ = text.cString(using: String.Encoding.utf8)\n    let str = UnsafePointer<Int8>(cstr)\n\
    \    let strLen = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpdv6dkwj2.swift:8:21: error: value of type 'String' has no member\
    \ 'cString'\n    let cstr = text.cString(using: String.Encoding.utf8)\n      \
    \         ~~~~ ^~~~~~~\n/tmp/tmpdv6dkwj2.swift:8:43: error: type 'String' has\
    \ no member 'Encoding'\n    let cstr = text.cString(using: String.Encoding.utf8)\n\
    \                                   ~~~~~~ ^~~~~~~~\n/tmp/tmpdv6dkwj2.swift:10:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpdv6dkwj2.swift:10:64: error:\
    \ type 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpdv6dkwj2.swift:11:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdv6dkwj2.swift:13:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpdv6dkwj2.swift:14:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpdv6dkwj2.swift:19:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let cstr\
    \ = text.cString(using: String.Encoding.utf8)\n    let data = NSData(bytes: cstr!,\
    \ length: text.lengthOfBytes(using: String.Encoding.utf8))\n    let result = data.md5()\n\
    \    return result.toHexString()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpmqmruq3f.swift:8:21: error: value of type 'String' has no member\
    \ 'cString'\n    let cstr = text.cString(using: String.Encoding.utf8)\n      \
    \         ~~~~ ^~~~~~~\n/tmp/tmpmqmruq3f.swift:8:43: error: type 'String' has\
    \ no member 'Encoding'\n    let cstr = text.cString(using: String.Encoding.utf8)\n\
    \                                   ~~~~~~ ^~~~~~~~\n/tmp/tmpmqmruq3f.swift:9:16:\
    \ error: cannot find 'NSData' in scope\n    let data = NSData(bytes: cstr!, length:\
    \ text.lengthOfBytes(using: String.Encoding.utf8))\n               ^~~~~~\n/tmp/tmpmqmruq3f.swift:9:50:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let data =\
    \ NSData(bytes: cstr!, length: text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \                                            ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpmqmruq3f.swift:9:78:\
    \ error: type 'String' has no member 'Encoding'\n    let data = NSData(bytes:\
    \ cstr!, length: text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                                                            ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<Data>) -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp85b8nq_m.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp85b8nq_m.swift:8:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp85b8nq_m.swift:10:62: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp85b8nq_m.swift:11:9: error:\
    \ cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \        ^~~~~~\n/tmp/tmp85b8nq_m.swift:11:23: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n                 \
    \     ^~~~~~~\n/tmp/tmp85b8nq_m.swift:14:29: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return hash.map\
    \ { String(format: \"%02x\", $0) }.joined()\n                            ^~~~~~~\n\
    \                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<Data>) -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp85b8nq_m.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp85b8nq_m.swift:8:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp85b8nq_m.swift:10:62: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp85b8nq_m.swift:11:9: error:\
    \ cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \        ^~~~~~\n/tmp/tmp85b8nq_m.swift:11:23: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n                 \
    \     ^~~~~~~\n/tmp/tmp85b8nq_m.swift:14:29: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return hash.map\
    \ { String(format: \"%02x\", $0) }.joined()\n                            ^~~~~~~\n\
    \                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let md5 = data.withUnsafeBytes { (bytes: UnsafePointer<Data>)\
    \ -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return md5.map { String(format: \"%02x\", $0) }.joined()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfo8tq3hr.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpfo8tq3hr.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpfo8tq3hr.swift:10:62: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                             ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpfo8tq3hr.swift:11:9: error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes,\
    \ CC_LONG(data.count), &hash)\n        ^~~~~~\n/tmp/tmpfo8tq3hr.swift:11:23: error:\
    \ cannot find 'CC_LONG' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \                      ^~~~~~~\n/tmp/tmpfo8tq3hr.swift:14:28: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  return md5.map { String(format: \"%02x\", $0) }.joined()\n                \
    \           ^~~~~~~\n                            repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjz4d1ayg.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpjz4d1ayg.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:64: error: type\
    \ 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpjz4d1ayg.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = Data(text.utf8)\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp44wsrhlu.swift:8:16: error: cannot find 'Data' in scope\n    let\
    \ data = Data(text.utf8)\n               ^~~~\n/tmp/tmp44wsrhlu.swift:10:53: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp44wsrhlu.swift:11:9: error: cannot\
    \ find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp44wsrhlu.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp44wsrhlu.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmphjinhnc4.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmphjinhnc4.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:9:18:\
    \ error: cannot find 'CC_LONG' in scope\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                 ^~~~~~~\n/tmp/tmphjinhnc4.swift:9:31:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n               \
    \          ~~~~ ^~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:9:59: error: type 'String'\
    \ has no member 'Encoding'\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmphjinhnc4.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    data.withUnsafeBytes {\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n    }\n    let hexBytes = digest.map { String(format: \"%02hhx\",\
    \ $0) }\n    return hexBytes.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpuoj3_xti.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpuoj3_xti.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpuoj3_xti.swift:9:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpuoj3_xti.swift:11:13:\
    \ error: cannot find 'CC_MD5' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n            ^~~~~~\n/tmp/tmpuoj3_xti.swift:11:36: error: cannot find\
    \ 'CC_LONG' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n                                   ^~~~~~~\n/tmp/tmpuoj3_xti.swift:13:39:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    let hexBytes = digest.map { String(format: \"%02hhx\", $0) }\n          \
    \                            ^~~~~~~\n                                       repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let cstr\
    \ = text.cString(using: String.Encoding.utf8)\n    let data = NSData(bytes: cstr!,\
    \ length: text.lengthOfBytes(using: String.Encoding.utf8))\n    let result = data.md5()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp18tjd8o4.swift:8:21: error: value of type 'String' has no member\
    \ 'cString'\n    let cstr = text.cString(using: String.Encoding.utf8)\n      \
    \         ~~~~ ^~~~~~~\n/tmp/tmp18tjd8o4.swift:8:43: error: type 'String' has\
    \ no member 'Encoding'\n    let cstr = text.cString(using: String.Encoding.utf8)\n\
    \                                   ~~~~~~ ^~~~~~~~\n/tmp/tmp18tjd8o4.swift:9:16:\
    \ error: cannot find 'NSData' in scope\n    let data = NSData(bytes: cstr!, length:\
    \ text.lengthOfBytes(using: String.Encoding.utf8))\n               ^~~~~~\n/tmp/tmp18tjd8o4.swift:9:50:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let data =\
    \ NSData(bytes: cstr!, length: text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \                                            ~~~~ ^~~~~~~~~~~~~\n/tmp/tmp18tjd8o4.swift:9:78:\
    \ error: type 'String' has no member 'Encoding'\n    let data = NSData(bytes:\
    \ cstr!, length: text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                                                            ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmphjinhnc4.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmphjinhnc4.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:9:18:\
    \ error: cannot find 'CC_LONG' in scope\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                 ^~~~~~~\n/tmp/tmphjinhnc4.swift:9:31:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n               \
    \          ~~~~ ^~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:9:59: error: type 'String'\
    \ has no member 'Encoding'\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmphjinhnc4.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjz4d1ayg.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpjz4d1ayg.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:64: error: type\
    \ 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpjz4d1ayg.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let text_data\
    \ = text.data(using: .utf8)!\n    let md5_data = text_data.withUnsafeBytes { (bytes:\
    \ UnsafePointer<Data>) -> [UInt8] in\n        var md5 = [UInt8](repeating: 0,\
    \ count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(text_data.count),\
    \ &md5)\n        return md5\n    }\n    return md5_data.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6w65ny3f.swift:8:26: error: value of type 'String' has no member\
    \ 'data'\n    let text_data = text.data(using: .utf8)!\n                    ~~~~\
    \ ^~~~\n/tmp/tmp6w65ny3f.swift:8:39: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let text_data = text.data(using: .utf8)!\n           \
    \                          ~^~~~\n/tmp/tmp6w65ny3f.swift:10:52: error: cannot\
    \ find 'CC_MD5_DIGEST_LENGTH' in scope\n        var md5 = [UInt8](repeating: 0,\
    \ count: Int(CC_MD5_DIGEST_LENGTH))\n                                        \
    \           ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6w65ny3f.swift:11:9: error: cannot find\
    \ 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(text_data.count), &md5)\n \
    \       ^~~~~~\n/tmp/tmp6w65ny3f.swift:11:23: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(bytes, CC_LONG(text_data.count), &md5)\n             \
    \         ^~~~~~~\n/tmp/tmp6w65ny3f.swift:14:33: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return md5_data.map\
    \ { String(format: \"%02hhx\", $0) }.joined()\n                              \
    \  ^~~~~~~\n                                 repeating         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjz4d1ayg.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpjz4d1ayg.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:64: error: type\
    \ 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpjz4d1ayg.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjz4d1ayg.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpjz4d1ayg.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:64: error: type\
    \ 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpjz4d1ayg.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjz4d1ayg.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpjz4d1ayg.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:64: error: type\
    \ 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpjz4d1ayg.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjz4d1ayg.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpjz4d1ayg.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:64: error: type\
    \ 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpjz4d1ayg.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjz4d1ayg.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpjz4d1ayg.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:64: error: type\
    \ 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpjz4d1ayg.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjz4d1ayg.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpjz4d1ayg.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:64: error: type\
    \ 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpjz4d1ayg.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjz4d1ayg.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpjz4d1ayg.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:64: error: type\
    \ 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpjz4d1ayg.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<Data>) -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp85b8nq_m.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp85b8nq_m.swift:8:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp85b8nq_m.swift:10:62: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp85b8nq_m.swift:11:9: error:\
    \ cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \        ^~~~~~\n/tmp/tmp85b8nq_m.swift:11:23: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n                 \
    \     ^~~~~~~\n/tmp/tmp85b8nq_m.swift:14:29: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return hash.map\
    \ { String(format: \"%02x\", $0) }.joined()\n                            ^~~~~~~\n\
    \                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = Data(text.utf8)\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp44wsrhlu.swift:8:16: error: cannot find 'Data' in scope\n    let\
    \ data = Data(text.utf8)\n               ^~~~\n/tmp/tmp44wsrhlu.swift:10:53: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp44wsrhlu.swift:11:9: error: cannot\
    \ find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp44wsrhlu.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp44wsrhlu.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjz4d1ayg.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpjz4d1ayg.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:64: error: type\
    \ 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpjz4d1ayg.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let cstr\
    \ = text.cString(using: String.Encoding.utf8)\n    let data = NSData(bytes: cstr!,\
    \ length: text.lengthOfBytes(using: String.Encoding.utf8))\n    let result = data.md5()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp18tjd8o4.swift:8:21: error: value of type 'String' has no member\
    \ 'cString'\n    let cstr = text.cString(using: String.Encoding.utf8)\n      \
    \         ~~~~ ^~~~~~~\n/tmp/tmp18tjd8o4.swift:8:43: error: type 'String' has\
    \ no member 'Encoding'\n    let cstr = text.cString(using: String.Encoding.utf8)\n\
    \                                   ~~~~~~ ^~~~~~~~\n/tmp/tmp18tjd8o4.swift:9:16:\
    \ error: cannot find 'NSData' in scope\n    let data = NSData(bytes: cstr!, length:\
    \ text.lengthOfBytes(using: String.Encoding.utf8))\n               ^~~~~~\n/tmp/tmp18tjd8o4.swift:9:50:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let data =\
    \ NSData(bytes: cstr!, length: text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \                                            ~~~~ ^~~~~~~~~~~~~\n/tmp/tmp18tjd8o4.swift:9:78:\
    \ error: type 'String' has no member 'Encoding'\n    let data = NSData(bytes:\
    \ cstr!, length: text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                                                            ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let md5 = data.withUnsafeBytes { (bytes: UnsafePointer<Data>)\
    \ -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return md5.map { String(format: \"%02x\", $0) }.joined()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfo8tq3hr.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpfo8tq3hr.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpfo8tq3hr.swift:10:62: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                             ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpfo8tq3hr.swift:11:9: error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes,\
    \ CC_LONG(data.count), &hash)\n        ^~~~~~\n/tmp/tmpfo8tq3hr.swift:11:23: error:\
    \ cannot find 'CC_LONG' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \                      ^~~~~~~\n/tmp/tmpfo8tq3hr.swift:14:28: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  return md5.map { String(format: \"%02x\", $0) }.joined()\n                \
    \           ^~~~~~~\n                            repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let md5\
    \ = MD5(text)\n    return md5.hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpf4nrsnsc.swift:8:15: error: cannot find 'MD5' in scope\n    let\
    \ md5 = MD5(text)\n              ^~~\n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjz4d1ayg.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpjz4d1ayg.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:64: error: type\
    \ 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpjz4d1ayg.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjz4d1ayg.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpjz4d1ayg.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:64: error: type\
    \ 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpjz4d1ayg.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let md5\
    \ = MD5(text)\n    return md5.hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpf4nrsnsc.swift:8:15: error: cannot find 'MD5' in scope\n    let\
    \ md5 = MD5(text)\n              ^~~\n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let cstr\
    \ = text.cString(using: String.Encoding.utf8)\n    let len = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(cstr!, len, result)\n    let hash = NSMutableString()\n    for i in\
    \ 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n   \
    \ result.deinitialize()\n    return String(format: hash as String)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpc0gxhe5r.swift:8:21: error: value of type 'String' has no member\
    \ 'cString'\n    let cstr = text.cString(using: String.Encoding.utf8)\n      \
    \         ~~~~ ^~~~~~~\n/tmp/tmpc0gxhe5r.swift:8:43: error: type 'String' has\
    \ no member 'Encoding'\n    let cstr = text.cString(using: String.Encoding.utf8)\n\
    \                                   ~~~~~~ ^~~~~~~~\n/tmp/tmpc0gxhe5r.swift:9:33:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let len = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpc0gxhe5r.swift:9:61:\
    \ error: type 'String' has no member 'Encoding'\n    let len = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \  ~~~~~~ ^~~~~~~~\n/tmp/tmpc0gxhe5r.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpc0gxhe5r.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(cstr!, len, result)\n    ^~~~~~\n/tmp/tmpc0gxhe5r.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpc0gxhe5r.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<Data>) -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp85b8nq_m.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp85b8nq_m.swift:8:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp85b8nq_m.swift:10:62: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp85b8nq_m.swift:11:9: error:\
    \ cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \        ^~~~~~\n/tmp/tmp85b8nq_m.swift:11:23: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n                 \
    \     ^~~~~~~\n/tmp/tmp85b8nq_m.swift:14:29: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return hash.map\
    \ { String(format: \"%02x\", $0) }.joined()\n                            ^~~~~~~\n\
    \                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<Data>) -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp85b8nq_m.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp85b8nq_m.swift:8:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp85b8nq_m.swift:10:62: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp85b8nq_m.swift:11:9: error:\
    \ cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \        ^~~~~~\n/tmp/tmp85b8nq_m.swift:11:23: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n                 \
    \     ^~~~~~~\n/tmp/tmp85b8nq_m.swift:14:29: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return hash.map\
    \ { String(format: \"%02x\", $0) }.joined()\n                            ^~~~~~~\n\
    \                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let md5 = data.withUnsafeBytes { (bytes: UnsafePointer<Data>)\
    \ -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return md5.map { String(format: \"%02x\", $0) }.joined()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfo8tq3hr.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpfo8tq3hr.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpfo8tq3hr.swift:10:62: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                             ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpfo8tq3hr.swift:11:9: error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes,\
    \ CC_LONG(data.count), &hash)\n        ^~~~~~\n/tmp/tmpfo8tq3hr.swift:11:23: error:\
    \ cannot find 'CC_LONG' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \                      ^~~~~~~\n/tmp/tmpfo8tq3hr.swift:14:28: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  return md5.map { String(format: \"%02x\", $0) }.joined()\n                \
    \           ^~~~~~~\n                            repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjz4d1ayg.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpjz4d1ayg.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:64: error: type\
    \ 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpjz4d1ayg.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let md5\
    \ = MD5(text)\n    return md5.calculate()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmprkkhljnb.swift:8:15: error: cannot find 'MD5' in scope\n    let\
    \ md5 = MD5(text)\n              ^~~\n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjz4d1ayg.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpjz4d1ayg.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:64: error: type\
    \ 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpjz4d1ayg.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjz4d1ayg.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpjz4d1ayg.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:64: error: type\
    \ 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpjz4d1ayg.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let digest\
    \ = md5(text)\n    return digest.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpl1ybikt9.swift:8:18: error: cannot find 'md5' in scope\n    let\
    \ digest = md5(text)\n                 ^~~\n/tmp/tmpl1ybikt9.swift:9:31: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digest.map { String(format: \"%02hhx\", $0) }.joined()\n         \
    \                     ^~~~~~~\n                               repeating      \
    \   count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let cstr\
    \ = text.cString(using: String.Encoding.utf8)\n    let data = NSData(bytes: cstr!,\
    \ length: text.lengthOfBytes(using: String.Encoding.utf8))\n    let result = data.md5()\n\
    \    return String(format: result.map { String(format: \"%02hhx\", $0) }.joined())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpgox62yrf.swift:8:21: error: value of type 'String' has no member\
    \ 'cString'\n    let cstr = text.cString(using: String.Encoding.utf8)\n      \
    \         ~~~~ ^~~~~~~\n/tmp/tmpgox62yrf.swift:8:43: error: type 'String' has\
    \ no member 'Encoding'\n    let cstr = text.cString(using: String.Encoding.utf8)\n\
    \                                   ~~~~~~ ^~~~~~~~\n/tmp/tmpgox62yrf.swift:9:16:\
    \ error: cannot find 'NSData' in scope\n    let data = NSData(bytes: cstr!, length:\
    \ text.lengthOfBytes(using: String.Encoding.utf8))\n               ^~~~~~\n/tmp/tmpgox62yrf.swift:9:50:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let data =\
    \ NSData(bytes: cstr!, length: text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \                                            ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpgox62yrf.swift:9:78:\
    \ error: type 'String' has no member 'Encoding'\n    let data = NSData(bytes:\
    \ cstr!, length: text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                                                            ~~~~~~ ^~~~~~~~\n\
    /tmp/tmpgox62yrf.swift:11:12: error: no exact matches in call to initializer \n\
    \    return String(format: result.map { String(format: \"%02hhx\", $0) }.joined())\n\
    \           ^\n/tmp/tmpgox62yrf.swift:11:12: note: found candidate with type '(Substring.UTF8View)\
    \ -> String?'\n    return String(format: result.map { String(format: \"%02hhx\"\
    , $0) }.joined())\n           ^\n/tmp/tmpgox62yrf.swift:11:12: note: found candidate\
    \ with type '(Substring.UTF16View) -> String?'\n    return String(format: result.map\
    \ { String(format: \"%02hhx\", $0) }.joined())\n           ^\n/tmp/tmpgox62yrf.swift:11:46:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return String(format: result.map { String(format: \"%02hhx\", $0) }.joined())\n\
    \                                             ^~~~~~~\n                      \
    \                        repeating         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjz4d1ayg.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpjz4d1ayg.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:64: error: type\
    \ 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpjz4d1ayg.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = Data(text.utf8)\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp44wsrhlu.swift:8:16: error: cannot find 'Data' in scope\n    let\
    \ data = Data(text.utf8)\n               ^~~~\n/tmp/tmp44wsrhlu.swift:10:53: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp44wsrhlu.swift:11:9: error: cannot\
    \ find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp44wsrhlu.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp44wsrhlu.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = Data(text.utf8)\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp44wsrhlu.swift:8:16: error: cannot find 'Data' in scope\n    let\
    \ data = Data(text.utf8)\n               ^~~~\n/tmp/tmp44wsrhlu.swift:10:53: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp44wsrhlu.swift:11:9: error: cannot\
    \ find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp44wsrhlu.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp44wsrhlu.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<Data>) -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp85b8nq_m.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp85b8nq_m.swift:8:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp85b8nq_m.swift:10:62: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp85b8nq_m.swift:11:9: error:\
    \ cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \        ^~~~~~\n/tmp/tmp85b8nq_m.swift:11:23: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n                 \
    \     ^~~~~~~\n/tmp/tmp85b8nq_m.swift:14:29: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return hash.map\
    \ { String(format: \"%02x\", $0) }.joined()\n                            ^~~~~~~\n\
    \                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmphjinhnc4.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmphjinhnc4.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:9:18:\
    \ error: cannot find 'CC_LONG' in scope\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                 ^~~~~~~\n/tmp/tmphjinhnc4.swift:9:31:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n               \
    \          ~~~~ ^~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:9:59: error: type 'String'\
    \ has no member 'Encoding'\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmphjinhnc4.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmphjinhnc4.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmphjinhnc4.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:9:18:\
    \ error: cannot find 'CC_LONG' in scope\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                 ^~~~~~~\n/tmp/tmphjinhnc4.swift:9:31:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n               \
    \          ~~~~ ^~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:9:59: error: type 'String'\
    \ has no member 'Encoding'\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmphjinhnc4.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let md5 = data.withUnsafeBytes { (bytes: UnsafePointer<Data>)\
    \ -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return md5.map { String(format: \"%02x\", $0) }.joined()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfo8tq3hr.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpfo8tq3hr.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpfo8tq3hr.swift:10:62: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                             ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpfo8tq3hr.swift:11:9: error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes,\
    \ CC_LONG(data.count), &hash)\n        ^~~~~~\n/tmp/tmpfo8tq3hr.swift:11:23: error:\
    \ cannot find 'CC_LONG' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \                      ^~~~~~~\n/tmp/tmpfo8tq3hr.swift:14:28: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  return md5.map { String(format: \"%02x\", $0) }.joined()\n                \
    \           ^~~~~~~\n                            repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmphjinhnc4.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmphjinhnc4.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:9:18:\
    \ error: cannot find 'CC_LONG' in scope\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                 ^~~~~~~\n/tmp/tmphjinhnc4.swift:9:31:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n               \
    \          ~~~~ ^~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:9:59: error: type 'String'\
    \ has no member 'Encoding'\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmphjinhnc4.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = Data(text.utf8)\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp44wsrhlu.swift:8:16: error: cannot find 'Data' in scope\n    let\
    \ data = Data(text.utf8)\n               ^~~~\n/tmp/tmp44wsrhlu.swift:10:53: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp44wsrhlu.swift:11:9: error: cannot\
    \ find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp44wsrhlu.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp44wsrhlu.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmphjinhnc4.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmphjinhnc4.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:9:18:\
    \ error: cannot find 'CC_LONG' in scope\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                 ^~~~~~~\n/tmp/tmphjinhnc4.swift:9:31:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n               \
    \          ~~~~ ^~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:9:59: error: type 'String'\
    \ has no member 'Encoding'\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmphjinhnc4.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjz4d1ayg.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpjz4d1ayg.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:64: error: type\
    \ 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpjz4d1ayg.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<Data>) -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp85b8nq_m.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp85b8nq_m.swift:8:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp85b8nq_m.swift:10:62: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp85b8nq_m.swift:11:9: error:\
    \ cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \        ^~~~~~\n/tmp/tmp85b8nq_m.swift:11:23: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n                 \
    \     ^~~~~~~\n/tmp/tmp85b8nq_m.swift:14:29: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return hash.map\
    \ { String(format: \"%02x\", $0) }.joined()\n                            ^~~~~~~\n\
    \                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjz4d1ayg.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpjz4d1ayg.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:64: error: type\
    \ 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpjz4d1ayg.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    return text.md5()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpp6m3gzu5.swift:8:17: error: value of type 'String' has no member\
    \ 'md5'\n    return text.md5()\n           ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjz4d1ayg.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpjz4d1ayg.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:64: error: type\
    \ 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpjz4d1ayg.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let textData\
    \ = text.data(using: .utf8)!\n    let hash = MD5(textData)\n    return hash.map\
    \ { String(format: \"%02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpesxykhg8.swift:8:25: error: value of type 'String' has no member\
    \ 'data'\n    let textData = text.data(using: .utf8)!\n                   ~~~~\
    \ ^~~~\n/tmp/tmpesxykhg8.swift:8:38: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let textData = text.data(using: .utf8)!\n            \
    \                        ~^~~~\n/tmp/tmpesxykhg8.swift:9:16: error: cannot find\
    \ 'MD5' in scope\n    let hash = MD5(textData)\n               ^~~\n/tmp/tmpesxykhg8.swift:10:29:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let md5 = data.withUnsafeBytes { (bytes: UnsafePointer<Data>)\
    \ -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return md5.map { String(format: \"%02x\", $0) }.joined()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfo8tq3hr.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpfo8tq3hr.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpfo8tq3hr.swift:10:62: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                             ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpfo8tq3hr.swift:11:9: error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes,\
    \ CC_LONG(data.count), &hash)\n        ^~~~~~\n/tmp/tmpfo8tq3hr.swift:11:23: error:\
    \ cannot find 'CC_LONG' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \                      ^~~~~~~\n/tmp/tmpfo8tq3hr.swift:14:28: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  return md5.map { String(format: \"%02x\", $0) }.joined()\n                \
    \           ^~~~~~~\n                            repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let utf8_text\
    \ = text.cString(using: String.Encoding.utf8)\n    let utf8_text_len = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digest_len = Int(CC_MD5_DIGEST_LENGTH)\n   \
    \ let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digest_len)\n\
    \    CC_MD5(utf8_text!, utf8_text_len, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digest_len {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpmvfhbpqu.swift:8:26: error: value of type 'String' has no member\
    \ 'cString'\n    let utf8_text = text.cString(using: String.Encoding.utf8)\n \
    \                   ~~~~ ^~~~~~~\n/tmp/tmpmvfhbpqu.swift:8:48: error: type 'String'\
    \ has no member 'Encoding'\n    let utf8_text = text.cString(using: String.Encoding.utf8)\n\
    \                                        ~~~~~~ ^~~~~~~~\n/tmp/tmpmvfhbpqu.swift:9:43:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let utf8_text_len\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpmvfhbpqu.swift:9:71: error:\
    \ type 'String' has no member 'Encoding'\n    let utf8_text_len = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \            ~~~~~~ ^~~~~~~~\n/tmp/tmpmvfhbpqu.swift:10:26: error: cannot find\
    \ 'CC_MD5_DIGEST_LENGTH' in scope\n    let digest_len = Int(CC_MD5_DIGEST_LENGTH)\n\
    \                         ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmvfhbpqu.swift:12:5: error:\
    \ cannot find 'CC_MD5' in scope\n    CC_MD5(utf8_text!, utf8_text_len, result)\n\
    \    ^~~~~~\n/tmp/tmpmvfhbpqu.swift:13:16: error: cannot find 'NSMutableString'\
    \ in scope\n    let hash = NSMutableString()\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpmvfhbpqu.swift:18:18: error: extraneous argument label 'format:' in call\n\
    \    return String(format: hash as String)\n                 ^~~~~~~~~\n     \
    \             \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<Data>) -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp85b8nq_m.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp85b8nq_m.swift:8:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp85b8nq_m.swift:10:62: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp85b8nq_m.swift:11:9: error:\
    \ cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \        ^~~~~~\n/tmp/tmp85b8nq_m.swift:11:23: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n                 \
    \     ^~~~~~~\n/tmp/tmp85b8nq_m.swift:14:29: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return hash.map\
    \ { String(format: \"%02x\", $0) }.joined()\n                            ^~~~~~~\n\
    \                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<Data>) -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp85b8nq_m.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp85b8nq_m.swift:8:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp85b8nq_m.swift:10:62: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp85b8nq_m.swift:11:9: error:\
    \ cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \        ^~~~~~\n/tmp/tmp85b8nq_m.swift:11:23: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n                 \
    \     ^~~~~~~\n/tmp/tmp85b8nq_m.swift:14:29: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return hash.map\
    \ { String(format: \"%02x\", $0) }.joined()\n                            ^~~~~~~\n\
    \                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let md5\
    \ = MD5(text)\n    return md5.calculate()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmprkkhljnb.swift:8:15: error: cannot find 'MD5' in scope\n    let\
    \ md5 = MD5(text)\n              ^~~\n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmphjinhnc4.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmphjinhnc4.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:9:18:\
    \ error: cannot find 'CC_LONG' in scope\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                 ^~~~~~~\n/tmp/tmphjinhnc4.swift:9:31:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n               \
    \          ~~~~ ^~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:9:59: error: type 'String'\
    \ has no member 'Encoding'\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmphjinhnc4.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmphjinhnc4.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmphjinhnc4.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:9:18:\
    \ error: cannot find 'CC_LONG' in scope\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                 ^~~~~~~\n/tmp/tmphjinhnc4.swift:9:31:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n               \
    \          ~~~~ ^~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:9:59: error: type 'String'\
    \ has no member 'Encoding'\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmphjinhnc4.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = Data(text.utf8)\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp44wsrhlu.swift:8:16: error: cannot find 'Data' in scope\n    let\
    \ data = Data(text.utf8)\n               ^~~~\n/tmp/tmp44wsrhlu.swift:10:53: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp44wsrhlu.swift:11:9: error: cannot\
    \ find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp44wsrhlu.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp44wsrhlu.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let md5 = data.withUnsafeBytes { (bytes: UnsafePointer<Data>)\
    \ -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return md5.map { String(format: \"%02x\", $0) }.joined()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfo8tq3hr.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpfo8tq3hr.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpfo8tq3hr.swift:10:62: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                             ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpfo8tq3hr.swift:11:9: error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes,\
    \ CC_LONG(data.count), &hash)\n        ^~~~~~\n/tmp/tmpfo8tq3hr.swift:11:23: error:\
    \ cannot find 'CC_LONG' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \                      ^~~~~~~\n/tmp/tmpfo8tq3hr.swift:14:28: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  return md5.map { String(format: \"%02x\", $0) }.joined()\n                \
    \           ^~~~~~~\n                            repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjz4d1ayg.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpjz4d1ayg.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:64: error: type\
    \ 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpjz4d1ayg.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmphjinhnc4.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmphjinhnc4.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:9:18:\
    \ error: cannot find 'CC_LONG' in scope\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                 ^~~~~~~\n/tmp/tmphjinhnc4.swift:9:31:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n               \
    \          ~~~~ ^~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:9:59: error: type 'String'\
    \ has no member 'Encoding'\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmphjinhnc4.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmphjinhnc4.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmphjinhnc4.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:9:18:\
    \ error: cannot find 'CC_LONG' in scope\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                 ^~~~~~~\n/tmp/tmphjinhnc4.swift:9:31:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n               \
    \          ~~~~ ^~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:9:59: error: type 'String'\
    \ has no member 'Encoding'\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmphjinhnc4.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmphjinhnc4.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmphjinhnc4.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:9:18:\
    \ error: cannot find 'CC_LONG' in scope\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                 ^~~~~~~\n/tmp/tmphjinhnc4.swift:9:31:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n               \
    \          ~~~~ ^~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:9:59: error: type 'String'\
    \ has no member 'Encoding'\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmphjinhnc4.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let md5Data\
    \ = MD5(text)\n    let md5Hex =  md5Data.map { String(format: \"%02hhx\", $0)\
    \ }.joined()\n    return md5Hex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpt6iimnm6.swift:8:19: error: cannot find 'MD5' in scope\n    let\
    \ md5Data = MD5(text)\n                  ^~~\n/tmp/tmpt6iimnm6.swift:9:39: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    let md5Hex =  md5Data.map { String(format: \"%02hhx\", $0) }.joined()\n \
    \                                     ^~~~~~~\n                              \
    \         repeating         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmphjinhnc4.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmphjinhnc4.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:9:18:\
    \ error: cannot find 'CC_LONG' in scope\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                 ^~~~~~~\n/tmp/tmphjinhnc4.swift:9:31:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n               \
    \          ~~~~ ^~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:9:59: error: type 'String'\
    \ has no member 'Encoding'\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmphjinhnc4.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let length\
    \ = Int(CC_MD5_DIGEST_LENGTH)\n    var digest = [UInt8](repeating: 0, count: length)\n\
    \    if let d = text.data(using: String.Encoding.utf8) {\n        _ = d.withUnsafeBytes\
    \ { (body: UnsafePointer<UInt8>) in\n            CC_MD5(body, CC_LONG(d.count),\
    \ &digest)\n        }\n    }\n    return (0..<length).reduce(\"\") {\n       \
    \ $0 + String(format: \"%02x\", digest[$1])\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjk6m3ckl.swift:8:22: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n                     ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpjk6m3ckl.swift:10:21: error: value of type 'String' has no member 'data'\n\
    \    if let d = text.data(using: String.Encoding.utf8) {\n               ~~~~\
    \ ^~~~\n/tmp/tmpjk6m3ckl.swift:10:40: error: type 'String' has no member 'Encoding'\n\
    \    if let d = text.data(using: String.Encoding.utf8) {\n                   \
    \             ~~~~~~ ^~~~~~~~\n/tmp/tmpjk6m3ckl.swift:12:13: error: cannot find\
    \ 'CC_MD5' in scope\n            CC_MD5(body, CC_LONG(d.count), &digest)\n   \
    \         ^~~~~~\n/tmp/tmpjk6m3ckl.swift:12:26: error: cannot find 'CC_LONG' in\
    \ scope\n            CC_MD5(body, CC_LONG(d.count), &digest)\n               \
    \          ^~~~~~~\n/tmp/tmpjk6m3ckl.swift:16:20: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n        $0 + String(format:\
    \ \"%02x\", digest[$1])\n                   ^~~~~~~\n                    repeating\
    \       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<Data>) -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp85b8nq_m.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp85b8nq_m.swift:8:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp85b8nq_m.swift:10:62: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp85b8nq_m.swift:11:9: error:\
    \ cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \        ^~~~~~\n/tmp/tmp85b8nq_m.swift:11:23: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n                 \
    \     ^~~~~~~\n/tmp/tmp85b8nq_m.swift:14:29: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return hash.map\
    \ { String(format: \"%02x\", $0) }.joined()\n                            ^~~~~~~\n\
    \                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjz4d1ayg.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpjz4d1ayg.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:64: error: type\
    \ 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpjz4d1ayg.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjz4d1ayg.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpjz4d1ayg.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:64: error: type\
    \ 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpjz4d1ayg.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<Data>) -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp85b8nq_m.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp85b8nq_m.swift:8:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp85b8nq_m.swift:10:62: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp85b8nq_m.swift:11:9: error:\
    \ cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \        ^~~~~~\n/tmp/tmp85b8nq_m.swift:11:23: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n                 \
    \     ^~~~~~~\n/tmp/tmp85b8nq_m.swift:14:29: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return hash.map\
    \ { String(format: \"%02x\", $0) }.joined()\n                            ^~~~~~~\n\
    \                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let text_data\
    \ = text.data(using: .utf8)!\n    let hash = text_data.withUnsafeBytes { (bytes:\
    \ UnsafePointer<Data>) -> [UInt8] in\n        var hash = [UInt8](repeating: 0,\
    \ count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(text_data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp2erud95t.swift:8:26: error: value of type 'String' has no member\
    \ 'data'\n    let text_data = text.data(using: .utf8)!\n                    ~~~~\
    \ ^~~~\n/tmp/tmp2erud95t.swift:8:39: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let text_data = text.data(using: .utf8)!\n           \
    \                          ~^~~~\n/tmp/tmp2erud95t.swift:10:53: error: cannot\
    \ find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2erud95t.swift:11:9: error: cannot\
    \ find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(text_data.count), &hash)\n\
    \        ^~~~~~\n/tmp/tmp2erud95t.swift:11:23: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(bytes, CC_LONG(text_data.count), &hash)\n            \
    \          ^~~~~~~\n/tmp/tmp2erud95t.swift:14:29: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return hash.map\
    \ { String(format: \"%02x\", $0) }.joined()\n                            ^~~~~~~\n\
    \                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let text_data\
    \ = text.data(using: .utf8)!\n    let md5_data = MD5(text_data)\n    let md5_string\
    \ = md5_data.map { String(format: \"%02hhx\", $0) }.joined()\n    return md5_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpzyu92pwq.swift:8:26: error: value of type 'String' has no member\
    \ 'data'\n    let text_data = text.data(using: .utf8)!\n                    ~~~~\
    \ ^~~~\n/tmp/tmpzyu92pwq.swift:8:39: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let text_data = text.data(using: .utf8)!\n           \
    \                          ~^~~~\n/tmp/tmpzyu92pwq.swift:9:20: error: cannot find\
    \ 'MD5' in scope\n    let md5_data = MD5(text_data)\n                   ^~~\n\
    /tmp/tmpzyu92pwq.swift:10:43: error: incorrect argument labels in call (have 'format:_:',\
    \ expected 'repeating:count:')\n    let md5_string = md5_data.map { String(format:\
    \ \"%02hhx\", $0) }.joined()\n                                          ^~~~~~~\n\
    \                                           repeating         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjz4d1ayg.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpjz4d1ayg.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:64: error: type\
    \ 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpjz4d1ayg.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<Data>) -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp85b8nq_m.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp85b8nq_m.swift:8:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp85b8nq_m.swift:10:62: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp85b8nq_m.swift:11:9: error:\
    \ cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \        ^~~~~~\n/tmp/tmp85b8nq_m.swift:11:23: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n                 \
    \     ^~~~~~~\n/tmp/tmp85b8nq_m.swift:14:29: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return hash.map\
    \ { String(format: \"%02x\", $0) }.joined()\n                            ^~~~~~~\n\
    \                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<Data>) -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp85b8nq_m.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp85b8nq_m.swift:8:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp85b8nq_m.swift:10:62: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp85b8nq_m.swift:11:9: error:\
    \ cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \        ^~~~~~\n/tmp/tmp85b8nq_m.swift:11:23: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n                 \
    \     ^~~~~~~\n/tmp/tmp85b8nq_m.swift:14:29: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return hash.map\
    \ { String(format: \"%02x\", $0) }.joined()\n                            ^~~~~~~\n\
    \                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let md5\
    \ = MD5(text)\n    return md5.hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpf4nrsnsc.swift:8:15: error: cannot find 'MD5' in scope\n    let\
    \ md5 = MD5(text)\n              ^~~\n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    data.withUnsafeBytes {\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n    }\n    let hexBytes = digest.map { String(format: \"%02hhx\",\
    \ $0) }\n    return hexBytes.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpuoj3_xti.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpuoj3_xti.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpuoj3_xti.swift:9:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpuoj3_xti.swift:11:13:\
    \ error: cannot find 'CC_MD5' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n            ^~~~~~\n/tmp/tmpuoj3_xti.swift:11:36: error: cannot find\
    \ 'CC_LONG' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n                                   ^~~~~~~\n/tmp/tmpuoj3_xti.swift:13:39:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    let hexBytes = digest.map { String(format: \"%02hhx\", $0) }\n          \
    \                            ^~~~~~~\n                                       repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let length\
    \ = Int(CC_MD5_DIGEST_LENGTH)\n    var digest = [UInt8](repeating: 0, count: length)\n\
    \    if let d = text.data(using: String.Encoding.utf8) {\n        _ = d.withUnsafeBytes\
    \ { (body: UnsafePointer<UInt8>) in\n            CC_MD5(body, CC_LONG(d.count),\
    \ &digest)\n        }\n    }\n    return (0..<length).reduce(\"\") {\n       \
    \ $0 + String(format: \"%02x\", digest[$1])\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjk6m3ckl.swift:8:22: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n                     ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpjk6m3ckl.swift:10:21: error: value of type 'String' has no member 'data'\n\
    \    if let d = text.data(using: String.Encoding.utf8) {\n               ~~~~\
    \ ^~~~\n/tmp/tmpjk6m3ckl.swift:10:40: error: type 'String' has no member 'Encoding'\n\
    \    if let d = text.data(using: String.Encoding.utf8) {\n                   \
    \             ~~~~~~ ^~~~~~~~\n/tmp/tmpjk6m3ckl.swift:12:13: error: cannot find\
    \ 'CC_MD5' in scope\n            CC_MD5(body, CC_LONG(d.count), &digest)\n   \
    \         ^~~~~~\n/tmp/tmpjk6m3ckl.swift:12:26: error: cannot find 'CC_LONG' in\
    \ scope\n            CC_MD5(body, CC_LONG(d.count), &digest)\n               \
    \          ^~~~~~~\n/tmp/tmpjk6m3ckl.swift:16:20: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n        $0 + String(format:\
    \ \"%02x\", digest[$1])\n                   ^~~~~~~\n                    repeating\
    \       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<Data>) -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp85b8nq_m.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp85b8nq_m.swift:8:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp85b8nq_m.swift:10:62: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp85b8nq_m.swift:11:9: error:\
    \ cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \        ^~~~~~\n/tmp/tmp85b8nq_m.swift:11:23: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n                 \
    \     ^~~~~~~\n/tmp/tmp85b8nq_m.swift:14:29: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return hash.map\
    \ { String(format: \"%02x\", $0) }.joined()\n                            ^~~~~~~\n\
    \                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let md5 = data.withUnsafeBytes { (bytes: UnsafePointer<Data>)\
    \ -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return md5.map { String(format: \"%02x\", $0) }.joined()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfo8tq3hr.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpfo8tq3hr.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpfo8tq3hr.swift:10:62: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                             ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpfo8tq3hr.swift:11:9: error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes,\
    \ CC_LONG(data.count), &hash)\n        ^~~~~~\n/tmp/tmpfo8tq3hr.swift:11:23: error:\
    \ cannot find 'CC_LONG' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \                      ^~~~~~~\n/tmp/tmpfo8tq3hr.swift:14:28: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  return md5.map { String(format: \"%02x\", $0) }.joined()\n                \
    \           ^~~~~~~\n                            repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmphjinhnc4.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmphjinhnc4.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:9:18:\
    \ error: cannot find 'CC_LONG' in scope\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                 ^~~~~~~\n/tmp/tmphjinhnc4.swift:9:31:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n               \
    \          ~~~~ ^~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:9:59: error: type 'String'\
    \ has no member 'Encoding'\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmphjinhnc4.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmphjinhnc4.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmphjinhnc4.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:9:18:\
    \ error: cannot find 'CC_LONG' in scope\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                 ^~~~~~~\n/tmp/tmphjinhnc4.swift:9:31:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n               \
    \          ~~~~ ^~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:9:59: error: type 'String'\
    \ has no member 'Encoding'\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmphjinhnc4.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmphjinhnc4.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmphjinhnc4.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:9:18:\
    \ error: cannot find 'CC_LONG' in scope\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                 ^~~~~~~\n/tmp/tmphjinhnc4.swift:9:31:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n               \
    \          ~~~~ ^~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:9:59: error: type 'String'\
    \ has no member 'Encoding'\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmphjinhnc4.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo9vfjvin.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpo9vfjvin.swift:8:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpo9vfjvin.swift:9:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpo9vfjvin.swift:9:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo9vfjvin.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpo9vfjvin.swift:13:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpo9vfjvin.swift:16:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<Data>) -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp85b8nq_m.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp85b8nq_m.swift:8:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp85b8nq_m.swift:10:62: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp85b8nq_m.swift:11:9: error:\
    \ cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \        ^~~~~~\n/tmp/tmp85b8nq_m.swift:11:23: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n                 \
    \     ^~~~~~~\n/tmp/tmp85b8nq_m.swift:14:29: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return hash.map\
    \ { String(format: \"%02x\", $0) }.joined()\n                            ^~~~~~~\n\
    \                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmphjinhnc4.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmphjinhnc4.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:9:18:\
    \ error: cannot find 'CC_LONG' in scope\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                 ^~~~~~~\n/tmp/tmphjinhnc4.swift:9:31:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n               \
    \          ~~~~ ^~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:9:59: error: type 'String'\
    \ has no member 'Encoding'\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmphjinhnc4.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmphjinhnc4.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmphjinhnc4.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<Data>) -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp85b8nq_m.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp85b8nq_m.swift:8:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp85b8nq_m.swift:10:62: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp85b8nq_m.swift:11:9: error:\
    \ cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \        ^~~~~~\n/tmp/tmp85b8nq_m.swift:11:23: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n                 \
    \     ^~~~~~~\n/tmp/tmp85b8nq_m.swift:14:29: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return hash.map\
    \ { String(format: \"%02x\", $0) }.joined()\n                            ^~~~~~~\n\
    \                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let str\
    \ = text.cString(using: String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjz4d1ayg.swift:8:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpjz4d1ayg.swift:8:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:9:64: error: type\
    \ 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpjz4d1ayg.swift:10:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpjz4d1ayg.swift:13:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpjz4d1ayg.swift:18:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let md5Data\
    \ = MD5(text)\n    let md5Hex =  md5Data.map { String(format: \"%02hhx\", $0)\
    \ }.joined()\n    return md5Hex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpt6iimnm6.swift:8:19: error: cannot find 'MD5' in scope\n    let\
    \ md5Data = MD5(text)\n                  ^~~\n/tmp/tmpt6iimnm6.swift:9:39: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    let md5Hex =  md5Data.map { String(format: \"%02hhx\", $0) }.joined()\n \
    \                                     ^~~~~~~\n                              \
    \         repeating         count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ey9lniy.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp2ey9lniy.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp2ey9lniy.swift:10:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2ey9lniy.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp2ey9lniy.swift:11:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmp2ey9lniy.swift:14:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\nfunc string_to_md5(text: String)\
    \ -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let md5 = data.withUnsafeBytes { (bytes: UnsafePointer<Data>)\
    \ -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return md5.map { String(format: \"%02x\", $0) }.joined()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfo8tq3hr.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpfo8tq3hr.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpfo8tq3hr.swift:10:62: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                             ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpfo8tq3hr.swift:11:9: error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes,\
    \ CC_LONG(data.count), &hash)\n        ^~~~~~\n/tmp/tmpfo8tq3hr.swift:11:23: error:\
    \ cannot find 'CC_LONG' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \                      ^~~~~~~\n/tmp/tmpfo8tq3hr.swift:14:28: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  return md5.map { String(format: \"%02x\", $0) }.joined()\n                \
    \           ^~~~~~~\n                            repeating       count: \n"
  stdout: ''
  timestamp: 1660013532
